<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chfychin🥝</title>
  
  
  <link href="http://chfychin.cn/atom.xml" rel="self"/>
  
  <link href="http://chfychin.cn/"/>
  <updated>2024-10-05T14:57:02.000Z</updated>
  <id>http://chfychin.cn/</id>
  
  <author>
    <name>chfychin🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 CCPC 郑州邀请赛暨河南省赛 题解</title>
    <link href="http://chfychin.cn/posts/9f4b8961.html"/>
    <id>http://chfychin.cn/posts/9f4b8961.html</id>
    <published>2024-10-04T12:32:02.000Z</published>
    <updated>2024-10-05T14:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Once-In-My-Life-（构造）">A - Once In My Life （构造）</h1><h2 id="分析">分析</h2><p>根据题目要求需要两个d，并且要保证<code>123456789</code>都存在，那么就可以尝试先构造出一个数保证存在<code>123456789</code>。<br>尝试以下构造方式：设n的长度为len，则可以构造出 $k<em>n=(\frac{123456789</em>{10}^{len+1}}{n}+1)<em>n$, 可以发现 $k</em>n$ 的前缀一定是<code>1234567890X</code>，此时只要对$k$每次+1，至多一百次一定能出现想要的$d$。</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">123456789LL</span>;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n, d;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">123456789LL</span> * std::<span class="built_in">pow</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">2</span> + (<span class="type">int</span>)std::<span class="built_in">log10</span>&lt;<span class="type">int</span>&gt;(n)) / n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> w) &#123;</span><br><span class="line">            std::vector&lt;<span class="type">int</span>&gt; <span class="built_in">c</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="type">int</span> num = w * n;</span><br><span class="line">            <span class="keyword">while</span> (num) c[num % <span class="number">10</span>] += <span class="number">1</span>, num /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) <span class="keyword">if</span> (c[i] &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c[d] &gt;= <span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">check</span>(k)) k += <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; k &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-扫雷-1">B - 扫雷 1</h1><h2 id="分析-2">分析</h2><p>队友写的，并没有看题，就贴一下队友代码和思路：<br>贪心。要使得买的探测仪最多，就要尽可能的买价格较便宜的，相同便宜的要买后面出现的，因为这样手中的钱会更多。所以我们只需要把价格作为第一关键词升序排序，出现序号作为第二关键词降序排序，然后一个一个尽可能的多买，直到已经到最后一个时退出就行</p><h2 id="代码实现-2">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;tuple&lt;ll , ll&gt;&gt; tl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        tl.<span class="built_in">emplace_back</span>(x , -i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(tl.<span class="built_in">begin</span>() , tl.<span class="built_in">end</span>());</span><br><span class="line">    ll ans = <span class="number">0</span> , cur = <span class="number">0</span> , pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [a , b] : tl) &#123;</span><br><span class="line">        b = -b;</span><br><span class="line">        <span class="keyword">if</span> (b &gt;= a &amp;&amp; b &gt; pre) &#123;</span><br><span class="line">            ans += (b - cur) / a;</span><br><span class="line">            cur += (b - cur) / a * a;</span><br><span class="line">            pre = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-中二病也要打比赛-（树状数组-dp）">C - 中二病也要打比赛 （树状数组+dp）</h1><h2 id="分析-3">分析</h2><p>依旧队友神力</p><h2 id="代码实现-3">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;T&gt; d;</span><br><span class="line">    <span class="built_in">Fenwick</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">d</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, T v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n);</span><br><span class="line">        x += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">            d[x - <span class="number">1</span>] = <span class="built_in">max</span>(d[x - <span class="number">1</span>], v);</span><br><span class="line">            x += x &amp; -x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x &lt;= n);</span><br><span class="line">        T v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            v = <span class="built_in">max</span>(v, d[x - <span class="number">1</span>]);</span><br><span class="line">            x -= x &amp; -x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(l &lt;= r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">min_right</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e = __lg(n); ~e; --e) &#123;</span><br><span class="line">            <span class="type">int</span> u = (<span class="number">1</span> &lt;&lt; e);</span><br><span class="line">            <span class="keyword">if</span> (r + u &lt;= n &amp;&amp; d[r + u - <span class="number">1</span>] &lt; k) &#123;</span><br><span class="line">                k -= d[(r += u) - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    --a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(n, n)</span></span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    l[a[i]] = <span class="built_in">min</span>(l[a[i]], i);</span><br><span class="line">    r[a[i]] = <span class="built_in">max</span>(r[a[i]], i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(i == r[a[i]]);</span><br><span class="line">    <span class="type">int</span> j = l[a[i]], k = i;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= j) &#123;</span><br><span class="line">      r[a[k]] = i;</span><br><span class="line">      j = <span class="built_in">min</span>(j, l[a[k]]);</span><br><span class="line">      --k;</span><br><span class="line">    &#125;</span><br><span class="line">    i = k;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Fenwick&lt;<span class="type">int</span>&gt; <span class="title">fen</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(i == l[a[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= r[a[i]]; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == l[a[j]]) &#123;</span><br><span class="line">        dp[l[a[j]]] = fen.<span class="built_in">get</span>(a[j]) + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= r[a[i]]; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == l[a[j]]) &#123;</span><br><span class="line">        fen.<span class="built_in">modify</span>(a[j], dp[l[a[j]]]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = r[a[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()).<span class="built_in">size</span>() - *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-距离之比（推公式-贪心）">D - 距离之比（推公式+贪心）</h1><h2 id="分析-4">分析</h2><p>设<br>,对原公式进行平方并化简可得：</p><p>。想让这个式子尽可能的大，也就是说让</p><p>尽量取小。设</p><p>, 此时式子变化为</p><p>, 可以发现其在<br>为<br>和<br>时取到最优。因此只要对<br>和<br>分别进行排序，此时两两相邻为最优，两者取个最大值即可。</p><h2 id="代码实现-4">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : p) &#123;</span><br><span class="line">            std::cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), </span><br><span class="line">            [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.first + a.second &lt; b.first + b.second;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> d1 = p[i - <span class="number">1</span>].first - p[i].first, d2 = p[i - <span class="number">1</span>].second - p[i].second;</span><br><span class="line">            ans = std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(ans, ((<span class="built_in">abs</span>(d1) + <span class="built_in">abs</span>(d2)) * <span class="number">1.</span> / <span class="built_in">sqrt</span>(d1 * d1 + d2 * d2)));</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), </span><br><span class="line">            [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.first - a.second &lt; b.first - b.second;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> d1 = p[i - <span class="number">1</span>].first - p[i].first, d2 = p[i - <span class="number">1</span>].second - p[i].second;</span><br><span class="line">            ans = std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(ans, ((<span class="built_in">abs</span>(d1) + <span class="built_in">abs</span>(d2)) * <span class="number">1.</span> / <span class="built_in">sqrt</span>(d1 * d1 + d2 * d2)));</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-保卫城邦">E - 保卫城邦</h1><h2 id="分析-5">分析</h2><p>太菜了，不会写</p><h1 id="F-优秀字符串-模拟">F - 优秀字符串 (模拟)</h1><h2 id="分析-6">分析</h2><p>按照题意模拟即可</p><h2 id="代码实现-5">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>(s) == <span class="number">5</span> &amp;&amp; s[<span class="number">2</span>] == s[<span class="number">4</span>] &amp;&amp; std::set&lt;<span class="type">char</span>&gt;&#123;s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]&#125;.<span class="built_in">size</span>() == <span class="number">4</span>) &#123;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-扫雷-2-（构造）">G - 扫雷 2 （构造）</h1><h2 id="分析-7">分析</h2><p>原来扫雷2的2是这个2щ(ಠ益ಠщ)<br>想了有两种构造方法：</p><p>第一种方法：<br>对于<br>时，我们可以直接按照如下方法构造</p><p>01100        01100<br>11000        11000<br>10000        10000<br>00000        00000<br>00000        00001<br>此时对于m为奇数直接在左上角构造两个斜杠，为偶数时多出来的可以直接放在右下角。（注意特判<br>，<br>的情况）<br>此时对于<br>的情况我们考虑缩小矩阵，可将雷埋在最下面一行和最右边一行，此时可以得到<br>的矩阵，例如<br>时可以构造如下矩阵：<br>011011<br>110011<br>100011<br>000011<br>111111<br>111111<br>此时问题回到<br>的情况，注意构造过程中的细节即可。</p><p>第二种方法（感觉可行，但是并没有能写出来）：<br>构造一个匚字型，形如：</p><p>11100        11110<br>01000        10100<br>11100        10100<br>01000        10100<br>00000        11110<br>按照以上样子构造即可，构造完后多出来的雷往中间空出来的地方埋就行了，最后注意特判m较小的情况。（其实感觉可以方法一方法二结合写起来更简单一些）</p><h2 id="代码实现（方法1）">代码实现（方法1）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">auto</span> bury = [&amp;](std::vector&lt;std::string&gt;&amp; adj, <span class="type">int</span> num, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> len = (num + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            adj[i][len - i - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            adj[i][len - i - <span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        adj[k][k] += num % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="function">std::vector&lt;std::string&gt; <span class="title">ans</span><span class="params">(n, std::string(n, <span class="string">&#x27;0&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= <span class="number">2</span> * n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">5</span> &amp;&amp; m == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                        ans[j][n - i - <span class="number">1</span>]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="built_in">bury</span>(ans, m, n - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> now = n;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= <span class="number">2</span> * now + <span class="number">1</span> &amp;&amp; now) &#123;</span><br><span class="line">                m -= <span class="number">2</span> * now - <span class="number">1</span>;</span><br><span class="line">                now--;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; now; ++i) &#123;</span><br><span class="line">                    ans[i][now]++, ans[now][i]++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[now][now]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m &gt;= <span class="number">2</span> &amp;&amp; m &lt; <span class="number">2</span> * now - <span class="number">1</span>) &#123;</span><br><span class="line">                ans[<span class="number">0</span>][now - <span class="number">1</span>]++, ans[now - <span class="number">1</span>][<span class="number">0</span>]++;</span><br><span class="line">                m -= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="number">5</span> &amp;&amp; m == <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; now; ++i) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                            ans[j][now - i - <span class="number">1</span>]++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">3</span> &amp;&amp; m == <span class="number">1</span>) &#123;</span><br><span class="line">                    ans[now - <span class="number">1</span>][now - <span class="number">1</span>]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">4</span> &amp;&amp; m == <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="built_in">bury</span>(ans, m, now - <span class="number">1</span>);</span><br><span class="line">                    ans[<span class="number">0</span>][<span class="number">0</span>]++, ans[now - <span class="number">1</span>][now - <span class="number">1</span>]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((now == <span class="number">4</span> &amp;&amp; (m == <span class="number">3</span> || m == <span class="number">4</span>)) || (now == <span class="number">3</span> &amp;&amp; m == <span class="number">2</span>) || (now == <span class="number">5</span> &amp;&amp; m == <span class="number">5</span>)) &#123;</span><br><span class="line">                        ans[<span class="number">0</span>][now - <span class="number">1</span>]--, ans[now - <span class="number">1</span>][<span class="number">0</span>]--;</span><br><span class="line">                        <span class="keyword">if</span> (now == <span class="number">4</span> &amp;&amp; m == <span class="number">4</span>) &#123;</span><br><span class="line">                            ans[now - <span class="number">1</span>][now - <span class="number">1</span>]--;</span><br><span class="line">                            ans[<span class="number">0</span>][<span class="number">0</span>]++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        m += <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (now &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (now - (m + <span class="number">1</span>) / <span class="number">2</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                            ans[now - <span class="number">2</span>][now - <span class="number">1</span>]++, ans[now - <span class="number">1</span>][now - <span class="number">2</span>]++;</span><br><span class="line">                            m -= <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ((m &amp; <span class="number">1</span>) &amp;&amp; !(now == <span class="number">5</span> &amp;&amp; m == <span class="number">9</span>)) &#123;</span><br><span class="line">                            m += <span class="number">1</span>;</span><br><span class="line">                            ans[n - <span class="number">1</span>][n - <span class="number">1</span>]--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (m) &#123;</span><br><span class="line">                        <span class="built_in">bury</span>(ans, m, now - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">3</span> || now == <span class="number">2</span>) &#123;</span><br><span class="line">                ans[<span class="number">0</span>][now - <span class="number">1</span>]--, ans[now - <span class="number">1</span>][<span class="number">0</span>]--;</span><br><span class="line">                ans[<span class="number">1</span>][<span class="number">1</span>]++, ans[<span class="number">0</span> + <span class="number">2</span> * (now == <span class="number">3</span>)][<span class="number">0</span> + <span class="number">2</span> * (now == <span class="number">3</span>)]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-随机栈">H - 随机栈</h1><h2 id="分析-8">分析</h2><p>队友写的，题也没有看，贴一下队友代码和思路：<br>这题实际上是求这个随机栈的出栈序列是非降序的概率，然后求逆元就行。那么我们只需要求出这个概率的分子，分母，最后通过费马小定理用快速幂求出逆元就行</p><p>求分子分母的过程就是利用古典概型分别求出总共的情况数（即分母），非降序的情况数（即分子）。<br>求分母的过程就是每次入栈 -1 时要乘上当前栈的大小，就能算出总共的情况数；<br>求分子的过程就是每次入栈 -1 时要乘上当前栈顶元素的个数，表示这些元素都能达到出栈序列非降序。<br>特别的当无法达成出栈序列是非降序时，概率为0，将分子置0就行</p><h2 id="代码实现-6">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>; </span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a , ll b)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (ll)res * a % P;</span><br><span class="line">        a = (ll)a * a % P; </span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    ll n , pren = <span class="number">0</span> , fenzi = <span class="number">1</span> , fenmu = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    n *= <span class="number">2</span>;</span><br><span class="line">    priority_queue &lt;ll, vector&lt;ll&gt;, greater&lt;ll&gt;&gt; ql;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n<span class="number">+2</span>)</span></span>;</span><br><span class="line">    map&lt;ll , ll&gt; mp; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            ll len = (ll)ql.<span class="built_in">size</span>();</span><br><span class="line">            fenmu = fenmu % mod * len % mod;</span><br><span class="line">            fenzi = fenzi % mod * mp[ql.<span class="built_in">top</span>()] % mod;</span><br><span class="line">            pren = <span class="built_in">max</span>(ql.<span class="built_in">top</span>() , pren);</span><br><span class="line">            mp[ql.<span class="built_in">top</span>()]--;</span><br><span class="line">            ql.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">            ql.<span class="built_in">push</span>(a[i]);</span><br><span class="line">            mp[a[i]] ++;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; pren) &#123;</span><br><span class="line">                fenzi = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ll ans = fenzi * <span class="built_in">ksm</span>(fenmu , mod - <span class="number">2</span>) % mod;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-378QAQ-和字符串-（枚举-hash-二分）">I - 378QAQ 和字符串 （枚举+hash+二分）</h1><h2 id="分析-9">分析</h2><p>枚举p，每次从p到n开始查找，每次跳过<br>和<br>的lcp，以i % p为起点,统计一下以此起点时需要修改的数量，并且标记一下i % p已经被修改过了，最后判断一下以p为循环节需要修改的数量是否小于k即可。（很极限的创过去了，队友还在想着如何用卷积卷过Test4 “v(〓￣(∵エ∵)￣〓)v”）</p><h2 id="代码实现-7">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ULL = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;)[&amp;] &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">131</span>;</span><br><span class="line">        <span class="function">std::vector&lt;ULL&gt; <span class="title">h</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            h[i + <span class="number">1</span>] = h[i] * P + s[i];</span><br><span class="line">            p[i + <span class="number">1</span>] = p[i] * P; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) &#123; </span><br><span class="line">            <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> lcp = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n - b;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + mid) == <span class="built_in">get</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + mid)) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = n / <span class="number">4</span> + <span class="number">1</span>; p &lt;= n / <span class="number">2</span>; ++p) &#123;</span><br><span class="line">            <span class="type">int</span> cost = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; n &amp;&amp; cost &lt;= k; ++i) &#123;</span><br><span class="line">                i += <span class="built_in">lcp</span>(i - p, i);</span><br><span class="line">                <span class="keyword">if</span> (i == n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> x = i % p;</span><br><span class="line">                <span class="keyword">if</span> (vis[x] != p) &#123;</span><br><span class="line">                    vis[x] = p;</span><br><span class="line">                    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">                    <span class="type">int</span> res = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = x; j &lt; n; j += p) &#123;</span><br><span class="line">                        tot += <span class="number">1</span>;</span><br><span class="line">                        res = std::<span class="built_in">max</span>(res, ++cnt[s[j] - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cost += tot - res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cost &lt;= k) &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-排列与合数-（全排列）">J - 排列与合数 （全排列）</h1><h2 id="分析-10">分析</h2><p>长度只有5，全排列暴力枚举即可，最后代码队友写的</p><h2 id="代码实现-8">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">//线性筛</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>; </span><br><span class="line"><span class="type">int</span> pnl[maxn + <span class="number">10</span>], cnt;<span class="comment">//pnl</span></span><br><span class="line"><span class="type">int</span> st[maxn + <span class="number">10</span>];<span class="comment">//索引为质数值就是0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_primes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    st[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    st[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            pnl[cnt++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; pnl[j] &lt;= maxn/i; ++j)&#123;</span><br><span class="line">            st[pnl[j]*i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%pnl[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">init_primes</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; tt;</span><br><span class="line">    <span class="keyword">while</span> (tt--) [&amp;]&#123;</span><br><span class="line">        <span class="type">int</span> n , res;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cur</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">4</span>; j&gt;=<span class="number">0</span>; -- j) &#123; </span><br><span class="line">            cur[j] = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(cur.<span class="built_in">begin</span>(), cur.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="type">int</span> nn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; <span class="number">5</span>; ++ j) &#123;</span><br><span class="line">                nn = nn * <span class="number">10</span> + cur[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1e4</span> &lt;= nn &amp;&amp; st[nn] == <span class="number">1</span>) &#123;</span><br><span class="line">                std::cout &lt;&lt; nn &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(cur.<span class="built_in">begin</span>() , cur.<span class="built_in">end</span>()));</span><br><span class="line">        std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K-树上问题-（并查集）">K - 树上问题 （并查集）</h1><h2 id="分析-11">分析</h2><p>可以将能够互为父子的视为一个集合，随后对集合之间连边，u-&gt;v代表u可以做v的父亲节点，最后找到唯一的根节点集合（唯一一个没有入度的集合，有多个则无解）即可。</p><h2 id="代码实现-9">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; p, siz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">p</span>(n), <span class="built_in">siz</span>(n, <span class="number">1</span>) &#123; std::<span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">leader</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != p[x]) x = p[x] = p[p[x]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">leader</span>(x) == <span class="built_in">leader</span>(y); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">leader</span>(x), y = <span class="built_in">leader</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        siz[x] += siz[y], p[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> siz[<span class="built_in">leader</span>(x)]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            std::cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--, b--;</span><br><span class="line">            <span class="type">int</span> num = (val[a] * <span class="number">2</span> &gt;= val[b]) + (val[b] * <span class="number">2</span> &gt;= val[a]);</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">2</span>) &#123;</span><br><span class="line">                dsu.<span class="built_in">merge</span>(a, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[a] * <span class="number">2</span> &lt;= val[b]) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(a, b);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(b, a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">use</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : edges) &#123;</span><br><span class="line">            x = dsu.<span class="built_in">leader</span>(x), y = dsu.<span class="built_in">leader</span>(y);</span><br><span class="line">            use[x] = use[y] = <span class="literal">true</span>;</span><br><span class="line">            d[y] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dsu.<span class="built_in">size</span>(<span class="number">0</span>) == n) &#123;</span><br><span class="line">            std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> root = <span class="number">-1</span>, num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i] == <span class="number">0</span> &amp;&amp; use[i]) &#123;</span><br><span class="line">                    root = i;</span><br><span class="line">                    num += <span class="number">1</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                std::cout &lt;&lt; dsu.<span class="built_in">size</span>(root) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L-Toxel-与-PCPC-II（dp）">L - Toxel 与 PCPC II（dp）</h1><h2 id="分析-12">分析</h2><p>依旧队友神力，并没有读题的机会</p><h2 id="代码实现-10">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> power = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x * x;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(m + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    dp[i] = <span class="number">2e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>, i - <span class="number">400</span>); j &lt; i; ++j) &#123;</span><br><span class="line">      dp[i] = <span class="built_in">min</span>&lt;<span class="type">int</span>&gt;(dp[i] , dp[j] + a[i - <span class="number">1</span>] + <span class="built_in">power</span>(i - j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; dp[m] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="M-有效算法-（二分）">M - 有效算法 （二分）</h1><h2 id="分析-13">分析</h2><p>可以发现<br>越大，<br>可取的范围越大，因此直接二分<br>的最小值，判断所有<br>可以取到的<br>是否有公共区间即可。</p><h2 id="代码实现-11">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="type">int</span> x = k * b[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> L = a[<span class="number">0</span>] - x, R = a[<span class="number">0</span>] + x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                x = k * b[i];</span><br><span class="line">                <span class="type">int</span> l = a[i] - x, r = a[i] + x;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; L || l &gt; R) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    L = std::<span class="built_in">max</span>(L, l);</span><br><span class="line">                    R = std::<span class="built_in">min</span>(R, r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> , r = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; r &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-Once-In-My-Life-（构造）&quot;&gt;A - Once In My Life （构造）&lt;/h1&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;根据题目要求需要两个d，并且要保证&lt;code&gt;123456789&lt;/code&gt;都存在，那么就可以尝试先构造出一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jiangly算法模板收集</title>
    <link href="http://chfychin.cn/posts/4478d89.html"/>
    <id>http://chfychin.cn/posts/4478d89.html</id>
    <published>2024-09-20T14:57:26.000Z</published>
    <updated>2024-09-20T14:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、杂类">一、杂类</h1><h2 id="01-int128-输出流自定义">01 - int128 输出流自定义</h2><p><a href="https://codeforces.com/contest/1806/submission/198413531">2023-03-20</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line">using i128 = __int128;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;operator&lt;&lt;(std::ostream &amp;<span class="built_in">os</span>, i128 n) &#123;</span><br><span class="line">    std::<span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">reverse</span>(s.begin(), s.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">os</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="02-常用库函数重载">02 - 常用库函数重载</h2><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">using</span> <span class="variable">i64</span> <span class="operator">=</span> <span class="variable">long</span> <span class="variable">long</span>;</span><br><span class="line"><span class="variable">using</span> <span class="variable">i128</span> <span class="operator">=</span> <span class="variable">__int128</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">i64</span> <span class="title function_">ceilDiv</span>(<span class="params">i64</span> <span class="params">n</span>, <span class="params">i64</span> <span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&gt;=</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">return</span> (<span class="variable">n</span> <span class="operator">+</span> <span class="variable">m</span> <span class="operator">-</span> <span class="number">1</span>) / <span class="variable">m</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">n</span> / <span class="variable">m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">i64</span> <span class="title function_">floorDiv</span>(<span class="params">i64</span> <span class="params">n</span>, <span class="params">i64</span> <span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&gt;=</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">n</span> / <span class="variable">m</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">return</span> (<span class="variable">n</span> <span class="operator">-</span> <span class="variable">m</span> <span class="operator">+</span> <span class="number">1</span>) / <span class="variable">m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">template</span><span class="operator">&lt;</span><span class="keyword">class</span> <span class="title class_">T</span><span class="operator">&gt;</span></span><br><span class="line"><span class="variable">void</span> <span class="title function_">chmax</span>(<span class="params">T</span> &amp;<span class="params">a</span>, <span class="params">T</span> <span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">a</span> <span class="operator">&lt;</span> <span class="variable">b</span>) &#123;</span><br><span class="line">        <span class="variable">a</span> <span class="operator">=</span> <span class="variable">b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">i128</span> <span class="title function_">gcd</span>(<span class="params">i128</span> <span class="params">a</span>, <span class="params">i128</span> <span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">b</span> ? <span class="title function_">gcd</span>(<span class="variable">b</span>, <span class="variable">a</span> <span class="operator">%</span> <span class="variable">b</span>) : <span class="variable">a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、图与网络">二、图与网络</h1><h2 id="01-强连通分量缩点（SCC）">01 - 强连通分量缩点（SCC）</h2><p><a href="https://codeforces.com/contest/1835/submission/210147209">2023-06-18</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SCC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SCC</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">SCC</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="02-割边与割边缩点（EBCC）">02 - 割边与割边缩点（EBCC）</h2><p><a href="https://codeforces.com/contest/118/submission/205426518">2023-05-11</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EBCC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">EBCC</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">EBCC</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == p) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                <span class="built_in">dfs</span>(y, x);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span> &amp;&amp; dfn[y] &lt; dfn[x]) &#123;</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; siz;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; cnte;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Graph <span class="title">compress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Graph g;</span><br><span class="line">        g.n = cnt;</span><br><span class="line">        g.siz.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        g.cnte.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            g.siz[bel[i]]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bel[i] &lt; bel[j]) &#123;</span><br><span class="line">                    g.edges.<span class="built_in">emplace_back</span>(bel[i], bel[j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    g.cnte[bel[i]]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="03-二分图最大权匹配（MaxAssignment-基于KM）【久远】">03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】</h2><p><a href="https://atcoder.jp/contests/abc247/submissions/30867023">2022-04-10</a></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">struct MaxAssignment &#123;</span><br><span class="line">    public:</span><br><span class="line">        T solve(int nx, int ny, std::vector&lt;std::vector&lt;T&gt;&gt; a) &#123;</span><br><span class="line">            assert(0 &lt;= nx &amp;&amp; nx &lt;= ny);</span><br><span class="line">            assert(int(a.size()) == nx);</span><br><span class="line">            for (int i = 0; i &lt; nx; ++i) &#123;</span><br><span class="line">                assert(int(a<span class="comment">[i]</span>.size()) == ny);</span><br><span class="line">                for (auto x : a<span class="comment">[i]</span>)</span><br><span class="line">                    assert(x &gt;= 0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            auto update = <span class="comment">[&amp;]</span>(int x) &#123;</span><br><span class="line">                for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                    if (lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> - a<span class="comment">[x]</span><span class="comment">[y]</span> &lt; slack<span class="comment">[y]</span>) &#123;</span><br><span class="line">                        slack<span class="comment">[y]</span> = lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> - a<span class="comment">[x]</span><span class="comment">[y]</span>;</span><br><span class="line">                        slackx<span class="comment">[y]</span> = x;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            costs.resize(nx + 1);</span><br><span class="line">            costs<span class="comment">[0]</span> = 0;</span><br><span class="line">            lx.assign(nx, std::numeric_limits&lt;T&gt;::max());</span><br><span class="line">            ly.assign(ny, 0);</span><br><span class="line">            xy.assign(nx, -1);</span><br><span class="line">            yx.assign(ny, -1);</span><br><span class="line">            slackx.resize(ny);</span><br><span class="line">            for (int cur = 0; cur &lt; nx; ++cur) &#123;</span><br><span class="line">                std::queue&lt;int&gt; que;</span><br><span class="line">                visx.assign(nx, false);</span><br><span class="line">                visy.assign(ny, false);</span><br><span class="line">                slack.assign(ny, std::numeric_limits&lt;T&gt;::max());</span><br><span class="line">                p.assign(nx, -1);</span><br><span class="line">                </span><br><span class="line">                for (int x = 0; x &lt; nx; ++x) &#123;</span><br><span class="line">                    if (xy<span class="comment">[x]</span> == -1) &#123;</span><br><span class="line">                        que.push(x);</span><br><span class="line">                        visx<span class="comment">[x]</span> = true;</span><br><span class="line">                        update(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                int ex, ey;</span><br><span class="line">                bool found = false;</span><br><span class="line">                while (!found) &#123;</span><br><span class="line">                    while (!que.empty() &amp;&amp; !found) &#123;</span><br><span class="line">                        auto x = que.front();</span><br><span class="line">                        que.pop();</span><br><span class="line">                        for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                            if (a<span class="comment">[x]</span><span class="comment">[y]</span> == lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> &amp;&amp; !visy<span class="comment">[y]</span>) &#123;</span><br><span class="line">                                if (yx<span class="comment">[y]</span> == -1) &#123;</span><br><span class="line">                                    ex = x;</span><br><span class="line">                                    ey = y;</span><br><span class="line">                                    found = true;</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                                que.push(yx<span class="comment">[y]</span>);</span><br><span class="line">                                p<span class="comment">[yx<span class="comment">[y]</span>]</span> = x;</span><br><span class="line">                                visy<span class="comment">[y]</span> = visx<span class="comment">[yx<span class="comment">[y]</span>]</span> = true;</span><br><span class="line">                                update(yx<span class="comment">[y]</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (found)</span><br><span class="line">                        break;</span><br><span class="line">                    </span><br><span class="line">                    T delta = std::numeric_limits&lt;T&gt;::max();</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y)</span><br><span class="line">                        if (!visy<span class="comment">[y]</span>)</span><br><span class="line">                            delta = std::min(delta, slack<span class="comment">[y]</span>);</span><br><span class="line">                    for (int x = 0; x &lt; nx; ++x)</span><br><span class="line">                        if (visx<span class="comment">[x]</span>)</span><br><span class="line">                            lx<span class="comment">[x]</span> -= delta;</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                        if (visy<span class="comment">[y]</span>) &#123;</span><br><span class="line">                            ly<span class="comment">[y]</span> += delta;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            slack<span class="comment">[y]</span> -= delta;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                        if (!visy<span class="comment">[y]</span> &amp;&amp; slack<span class="comment">[y]</span> == 0) &#123;</span><br><span class="line">                            if (yx<span class="comment">[y]</span> == -1) &#123;</span><br><span class="line">                                ex = slackx<span class="comment">[y]</span>;</span><br><span class="line">                                ey = y;</span><br><span class="line">                                found = true;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            que.push(yx<span class="comment">[y]</span>);</span><br><span class="line">                            p<span class="comment">[yx<span class="comment">[y]</span>]</span> = slackx<span class="comment">[y]</span>;</span><br><span class="line">                            visy<span class="comment">[y]</span> = visx<span class="comment">[yx<span class="comment">[y]</span>]</span> = true;</span><br><span class="line">                            update(yx<span class="comment">[y]</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                costs<span class="comment">[cur + 1]</span> = costs<span class="comment">[cur]</span>;</span><br><span class="line">                for (int x = ex, y = ey, ty; x != -1; x = p<span class="comment">[x]</span>, y = ty) &#123;</span><br><span class="line">                    costs<span class="comment">[cur + 1]</span> += a<span class="comment">[x]</span><span class="comment">[y]</span>;</span><br><span class="line">                    if (xy<span class="comment">[x]</span> != -1)</span><br><span class="line">                        costs<span class="comment">[cur + 1]</span> -= a<span class="comment">[x]</span><span class="comment">[xy<span class="comment">[x]</span>]</span>;</span><br><span class="line">                    ty = xy<span class="comment">[x]</span>;</span><br><span class="line">                    xy<span class="comment">[x]</span> = y;</span><br><span class="line">                    yx<span class="comment">[y]</span> = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return costs<span class="comment">[nx]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;int&gt; assignment() &#123;</span><br><span class="line">            return xy;</span><br><span class="line">        &#125;</span><br><span class="line">        std::pair&lt;std::vector&lt;T&gt;, std::vector&lt;T&gt;&gt; labels() &#123;</span><br><span class="line">            return std::make_pair(lx, ly);</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;T&gt; weights() &#123;</span><br><span class="line">            return costs;</span><br><span class="line">        &#125;</span><br><span class="line">    private:</span><br><span class="line">        std::vector&lt;T&gt; lx, ly, slack, costs;</span><br><span class="line">        std::vector&lt;int&gt; xy, yx, p, slackx;</span><br><span class="line">        std::vector&lt;bool&gt; visx, visy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="04-一般图最大匹配（Graph-带花树算法）【久远】">04 - 一般图最大匹配（Graph 带花树算法）【久远】</h2><p><a href="https://codeforces.com/contest/1615/submission/140509278">2021-12-24</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">findMatching</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">match</span><span class="params">(n, <span class="number">-1</span>)</span>, <span class="title">vis</span><span class="params">(n)</span>, <span class="title">link</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n)</span>, <span class="title">dep</span><span class="params">(n)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// disjoint set union</span></span><br><span class="line">        <span class="keyword">auto</span> find = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            <span class="keyword">while</span> (f[u] != u)</span><br><span class="line">                u = f[u] = f[f[u]];</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> lca = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v) &#123;</span><br><span class="line">            u = <span class="built_in">find</span>(u);</span><br><span class="line">            v = <span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">while</span> (u != v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">                    std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">                u = <span class="built_in">find</span>(link[match[u]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">auto</span> blossom = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> p) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">find</span>(u) != p) &#123;</span><br><span class="line">                link[u] = v;</span><br><span class="line">                v = match[u];</span><br><span class="line">                <span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">                f[u] = f[v] = p;</span><br><span class="line">                u = link[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find an augmenting path starting from u and augment (if exist)</span></span><br><span class="line">        <span class="keyword">auto</span> augment = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// vis = 0 corresponds to inner vertices, vis = 1 corresponds to outer vertices</span></span><br><span class="line">            std::<span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">            </span><br><span class="line">            que.<span class="built_in">push</span>(u);</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            dep[u] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (vis[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        </span><br><span class="line">                        vis[v] = <span class="number">0</span>;</span><br><span class="line">                        link[v] = u;</span><br><span class="line">                        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// found an augmenting path</span></span><br><span class="line">                        <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> x = v, y = u, temp; y != <span class="number">-1</span>; x = temp, y = x == <span class="number">-1</span> ? <span class="number">-1</span> : link[x]) &#123;</span><br><span class="line">                                temp = match[y];</span><br><span class="line">                                match[x] = y;</span><br><span class="line">                                match[y] = x;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        vis[match[v]] = <span class="number">1</span>;</span><br><span class="line">                        dep[match[v]] = dep[u] + <span class="number">2</span>;</span><br><span class="line">                        que.<span class="built_in">push</span>(match[v]);</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] == <span class="number">1</span> &amp;&amp; <span class="built_in">find</span>(v) != <span class="built_in">find</span>(u)) &#123;</span><br><span class="line">                        <span class="comment">// found a blossom</span></span><br><span class="line">                        <span class="type">int</span> p = <span class="built_in">lca</span>(u, v);</span><br><span class="line">                        <span class="built_in">blossom</span>(u, v, p);</span><br><span class="line">                        <span class="built_in">blossom</span>(v, u, p);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find a maximal matching greedily (decrease constant)</span></span><br><span class="line">        <span class="keyword">auto</span> greedy = [&amp;]() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u) &#123;</span><br><span class="line">                <span class="keyword">if</span> (match[u] != <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        match[u] = v;</span><br><span class="line">                        match[v] = u;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">greedy</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</span><br><span class="line">            <span class="keyword">if</span> (match[u] == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">augment</span>(u);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> match;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="05-TwoSat（2-Sat）">05 - TwoSat（2-Sat）</h2><p><a href="https://atcoder.jp/contests/arc161/submissions/46031530">2023-09-29</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TwoSat</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    std::vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">    <span class="built_in">TwoSat</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(<span class="number">2</span> * n), <span class="built_in">ans</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addClause</span><span class="params">(<span class="type">int</span> u, <span class="type">bool</span> f, <span class="type">int</span> v, <span class="type">bool</span> g)</span> </span>&#123;</span><br><span class="line">        e[<span class="number">2</span> * u + !f].<span class="built_in">push_back</span>(<span class="number">2</span> * v + g);</span><br><span class="line">        e[<span class="number">2</span> * v + !g].<span class="built_in">push_back</span>(<span class="number">2</span> * u + f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">satisfiable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">id</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">dfn</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">low</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; tarjan = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            stk.<span class="built_in">push_back</span>(u);</span><br><span class="line">            dfn[u] = low[u] = now++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dfn[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">tarjan</span>(v);</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    v = stk.<span class="built_in">back</span>();</span><br><span class="line">                    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                    id[v] = cnt;</span><br><span class="line">                &#125; <span class="keyword">while</span> (v != u);</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i) <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) <span class="built_in">tarjan</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[<span class="number">2</span> * i] == id[<span class="number">2</span> * i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            ans[i] = id[<span class="number">2</span> * i] &gt; id[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">answer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ans; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="06A-最大流（Flow-旧版其一，整数应用）">06A - 最大流（Flow 旧版其一，整数应用）</h2><p><a href="https://codeforces.com/contest/1717/submission/170688062">2022-09-03</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="06B-最大流（Flow-旧版其二，浮点数应用）">06B - 最大流（Flow 旧版其二，浮点数应用）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412765">2022-04-09</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                res += a;</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, <span class="number">1E100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="06C-最大流（MaxFlow-新版）">06C - 最大流（MaxFlow 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62915815">2023-07-21</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxFlow</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        _Edge(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;_Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MaxFlow</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">MaxFlow</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        e.<span class="built_in">clear</span>();</span><br><span class="line">        g.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        cur.<span class="built_in">resize</span>(n);</span><br><span class="line">        h.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">minCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            c[i] = (h[i] != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> from;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        T flow;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">std::vector&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::vector&lt;Edge&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            Edge x;</span><br><span class="line">            x.from = e[i + <span class="number">1</span>].to;</span><br><span class="line">            x.to = e[i].to;</span><br><span class="line">            x.cap = e[i].cap + e[i + <span class="number">1</span>].cap;</span><br><span class="line">            x.flow = e[i + <span class="number">1</span>].cap;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="07A-费用流（MCFGraph-最小费用可行流）">07A - 费用流（MCFGraph 最小费用可行流）</h2><p><a href="https://codeforces.com/contest/1766/submission/184974697">2022-12-12</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MCFGraph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, c, f;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">v</span>(v), <span class="built_in">c</span>(c), <span class="built_in">f</span>(f) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;i64&gt; h, dis;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">assign</span>(n, std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>());</span><br><span class="line">        pre.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::priority_queue&lt;std::pair&lt;i64, <span class="type">int</span>&gt;, std::vector&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">emplace</span>(<span class="number">0</span>, s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            i64 d = que.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">top</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis[u] &lt; d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].v;</span><br><span class="line">                <span class="type">int</span> c = e[i].c;</span><br><span class="line">                <span class="type">int</span> f = e[i].f;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; dis[v] &gt; d + h[u] - h[v] + f) &#123;</span><br><span class="line">                    dis[v] = d + h[u] - h[v] + f;</span><br><span class="line">                    pre[v] = i;</span><br><span class="line">                    que.<span class="built_in">emplace</span>(dis[v], v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MCFGraph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, <span class="number">0</span>, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, c, -f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, c, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::pair&lt;<span class="type">int</span>, i64&gt; <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        i64 cost = <span class="number">0</span>;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">dijkstra</span>(s, t)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) h[i] += dis[i];</span><br><span class="line">            <span class="type">int</span> aug = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) aug = std::<span class="built_in">min</span>(aug, e[pre[i]].c);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) &#123;</span><br><span class="line">                e[pre[i]].c -= aug;</span><br><span class="line">                e[pre[i] ^ <span class="number">1</span>].c += aug;</span><br><span class="line">            &#125;</span><br><span class="line">            flow += aug;</span><br><span class="line">            cost += <span class="built_in">i64</span>(aug) * h[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="07B-费用流（MCFGraph-最小费用最大流）">07B - 费用流（MCFGraph 最小费用最大流）</h2><p>代码同上，但是需要注释掉建边限制。以下为参考：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">addEdge</span>(int u, int v, int c, int f) &#123; <span class="comment">// 可行流</span></span><br><span class="line">    if (f &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(v, <span class="number">0</span>, f);</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(u, c, -f);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(v, c, f);</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void <span class="built_in">addEdge</span>(int u, int v, int c, int f) &#123; <span class="comment">// 最大流</span></span><br><span class="line">    <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">    e<span class="selector-class">.emplace_back</span>(v, c, f);</span><br><span class="line">    <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">    e<span class="selector-class">.emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="08-树链剖分（HLD）">08 - 树链剖分（HLD）</h2><p><a href="https://codeforces.com/contest/1863/submission/221214363">2023-08-31</a></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">struct HLD &#123;</span><br><span class="line">    int n;</span><br><span class="line">    std::vector&lt;int&gt; siz, top, dep, parent, in, out, seq;</span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; adj;</span><br><span class="line">    int cur;</span><br><span class="line">    </span><br><span class="line">    HLD() &#123;&#125;</span><br><span class="line">    HLD(int n) &#123;</span><br><span class="line">        init(n);</span><br><span class="line">    &#125;</span><br><span class="line">    void init(int n) &#123;</span><br><span class="line">        this-&gt;n = n;</span><br><span class="line">        siz.resize(n);</span><br><span class="line">        top.resize(n);</span><br><span class="line">        dep.resize(n);</span><br><span class="line">        parent.resize(n);</span><br><span class="line">        in.resize(n);</span><br><span class="line">        out.resize(n);</span><br><span class="line">        seq.resize(n);</span><br><span class="line">        cur = 0;</span><br><span class="line">        adj.assign(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    void addEdge(int u, int v) &#123;</span><br><span class="line">        adj<span class="comment">[u]</span>.push_back(v);</span><br><span class="line">        adj<span class="comment">[v]</span>.push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    void work(int root = 0) &#123;</span><br><span class="line">        top<span class="comment">[root]</span> = root;</span><br><span class="line">        dep<span class="comment">[root]</span> = 0;</span><br><span class="line">        parent<span class="comment">[root]</span> = -1;</span><br><span class="line">        dfs1(root);</span><br><span class="line">        dfs2(root);</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs1(int u) &#123;</span><br><span class="line">        if (parent<span class="comment">[u]</span> != -1) &#123;</span><br><span class="line">            adj<span class="comment">[u]</span>.erase(std::find(adj<span class="comment">[u]</span>.begin(), adj<span class="comment">[u]</span>.end(), parent<span class="comment">[u]</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        siz<span class="comment">[u]</span> = 1;</span><br><span class="line">        for (auto &amp;v : adj<span class="comment">[u]</span>) &#123;</span><br><span class="line">            parent<span class="comment">[v]</span> = u;</span><br><span class="line">            dep<span class="comment">[v]</span> = dep<span class="comment">[u]</span> + 1;</span><br><span class="line">            dfs1(v);</span><br><span class="line">            siz<span class="comment">[u]</span> += siz<span class="comment">[v]</span>;</span><br><span class="line">            if (siz<span class="comment">[v]</span> &gt; siz<span class="comment">[adj<span class="comment">[u]</span><span class="comment">[0]</span>]</span>) &#123;</span><br><span class="line">                std::swap(v, adj<span class="comment">[u]</span><span class="comment">[0]</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs2(int u) &#123;</span><br><span class="line">        in<span class="comment">[u]</span> = cur++;</span><br><span class="line">        seq<span class="comment">[in<span class="comment">[u]</span>]</span> = u;</span><br><span class="line">        for (auto v : adj<span class="comment">[u]</span>) &#123;</span><br><span class="line">            top<span class="comment">[v]</span> = v == adj<span class="comment">[u]</span><span class="comment">[0]</span> ? top<span class="comment">[u]</span> : v;</span><br><span class="line">            dfs2(v);</span><br><span class="line">        &#125;</span><br><span class="line">        out<span class="comment">[u]</span> = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    int lca(int u, int v) &#123;</span><br><span class="line">        while (top<span class="comment">[u]</span> != top<span class="comment">[v]</span>) &#123;</span><br><span class="line">            if (dep<span class="comment">[top<span class="comment">[u]</span>]</span> &gt; dep<span class="comment">[top<span class="comment">[v]</span>]</span>) &#123;</span><br><span class="line">                u = parent<span class="comment">[top<span class="comment">[u]</span>]</span>;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                v = parent<span class="comment">[top<span class="comment">[v]</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dep<span class="comment">[u]</span> &lt; dep<span class="comment">[v]</span> ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int dist(int u, int v) &#123;</span><br><span class="line">        return dep<span class="comment">[u]</span> + dep<span class="comment">[v]</span> - 2 * dep<span class="comment">[lca(u, v)]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int jump(int u, int k) &#123;</span><br><span class="line">        if (dep<span class="comment">[u]</span> &lt; k) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        int d = dep<span class="comment">[u]</span> - k;</span><br><span class="line">        </span><br><span class="line">        while (dep<span class="comment">[top<span class="comment">[u]</span>]</span> &gt; d) &#123;</span><br><span class="line">            u = parent<span class="comment">[top<span class="comment">[u]</span>]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return seq<span class="comment">[in<span class="comment">[u]</span> - dep<span class="comment">[u]</span> + d]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool isAncester(int u, int v) &#123;</span><br><span class="line">        return in<span class="comment">[u]</span> &lt;= in<span class="comment">[v]</span> &amp;&amp; in<span class="comment">[v]</span> &lt; out<span class="comment">[u]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedParent(int u, int v) &#123;</span><br><span class="line">        std::swap(u, v);</span><br><span class="line">        if (u == v) &#123;</span><br><span class="line">            return u;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isAncester(u, v)) &#123;</span><br><span class="line">            return parent<span class="comment">[u]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        auto it = std::upper_bound(adj<span class="comment">[u]</span>.begin(), adj<span class="comment">[u]</span>.end(), v, <span class="comment">[&amp;]</span>(int x, int y) &#123;</span><br><span class="line">            return in<span class="comment">[x]</span> &lt; in<span class="comment">[y]</span>;</span><br><span class="line">        &#125;) - 1;</span><br><span class="line">        return *it;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedSize(int u, int v) &#123;</span><br><span class="line">        if (u == v) &#123;</span><br><span class="line">            return n;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isAncester(v, u)) &#123;</span><br><span class="line">            return siz<span class="comment">[v]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return n - siz<span class="comment">[rootedParent(u, v)]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedLca(int a, int b, int c) &#123;</span><br><span class="line">        return lca(a, b) ^ lca(b, c) ^ lca(c, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="三、数论、几何、多项式">三、数论、几何、多项式</h1><h2 id="01-快速幂">01 - 快速幂</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="02-欧拉筛">02 - 欧拉筛</h2><p><a href="https://cf.dianhsu.com/gym/104479/submission/220987267">2023-08-29</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="03-莫比乌斯函数筛（莫比乌斯函数-反演）">03 - 莫比乌斯函数筛（莫比乌斯函数/反演）</h2><p><a href="https://atcoder.jp/contests/tupc2022/submissions/39391116">2023-03-04</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">std::unordered_map&lt;<span class="type">int</span>, Z&gt; fMu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E7</span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line">std::vector&lt;Z&gt; mu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mu.<span class="built_in">resize</span>(n);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * p] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        mu[i] += mu[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Z <span class="title">sumMu</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">return</span> mu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fMu.<span class="built_in">count</span>(n)) &#123;</span><br><span class="line">        <span class="keyword">return</span> fMu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans -= (r - l + <span class="number">1</span>) * <span class="built_in">sumMu</span>(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sieve</span>(N);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> L, R;</span><br><span class="line">    std::cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    L -= <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    Z ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= R; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = R / (R / l);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= L) &#123;</span><br><span class="line">            r = std::<span class="built_in">min</span>(r, L / (L / l));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ans += (<span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">2</span>), R / l - L / l) - <span class="number">1</span>) * (<span class="built_in">sumMu</span>(r) - <span class="built_in">sumMu</span>(l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="04-求解单个数的欧拉函数">04 - 求解单个数的欧拉函数</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int phi(int n) &#123;</span><br><span class="line">    int res <span class="operator">=</span> n<span class="comment">;</span></span><br><span class="line">    for (int i <span class="operator">=</span> <span class="number">2</span><span class="comment">; i * i &lt;= n; i++) &#123;</span></span><br><span class="line">        if (n % i <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">            while (n % i <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">                n /<span class="operator">=</span> i<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            res <span class="operator">=</span> res / i * (i - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        res <span class="operator">=</span> res / n * (n - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="05-扩展欧几里得（exGCD）">05 - 扩展欧几里得（exGCD）</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int exgcd(int a, int b, int &amp;<span class="variable language_">x</span>, int &amp;<span class="variable language_">y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        <span class="variable language_">x</span> = <span class="number">1</span>, <span class="variable language_">y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    int g = exgcd(b, a % b, <span class="variable language_">y</span>, <span class="variable language_">x</span>);</span><br><span class="line">    <span class="variable language_">y</span> -= a / b * <span class="variable language_">x</span>;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="06-组合数（Comb-with-MInt-MLong）">06 - 组合数（Comb, with. MInt &amp; MLong）</h2><p><a href="https://codeforces.com/contest/1864/submission/220584872">2023-08-26</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n&#123;<span class="number">0</span>&#125;, _fac&#123;<span class="number">1</span>&#125;, _invfac&#123;<span class="number">1</span>&#125;, _inv&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        &#125;</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) &#123;</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; comb;</span><br></pre></td></tr></table></figure><h2 id="07-二项式（Binomial-任意模数计算）">07 - 二项式（Binomial 任意模数计算）</h2><p><a href="https://codeforces.com/contest/896/submission/219861532">2023-08-22</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">factorize</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(i) * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n % i == <span class="number">0</span>; n /= i)</span><br><span class="line">                ++t;</span><br><span class="line">            factors.<span class="built_in">emplace_back</span>(i, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.<span class="built_in">emplace_back</span>(n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base *= base, exp /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res *= base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base = <span class="number">1LL</span> * base * base % mod, exp /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * base % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> g = m, r = a, x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> q = g / r;</span><br><span class="line">        g %= r;</span><br><span class="line">        std::<span class="built_in">swap</span>(g, r);</span><br><span class="line">        x -= q * y;</span><br><span class="line">        std::<span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + m : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solveModuloEquations</span><span class="params">(<span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        m *= e[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> p = e[i].first;</span><br><span class="line">        res = (res + <span class="number">1LL</span> * e[i].second * (m / p) * <span class="built_in">inverse</span>(m / p, p)) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E5</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Binomial</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mod;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pk;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; prod;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> i64 <span class="title">exponent</span><span class="params">(i64 n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        i64 res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (n /= p; n &gt; <span class="number">0</span>; n /= p) &#123;</span><br><span class="line">            res += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">product</span><span class="params">(i64 n, std::<span class="type">size_t</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p = factors[i].first;</span><br><span class="line">        <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= p) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * <span class="built_in">power</span>(prod[i].<span class="built_in">back</span>(), n / pk[i], pk[i]) % pk[i] * prod[i][n % pk[i]] % pk[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Binomial</span>(<span class="type">int</span> mod) : <span class="built_in">mod</span>(mod), <span class="built_in">factors</span>(<span class="built_in">factorize</span>(mod)) &#123;</span><br><span class="line">        pk.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        prod.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            pk[i] = <span class="built_in">power</span>(p, k);</span><br><span class="line">            prod[i].<span class="built_in">resize</span>(std::<span class="built_in">min</span>(N + <span class="number">1</span>, pk[i]));</span><br><span class="line">            prod[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; prod[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % p == <span class="number">0</span>) &#123;</span><br><span class="line">                    prod[i][j] = prod[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prod[i][j] = <span class="number">1LL</span> * prod[i][j - <span class="number">1</span>] * j % pk[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(i64 n, i64 m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            <span class="type">int</span> e = <span class="built_in">exponent</span>(n, p) - <span class="built_in">exponent</span>(m, p) - <span class="built_in">exponent</span>(n - m, p);</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= k) &#123;</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pn = <span class="built_in">product</span>(n, i);</span><br><span class="line">                <span class="type">int</span> pm = <span class="built_in">product</span>(m, i);</span><br><span class="line">                <span class="type">int</span> pd = <span class="built_in">product</span>(n - m, i);</span><br><span class="line">                <span class="type">int</span> res = <span class="number">1LL</span> * pn * <span class="built_in">inverse</span>(pm, pk[i]) % pk[i] * <span class="built_in">inverse</span>(pd, pk[i]) % pk[i] * <span class="built_in">power</span>(p, e) % pk[i];</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">solveModuloEquations</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="08-素数测试与因式分解（Miller-Rabin-Pollard-Rho）">08 - 素数测试与因式分解（Miller-Rabin &amp; Pollard-Rho）</h2><p><a href="https://cf.dianhsu.com/gym/104354/submission/206130894">2023-05-16</a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">i64</span> <span class="keyword">mul</span>(<span class="type">i64</span> a<span class="punctuation">,</span> <span class="type">i64</span> b<span class="punctuation">,</span> <span class="type">i64</span> m) &#123;</span><br><span class="line">    return static_cast&lt;__int<span class="number">128</span>&gt;(a) * b % m<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">i64</span> power(<span class="type">i64</span> a<span class="punctuation">,</span> <span class="type">i64</span> b<span class="punctuation">,</span> <span class="type">i64</span> m) &#123;</span><br><span class="line">    <span class="type">i64</span> res <span class="operator">=</span> <span class="number">1</span> % m<span class="comment">;</span></span><br><span class="line">    for (<span class="comment">; b; b &gt;&gt;= 1, a = mul(a, a, m))</span></span><br><span class="line">        if (b &amp; <span class="number">1</span>)</span><br><span class="line">            res <span class="operator">=</span> <span class="keyword">mul</span>(res<span class="punctuation">,</span> a<span class="punctuation">,</span> m)<span class="comment">;</span></span><br><span class="line">    return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">bool isprime(<span class="type">i64</span> n) &#123;</span><br><span class="line">    if (n &lt; <span class="number">2</span>)</span><br><span class="line">        return <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">    static constexpr int A[] <span class="operator">=</span> &#123;<span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">13</span><span class="punctuation">,</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">19</span><span class="punctuation">,</span> <span class="number">23</span>&#125;<span class="comment">;</span></span><br><span class="line">    int s <span class="operator">=</span> __builtin_ctzll(n - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">    <span class="type">i64</span> d <span class="operator">=</span> (n - <span class="number">1</span>) &gt;&gt; s<span class="comment">;</span></span><br><span class="line">    for (auto a : A) &#123;</span><br><span class="line">        if (a <span class="operator">=</span><span class="operator">=</span> n)</span><br><span class="line">            return <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">        <span class="type">i64</span> <span class="keyword">x</span> <span class="operator">=</span> power(a<span class="punctuation">,</span> d<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">        if (<span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span> || <span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> n - <span class="number">1</span>)</span><br><span class="line">            continue<span class="comment">;</span></span><br><span class="line">        bool ok <span class="operator">=</span> <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">        for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; s - 1; ++i) &#123;</span></span><br><span class="line">            <span class="keyword">x</span> <span class="operator">=</span> <span class="keyword">mul</span>(<span class="keyword">x</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">            if (<span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> n - <span class="number">1</span>) &#123;</span><br><span class="line">                ok <span class="operator">=</span> <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (<span class="title">!ok</span>)</span><br><span class="line">            return <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">std:</span>:vector&lt;<span class="type">i64</span>&gt; factorize(<span class="type">i64</span> n) &#123;</span><br><span class="line"><span class="symbol">    std:</span>:vector&lt;<span class="type">i64</span>&gt; p<span class="comment">;</span></span><br><span class="line"><span class="symbol">    std:</span>:function&lt;<span class="type">void</span>(<span class="type">i64</span>)&gt; f <span class="operator">=</span> [&amp;](<span class="type">i64</span> n) &#123;</span><br><span class="line">        if (n &lt;<span class="operator">=</span> <span class="number">10000</span>) &#123;</span><br><span class="line">            for (int i <span class="operator">=</span> <span class="number">2</span><span class="comment">; i * i &lt;= n; ++i)</span></span><br><span class="line">                for (<span class="comment">; n % i == 0; n /= i)</span></span><br><span class="line">                    p.push_back(i)<span class="comment">;</span></span><br><span class="line">            if (n &gt; <span class="number">1</span>)</span><br><span class="line">                p.push_back(n)<span class="comment">;</span></span><br><span class="line">            return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        if (isprime(n)) &#123;</span><br><span class="line">            p.push_back(n)<span class="comment">;</span></span><br><span class="line">            return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        auto g <span class="operator">=</span> [&amp;](<span class="type">i64</span> <span class="keyword">x</span>) &#123;</span><br><span class="line">            return (<span class="keyword">mul</span>(<span class="keyword">x</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="punctuation">,</span> n) + <span class="number">1</span>) % n<span class="comment">;</span></span><br><span class="line">        &#125;<span class="comment">;</span></span><br><span class="line">        <span class="type">i64</span> <span class="keyword">x</span><span class="number">0</span> <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">        while (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="type">i64</span> <span class="keyword">x</span> <span class="operator">=</span> <span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> y <span class="operator">=</span> <span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> d <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> power <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lam <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">            while (d <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">                y <span class="operator">=</span> g(y)<span class="comment">;</span></span><br><span class="line">                ++lam<span class="comment">;</span></span><br><span class="line">                v <span class="operator">=</span> <span class="keyword">mul</span>(v<span class="punctuation">,</span> std::abs(<span class="keyword">x</span> - y)<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                if (lam % <span class="number">127</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">                    d <span class="operator">=</span> std::gcd(v<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                    v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                if (power <span class="operator">=</span><span class="operator">=</span> lam) &#123;</span><br><span class="line">                    <span class="keyword">x</span> <span class="operator">=</span> y<span class="comment">;</span></span><br><span class="line">                    power *<span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">                    lam <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">                    d <span class="operator">=</span> std::gcd(v<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                    v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (d !<span class="operator">=</span> n) &#123;</span><br><span class="line">                f(d)<span class="comment">;</span></span><br><span class="line">                f(n / d)<span class="comment">;</span></span><br><span class="line">                return<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            ++<span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">    f(n)<span class="comment">;</span></span><br><span class="line"><span class="symbol">    std:</span>:sort(p.<span class="keyword">begin</span>()<span class="punctuation">,</span> p.<span class="keyword">end</span>())<span class="comment">;</span></span><br><span class="line">    return p<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="09-平面几何">09 - 平面几何</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62808640">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    T x;</span><br><span class="line">    T y;</span><br><span class="line">    <span class="built_in">Point</span>(T x_ = <span class="number">0</span>, T y_ = <span class="number">0</span>) : <span class="built_in">x</span>(x_), <span class="built_in">y</span>(y_) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    <span class="keyword">operator</span> <span class="built_in">Point</span>&lt;U&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>&lt;U&gt;(<span class="built_in">U</span>(x), <span class="built_in">U</span>(y));</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>+=(Point p) &amp; &#123;</span><br><span class="line">        x += p.x;</span><br><span class="line">        y += p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>-=(Point p) &amp; &#123;</span><br><span class="line">        x -= p.x;</span><br><span class="line">        y -= p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>*=(T v) &amp; &#123;</span><br><span class="line">        x *= v;</span><br><span class="line">        y *= v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-x, -y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>-(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(Point a, T b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(T a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> b *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Point &amp;p) &#123;</span><br><span class="line">        <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, Point p) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; p.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p.y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dot</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">cross</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">square</span><span class="params">(Point&lt;T&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(p, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;T&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">double</span>(<span class="built_in">square</span>(p)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;<span class="type">long</span> <span class="type">double</span>&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">square</span>(p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    Point&lt;T&gt; a;</span><br><span class="line">    Point&lt;T&gt; b;</span><br><span class="line">    <span class="built_in">Line</span>(Point&lt;T&gt; a_ = <span class="built_in">Point</span>&lt;T&gt;(), Point&lt;T&gt; b_ = <span class="built_in">Point</span>&lt;T&gt;()) : <span class="built_in">a</span>(a_), <span class="built_in">b</span>(b_) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">rotate</span><span class="params">(Point&lt;T&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-a.y, a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point&lt;T&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnLineLeft</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(l.b - l.a, p - l.a) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">lineIntersection</span><span class="params">(Line&lt;T&gt; l1, Line&lt;T&gt; l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l<span class="number">1.</span>a + (l<span class="number">1.</span>b - l<span class="number">1.</span>a) * (<span class="built_in">cross</span>(l<span class="number">2.</span>b - l<span class="number">2.</span>a, l<span class="number">1.</span>a - l<span class="number">2.</span>a) / <span class="built_in">cross</span>(l<span class="number">2.</span>b - l<span class="number">2.</span>a, l<span class="number">1.</span>a - l<span class="number">1.</span>b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnSegment</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(p - l.a, l.b - l.a) == <span class="number">0</span> &amp;&amp; std::<span class="built_in">min</span>(l.a.x, l.b.x) &lt;= p.x &amp;&amp; p.x &lt;= std::<span class="built_in">max</span>(l.a.x, l.b.x)</span><br><span class="line">    &amp;&amp; std::<span class="built_in">min</span>(l.a.y, l.b.y) &lt;= p.y &amp;&amp; p.y &lt;= std::<span class="built_in">max</span>(l.a.y, l.b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointInPolygon</span><span class="params">(Point&lt;T&gt; a, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(a, <span class="built_in">Line</span>(p[i], p[(i + <span class="number">1</span>) % n]))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">if</span> (u.x &lt; a.x &amp;&amp; v.x &gt;= a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(v, u))) &#123;</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u.x &gt;= a.x &amp;&amp; v.x &lt; a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 : not intersect</span></span><br><span class="line"><span class="comment">// 1 : strictly intersect</span></span><br><span class="line"><span class="comment">// 2 : overlap</span></span><br><span class="line"><span class="comment">// 3 : intersect at endpoint</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::tuple&lt;<span class="type">int</span>, Point&lt;T&gt;, Point&lt;T&gt;&gt; <span class="built_in">segmentIntersection</span>(Line&lt;T&gt; l1, Line&lt;T&gt; l2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x) &lt; std::<span class="built_in">min</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x) &gt; std::<span class="built_in">max</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y) &lt; std::<span class="built_in">min</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y) &gt; std::<span class="built_in">max</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cross</span>(l<span class="number">1.</span>b - l<span class="number">1.</span>a, l<span class="number">2.</span>b - l<span class="number">2.</span>a) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l<span class="number">1.</span>b - l<span class="number">1.</span>a, l<span class="number">2.</span>a - l<span class="number">1.</span>a) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> maxx1 = std::<span class="built_in">max</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx1 = std::<span class="built_in">min</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy1 = std::<span class="built_in">max</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny1 = std::<span class="built_in">min</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> maxx2 = std::<span class="built_in">max</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx2 = std::<span class="built_in">min</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy2 = std::<span class="built_in">max</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny2 = std::<span class="built_in">min</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y);</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p1</span><span class="params">(std::max(minx1, minx2), std::max(miny1, miny2))</span></span>;</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p2</span><span class="params">(std::min(maxx1, maxx2), std::min(maxy1, maxy2))</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">pointOnSegment</span>(p1, l1)) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(p<span class="number">1.</span>y, p<span class="number">2.</span>y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="number">3</span>, p1, p2&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="number">2</span>, p1, p2&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> cp1 = <span class="built_in">cross</span>(l<span class="number">2.</span>a - l<span class="number">1.</span>a, l<span class="number">2.</span>b - l<span class="number">1.</span>a);</span><br><span class="line">    <span class="keyword">auto</span> cp2 = <span class="built_in">cross</span>(l<span class="number">2.</span>a - l<span class="number">1.</span>b, l<span class="number">2.</span>b - l<span class="number">1.</span>b);</span><br><span class="line">    <span class="keyword">auto</span> cp3 = <span class="built_in">cross</span>(l<span class="number">1.</span>a - l<span class="number">2.</span>a, l<span class="number">1.</span>b - l<span class="number">2.</span>a);</span><br><span class="line">    <span class="keyword">auto</span> cp4 = <span class="built_in">cross</span>(l<span class="number">1.</span>a - l<span class="number">2.</span>b, l<span class="number">1.</span>b - l<span class="number">2.</span>b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((cp1 &gt; <span class="number">0</span> &amp;&amp; cp2 &gt; <span class="number">0</span>) || (cp1 &lt; <span class="number">0</span> &amp;&amp; cp2 &lt; <span class="number">0</span>) || (cp3 &gt; <span class="number">0</span> &amp;&amp; cp4 &gt; <span class="number">0</span>) || (cp3 &lt; <span class="number">0</span> &amp;&amp; cp4 &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point p = <span class="built_in">lineIntersection</span>(l1, l2);</span><br><span class="line">    <span class="keyword">if</span> (cp1 != <span class="number">0</span> &amp;&amp; cp2 != <span class="number">0</span> &amp;&amp; cp3 != <span class="number">0</span> &amp;&amp; cp4 != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">1</span>, p, p&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">3</span>, p, p&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">segmentInPolygon</span><span class="params">(Line&lt;T&gt; l, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.a, p)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.b, p)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> w = p[(i + <span class="number">2</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> [t, p1, p2] = <span class="built_in">segmentIntersection</span>(l, <span class="built_in">Line</span>(u, v));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(v, l) &amp;&amp; v != l.a &amp;&amp; v != l.b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cross</span>(v - u, w - v) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 != u &amp;&amp; p1 != v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(l.a, <span class="built_in">Line</span>(v, u))</span><br><span class="line">                    || <span class="built_in">pointOnLineLeft</span>(l.b, <span class="built_in">Line</span>(v, u))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 == v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l.a == v) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l.b == v) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, <span class="built_in">Line</span>(l.b, l.a))) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::vector&lt;Point&lt;T&gt;&gt; <span class="built_in">hp</span>(std::vector&lt;Line&lt;T&gt;&gt; lines) &#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(lines.<span class="built_in">begin</span>(), lines.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> l1, <span class="keyword">auto</span> l2) &#123;</span><br><span class="line">        <span class="keyword">auto</span> d1 = l<span class="number">1.</span>b - l<span class="number">1.</span>a;</span><br><span class="line">        <span class="keyword">auto</span> d2 = l<span class="number">2.</span>b - l<span class="number">2.</span>a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d1) != <span class="built_in">sgn</span>(d2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sgn</span>(d1) == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(d1, d2) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    std::deque&lt;Line&lt;T&gt;&gt; ls;</span><br><span class="line">    std::deque&lt;Point&lt;T&gt;&gt; ps;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> l : lines) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), l)) &#123;</span><br><span class="line">            ps.<span class="built_in">pop_back</span>();</span><br><span class="line">            ls.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps[<span class="number">0</span>], l)) &#123;</span><br><span class="line">            ps.<span class="built_in">pop_front</span>();</span><br><span class="line">            ls.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dot</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">pointOnLineLeft</span>(ls.<span class="built_in">back</span>().a, l)) &#123;</span><br><span class="line">                    <span class="built_in">assert</span>(ls.<span class="built_in">size</span>() == <span class="number">1</span>);</span><br><span class="line">                    ls[<span class="number">0</span>] = l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls.<span class="built_in">back</span>(), l));</span><br><span class="line">        ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), ls[<span class="number">0</span>])) &#123;</span><br><span class="line">        ps.<span class="built_in">pop_back</span>();</span><br><span class="line">        ls.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ls.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls[<span class="number">0</span>], ls.<span class="built_in">back</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">vector</span>(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="10A-静态凸包（with-Point）">10A - 静态凸包（with. Point）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412835">2023-04-09</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="type">Point</span> &#123;</span><br><span class="line">    i64 x;</span><br><span class="line">    i64 y;</span><br><span class="line">    <span class="type">Point</span>(i64 x = <span class="number">0</span>, i64 y = <span class="number">0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Point</span> <span class="keyword">operator</span>+(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(a.x + b.x, a.y + b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Point</span> <span class="keyword">operator</span>-(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(a.x - b.x, a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 dot(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 <span class="keyword">cross</span>(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> norm(std::vector&lt;<span class="type">Point</span>&gt; &amp;h) &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="type">int</span>(h.size()); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[j].y &lt; h[i].y || (h[j].y == h[i].y &amp;&amp; h[j].x &lt; h[i].x)) &#123;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::rotate(h.<span class="keyword">begin</span>(), h.<span class="keyword">begin</span>() + i, h.<span class="keyword">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sgn(const <span class="type">Point</span> &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">Point</span>&gt; getHull(std::vector&lt;<span class="type">Point</span>&gt; p) &#123;</span><br><span class="line">    std::vector&lt;<span class="type">Point</span>&gt; h, l;</span><br><span class="line">    std::sort(p.<span class="keyword">begin</span>(), p.<span class="keyword">end</span>(), [&amp;](auto a, auto b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x != b.x) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    p.erase(std::<span class="keyword">unique</span>(p.<span class="keyword">begin</span>(), p.<span class="keyword">end</span>()), p.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (p.size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (auto a : p) &#123;</span><br><span class="line">        <span class="keyword">while</span> (h.size() &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">cross</span>(a - h.back(), a - h[h.size() - <span class="number">2</span>]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            h.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l.size() &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">cross</span>(a - l.back(), a - l[l.size() - <span class="number">2</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            l.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_back(a);</span><br><span class="line">        h.push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    l.pop_back();</span><br><span class="line">    std::reverse(h.<span class="keyword">begin</span>(), h.<span class="keyword">end</span>());</span><br><span class="line">    h.pop_back();</span><br><span class="line">    l.<span class="keyword">insert</span>(l.<span class="keyword">end</span>(), h.<span class="keyword">begin</span>(), h.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10B-静态凸包（with-std-complex）">10B - 静态凸包（with. std::complex）</h2><p><a href="https://loj.ac/s/1370861">2022-02-04</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = std::complex&lt;i64&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x real</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y imag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">x</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">y</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">rot</span><span class="params">(<span class="type">const</span> Point &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-p.<span class="built_in">y</span>(), p.<span class="built_in">x</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">complexHull</span><span class="params">(std::vector&lt;Point&gt; a)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">x</span>() != b.<span class="built_in">x</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">x</span>() &lt; b.<span class="built_in">x</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">y</span>() &lt; b.<span class="built_in">y</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Point&gt; l, h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : a) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(l.<span class="built_in">back</span>() - l[l.<span class="built_in">size</span>() - <span class="number">2</span>], p - l.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            l.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(h.<span class="built_in">back</span>() - h[h.<span class="built_in">size</span>() - <span class="number">2</span>], p - h.<span class="built_in">back</span>()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            h.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        l.<span class="built_in">push_back</span>(p);</span><br><span class="line">        h.<span class="built_in">push_back</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    h.<span class="built_in">insert</span>(h.<span class="built_in">end</span>(), l.<span class="built_in">begin</span>() + <span class="number">1</span>, l.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">y</span>() &gt; <span class="number">0</span> || (p.<span class="built_in">y</span>() == <span class="number">0</span> &amp;&amp; p.<span class="built_in">x</span>() &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11A-多项式相关（Poly-with-Z）">11A - 多项式相关（Poly, with. Z）</h2><p><a href="https://atcoder.jp/contests/arc155/submissions/38664055">2023-02-06</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line">std::vector&lt;Z&gt; roots&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(roots.<span class="built_in">size</span>()) &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots.<span class="built_in">size</span>());</span><br><span class="line">        roots.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) &#123;</span><br><span class="line">            Z e = <span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">3</span>), (P - <span class="number">1</span>) &gt;&gt; (k + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123;</span><br><span class="line">                roots[<span class="number">2</span> * i] = roots[i];</span><br><span class="line">                roots[<span class="number">2</span> * i + <span class="number">1</span>] = roots[i] * e;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                Z u = a[i + j];</span><br><span class="line">                Z v = a[i + j + k] * roots[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    Z inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Poly</span> &#123;</span><br><span class="line">    std::vector&lt;Z&gt; a;</span><br><span class="line">    <span class="built_in">Poly</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> size, std::function&lt;Z(<span class="type">int</span>)&gt; f = [](<span class="type">int</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;)</span> : a(size) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            a[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::vector&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) &#123;&#125;</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::initializer_list&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>[](<span class="type">int</span> idx) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[idx];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>[](<span class="type">int</span> idx) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">mulxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> b = a;</span><br><span class="line">        b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">modxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        k = std::<span class="built_in">min</span>(k, <span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">divxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() &lt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>() + k, a.<span class="built_in">end</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = a[i] + b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = a[i] - b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (sz &lt; tot) &#123;</span><br><span class="line">            sz *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        b.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        <span class="built_in">dft</span>(a.a);</span><br><span class="line">        <span class="built_in">dft</span>(b.a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            a.a[i] = a[i] * b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">idft</span>(a.a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Z a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Z b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>+=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>-=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Z b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * a[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] = a[i] / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;a[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">modxk</span>(k) * x)).<span class="built_in">modxk</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">modxk</span>(k))).<span class="built_in">modxk</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="built_in">size</span>() &amp;&amp; a[i].<span class="built_in">val</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(m));</span><br><span class="line">        &#125;</span><br><span class="line">        Z v = a[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">divxk</span>(i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">mulxk</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">modxk</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">modxk</span>(k)) * ((P + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.a.<span class="built_in">begin</span>(), b.a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">divxk</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;Z&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Z&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Z&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(<span class="built_in">int</span>(x.<span class="built_in">size</span>()), <span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">modxk</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">modxk</span>(r - m));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><h2 id="11B-多项式相关（Poly-with-MInt-MLong）">11B - 多项式相关（Poly, with. MInt &amp; MLong）</h2><p><a href="https://atcoder.jp/contests/arc163/submissions/45737810">2023-09-20</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">std::vector&lt;MInt&lt;P&gt;&gt; roots&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> MInt&lt;P&gt; <span class="title">findPrimitiveRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MInt&lt;P&gt; i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> k = __builtin_ctz(P - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(i, (P - <span class="number">1</span>) / <span class="number">2</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(i, (P - <span class="number">1</span>) &gt;&gt; k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class="built_in">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;<span class="number">998244353</span>&gt; primitiveRoot&lt;<span class="number">998244353</span>&gt; &#123;<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (roots&lt;P&gt;.<span class="built_in">size</span>() &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots&lt;P&gt;.<span class="built_in">size</span>());</span><br><span class="line">        roots&lt;P&gt;.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) &#123;</span><br><span class="line">            <span class="keyword">auto</span> e = <span class="built_in">power</span>(primitiveRoot&lt;P&gt;, <span class="number">1</span> &lt;&lt; (__builtin_ctz(P - <span class="number">1</span>) - k - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123;</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i] = roots&lt;P&gt;[i];</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i + <span class="number">1</span>] = roots&lt;P&gt;[i] * e;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                MInt&lt;P&gt; u = a[i + j];</span><br><span class="line">                MInt&lt;P&gt; v = a[i + j + k] * roots&lt;P&gt;[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    MInt&lt;P&gt; inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P = <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Poly : <span class="keyword">public</span> std::vector&lt;MInt&lt;P&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> Value = MInt&lt;P&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Poly</span>() : std::<span class="built_in">vector</span>&lt;Value&gt;() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> n)</span> : std::vector&lt;Value&gt;(n) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::vector&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::initializer_list&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> = std::_RequireInputIter&lt;InputIt&gt;&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(InputIt first, InputIt last) : std::<span class="built_in">vector</span>&lt;Value&gt;(first, last) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(<span class="type">int</span> n, F f) : std::<span class="built_in">vector</span>&lt;Value&gt;(n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">shift</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> b = *<span class="keyword">this</span>;</span><br><span class="line">            b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &lt;= -k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>() + (-k), <span class="keyword">this</span>-&gt;<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">trunc</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly f = *<span class="keyword">this</span>;</span><br><span class="line">        f.<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] -= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">            n *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (((P - <span class="number">1</span>) &amp; (n - <span class="number">1</span>)) != <span class="number">0</span> || b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">        b.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">dft</span>(a);</span><br><span class="line">        <span class="built_in">dft</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            a[i] *= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">idft</span>(a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Value a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] /= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>+=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>-=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>/=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) / b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * (*<span class="keyword">this</span>)[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] = (*<span class="keyword">this</span>)[i] / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;(*<span class="keyword">this</span>)[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">trunc</span>(k) * x)).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">trunc</span>(k))).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">        &#125;</span><br><span class="line">        Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">trunc</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">trunc</span>(k)) * CInv&lt;<span class="number">2</span>, P&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">shift</span>(-(n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> std::vector&lt;Value&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Value&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Value&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(x.<span class="built_in">size</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">resize</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">resize</span>(r - m));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">berlekampMassey</span><span class="params">(<span class="type">const</span> Poly&lt;P&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    Poly&lt;P&gt; c;</span><br><span class="line">    Poly&lt;P&gt; oldC;</span><br><span class="line">    <span class="type">int</span> f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> delta = s[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            delta -= c[j - <span class="number">1</span>] * s[i - j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">-1</span>) &#123;</span><br><span class="line">            c.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line">            f = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> d = oldC;</span><br><span class="line">            d *= <span class="number">-1</span>;</span><br><span class="line">            d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">            MInt&lt;P&gt; df1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= d.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                df1 += d[j - <span class="number">1</span>] * s[f + <span class="number">1</span> - j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">assert</span>(df1 != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">auto</span> coef = delta / df1;</span><br><span class="line">            d *= coef;</span><br><span class="line">            <span class="function">Poly&lt;P&gt; <span class="title">zeros</span><span class="params">(i - f - <span class="number">1</span>)</span></span>;</span><br><span class="line">            zeros.<span class="built_in">insert</span>(zeros.<span class="built_in">end</span>(), d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">            d = zeros;</span><br><span class="line">            <span class="keyword">auto</span> temp = c;</span><br><span class="line">            c += d;</span><br><span class="line">            <span class="keyword">if</span> (i - temp.<span class="built_in">size</span>() &gt; f - oldC.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                oldC = temp;</span><br><span class="line">                f = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c *= <span class="number">-1</span>;</span><br><span class="line">    c.<span class="built_in">insert</span>(c.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">MInt&lt;P&gt; <span class="title">linearRecurrence</span><span class="params">(Poly&lt;P&gt; p, Poly&lt;P&gt; q, i64 n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = q.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> newq = q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i += <span class="number">2</span>) &#123;</span><br><span class="line">            newq[i] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> newp = p * newq;</span><br><span class="line">        newq = q * newq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            p[i] = newp[i * <span class="number">2</span> + n % <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            q[i] = newq[i * <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>] / q[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n&#123;<span class="number">0</span>&#125;, _fac&#123;<span class="number">1</span>&#125;, _invfac&#123;<span class="number">1</span>&#125;, _inv&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        &#125;</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) &#123;</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; comb;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m - <span class="number">1</span>);</span><br><span class="line">        Z p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[n - i] += comb.<span class="built_in">binom</span>(n, i) * p;</span><br><span class="line">            p *= m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> fm = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fm[i] *= comb.<span class="built_in">fac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">pw</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pw[i] = pw[i - <span class="number">1</span>] * (m / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pw[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    fm = fm.<span class="built_in">mulT</span>(pw);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fm[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f + fm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="四、数据结构">四、数据结构</h1><h2 id="01A-树状数组（Fenwick-旧版）">01A - 树状数组（Fenwick 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, <span class="built_in">T</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> ans = <span class="built_in">T</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans += a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; k &gt;= a[x + i - <span class="number">1</span>]) &#123;</span><br><span class="line">                x += i;</span><br><span class="line">                k -= a[x - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="01B-树状数组（Fenwick-新版）">01B - 树状数组（Fenwick 新版）</h2><p><a href="https://codeforces.com/contest/1915/submission/239262801">2023-12-28</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n_ = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        n = n_;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, T&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> T &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        T ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans = ans + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">const</span> T &amp;k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        T cur&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; cur + a[x + i - <span class="number">1</span>] &lt;= k) &#123;</span><br><span class="line">                x += i;</span><br><span class="line">                cur = cur + a[x - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="02-并查集（DSU）">02 - 并查集（DSU）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63239142">2023-08-04</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="03A-线段树（SegmentTree-基础区间加乘）">03A - 线段树（SegmentTree 基础区间加乘）</h2><p><a href="https://cf.dianhsu.com/gym/104417/submission/223800089">2023-10-18</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; tag, sum;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_) : n(n_), tag(<span class="number">4</span> * n, <span class="number">1</span>), sum(<span class="number">4</span> * n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        sum[p] = (sum[<span class="number">2</span> * p] + sum[<span class="number">2</span> * p + <span class="number">1</span>]) % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> mul(<span class="type">int</span> p, <span class="type">int</span> v) &#123;</span><br><span class="line">        tag[p] = <span class="number">1</span>LL * tag[p] * v % P;</span><br><span class="line">        sum[p] = <span class="number">1</span>LL * sum[p] * v % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> push(<span class="type">int</span> p) &#123;</span><br><span class="line">        mul(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        mul(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> query(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        <span class="keyword">return</span> (query(<span class="number">2</span> * p, l, m, x, y) + query(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y)) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> query(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return query</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> rangeMul(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> mul(p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        rangeMul(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        rangeMul(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> rangeMul(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v) &#123;</span><br><span class="line">        rangeMul(<span class="number">1</span>, <span class="number">0</span>, n, x, y, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">add</span>(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            sum[p] = (sum[p] + v) % P;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="keyword">add</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">add</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">add</span>(<span class="type">int</span> x, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="03B-线段树（SegmentTree-Info-查找前驱后继）">03B - 线段树（SegmentTree+Info 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="keyword">Info</span>&gt;</span><br><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="keyword">Info</span>&gt; <span class="keyword">info</span>;</span><br><span class="line">    SegmentTree() : n(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    SegmentTree(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        init(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(std::vector(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    <span class="type">void</span> init(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        n = init_.size();</span><br><span class="line">        <span class="keyword">info</span>.assign(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="keyword">Info</span>());</span><br><span class="line">        std::<span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">info</span>[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            build(<span class="number">2</span> * p, l, m);</span><br><span class="line">            build(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            pull(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">info</span>[p] = <span class="keyword">info</span>[<span class="number">2</span> * p] + <span class="keyword">info</span>[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">info</span>[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        modify(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">info</span>[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">2</span> * p, l, m, x, y) + rangeQuery(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findFirst(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findFirst(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findFirst(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findLast(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findLast(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLast(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">struct <span class="keyword">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 ans = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">Info</span> <span class="keyword">operator</span>+(<span class="keyword">Info</span> a, <span class="keyword">Info</span> b) &#123;</span><br><span class="line">    <span class="keyword">Info</span> c;</span><br><span class="line">    c.cnt = a.cnt + b.cnt;</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.ans = a.ans + b.ans + a.cnt * b.sum - a.sum * b.cnt;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="03C-线段树（SegmentTree-Info-Merge-区间合并）">03C - 线段树（SegmentTree+Info+Merge 区间合并）</h2><p><a href="https://codeforces.com/contest/1672/submission/154766851">2022-04-23</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="keyword">Info</span>&gt;</span><br><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="keyword">Info</span>&gt; <span class="keyword">info</span>;</span><br><span class="line">    SegmentTree() : n(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    SegmentTree(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        init(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(std::vector(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    <span class="type">void</span> init(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        n = init_.size();</span><br><span class="line">        <span class="keyword">info</span>.assign(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="keyword">Info</span>());</span><br><span class="line">        std::<span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">info</span>[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            build(<span class="number">2</span> * p, l, m);</span><br><span class="line">            build(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            pull(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">info</span>[p] = <span class="keyword">info</span>[<span class="number">2</span> * p] + <span class="keyword">info</span>[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">info</span>[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        modify(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">info</span>[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">2</span> * p, l, m, x, y) + rangeQuery(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findFirst(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findFirst(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findFirst(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findLast(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findLast(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLast(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct <span class="keyword">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Info</span> <span class="keyword">operator</span>+(<span class="keyword">Info</span> a, <span class="keyword">Info</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a.x, a.cnt + b.cnt&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.cnt &gt; b.cnt) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a.x, a.cnt - b.cnt&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;b.x, b.cnt - a.cnt&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="04A-懒标记线段树（LazySegmentTree-基础区间修改）">04A - 懒标记线段树（LazySegmentTree 基础区间修改）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].act == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((info[p].min + <span class="number">1</span>) / <span class="number">2</span> == (info[p].max + <span class="number">1</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, &#123;-(info[p].min + <span class="number">1</span>) / <span class="number">2</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> i64 inf = <span class="number">1E18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    i64 add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        add += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    i64 min = inf;</span><br><span class="line">    i64 max = -inf;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 act = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        min += t.add;</span><br><span class="line">        max += t.add;</span><br><span class="line">        sum += act * t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    Info c;</span><br><span class="line">    c.min = std::<span class="built_in">min</span>(a.min, b.min);</span><br><span class="line">    c.max = std::<span class="built_in">max</span>(a.max, b.max);</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.act = a.act + b.act;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="04B-懒标记线段树（LazySegmentTree-查找前驱后继）">04B - 懒标记线段树（LazySegmentTree 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">LazySegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        n = init_.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">        tag.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Tag</span>());</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    i64 a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        a = std::<span class="built_in">min</span>(a, b + t.a);</span><br><span class="line">        b += t.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    i64 x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        x += t.a;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = (x % k + k) % k;</span><br><span class="line">        &#125;</span><br><span class="line">        x += t.b - t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x + b.x&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="04C-懒标记线段树（LazySegmentTree-二分修改）">04C - 懒标记线段树（LazySegmentTree 二分修改）</h2><p><a href="https://atcoder.jp/contests/joi2023yo2/submissions/39363123">2023-03-03</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].difl &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowl &lt; pre) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p, l, m, pre);</span><br><span class="line">        pre = std::<span class="built_in">max</span>(pre, info[<span class="number">2</span> * p].max);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, pre);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> suf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].difr &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowr &lt; suf) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, suf);</span><br><span class="line">        suf = std::<span class="built_in">max</span>(suf, info[<span class="number">2</span> * p + <span class="number">1</span>].max);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p, l, m, suf);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>&#123;</span><br><span class="line">        add += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxl = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxr = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> difl = inf;</span><br><span class="line">    <span class="type">int</span> difr = inf;</span><br><span class="line">    <span class="type">int</span> maxlowl = -inf;</span><br><span class="line">    <span class="type">int</span> maxlowr = -inf;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="number">-1</span>) &#123;</span><br><span class="line">            max += t.add;</span><br><span class="line">        &#125;</span><br><span class="line">        difl += t.add;</span><br><span class="line">        difr += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    Info c;</span><br><span class="line">    <span class="keyword">if</span> (a.max &gt; b.max) &#123;</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = a.maxr;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.max &lt; b.max) &#123;</span><br><span class="line">        c.max = b.max;</span><br><span class="line">        c.maxl = b.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    c.difl = std::<span class="built_in">min</span>(a.difl, b.difl);</span><br><span class="line">    c.difr = std::<span class="built_in">min</span>(a.difr, b.difr);</span><br><span class="line">    <span class="keyword">if</span> (a.max != <span class="number">-1</span>) &#123;</span><br><span class="line">        c.difl = std::<span class="built_in">min</span>(c.difl, a.max - b.maxlowl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.max != <span class="number">-1</span>) &#123;</span><br><span class="line">        c.difr = std::<span class="built_in">min</span>(c.difr, b.max - a.maxlowr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a.max == <span class="number">-1</span>) &#123;</span><br><span class="line">        c.maxlowl = std::<span class="built_in">max</span>(a.maxlowl, b.maxlowl);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.maxlowl = a.maxlowl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.max == <span class="number">-1</span>) &#123;</span><br><span class="line">        c.maxlowr = std::<span class="built_in">max</span>(a.maxlowr, b.maxlowr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.maxlowr = b.maxlowr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="05A-取模类（MLong-MInt）">05A - 取模类（MLong &amp; MInt）</h2><p><a href="https://codeforces.com/contest/1697/submission/160317720">2022-06-12</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">constexpr int P = <span class="number">998244353</span>;</span><br><span class="line">using i64 = long long;</span><br><span class="line"><span class="comment">// assume -P &lt;= x &lt; 2P</span></span><br><span class="line">int norm(int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x += P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= P) &#123;</span><br><span class="line">        x -= P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">template&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T power(T a, i64 b) &#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">struct Z &#123;</span><br><span class="line">    int x;</span><br><span class="line">    Z(int x = <span class="number">0</span>) : x(norm(x)) &#123;&#125;</span><br><span class="line">    Z(i64 x) : x(norm(x % P)) &#123;&#125;</span><br><span class="line">    int <span class="keyword">val</span>() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Z(norm(P - x));</span><br><span class="line">    &#125;</span><br><span class="line">    Z inv() <span class="keyword">const</span> &#123;</span><br><span class="line">        assert(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> power(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>*=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = i64(x) * rhs.x % P;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = norm(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>-=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = norm(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>/=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.inv();</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>*(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>+(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>-(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>/(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;<span class="keyword">is</span>, Z &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        <span class="keyword">is</span> &gt;&gt; v;</span><br><span class="line">        a = Z(v);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">is</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    friend std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="keyword">const</span> Z &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="keyword">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="05B-取模类（MLong-MInt-新版）">05B - 取模类（MLong &amp; MInt 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63433564">2023-08-14</a></p><p>根据输入内容动态修改 MOD 的方法：<code>Z::setMod(p)</code>; 。</p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 p)</span> </span>&#123;</span><br><span class="line">    i64 res = a * b - <span class="built_in">i64</span>(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;i64 P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLong</span> &#123;</span><br><span class="line">    i64 x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">(i64 x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> i64 Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> i64 <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(i64 Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">norm</span><span class="params">(i64 x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">i64</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MLong res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MLong <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>*=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>+=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>-=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>/=(MLong rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>*(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>+(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>/(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MLong</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MLong &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">i64 MLong&lt;<span class="number">0LL</span>&gt;::Mod = <span class="built_in">i64</span>(<span class="number">1E18</span>) + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(i64 x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">int</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>*=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="number">1LL</span> * x * rhs.x % <span class="built_in">getMod</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>+=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>-=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>/=(MInt rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MInt &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int</span> MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> V, <span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="built_in">MInt</span>&lt;P&gt;(V).<span class="built_in">inv</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">using</span> Z = MInt&lt;P&gt;;</span><br></pre></td></tr></table></figure></details><h2 id="06-状压RMQ（RMQ）">06 - 状压RMQ（RMQ）</h2><p><a href="https://atcoder.jp/contests/joi2022ho/submissions/39351739">2023-03-02</a></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">template</span>&lt;<span class="keyword">class</span> <span class="type">T</span>,</span><br><span class="line"><span class="class">    <span class="keyword">class</span> <span class="type">Cmp</span> = std::less&lt;<span class="type">T</span>&gt;&gt;</span></span><br><span class="line"><span class="class">struct <span class="type">RMQ</span> &#123;</span></span><br><span class="line"><span class="class">    const <span class="type">Cmp</span> cmp = <span class="type">Cmp</span>();</span></span><br><span class="line"><span class="class">    static constexpr unsigned <span class="type">B</span> = 64;</span></span><br><span class="line"><span class="class">    using u64 = unsigned long long;</span></span><br><span class="line"><span class="class">    int n;</span></span><br><span class="line"><span class="class">    std::vector&lt;std::vector&lt;<span class="type">T</span>&gt;&gt; a;</span></span><br><span class="line"><span class="class">    std::vector&lt;<span class="type">T</span>&gt; pre, suf, ini;</span></span><br><span class="line"><span class="class">    std::vector&lt;u64&gt; stk;</span></span><br><span class="line"><span class="class">    <span class="type">RMQ</span>() &#123;&#125;</span></span><br><span class="line"><span class="class">    <span class="type">RMQ</span>(<span class="title">const</span> <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="class">        init(<span class="title">v</span>);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    void init(<span class="title">const</span> <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="class">        n = v.size();</span></span><br><span class="line"><span class="class">        pre = suf = ini = v;</span></span><br><span class="line"><span class="class">        stk.resize(<span class="title">n</span>);</span></span><br><span class="line"><span class="class">        if (!<span class="title">n</span>) &#123;</span></span><br><span class="line"><span class="class">            return;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        const int <span class="type">M</span> = (<span class="title">n</span> - 1) / <span class="type">B</span> + 1;</span></span><br><span class="line"><span class="class">        const int lg = std::__lg(<span class="type">M</span>);</span></span><br><span class="line"><span class="class">        a.assign(<span class="title">lg</span> + 1, <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt;(<span class="type">M</span>));</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="type">M</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            a[0][i] = v[i * <span class="type">B</span>];</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">j</span> = 1; <span class="title">j</span> &lt; <span class="type">B</span> &amp;&amp; <span class="title">i</span> * <span class="type">B</span> + <span class="title">j</span> &lt; <span class="title">n</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">                a[0][i] = std::min(<span class="title">a</span>[0][<span class="title">i</span>], <span class="title">v</span>[<span class="title">i</span> * <span class="type">B</span> + <span class="title">j</span>], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 1; <span class="title">i</span> &lt; <span class="title">n</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            if (<span class="title">i</span> % <span class="type">B</span>) &#123;</span></span><br><span class="line"><span class="class">                pre[i] = std::min(<span class="title">pre</span>[<span class="title">i</span>], <span class="title">pre</span>[<span class="title">i</span> - 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = <span class="title">n</span> - 2; <span class="title">i</span> &gt;= 0; <span class="title">i</span><span class="comment">--) &#123;</span></span></span><br><span class="line"><span class="class">            <span class="title">if</span> (<span class="title">i</span> % <span class="type">B</span> != <span class="type">B</span> - 1) &#123;</span></span><br><span class="line"><span class="class">                suf[i] = std::min(<span class="title">suf</span>[<span class="title">i</span>], <span class="title">suf</span>[<span class="title">i</span> + 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">j</span> = 0; <span class="title">j</span> &lt; <span class="title">lg</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> + (2 &lt;&lt; <span class="title">j</span>) &lt;= <span class="type">M</span>; i++) &#123;</span></span><br><span class="line"><span class="class">                a[j + 1][i] = std::min(<span class="title">a</span>[<span class="title">j</span>][<span class="title">i</span>], <span class="title">a</span>[<span class="title">j</span>][<span class="title">i</span> + (1 &lt;&lt; <span class="title">j</span>)], cmp);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="type">M</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            const int l = i * <span class="type">B</span>;</span></span><br><span class="line"><span class="class">            const int r = std::min(1U * <span class="title">n</span>, <span class="title">l</span> + <span class="type">B</span>);</span></span><br><span class="line"><span class="class">            u64 s = 0;</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">j</span> = <span class="title">l</span>; <span class="title">j</span> &lt; <span class="title">r</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">                while (<span class="title">s</span> &amp;&amp; <span class="title">cmp</span>(<span class="title">v</span>[<span class="title">j</span>], <span class="title">v</span>[<span class="title">std</span>::<span class="title">__lg</span>(<span class="title">s</span>) + l])) &#123;</span></span><br><span class="line"><span class="class">                    s ^= 1ULL &lt;&lt; std::__lg(<span class="title">s</span>);</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">                s |= 1ULL &lt;&lt; (<span class="title">j</span> - <span class="title">l</span>);</span></span><br><span class="line"><span class="class">                stk[j] = s;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125; </span></span><br><span class="line"><span class="class">    <span class="type">T</span> operator()(<span class="title">int</span> <span class="title">l</span>, <span class="title">int</span> <span class="title">r</span>) &#123;</span></span><br><span class="line"><span class="class">        if (<span class="title">l</span> / <span class="type">B</span> != (<span class="title">r</span> - 1) / <span class="type">B</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">T</span> ans = std::min(<span class="title">suf</span>[<span class="title">l</span>], <span class="title">pre</span>[<span class="title">r</span> - 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            l = l / <span class="type">B</span> + 1;</span></span><br><span class="line"><span class="class">            r = r / <span class="type">B</span>;</span></span><br><span class="line"><span class="class">            if (<span class="title">l</span> &lt; <span class="title">r</span>) &#123;</span></span><br><span class="line"><span class="class">                int k = std::__lg(<span class="title">r</span> - <span class="title">l</span>);</span></span><br><span class="line"><span class="class">                ans = std::min(&#123;<span class="title">ans</span>, <span class="title">a</span>[<span class="title">k</span>][<span class="title">l</span>], <span class="title">a</span>[<span class="title">k</span>][<span class="title">r</span> - (1 &lt;&lt; <span class="title">k</span>)]&#125;, cmp);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">            return ans;</span></span><br><span class="line"><span class="class">        &#125; else &#123;</span></span><br><span class="line"><span class="class">            int x = <span class="type">B</span> * (<span class="title">l</span> / <span class="type">B</span>);</span></span><br><span class="line"><span class="class">            return ini[__builtin_ctzll(<span class="title">stk</span>[<span class="title">r</span> - 1] &gt;&gt; (<span class="title">l</span> - <span class="title">x</span>)) + l];</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="07-Splay">07 - Splay</h2><p><a href="https://atcoder.jp/contests/joi2023ho/submissions/38901674">2023-02-15</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, int l, int r, int p, int v) &#123;</span><br><span class="line">    Node *x = new Node;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        *x = *t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>sum += v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">l</span> = add(x-&gt;</span>l, l, m, p, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">r</span> = add(x-&gt;</span>r, m, r, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int find(Node *tl, Node *tr, int l, int r, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= x) &#123;</span><br><span class="line">        return -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x) &#123;</span><br><span class="line">        <span class="function"><span class="title">int</span> cnt = (tr ? tr-&gt;</span><span class="function"><span class="title">cnt</span> : 0) - (tl ? tl-&gt;</span>cnt : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            return -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            return l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> res = find(tl ? tl-&gt;</span><span class="function"><span class="title">l</span> : tl, tr ? tr-&gt;</span>l : tr, l, m, x);</span><br><span class="line">    <span class="keyword">if</span> (res == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">res</span> = find(tl ? tl-&gt;</span><span class="function"><span class="title">r</span> : tl, tr ? tr-&gt;</span>r : tr, m, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;int, i64&gt; get(Node *t, int l, int r, int x, int y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !t) &#123;</span><br><span class="line">        return &#123;<span class="number">0</span>, <span class="number">0</span>LL&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> &#123;t-&gt;</span><span class="function"><span class="title">cnt</span>, t-&gt;</span>sum&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">auto</span> [cl, sl] = get(t-&gt;</span>l, l, m, x, y);</span><br><span class="line">    <span class="function"><span class="title">auto</span> [cr, sr] = get(t-&gt;</span>r, m, r, x, y);</span><br><span class="line">    return &#123;cl + cr, sl + sr&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Tree &#123;</span><br><span class="line">    int add = <span class="number">0</span>;</span><br><span class="line">    int val = <span class="number">0</span>;</span><br><span class="line">    int id = <span class="number">0</span>;</span><br><span class="line">    Tree *ch[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">    Tree *p = nullptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int pos(Tree *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void add(Tree *t, int v) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>val += v;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>add += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void push(Tree *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(t-&gt;</span><span class="function"><span class="title">ch</span>[0], t-&gt;</span>add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(t-&gt;</span><span class="function"><span class="title">ch</span>[1], t-&gt;</span>add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rotate(Tree *t) &#123;</span><br><span class="line">    T<span class="function"><span class="title">ree</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">ch</span>[x]) t-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="function"><span class="title">if</span> (q-&gt;</span><span class="function"><span class="title">p</span>) q-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void splay(Tree *t) &#123;</span><br><span class="line">    std::vector&lt;Tree *&gt; s;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Tree *i = t; i-&gt;</span><span class="function"><span class="title">p</span>; i = i-&gt;</span><span class="function"><span class="title">p</span>) s.push_back(i-&gt;</span>p);</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        push(s.back());</span><br><span class="line">        s.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">while</span> (t-&gt;</span>p) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>p) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span><span class="function"><span class="title">p</span>)) rotate(t-&gt;</span>p);</span><br><span class="line">            <span class="keyword">else</span> rotate(t);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insert(Tree *&amp;t, Tree *x, Tree *p = nullptr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        t = x;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span>p = p;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">if</span> (x-&gt;</span><span class="function"><span class="title">val</span> &lt; t-&gt;</span>val) &#123;</span><br><span class="line">        <span class="function"><span class="title">insert</span>(t-&gt;</span>ch[<span class="number">0</span>], x, t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">insert</span>(t-&gt;</span>ch[<span class="number">1</span>], x, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(Tree *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">dfs</span>(t-&gt;</span>ch[<span class="number">0</span>]);</span><br><span class="line">    <span class="function"><span class="title">std</span>::cerr &lt;&lt; t-&gt;</span>val <span class="string">&lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">    dfs(t-&gt;ch[1]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">std::pair&lt;Tree *, Tree *&gt; split(Tree *t, int x) &#123;</span></span><br><span class="line"><span class="string">    if (!t) &#123;</span></span><br><span class="line"><span class="string">        return &#123;t, t&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Tree *v = nullptr;</span></span><br><span class="line"><span class="string">    Tree *j = t;</span></span><br><span class="line"><span class="string">    for (Tree *i = t; i; ) &#123;</span></span><br><span class="line"><span class="string">        push(i);</span></span><br><span class="line"><span class="string">        j = i;</span></span><br><span class="line"><span class="string">        if (i-&gt;val &gt;= x) &#123;</span></span><br><span class="line"><span class="string">            v = i;</span></span><br><span class="line"><span class="string">            i = i-&gt;ch[0];</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            i = i-&gt;ch[1];</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    splay(j);</span></span><br><span class="line"><span class="string">    if (!v) &#123;</span></span><br><span class="line"><span class="string">        return &#123;j, nullptr&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    splay(v);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Tree *u = v-&gt;ch[0];</span></span><br><span class="line"><span class="string">    if (u) &#123;</span></span><br><span class="line"><span class="string">        v-&gt;ch[0] = u-&gt;p = nullptr;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;split &quot; &lt;&lt; x &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    // dfs(u);</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    // dfs(v);</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    return &#123;u, v&#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Tree *merge(Tree *l, Tree *r) &#123;</span></span><br><span class="line"><span class="string">    if (!l) &#123;</span></span><br><span class="line"><span class="string">        return r;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (!r) &#123;</span></span><br><span class="line"><span class="string">        return l;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Tree *i = l;</span></span><br><span class="line"><span class="string">    while (i-&gt;ch[1]) &#123;</span></span><br><span class="line"><span class="string">        i = i-&gt;ch[1];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    splay(i);</span></span><br><span class="line"><span class="string">    i-&gt;ch[1] = r;</span></span><br><span class="line"><span class="string">    r-&gt;p = i;</span></span><br><span class="line"><span class="string">    return i;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://cf.dianhsu.com/gym/104479/submission/221036520">2023-09-30</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    bool rev;</span><br><span class="line">    int siz = <span class="number">1</span>;</span><br><span class="line">    Node() : ch&#123;nullptr, nullptr&#125;, p(nullptr), rev(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void reverse(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        <span class="function"><span class="title">std</span>::swap(t-&gt;</span><span class="function"><span class="title">ch</span>[0], t-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void push(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>rev) &#123;</span><br><span class="line">        <span class="function"><span class="title">reverse</span>(t-&gt;</span>ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="function"><span class="title">reverse</span>(t-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>rev = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> = (t-&gt;</span><span class="function"><span class="title">ch</span>[0] ? t-&gt;</span><span class="function"><span class="title">ch</span>[0]-&gt;</span><span class="function"><span class="title">siz</span> : 0) + 1 + (t-&gt;</span><span class="function"><span class="title">ch</span>[1] ? t-&gt;</span><span class="function"><span class="title">ch</span>[1]-&gt;</span>siz : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">bool isroot(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span> == nullptr || (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">ch</span>[0] != t &amp;&amp; t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] != t);</span><br><span class="line">&#125;</span><br><span class="line">int pos(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line">void pushAll(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">pushAll</span>(t-&gt;</span>p);</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">&#125;</span><br><span class="line">void rotate(Node *t) &#123;</span><br><span class="line">    N<span class="function"><span class="title">ode</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[x]) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(q)) &#123;</span><br><span class="line">        <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">    pull(q);</span><br><span class="line">&#125;</span><br><span class="line">void splay(Node *t) &#123;</span><br><span class="line">    pushAll(t);</span><br><span class="line">    <span class="keyword">while</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (!isroot(t-&gt;</span>p)) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span>p)) &#123;</span><br><span class="line">                <span class="function"><span class="title">rotate</span>(t-&gt;</span>p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rotate(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line">void access(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Node *i = t, *q = nullptr; i; q = i, i = i-&gt;</span>p) &#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>ch[<span class="number">1</span>] = q;</span><br><span class="line">        pull(i);</span><br><span class="line">    &#125;</span><br><span class="line">    splay(t);</span><br><span class="line">&#125;</span><br><span class="line">void makeroot(Node *t) &#123;</span><br><span class="line">    access(t);</span><br><span class="line">    reverse(t);</span><br><span class="line">&#125;</span><br><span class="line">void link(Node *x, Node *y) &#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>p = y;</span><br><span class="line">&#125;</span><br><span class="line">void split(Node *x, Node *y) &#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    access(y);</span><br><span class="line">&#125;</span><br><span class="line">void cut(Node *x, Node *y) &#123;</span><br><span class="line">    split(x, y);</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">p</span> = y-&gt;</span>ch[<span class="number">0</span>] = nullptr;</span><br><span class="line">    pull(y);</span><br><span class="line">&#125;</span><br><span class="line">int dist(Node *x, Node *y) &#123;</span><br><span class="line">    split(x, y);</span><br><span class="line">    <span class="function"><span class="title">return</span> y-&gt;</span>siz - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1942/submission/254202464">2024-03-30</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">struct Matrix : std::array&lt;std::array&lt;i64, <span class="number">4</span>&gt;, <span class="number">4</span>&gt; &#123;</span><br><span class="line">    Matrix(i64 v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                (*this)[i][j] = (i == j ? v : inf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Matrix operator*(const Matrix &amp;a, const Matrix &amp;b) &#123;</span><br><span class="line">    Matrix c(inf);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                c[i][k] = std::min(c[i][k], a[i][j] + b[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c[i][<span class="number">3</span>] = std::min(c[i][<span class="number">3</span>], a[i][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    c[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">struct Node &#123;</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    i64 sumg = <span class="number">0</span>;</span><br><span class="line">    i64 sumh = <span class="number">0</span>;</span><br><span class="line">    i64 sumb = <span class="number">0</span>;</span><br><span class="line">    i64 g = <span class="number">0</span>;</span><br><span class="line">    i64 h = <span class="number">0</span>;</span><br><span class="line">    i64 b = <span class="number">0</span>;</span><br><span class="line">    Matrix mat;</span><br><span class="line">    Matrix prd;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; ans&#123;&#125;;</span><br><span class="line">    Node() : ch&#123;nullptr, nullptr&#125;, p(nullptr) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    void update() &#123;</span><br><span class="line">        mat = Matrix(inf);</span><br><span class="line">        mat[<span class="number">0</span>][<span class="number">0</span>] = b + h - g + sumg;</span><br><span class="line">        mat[<span class="number">1</span>][<span class="number">1</span>] = mat[<span class="number">1</span>][<span class="number">2</span>] = mat[<span class="number">1</span>][<span class="number">3</span>] = h + sumh;</span><br><span class="line">        mat[<span class="number">2</span>][<span class="number">0</span>] = mat[<span class="number">2</span>][<span class="number">1</span>] = mat[<span class="number">2</span>][<span class="number">2</span>] = mat[<span class="number">2</span>][<span class="number">3</span>] = b + h + sumb;</span><br><span class="line">        mat[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void push(Node *t) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">prd</span> = (t-&gt;</span><span class="function"><span class="title">ch</span>[0] ? t-&gt;</span><span class="function"><span class="title">ch</span>[0]-&gt;</span><span class="function"><span class="title">prd</span> : Matrix()) * t-&gt;</span><span class="function"><span class="title">mat</span> * (t-&gt;</span><span class="function"><span class="title">ch</span>[1] ? t-&gt;</span><span class="function"><span class="title">ch</span>[1]-&gt;</span>prd : Matrix());</span><br><span class="line">&#125;</span><br><span class="line">bool isroot(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span> == nullptr || (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">ch</span>[0] != t &amp;&amp; t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] != t);</span><br><span class="line">&#125;</span><br><span class="line">int pos(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line">void pushAll(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">pushAll</span>(t-&gt;</span>p);</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">&#125;</span><br><span class="line">void rotate(Node *t) &#123;</span><br><span class="line">    N<span class="function"><span class="title">ode</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[x]) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(q)) &#123;</span><br><span class="line">        <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">    pull(q);</span><br><span class="line">&#125;</span><br><span class="line">void splay(Node *t) &#123;</span><br><span class="line">    pushAll(t);</span><br><span class="line">    <span class="keyword">while</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (!isroot(t-&gt;</span>p)) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span>p)) &#123;</span><br><span class="line">                <span class="function"><span class="title">rotate</span>(t-&gt;</span>p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rotate(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">std::array&lt;i64, <span class="number">4</span>&gt; get(Node *t) &#123;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; ans;</span><br><span class="line">    ans.fill(inf);</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="function"><span class="title">ans</span>[i] = std::min(ans[i], t-&gt;</span>prd[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void access(Node *t) &#123;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; old&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Node *i = t, *q = nullptr; i; q = i, i = i-&gt;</span>p) &#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="function"><span class="title">if</span> (i-&gt;</span>ch[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="function"><span class="title">auto</span> res = get(i-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumg += res[<span class="number">0</span>];</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumh += std::min(&#123;res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]&#125;);</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumb += std::min(&#123;res[<span class="number">0</span>], res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>ch[<span class="number">1</span>] = q;</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumg -= old[<span class="number">0</span>];</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumh -= std::min(&#123;old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]&#125;);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumb -= std::min(&#123;old[<span class="number">0</span>], old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]&#125;);</span><br><span class="line">        old = get(i);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>update();</span><br><span class="line">        pull(i);</span><br><span class="line">    &#125;</span><br><span class="line">    splay(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="08-其他平衡树">08 - 其他平衡树</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63246177">2023-08-04</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int sum = <span class="number">0</span>;</span><br><span class="line">    int sumodd = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Node(Node *t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t) &#123;</span><br><span class="line">            *this = *t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, int l, int r, int x, int v) &#123;</span><br><span class="line">    t = new Node(t);</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>sum += v;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>sumodd += (x % <span class="number">2</span>) * v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">l</span> = add(t-&gt;</span>l, l, m, x, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">r</span> = add(t-&gt;</span>r, m, r, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query1(Node *t1, Node *t2, int l, int r, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> odd = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="title">int</span> cnt = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sum</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sum : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (odd &gt; <span class="number">0</span> || cnt &gt; k) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query1(t1 ? t1-&gt;</span><span class="function"><span class="title">r</span> : t1, t2 ? t2-&gt;</span>r : t2, m, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query1(t1 ? t1-&gt;</span><span class="function"><span class="title">l</span> : t1, t2 ? t2-&gt;</span>l : t2, l, m, k - cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::array&lt;int, <span class="number">3</span>&gt; query2(Node *t1, Node *t2, int l, int r, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">int</span> cnt = (t1 ? t1-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 ? t2-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">        return &#123;l, cnt, k&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> cnt = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; k) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query2(t1 ? t1-&gt;</span><span class="function"><span class="title">r</span> : t1, t2 ? t2-&gt;</span>r : t2, m, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query2(t1 ? t1-&gt;</span><span class="function"><span class="title">l</span> : t1, t2 ? t2-&gt;</span>l : t2, l, m, k - cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1864/submission/220558951">2023-08-26</a></p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        t = <span class="keyword">new</span> Node(*t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t = <span class="keyword">new</span> Node;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        t-&gt;l = add(t-&gt;l, l, m, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t-&gt;r = add(t-&gt;r, m, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> query(Node *t1, Node *t2, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = (t2 ? t2-&gt;cnt : <span class="number">0</span>) - (t1 ? t1-&gt;cnt : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || l &gt;= x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> res = query(t1 ? t1-&gt;r : t1, t2 ? t2-&gt;r : t2, m, r, x);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">        res = query(t1 ? t1-&gt;l : t1, t2 ? t2-&gt;l : t2, l, m, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/38/submission/200537139">2023-04-03</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">struct Info &#123;</span><br><span class="line">    int imp = <span class="number">0</span>;</span><br><span class="line">    int id = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info operator+(Info a, Info b) &#123;</span><br><span class="line">    return &#123;std::max(a.imp, b.imp), <span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Node &#123;</span><br><span class="line">    int w = rng();</span><br><span class="line">    Info info;</span><br><span class="line">    Info sum;</span><br><span class="line">    int siz = <span class="number">1</span>;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span>info;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>siz = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>l) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">sum</span> + t-&gt;</span>sum;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> += t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>r) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span><span class="function"><span class="title">sum</span> + t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sum;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> += t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;Node *, Node *&gt; splitAt(Node *t, int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return &#123;t, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (p &lt;= (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="function"><span class="title">auto</span> [l, r] = splitAt(t-&gt;</span>l, p);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = r;</span><br><span class="line">        pull(t);</span><br><span class="line">        return &#123;l, t&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">auto</span> [l, r] = splitAt(t-&gt;</span><span class="function"><span class="title">r</span>, p - 1 - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>));</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = l;</span><br><span class="line">        pull(t);</span><br><span class="line">        return &#123;t, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insertAt(Node *&amp;t, int p, Node *x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        t = x;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (x-&gt;</span><span class="function"><span class="title">w</span> &lt; t-&gt;</span>w) &#123;</span><br><span class="line">        auto [l, r] = splitAt(t, p);</span><br><span class="line">        t = x;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = l;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = r;</span><br><span class="line">        pull(t);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (p &lt;= (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="function"><span class="title">insertAt</span>(t-&gt;</span>l, p, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">insertAt</span>(t-&gt;</span><span class="function"><span class="title">r</span>, p - 1 - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>), x);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *merge(Node *a, Node *b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">if</span> (a-&gt;</span><span class="function"><span class="title">w</span> &lt; b-&gt;</span>w) &#123;</span><br><span class="line">        <span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">r</span> = merge(a-&gt;</span>r, b);</span><br><span class="line">        pull(a);</span><br><span class="line">        return a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">b</span>-&gt;</span><span class="function"><span class="title">l</span> = merge(a, b-&gt;</span>l);</span><br><span class="line">        pull(b);</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(Node *t, int v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>sum.imp &lt; v) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> t-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">int</span> res = query(t-&gt;</span>r, v);</span><br><span class="line">    <span class="function"><span class="title">if</span> (res != (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>info.imp &gt; v) &#123;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">return</span> res + 1 + query(t-&gt;</span>l, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">dfs</span>(t-&gt;</span>l);</span><br><span class="line">    <span class="function"><span class="title">std</span>::cout &lt;&lt; t-&gt;</span>info.id <span class="string">&lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">    dfs(t-&gt;r);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63162242">2023-07-31</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int cnt = <span class="number">0</span>;</span><br><span class="line">    int cntnew = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(int l, int r, int x, int isnew) &#123;</span><br><span class="line">    Node *t = new Node;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>cntnew = isnew;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = add(l, m, x, isnew);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = add(m, r, x, isnew);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Info &#123;</span><br><span class="line">    Node *t = nullptr;</span><br><span class="line">    int psum = <span class="number">0</span>;</span><br><span class="line">    bool rev = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">cnt</span> = (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">cnt</span> : 0) + (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt : <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">cntnew</span> = (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">cntnew</span> : 0) + (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cntnew : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;Node *, Node *&gt; split(Node *t, int l, int r, int x, bool rev) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return &#123;t, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        return &#123;nullptr, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (x == t-&gt;</span>cnt) &#123;</span><br><span class="line">        return &#123;t, nullptr&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        Node *t2 = new Node;</span><br><span class="line">        <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">cnt</span> = t-&gt;</span>cnt - x;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>cnt = x;</span><br><span class="line">        return &#123;t, t2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *t2 = new Node;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (!rev) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">l</span> &amp;&amp; x &lt;= t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>cnt) &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span><span class="function"><span class="title">l</span>) = split(t-&gt;</span>l, l, m, x, rev);</span><br><span class="line">            <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">r</span> = t-&gt;</span>r;</span><br><span class="line">            <span class="function"><span class="title">t</span>-&gt;</span>r = nullptr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span><span class="function"><span class="title">r</span>) = split(t-&gt;</span><span class="function"><span class="title">r</span>, m, r, x - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>cnt : <span class="number">0</span>), rev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">r</span> &amp;&amp; x &lt;= t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt) &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span><span class="function"><span class="title">r</span>) = split(t-&gt;</span>r, m, r, x, rev);</span><br><span class="line">            <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">l</span> = t-&gt;</span>l;</span><br><span class="line">            <span class="function"><span class="title">t</span>-&gt;</span>l = nullptr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span><span class="function"><span class="title">l</span>) = split(t-&gt;</span><span class="function"><span class="title">l</span>, l, m, x - (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt : <span class="number">0</span>), rev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">    pull(t2);</span><br><span class="line">    return &#123;t, t2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *merge(Node *t1, Node *t2, int l, int r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t1) &#123;</span><br><span class="line">        return t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!t2) &#123;</span><br><span class="line">        return t1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">cnt</span> += t2-&gt;</span>cnt;</span><br><span class="line">        <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">cntnew</span> += t2-&gt;</span>cntnew;</span><br><span class="line">        delete t2;</span><br><span class="line">        return t1;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">l</span> = merge(t1-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span>l, l, m);</span><br><span class="line">    <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">r</span> = merge(t1-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span>r, m, r);</span><br><span class="line">    delete t2;</span><br><span class="line">    pull(t1);</span><br><span class="line">    return t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="09-分数四则运算（Frac）">09 - 分数四则运算（Frac）</h2><p><a href="https://codeforces.com/contest/598/submission/203186397">2023-04-23</a></p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">template</span><span class="operator">&lt;</span><span class="keyword">class</span> <span class="title class_">T</span><span class="operator">&gt;</span></span><br><span class="line"><span class="variable">struct</span> <span class="title class_">Frac</span> &#123;</span><br><span class="line">    <span class="variable">T</span> <span class="variable">num</span>;</span><br><span class="line">    <span class="variable">T</span> <span class="variable">den</span>;</span><br><span class="line">    <span class="title class_">Frac</span>(<span class="variable">T</span> <span class="variable">num_</span>, <span class="variable">T</span> <span class="variable">den_</span>) : <span class="title function_">num</span>(<span class="variable">num_</span>), <span class="title function_">den</span>(<span class="params">den_</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">den</span> <span class="operator">&lt;</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">den</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">den</span>;</span><br><span class="line">            <span class="variable">num</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">num</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span>() : <span class="title class_">Frac</span>(<span class="number">0</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="title class_">Frac</span>(<span class="variable">T</span> <span class="variable">num_</span>) : <span class="title class_">Frac</span>(<span class="variable">num_</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="variable">explicit</span> <span class="variable">operator</span> <span class="title function_">double</span>() <span class="title function_">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.</span> <span class="operator">*</span> <span class="variable">num</span> / <span class="variable">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">+</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">=</span> <span class="variable">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">+</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">-</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">=</span> <span class="variable">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">-</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">*</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">num</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span>/<span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">num</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">den</span> <span class="operator">&lt;</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">num</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">num</span>;</span><br><span class="line">            <span class="variable">den</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">den</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">+</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">+</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">-</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">-</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">*</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span>/(<span class="title class_">Frac</span> <span class="variable">lhs</span>, <span class="variable">const</span> <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> /<span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">-</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Frac</span>(<span class="operator">-</span><span class="variable">a</span>.<span class="property">num</span>, <span class="variable">a</span>.<span class="property">den</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">==</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">==</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator!</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">!=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&lt;</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&lt;</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&gt;</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&gt;</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&lt;=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&lt;=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&gt;=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&gt;=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">std</span>::<span class="variable">ostream</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="title function_">&lt;&lt;</span>(<span class="params">std</span>::<span class="params">ostream</span> &amp;<span class="params">os</span>, <span class="params">Frac</span> <span class="params">x</span>) &#123;</span><br><span class="line">        <span class="variable">T</span> <span class="variable">g</span> <span class="operator">=</span> <span class="variable">std</span>::<span class="title function_">gcd</span>(<span class="variable">x</span>.<span class="property">num</span>, <span class="variable">x</span>.<span class="property">den</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">x</span>.<span class="property">den</span> <span class="operator">==</span> <span class="variable">g</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">os</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">num</span> / <span class="variable">g</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">os</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">num</span> / <span class="variable">g</span> <span class="operator">&lt;&lt;</span> <span class="string">&quot;/&quot;</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">den</span> / <span class="variable">g</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-线性基（Basis）">10 - 线性基（Basis）</h2><p><a href="https://codeforces.com/contest/1902/submission/235594491">2023-12-03</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Basis</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> t[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Basis</span>() &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(t, t + <span class="number">20</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">1E9</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y &gt; t[i]) &#123;</span><br><span class="line">                    std::<span class="built_in">swap</span>(a[i], x);</span><br><span class="line">                    std::<span class="built_in">swap</span>(t[i], y);</span><br><span class="line">                &#125;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i &amp; <span class="number">1</span>) &amp;&amp; t[i] &gt;= y) &#123;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="五、字符串">五、字符串</h1><h2 id="01A-马拉车（Manacher-旧版）">01A - 马拉车（Manacher 旧版）</h2><p><a href="https://codeforces.com/contest/1827/submission/205865086">2023-05-14</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s<span class="symbol">td:</span><span class="symbol">:ve</span>ctor&lt;<span class="built_in">int</span>&gt; manacher(s<span class="symbol">td:</span><span class="symbol">:st</span>ring s) &#123;</span><br><span class="line">    s<span class="symbol">td:</span><span class="symbol">:st</span>ring <span class="built_in">t</span> = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    for (auto c <span class="symbol">:</span> s) &#123;</span><br><span class="line">        <span class="built_in">t</span> += c;</span><br><span class="line">        <span class="built_in">t</span> += &#x27;#&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = t.size();</span><br><span class="line">    s<span class="symbol">td:</span><span class="symbol">:ve</span>ctor&lt;<span class="built_in">int</span>&gt; r(<span class="built_in">n</span>);</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) &#123;</span><br><span class="line">            r[i] = s<span class="symbol">td:</span><span class="symbol">:mi</span><span class="built_in">n</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        while (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; <span class="built_in">n</span> &amp;&amp; <span class="built_in">t</span>[i - r[i]] == <span class="built_in">t</span>[i + r[i]]) &#123;</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">if</span> (i + r[i] &gt; j + r[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="01B-马拉车（Manacher-新版）">01B - 马拉车（Manacher 新版）</h2><p><a href="https://atcoder.jp/contests/abc349/submissions/52365777">2024-04-14</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; s)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; t&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        t.<span class="built_in">push_back</span>(c);</span><br><span class="line">        t.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) &#123;</span><br><span class="line">            r[i] = std::<span class="built_in">min</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; n &amp;&amp; t[i - r[i]] == t[i + r[i]]) &#123;</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + r[i] &gt; j + r[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="02-Z函数">02 - Z函数</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63378373">2023-08-11</a></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;int&gt; zFunction(std::string s) &#123;</span><br><span class="line">    int n = s.size();</span><br><span class="line">    std::vector&lt;int&gt; z(n + 1);</span><br><span class="line">    z<span class="comment">[0]</span> = n;</span><br><span class="line">    for (int i = 1, j = 1; i &lt; n; i++) &#123;</span><br><span class="line">        z<span class="comment">[i]</span> = std::max(0, std::min(j + z<span class="comment">[j]</span> - i, z<span class="comment">[i - j]</span>));</span><br><span class="line">        while (i + z<span class="comment">[i]</span> &lt; n &amp;&amp; s<span class="comment">[z<span class="comment">[i]</span>]</span> == s<span class="comment">[i + z<span class="comment">[i]</span>]</span>) &#123;</span><br><span class="line">            z<span class="comment">[i]</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i + z<span class="comment">[i]</span> &gt; j + z<span class="comment">[j]</span>) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="03-后缀数组（SA）">03 - 后缀数组（SA）</h2><p><a href="https://atcoder.jp/contests/discovery2016-qual/submissions/39727257">2023-03-14</a></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">struct SuffixArray &#123;</span><br><span class="line">    int n;</span><br><span class="line">    std::vector&lt;int&gt; sa, rk, lc;</span><br><span class="line">    SuffixArray(const std::string &amp;s) &#123;</span><br><span class="line">        n = s.length();</span><br><span class="line">        sa.resize(n);</span><br><span class="line">        lc.resize(n - 1);</span><br><span class="line">        rk.resize(n);</span><br><span class="line">        std::iota(sa.begin(), sa.end(), 0);</span><br><span class="line">        std::sort(sa.begin(), sa.end(), <span class="comment">[&amp;]</span>(int a, int b) &#123;return s<span class="comment">[a]</span> &lt; s<span class="comment">[b]</span>;&#125;);</span><br><span class="line">        rk<span class="comment">[sa<span class="comment">[0]</span>]</span> = 0;</span><br><span class="line">        for (int i = 1; i &lt; n; ++i)</span><br><span class="line">            rk<span class="comment">[sa<span class="comment">[i]</span>]</span> = rk<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> + (s<span class="comment">[sa<span class="comment">[i]</span>]</span> != s<span class="comment">[sa<span class="comment">[i - 1]</span>]</span>);</span><br><span class="line">        int k = 1;</span><br><span class="line">        std::vector&lt;int&gt; tmp, cnt(n);</span><br><span class="line">        tmp.reserve(n);</span><br><span class="line">        while (rk<span class="comment">[sa<span class="comment">[n - 1]</span>]</span> &lt; n - 1) &#123;</span><br><span class="line">            tmp.clear();</span><br><span class="line">            for (int i = 0; i &lt; k; ++i)</span><br><span class="line">                tmp.push_back(n - k + i);</span><br><span class="line">            for (auto i : sa)</span><br><span class="line">                if (i &gt;= k)</span><br><span class="line">                    tmp.push_back(i - k);</span><br><span class="line">            std::fill(cnt.begin(), cnt.end(), 0);</span><br><span class="line">            for (int i = 0; i &lt; n; ++i)</span><br><span class="line">                ++cnt<span class="comment">[rk<span class="comment">[i]</span>]</span>;</span><br><span class="line">            for (int i = 1; i &lt; n; ++i)</span><br><span class="line">                cnt<span class="comment">[i]</span> += cnt<span class="comment">[i - 1]</span>;</span><br><span class="line">            for (int i = n - 1; i &gt;= 0; --i)</span><br><span class="line">                sa<span class="comment">[--cnt<span class="comment">[rk<span class="comment">[tmp<span class="comment">[i]</span>]</span>]</span>]</span> = tmp<span class="comment">[i]</span>;</span><br><span class="line">            std::swap(rk, tmp);</span><br><span class="line">            rk<span class="comment">[sa<span class="comment">[0]</span>]</span> = 0;</span><br><span class="line">            for (int i = 1; i &lt; n; ++i)</span><br><span class="line">                rk<span class="comment">[sa<span class="comment">[i]</span>]</span> = rk<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> + (tmp<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> &lt; tmp<span class="comment">[sa<span class="comment">[i]</span>]</span> || sa<span class="comment">[i - 1]</span> + k == n || tmp<span class="comment">[sa<span class="comment">[i - 1]</span> + k]</span> &lt; tmp<span class="comment">[sa<span class="comment">[i]</span> + k]</span>);</span><br><span class="line">            k *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0, j = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            if (rk<span class="comment">[i]</span> == 0) &#123;</span><br><span class="line">                j = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for (j -= j &gt; 0; i + j &lt; n &amp;&amp; sa<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> + j &lt; n &amp;&amp; s<span class="comment">[i + j]</span> == s<span class="comment">[sa<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> + j]</span>; )</span><br><span class="line">                    ++j;</span><br><span class="line">                lc<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="04A-后缀自动机（SuffixAutomaton-旧版）">04A - 后缀自动机（SuffixAutomaton 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=53409023&amp;returnHomeType=1&amp;uid=329687984">2022-08-17</a></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">struct SuffixAutomaton &#123;</span><br><span class="line">    static constexpr int ALPHABET_SIZE = 26, N = 5e5;</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        int len;</span><br><span class="line">        int link;</span><br><span class="line">        int next<span class="comment">[ALPHABET_SIZE]</span>;</span><br><span class="line">        Node() : len(0), link(0), next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125; t<span class="comment">[2 * N]</span>;</span><br><span class="line">    int cntNodes;</span><br><span class="line">    SuffixAutomaton() &#123;</span><br><span class="line">        cntNodes = 1;</span><br><span class="line">        std::fill(t<span class="comment">[0]</span>.next, t<span class="comment">[0]</span>.next + ALPHABET_SIZE, 1);</span><br><span class="line">        t<span class="comment">[0]</span>.len = -1;</span><br><span class="line">    &#125;</span><br><span class="line">    int extend(int p, int c) &#123;</span><br><span class="line">        if (t<span class="comment">[p]</span>.next<span class="comment">[c]</span>) &#123;</span><br><span class="line">            int q = t<span class="comment">[p]</span>.next<span class="comment">[c]</span>;</span><br><span class="line">            if (t<span class="comment">[q]</span>.len == t<span class="comment">[p]</span>.len + 1)</span><br><span class="line">                return q;</span><br><span class="line">            int r = ++cntNodes;</span><br><span class="line">            t<span class="comment">[r]</span>.len = t<span class="comment">[p]</span>.len + 1;</span><br><span class="line">            t<span class="comment">[r]</span>.link = t<span class="comment">[q]</span>.link;</span><br><span class="line">            std::copy(t<span class="comment">[q]</span>.next, t<span class="comment">[q]</span>.next + ALPHABET_SIZE, t<span class="comment">[r]</span>.next);</span><br><span class="line">            t<span class="comment">[q]</span>.link = r;</span><br><span class="line">            while (t<span class="comment">[p]</span>.next<span class="comment">[c]</span> == q) &#123;</span><br><span class="line">                t<span class="comment">[p]</span>.next<span class="comment">[c]</span> = r;</span><br><span class="line">                p = t<span class="comment">[p]</span>.link;</span><br><span class="line">            &#125;</span><br><span class="line">            return r;</span><br><span class="line">        &#125;</span><br><span class="line">        int cur = ++cntNodes;</span><br><span class="line">        t<span class="comment">[cur]</span>.len = t<span class="comment">[p]</span>.len + 1;</span><br><span class="line">        while (!t<span class="comment">[p]</span>.next<span class="comment">[c]</span>) &#123;</span><br><span class="line">            t<span class="comment">[p]</span>.next<span class="comment">[c]</span> = cur;</span><br><span class="line">            p = t<span class="comment">[p]</span>.link;</span><br><span class="line">        &#125;</span><br><span class="line">        t<span class="comment">[cur]</span>.link = extend(p, c);</span><br><span class="line">        return cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="04B-后缀自动机（SAM-新版）">04B - 后缀自动机（SAM 新版）</h2><p><a href="https://cf.dianhsu.com/gym/104353/submission/207318083">2023-05-27</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">struct SAM &#123;</span><br><span class="line">    static constexpr <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::<span class="keyword">array</span>&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        Node() : len&#123;&#125;, link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    SAM() &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init() &#123;</span><br><span class="line">        t.assign(<span class="number">2</span>, Node());</span><br><span class="line">        t[<span class="number">0</span>].next.fill(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> newNode() &#123;</span><br><span class="line">        t.emplace_back();</span><br><span class="line">        <span class="keyword">return</span> t.size() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> extend(<span class="type">int</span> p, <span class="type">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[p].next[c]) &#123;</span><br><span class="line">            <span class="type">int</span> q = t[p].next[c];</span><br><span class="line">            <span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> r = newNode();</span><br><span class="line">            t[r].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            t[r].link = t[q].link;</span><br><span class="line">            t[r].next = t[q].next;</span><br><span class="line">            t[q].link = r;</span><br><span class="line">            <span class="keyword">while</span> (t[p].next[c] == q) &#123;</span><br><span class="line">                t[p].next[c] = r;</span><br><span class="line">                p = t[p].link;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = newNode();</span><br><span class="line">        t[cur].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!t[p].next[c]) &#123;</span><br><span class="line">            t[p].next[c] = cur;</span><br><span class="line">            p = t[p].link;</span><br><span class="line">        &#125;</span><br><span class="line">        t[cur].link = extend(p, c);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> extend(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> <span class="keyword">offset</span> = <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> extend(p, c - <span class="keyword">offset</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> next(<span class="type">int</span> p, <span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> next(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> <span class="keyword">offset</span> = <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return next</span>(p, c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> link(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> size() &#123;</span><br><span class="line">        <span class="keyword">return</span> t.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="05-回文自动机（PAM）">05 - 回文自动机（PAM）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62237107&amp;returnHomeType=1&amp;uid=329687984">2023-05-19</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, cnt&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    <span class="type">int</span> suff;</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="built_in">PAM</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">        suff = <span class="number">1</span>;</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(<span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = s.<span class="built_in">size</span>();</span><br><span class="line">        s += c;</span><br><span class="line">        <span class="type">int</span> let = c - offset;</span><br><span class="line">        <span class="type">int</span> cur = suff, curlen = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos])</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">if</span> (t[cur].next[let]) &#123;  </span><br><span class="line">            suff = t[cur].next[let];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">newNode</span>();</span><br><span class="line">        suff = num;</span><br><span class="line">        t[num].len = t[cur].len + <span class="number">2</span>;</span><br><span class="line">        t[cur].next[let] = num;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (t[num].len == <span class="number">1</span>) &#123;</span><br><span class="line">            t[num].link = <span class="number">1</span>;</span><br><span class="line">            t[num].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos]) &#123;</span><br><span class="line">                t[num].link = t[cur].next[let];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;           </span><br><span class="line"> </span><br><span class="line">        t[num].cnt = <span class="number">1</span> + t[t[num].link].cnt;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PAM pam;</span><br></pre></td></tr></table></figure><h2 id="06A-AC自动机（AC-旧版）">06A - AC自动机（AC 旧版）</h2><p><a href="https://codeforces.com/contest/710/submission/121661266">2021-07-07</a></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">constexpr int <span class="symbol">N</span> = <span class="number">3e5</span> + <span class="number">30</span>, <span class="symbol">A</span> = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">struct <span class="symbol">Node</span> &#123;</span><br><span class="line">    int fail;</span><br><span class="line">    int sum;</span><br><span class="line">    int next[<span class="symbol">A</span>];</span><br><span class="line">    <span class="symbol">Node</span>() : fail(<span class="number">-1</span>), sum(<span class="number">0</span>) &#123;</span><br><span class="line">        std::memset(next, <span class="number">-1</span>, sizeof(next));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; node[<span class="symbol">N</span>];</span><br><span class="line"></span><br><span class="line">int cnt = <span class="number">0</span>;</span><br><span class="line">int bin[<span class="symbol">N</span>];</span><br><span class="line">int nBin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">int newNode() &#123;</span><br><span class="line">    int p = nBin &gt; <span class="number">0</span> ? bin[--nBin] : cnt++;</span><br><span class="line">    node[p] = <span class="symbol">Node</span>();</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct <span class="symbol">AC</span> &#123;</span><br><span class="line">    std::vector&lt;int&gt; x;</span><br><span class="line">    <span class="symbol">AC</span>(<span class="symbol">AC</span> &amp;&amp;a) : x(std::move(a.x)) &#123;&#125;</span><br><span class="line">    <span class="symbol">AC</span>(std::vector&lt;std::string&gt; s, std::vector&lt;int&gt; w) &#123;</span><br><span class="line">        x = &#123;newNode(), newNode()&#125;;</span><br><span class="line">        std::fill(node[x[<span class="number">0</span>]].next, node[x[<span class="number">0</span>]].next + <span class="symbol">A</span>, x[<span class="number">1</span>]);</span><br><span class="line">        node[x[<span class="number">1</span>]].fail = x[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; int(s.size()); i++) &#123;</span><br><span class="line">            int p = x[<span class="number">1</span>];</span><br><span class="line">            for (int j = <span class="number">0</span>; j &lt; int(s[i].length()); j++) &#123;</span><br><span class="line">                int c = s[i][j] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                if (node[p].next[c] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    int u = newNode();</span><br><span class="line">                    x.push_back(u);</span><br><span class="line">                    node[p].next[c] = u;</span><br><span class="line">                &#125;</span><br><span class="line">                p = node[p].next[c];</span><br><span class="line">            &#125;</span><br><span class="line">            node[p].sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;int&gt; que;</span><br><span class="line">        que.push(x[<span class="number">1</span>]);</span><br><span class="line">        while (!que.empty()) &#123;</span><br><span class="line">            int u = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            node[u].sum += node[node[u].fail].sum;</span><br><span class="line">            for (int c = <span class="number">0</span>; c &lt; <span class="symbol">A</span>; c++) &#123;</span><br><span class="line">                if (node[u].next[c] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    node[u].next[c] = node[node[u].fail].next[c];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    node[node[u].next[c]].fail = node[node[u].fail].next[c];</span><br><span class="line">                    que.push(node[u].next[c]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="symbol">AC</span>() &#123;</span><br><span class="line">        for (auto p : x) &#123;</span><br><span class="line">            bin[nBin++] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i64 query(const std::string &amp;s) const &#123;</span><br><span class="line">        i64 ans = <span class="number">0</span>;</span><br><span class="line">        int p = x[<span class="number">1</span>];</span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; int(s.length()); i++)  &#123;</span><br><span class="line">            int c = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            p = node[p].next[c];</span><br><span class="line">            ans += node[p].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="06B-AC自动机（AhoCorasick-新版）">06B - AC自动机（AhoCorasick 新版）</h2><p><a href="https://codeforces.com/contest/1801/submission/201155712">2023-04-07</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) &#123;</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            b[i] = a[i] - offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="06C-AC自动机（AhoCorasick-新新版）">06C - AC自动机（AhoCorasick 新新版）</h2><p><a href="https://www.luogu.com.cn/record/155114676">2024-04-09</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;<span class="number">0</span>&#125;, link&#123;<span class="number">0</span>&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : a) &#123;</span><br><span class="line">            <span class="type">int</span> x = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) &#123;</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="07-随机生成模底-字符串哈希（例题）">07 - 随机生成模底 字符串哈希（例题）</h2><p><a href="https://codeforces.com/contest/1598/submission/160006998">2022-06-09</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i64 = long long;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isprime(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> findPrime(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!isprime(n)) &#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Hash = std::<span class="keyword">array</span>&lt;<span class="type">int</span>, <span class="number">2</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    </span><br><span class="line">    std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());</span><br><span class="line">    </span><br><span class="line">    const <span class="type">int</span> P = findPrime(rng() % <span class="number">900000000</span> + <span class="number">100000000</span>);</span><br><span class="line">    </span><br><span class="line">    std::string s, x;</span><br><span class="line">    std::cin &gt;&gt; s &gt;&gt; x;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n = s.length();</span><br><span class="line">    <span class="type">int</span> m = x.length();</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; h(n + <span class="number">1</span>), p(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        h[i + <span class="number">1</span>] = (<span class="number">10</span>LL * h[i] + s[i] - <span class="string">&#x27;0&#x27;</span>) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p[i + <span class="number">1</span>] = <span class="number">10</span>LL * p[i] % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto <span class="keyword">get</span> = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> (h[r] + <span class="number">1</span>LL * (P - h[l]) * p[r - l]) % P;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> px = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (auto c : x) &#123;</span><br><span class="line">        px = (<span class="number">10</span>LL * px + c - <span class="string">&#x27;0&#x27;</span>) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> * (m - <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">get</span>(i, i + m - <span class="number">1</span>) + <span class="keyword">get</span>(i + m - <span class="number">1</span>, i + <span class="number">2</span> * m - <span class="number">2</span>)) % P == px) &#123;</span><br><span class="line">            std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m - <span class="number">1</span> &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            std::cout &lt;&lt; i + m &lt;&lt; &quot; &quot; &lt;&lt; i + <span class="number">2</span> * m - <span class="number">2</span> &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; z(m + <span class="number">1</span>), f(n + <span class="number">1</span>);</span><br><span class="line">    z[<span class="number">0</span>] = m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) &#123;</span><br><span class="line">            z[i] = std::max(<span class="number">0</span>, std::min(j + z[j] - i, z[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (z[i] + i &lt; m &amp;&amp; x[z[i]] == x[z[i] + i]) &#123;</span><br><span class="line">            z[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + z[i] &gt; j + z[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) &#123;</span><br><span class="line">            f[i] = std::max(<span class="number">0</span>, std::min(j + f[j] - i, z[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (f[i] + i &lt; n &amp;&amp; f[i] &lt; m &amp;&amp; x[f[i]] == s[f[i] + i]) &#123;</span><br><span class="line">            f[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + f[i] &gt; j + f[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = std::min(m, f[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (auto j : &#123; m - l, m - l - <span class="number">1</span> &#125;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= i &amp;&amp; (<span class="keyword">get</span>(i - j, i) + <span class="keyword">get</span>(i, i + m)) % P == px) &#123;</span><br><span class="line">                std::cout &lt;&lt; i - j + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + m + j &lt;= n &amp;&amp; (<span class="keyword">get</span>(i, i + m) + <span class="keyword">get</span>(i + m, i + m + j)) % P == px) &#123;</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                std::cout &lt;&lt; i + m + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m + j &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Jiangly算法模板收集</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="算法模板" scheme="http://chfychin.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="http://chfychin.cn/posts/4d712855.html"/>
    <id>http://chfychin.cn/posts/4d712855.html</id>
    <published>2024-09-14T13:03:44.000Z</published>
    <updated>2024-09-16T16:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建数据表">创建数据表</h1><h2 id="学生基本信息表student">学生基本信息表student</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>sno</td><td>Varchar2(8)</td><td>Primary key</td><td>学号</td></tr><tr><td>sname</td><td>Varchar2(8)</td><td>Not null</td><td>姓名</td></tr><tr><td>ssex</td><td>Varchar2(2)</td><td>‘男’或’女’</td><td>性别</td></tr><tr><td>sbirthday</td><td>date</td><td></td><td>出生日期</td></tr><tr><td>classno</td><td>Varchar2(6)</td><td>Foreign key</td><td>班级号</td></tr><tr><td>Totalcredit</td><td>Smallint</td><td>初值为0</td><td>已选修的总学分</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sno <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    ssex <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span> (ssex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>)) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    sbirthday <span class="type">DATE</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    classno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;班级号&#x27;</span>,</span><br><span class="line">    Totalcredit <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;已选修的总学分&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> class(classno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="班级信息表class">班级信息表class</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>classno</td><td>Varchar2(6)</td><td>Primary key</td><td>班级号</td></tr><tr><td>classname</td><td>Varchar(20)</td><td>Not null</td><td>班级名称</td></tr><tr><td>classmajor</td><td>Varchar2(20)</td><td></td><td>所属专业</td></tr><tr><td>classdept</td><td>Varchar2(20)</td><td></td><td>所属系别</td></tr><tr><td>studentnumber</td><td>smallint</td><td>[20…40]</td><td>学生数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class (</span><br><span class="line">    classno <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;班级号&#x27;</span>,</span><br><span class="line">    classname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级名称&#x27;</span>,</span><br><span class="line">    classmajor <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;所属专业&#x27;</span>,</span><br><span class="line">    classdept <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;所属系别&#x27;</span>,</span><br><span class="line">    studentnumber <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (studentnumber <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span>) COMMENT <span class="string">&#x27;学生数&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="课程信息表course">课程信息表course</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>cno</td><td>Varchar2 (6)</td><td>Primary key</td><td>课程号</td></tr><tr><td>cname</td><td>Varchar(30) Not null</td><td>课程名称</td><td></td></tr><tr><td>ccredit</td><td>smallint</td><td>[1…4]</td><td>学分</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    cname <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    ccredit <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (ccredit <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span>) COMMENT <span class="string">&#x27;学分&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="选修课程信息表sc">选修课程信息表sc</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>sno</td><td>varchar (8)</td><td>Foreign key</td><td>学号</td></tr><tr><td>cno</td><td>varchar (6)</td><td>Foreign key</td><td>课程号</td></tr><tr><td>grade</td><td>integer</td><td>[0…100]</td><td>成绩</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc (</span><br><span class="line">    sno <span class="type">VARCHAR</span>(<span class="number">8</span>) COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    grade <span class="type">INTEGER</span> <span class="keyword">CHECK</span> (grade <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>) COMMENT <span class="string">&#x27;成绩&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sno) <span class="keyword">REFERENCES</span> student(sno),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="教师信息表teacher">教师信息表teacher</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>tno</td><td>Number(6)</td><td>Primary key</td><td>教师号</td></tr><tr><td>tname</td><td>Varchar2(8)</td><td>Not null</td><td>教师姓名</td></tr><tr><td>tsex</td><td>Varchar2(2)</td><td>‘男’或’女’</td><td>性别</td></tr><tr><td>tbirthday</td><td>date</td><td></td><td>出生日期</td></tr><tr><td>ttitle</td><td>Varchar2(20)</td><td></td><td>职称</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">    tno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;教师号&#x27;</span>,</span><br><span class="line">    tname <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;教师姓名&#x27;</span>,</span><br><span class="line">    tsex <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span> (tsex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>)) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    tbirthday <span class="type">DATE</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    ttitle <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;职称&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="教师任课情况表teaching">教师任课情况表teaching</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>tno</td><td>Number(6)</td><td>Foreign key</td><td>教师号</td></tr><tr><td>cno</td><td>Varchar (6)</td><td>Foreign key</td><td>课程号</td></tr><tr><td>language</td><td>Varchar2 (10)</td><td>Chinese, Bilingual, English</td><td>授课语言</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teaching (</span><br><span class="line">    tno <span class="type">INT</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;教师号&#x27;</span>,</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    <span class="keyword">language</span> <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">CHECK</span> (<span class="keyword">language</span> <span class="keyword">IN</span> (<span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Bilingual&#x27;</span>, <span class="string">&#x27;English&#x27;</span>)) COMMENT <span class="string">&#x27;授课语言&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (tno) <span class="keyword">REFERENCES</span> teacher(tno),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="插入数据">插入数据</h1><h2 id="表student">表student</h2><table><thead><tr><th>sno</th><th>sname</th><th>ssex</th><th>sbirthday</th><th>classno</th></tr></thead><tbody><tr><td>08300010</td><td>李在</td><td>男</td><td>1991-10-1</td><td>Rj0801</td></tr><tr><td>08300012</td><td>葛畅</td><td>男</td><td>1990-8-8</td><td>Rj0801</td></tr><tr><td>08300015</td><td>刘晶</td><td>女</td><td>1990-5-22</td><td>Rj0801</td></tr><tr><td>08300020</td><td>杨敏</td><td>女</td><td>1989-1-8</td><td>Rj0801</td></tr><tr><td>08300030</td><td>胡贤斌</td><td>男</td><td>1990-10-8</td><td>Rj0801</td></tr><tr><td>08300048</td><td>赵鸿泽</td><td>男</td><td>1989-6-6</td><td>Rj0802</td></tr><tr><td>08300050</td><td>王威</td><td>男</td><td>1990-6-10</td><td>Rj0802</td></tr><tr><td>08300067</td><td>赵玮</td><td>女</td><td>1990-8-21</td><td>Rj0803</td></tr><tr><td>08300075</td><td>王娜娜</td><td>女</td><td>1991-9-23</td><td>Rj0803</td></tr><tr><td>08300088</td><td>秦键</td><td>男</td><td>1989-3-1</td><td>Rj0803</td></tr><tr><td>08300100</td><td>田邦仪</td><td>女</td><td>1990-2-26</td><td>Rj0804</td></tr><tr><td>08300148</td><td>赵心砚</td><td>男</td><td>1991-4-25</td><td>Rj0805</td></tr><tr><td>08300150</td><td>杨青</td><td>女</td><td>1989-11-15</td><td>Rj0805</td></tr><tr><td>08300160</td><td>杨玲玲</td><td>女</td><td>1990-12-12</td><td>Rj0806</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sno, sname, ssex, sbirthday, classno) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;08300010&#x27;</span>, <span class="string">&#x27;李在&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1991-10-1&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300012&#x27;</span>, <span class="string">&#x27;葛畅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-8-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300015&#x27;</span>, <span class="string">&#x27;刘晶&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-5-22&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300020&#x27;</span>, <span class="string">&#x27;杨敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1989-1-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300030&#x27;</span>, <span class="string">&#x27;胡贤斌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-10-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300048&#x27;</span>, <span class="string">&#x27;赵鸿泽&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1989-6-6&#x27;</span>, <span class="string">&#x27;Rj0802&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300050&#x27;</span>, <span class="string">&#x27;王威&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-6-10&#x27;</span>, <span class="string">&#x27;Rj0802&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300067&#x27;</span>, <span class="string">&#x27;赵玮&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-8-21&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300075&#x27;</span>, <span class="string">&#x27;王娜娜&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1991-9-23&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300088&#x27;</span>, <span class="string">&#x27;秦键&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1989-3-1&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300100&#x27;</span>, <span class="string">&#x27;田邦仪&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-2-26&#x27;</span>, <span class="string">&#x27;Rj0804&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300148&#x27;</span>, <span class="string">&#x27;赵心砚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1991-4-25&#x27;</span>, <span class="string">&#x27;Rj0805&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300150&#x27;</span>, <span class="string">&#x27;杨青&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1989-11-15&#x27;</span>, <span class="string">&#x27;Rj0805&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300160&#x27;</span>, <span class="string">&#x27;杨玲玲&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-12-12&#x27;</span>, <span class="string">&#x27;Rj0806&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="表class">表class</h2><table><thead><tr><th>classno</th><th>classname</th><th>Classs-major</th><th>classdept</th><th>studentnumber</th></tr></thead><tbody><tr><td>Rj0801</td><td>软件0801</td><td>软件工程</td><td>软件开发</td><td>24</td></tr><tr><td>Rj0802</td><td>软件0802</td><td>软件工程</td><td>软件开发</td><td>26</td></tr><tr><td>Rj0803</td><td>软件0803</td><td>软件工程</td><td>数字媒体</td><td>25</td></tr><tr><td>Rj0804</td><td>软件0804</td><td>软件工程</td><td>软件开发</td><td>25</td></tr><tr><td>Rj0805</td><td>软件0805</td><td>软件工程</td><td>数字媒体</td><td>24</td></tr><tr><td>Rj0806</td><td>软件0806</td><td>软件工程</td><td>软件开发</td><td>24</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class (classno, classname, Classs<span class="operator">-</span>major, classdept, studentnumber) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;Rj0801&#x27;</span>, <span class="string">&#x27;软件0801&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0802&#x27;</span>, <span class="string">&#x27;软件0802&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">26</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0803&#x27;</span>, <span class="string">&#x27;软件0803&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;数字媒体&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0804&#x27;</span>, <span class="string">&#x27;软件0804&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0805&#x27;</span>, <span class="string">&#x27;软件0805&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;数字媒体&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0806&#x27;</span>, <span class="string">&#x27;软件0806&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure><h2 id="表course">表course</h2><table><thead><tr><th>cno</th><th>cname</th><th>credit</th></tr></thead><tbody><tr><td>800001</td><td>计算机基础</td><td>4</td></tr><tr><td>800002</td><td>程序设计语言</td><td>4</td></tr><tr><td>800003</td><td>数据结构</td><td>4</td></tr><tr><td>810011</td><td>数据库系统</td><td>4</td></tr><tr><td>810013</td><td>计算机网络</td><td>3</td></tr><tr><td>810015</td><td>微机原理与应用</td><td>4</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course (cno, cname, credit) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">800001</span>, <span class="string">&#x27;计算机基础&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="string">&#x27;程序设计语言&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="string">&#x27;数据结构&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="string">&#x27;数据库系统&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="string">&#x27;计算机网络&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">810015</span>, <span class="string">&#x27;微机原理与应用&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="表sc">表sc</h2><table><thead><tr><th>sno</th><th>cno</th><th>grade</th></tr></thead><tbody><tr><td>08300012</td><td>800003</td><td>88</td></tr><tr><td>08300015</td><td>800003</td><td></td></tr><tr><td>08300020</td><td>800003</td><td>91</td></tr><tr><td>08300030</td><td>800003</td><td>78</td></tr><tr><td>08300048</td><td>800003</td><td>95</td></tr><tr><td>08300100</td><td>810011</td><td>67</td></tr><tr><td>08300148</td><td>810011</td><td>58</td></tr><tr><td>08300150</td><td>810011</td><td>89</td></tr><tr><td>08300160</td><td>810011</td><td>71</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc (sno, cno, grade) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;08300012&#x27;</span>, <span class="number">800003</span>, <span class="number">88</span>),</span><br><span class="line">(<span class="string">&#x27;08300015&#x27;</span>, <span class="number">800003</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;08300020&#x27;</span>, <span class="number">800003</span>, <span class="number">91</span>),</span><br><span class="line">(<span class="string">&#x27;08300030&#x27;</span>, <span class="number">800003</span>, <span class="number">78</span>),</span><br><span class="line">(<span class="string">&#x27;08300048&#x27;</span>, <span class="number">800003</span>, <span class="number">95</span>),</span><br><span class="line">(<span class="string">&#x27;08300100&#x27;</span>, <span class="number">810011</span>, <span class="number">67</span>),</span><br><span class="line">(<span class="string">&#x27;08300148&#x27;</span>, <span class="number">810011</span>, <span class="number">58</span>),</span><br><span class="line">(<span class="string">&#x27;08300150&#x27;</span>, <span class="number">810011</span>, <span class="number">89</span>),</span><br><span class="line">(<span class="string">&#x27;08300160&#x27;</span>, <span class="number">810011</span>, <span class="number">71</span>);</span><br></pre></td></tr></table></figure><h2 id="表teacher">表teacher</h2><table><thead><tr><th>tno</th><th>tname</th><th>tsex</th><th>tbirthday</th><th>ttitle</th></tr></thead><tbody><tr><td>000001</td><td>李英</td><td>女</td><td>1975-11-3</td><td>讲师</td></tr><tr><td>000002</td><td>王大山</td><td>男</td><td>1969-3-2</td><td>副教授</td></tr><tr><td>000003</td><td>张朋</td><td>男</td><td>1970-2-13</td><td>讲师</td></tr><tr><td>000004</td><td>陈为军</td><td>男</td><td>1985-8-14</td><td>助教</td></tr><tr><td>000005</td><td>宋浩然</td><td>男</td><td>1976-4-23</td><td>讲师</td></tr><tr><td>000006</td><td>许红霞</td><td>女</td><td>1966-2-12</td><td>副教授</td></tr><tr><td>000007</td><td>徐永军</td><td>男</td><td>1962-1-24</td><td>教授</td></tr><tr><td>000008</td><td>李桂菁</td><td>女</td><td>1960-12-15</td><td>教授</td></tr><tr><td>000009</td><td>王一凡</td><td>女</td><td>1974-12-8</td><td>讲师</td></tr><tr><td>000010</td><td>田峰</td><td>男</td><td>1988-1-18</td><td>助教</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher (tno, tname, tsex, tbirthday, ttitle) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;000001&#x27;</span>, <span class="string">&#x27;李英&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1975-11-3&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000002&#x27;</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1969-3-2&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000003&#x27;</span>, <span class="string">&#x27;张朋&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1970-2-13&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000004&#x27;</span>, <span class="string">&#x27;陈为军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1985-8-14&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000005&#x27;</span>, <span class="string">&#x27;宋浩然&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1976-4-23&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000006&#x27;</span>, <span class="string">&#x27;许红霞&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1966-2-12&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000007&#x27;</span>, <span class="string">&#x27;徐永军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1962-1-24&#x27;</span>, <span class="string">&#x27;教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000008&#x27;</span>, <span class="string">&#x27;李桂菁&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1960-12-15&#x27;</span>, <span class="string">&#x27;教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000009&#x27;</span>, <span class="string">&#x27;王一凡&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1974-12-8&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000010&#x27;</span>, <span class="string">&#x27;田峰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1988-1-18&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="表teaching">表teaching</h2><table><thead><tr><th>cno</th><th>tno</th><th>Language</th></tr></thead><tbody><tr><td>800001</td><td>000001</td><td>English</td></tr><tr><td>800002</td><td>000002</td><td>Chinese</td></tr><tr><td>800003</td><td>000002</td><td>Bilingual</td></tr><tr><td>810011</td><td>000003</td><td>Chinese</td></tr><tr><td>810013</td><td>000004</td><td>English</td></tr><tr><td>800001</td><td>000005</td><td>Chinese</td></tr><tr><td>800002</td><td>000006</td><td>Chinese</td></tr><tr><td>800003</td><td>000007</td><td>English</td></tr><tr><td>810011</td><td>000007</td><td>English</td></tr><tr><td>810013</td><td>000008</td><td>Bilingual</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teaching (cno, tno, <span class="keyword">language</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">800001</span>, <span class="number">1</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="number">2</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="number">2</span>, <span class="string">&#x27;Bilingual&#x27;</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="number">3</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="number">4</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">800001</span>, <span class="number">5</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="number">6</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="number">7</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="number">7</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="number">8</span>, <span class="string">&#x27;Bilingual&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="简单的数据操作">简单的数据操作</h1><h2 id="1">1</h2><ul><li>[x] 查询所有同学的所有基本信息。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h2 id="2">2</h2><ul><li>[x] 查询所有男同学的学号、姓名、出生日期。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sbirthday <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3">3</h2><ul><li>[x] 在基本表 <code>student</code> 中增加 <code>addr</code>：<code>varchar(20)</code> 列，然后将其长度由 20 改为 25。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> addr <span class="type">VARCHAR</span>(<span class="number">20</span>) comment &quot;地址&quot;;     <span class="comment">-- 添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY <span class="keyword">COLUMN</span> addr <span class="type">VARCHAR</span>(<span class="number">25</span>) comment &quot;地址&quot;;  <span class="comment">-- 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> addr;   <span class="comment">-- 删除</span></span><br></pre></td></tr></table></figure><h2 id="4">4</h2><ul><li>[x] 在基本表 <code>student</code> 中增加 <code>register_date</code>：<code>date</code> 列，并为其设置默认值为当前系统时间，再删除该列。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> register_date DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;日期&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> register_date;</span><br></pre></td></tr></table></figure><h2 id="5">5</h2><ul><li>[x] 在基本表 <code>student</code> 中为 <code>age</code> 列，增加默认值为 <code>18</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h2 id="6">6</h2><ul><li>[x] 在基本表 sc 中将 sname 设置为唯一值（unique）。（应该是student表）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_sname <span class="keyword">UNIQUE</span> (sname);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_sname <span class="keyword">UNIQUE</span> (sname); <span class="comment">-- 删除唯一索引</span></span><br></pre></td></tr></table></figure><h2 id="7">7</h2><ul><li>[x] 在基本表 course 中创建索引：（sno，cno desc）。（应该是sc表）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sno_cno_desc <span class="keyword">ON</span> course (sno, cno <span class="keyword">DESC</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除受到外键影响</span></span><br></pre></td></tr></table></figure><h2 id="8">8</h2><ul><li>[x] 在基本表 student 中增加约束条件：男生年龄小于 23 岁，女生年龄小于 21 岁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE sbirthday sage <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> check_age <span class="keyword">CHECK</span> (</span><br><span class="line">    (ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> sage <span class="operator">&lt;</span> <span class="number">23</span>) <span class="keyword">OR</span></span><br><span class="line">    (ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sage <span class="operator">&lt;</span> <span class="number">21</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="9">9</h2><ul><li>[x] 创建视图 View_80，存放成绩高于 80 分的选课信息，显示学号、课程号和成绩，使用 WITH CHECK OPTION 选项。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> View_80 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> grade <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><h2 id="10">10</h2><ul><li>[x] 在视图 View_80 中查询成绩高于 90 的选课信息。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> View_80 <span class="keyword">WHERE</span> grade <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h2 id="11">11</h2><ul><li>[x] 在视图 View_80 中依次插入如下元组：08301168，810011，87（可插入成功）</li></ul><p>这个错误是由于外键约束导致的。在尝试向View_80视图插入数据时，MySQL检查了sc表的外键约束sc_ibfk_1。这个约束要求，sc表中的sno字段的值必须在student表的sno字段的值中存在。换句话说，你不能为一个不存在的学生分配成绩。</p><p>错误信息表明，你尝试插入的sno值（‘08301168’）在student表中不存在。你需要先确保student表中存在这个学生号，然后再尝试插入数据。</p><p>你可以使用以下SQL查询来检查student表中是否存在这个学生号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果这个查询没有返回任何结果，那么你需要先向student表中插入这个学生号，然后再尝试向View_80插入数据。</p><h2 id="12">12</h2><ul><li>[x] 在视图 View_80 中依次修改如下元组：将（08301168，810011）所对应的成绩改为 90（可修改成功）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> View_80 <span class="keyword">SET</span> grade <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span> <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="13">13</h2><ul><li>[x] 在视图 View_80 中删除如下元组：sno=08301168，cno=810011</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> View_80 <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span> <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="14">14</h2><ul><li>[x] 查询所有在“1980-01-01”之前出生的女同学的学号、姓名、性别、出生日期。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, ssex, sbirthday </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sbirthday <span class="operator">&lt;</span> <span class="string">&#x27;1980-01-01&#x27;</span> <span class="keyword">AND</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="15">15</h2><ul><li>[x] 查询所有姓“李”的男同学的学号、姓名、性别、出生日期。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, ssex, sbirthday </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span> <span class="keyword">AND</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="16">16</h2><ul><li>[x] 查询所有用英文授课的教师号、姓名及英语授课的门数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.tno, t.tname, <span class="built_in">COUNT</span>(te.cno) <span class="keyword">AS</span> <span class="string">&#x27;英语授课的门数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> teacher t</span><br><span class="line"><span class="keyword">JOIN</span> teaching te <span class="keyword">ON</span> t.tno <span class="operator">=</span> te.tno</span><br><span class="line"><span class="keyword">WHERE</span> te.language <span class="operator">=</span> <span class="string">&#x27;English&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.tno, t.tname;</span><br></pre></td></tr></table></figure><h2 id="17">17</h2><ul><li>[x] 查询所有职称不是“讲师”的教师号、姓名、职称。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno, tname, ttitle </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">&lt;&gt;</span> <span class="string">&#x27;讲师&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tno, tname, ttitle </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">!=</span> <span class="string">&#x27;讲师&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="18">18</h2><ul><li>[x] 查询虽然选修了课程，但未参加考试的所有同学的学号。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno </span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h2 id="19">19</h2><ul><li>[x] 查询所有考试不及格的同学的学号、成绩，并按成绩降序排列。（降序desc升序asc并且默认为升序）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, grade </span><br><span class="line"><span class="keyword">FROM</span> sc </span><br><span class="line"><span class="keyword">WHERE</span> grade <span class="operator">&lt;</span> <span class="number">60</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="20">20</h2><ul><li>[x] 查询在1970年出生的教师号、姓名、出生日期。（也可以改成月份和年份）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno, tname, tbirthday </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(tbirthday) <span class="operator">=</span> <span class="number">1970</span>;</span><br></pre></td></tr></table></figure><h2 id="21">21</h2><ul><li>[x] 查询各个课程号的选课人数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cno, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br></pre></td></tr></table></figure><h2 id="22">22</h2><ul><li>[x] 查询讲授2门课以上的教师号。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno</span><br><span class="line"><span class="keyword">FROM</span> teaching</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="23">23</h2><ul><li>[x] 查询选修了 800001 课程的学生平均分数、最低分数和最高分数。（此处课程号应为810011）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(grade), <span class="built_in">min</span>(grade), <span class="built_in">max</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="24">24</h2><ul><li>[x] 查询1960年以后出生的，职称为讲师的教师的姓名、出生日期，并按出生日期升序排列。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname, tbirthday </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">=</span> <span class="string">&#x27;讲师&#x27;</span> <span class="keyword">AND</span> tbirthday <span class="operator">&gt;</span> <span class="string">&#x27;1960-01-01&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tbirthday <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h1 id="复杂数据查询-3问题">复杂数据查询 3问题</h1><h2 id="1-2">1</h2><ul><li>[x] （1）创建视图 new_View 显示所有同学的选课及成绩情况，列出学生的学号、姓名、班号、课程名称和成绩。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库中的所有视图</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">IN</span> your_database_name <span class="keyword">WHERE</span> TABLE_TYPE <span class="keyword">LIKE</span> <span class="string">&#x27;VIEW&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_you_create;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AS关键字于定义视图结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> new_View <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, s.classno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno;</span><br></pre></td></tr></table></figure><h2 id="2-2">2</h2><ul><li>[x] （2）在视图 new_View 中查询“软件0801”班的同学的选课及成绩情况，显示学号、姓名、课程名称、成绩。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, cname, grade</span><br><span class="line"><span class="keyword">FROM</span> new_View</span><br><span class="line"><span class="keyword">WHERE</span> classno <span class="operator">=</span> <span class="string">&#x27;Rj0801&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-2">3</h2><ul><li>[x] （3）在视图 new_View 中插入如下元组：08300010，李在，R,j0801，数据库系统，88（此为不成功的操作）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">## <span class="number">4</span></span><br><span class="line"><span class="operator">-</span> [x] （<span class="number">4</span>）查询所有同学的学分情况（假设课程成绩<span class="operator">&gt;=</span><span class="number">60</span>时可获得该门课程的学分），显示学号、姓名、总学分（用 <span class="keyword">JOIN</span>）。</span><br><span class="line">```<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, <span class="built_in">SUM</span>(IF(sc.grade <span class="operator">&gt;=</span> <span class="number">60</span>, c.ccredit, <span class="number">0</span>)) <span class="keyword">AS</span> total_credit</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.sno, s.sname;</span><br></pre></td></tr></table></figure><h2 id="5-2">5</h2><ul><li>[x] （5）查询所有同学的平均成绩及选课门数，显示学号、姓名、平均成绩、选课门数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, <span class="built_in">AVG</span>(sc.grade) <span class="keyword">AS</span> avg_grade, <span class="built_in">COUNT</span>(sc.cno) <span class="keyword">AS</span> course_count</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.sno, s.sname;</span><br></pre></td></tr></table></figure><h2 id="6-2">6</h2><ul><li>[x] （6）查询所有选修了课程但未参加考试的所有同学及相应的课程，显示学号、姓名、课程号、课程名称。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, sc.cno, c.cname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="7-2">7</h2><ul><li>[x] （7）查询所有选修了课程但考试不及格的所有同学及相应的课程，显示学号、姓名、课程号、课程名称、成绩。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, sc.cno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><h2 id="8-2">8</h2><ul><li>[x] （8）查询选修了课程名为“程序设计语言”的所有同学及成绩情况，显示学生姓名、课程成绩（用 ANY 运算符）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cno <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;程序设计语言&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="9-2">9</h2><ul><li>[x] （9）查询“软件开发系”的所有同学及成绩情况，显示学号、姓名、班级名称、课程号、课程名称、成绩。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, cl.classname, sc.cno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">JOIN</span> class cl <span class="keyword">ON</span> s.classno <span class="operator">=</span> cl.classno</span><br><span class="line"><span class="keyword">WHERE</span> cl.classdept <span class="operator">=</span> <span class="string">&#x27;软件开发&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="10-2">10</h1><ul><li>[x] （10）查询所有教师的任课情况，显示教师姓名、课程名称。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.tname, c.cname</span><br><span class="line"><span class="keyword">FROM</span> teacher t</span><br><span class="line"><span class="keyword">JOIN</span> teaching tc <span class="keyword">ON</span> t.tno <span class="operator">=</span> tc.tno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> tc.cno <span class="operator">=</span> c.cno;</span><br></pre></td></tr></table></figure><h2 id="11-2">11</h2><ul><li>[x] （11）查询成绩低于同门课程平均成绩的信息，显示学生学号、姓名、课程名称及低于平均成绩的值（即比平均成绩低多少）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student.sno <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    student.sname <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    course.cname <span class="keyword">AS</span> <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    (avg_grade <span class="operator">-</span> sc.grade) <span class="keyword">AS</span> <span class="string">&#x27;低于平均成绩的值&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">ON</span> sc.cno <span class="operator">=</span> course.cno</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> cno) <span class="keyword">AS</span> avg_sc <span class="keyword">ON</span> sc.cno <span class="operator">=</span> avg_sc.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&lt;</span> avg_sc.avg_grade;</span><br></pre></td></tr></table></figure><h2 id="12-2">12</h2><ul><li>[x] （12）查询和“葛畅”在同一班级的同学的姓名（使用子查询）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> classno <span class="operator">=</span> (<span class="keyword">SELECT</span> classno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;葛畅&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="13-2">13</h2><ul><li>[x] （13）查询没有选修“计算机基础”课程的学生姓名（用 NOT EXISTS）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> s.sno <span class="operator">=</span> sc.sno <span class="keyword">AND</span> sc.cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="14-2">14</h2><ul><li>[x] （14）查询主讲“数据库系统”和主讲“数据结构”的教师姓名（用 UNION）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据库系统&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据结构&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="15-2">15</h2><ul><li>[x] （15）查询讲授了所有课程的教师的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> tno</span><br><span class="line">    <span class="keyword">FROM</span> teaching</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> tno</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cno</span><br><span class="line"></span><br><span class="line">) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="16-2">16</h2><ul><li>[x] （16）查询同时选修学课程800001和800002的女同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc sc1 <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc1.sno <span class="keyword">AND</span> sc1.cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span></span><br><span class="line"><span class="keyword">JOIN</span> sc sc2 <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc2.sno <span class="keyword">AND</span> sc2.cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="17-2">17</h2><ul><li>[x] （17）查询既未选修课程800001又未选修课程800002的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="18-2">18</h2><ul><li>[x] （18）查询有一门课程成绩为95分的女同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sc.grade <span class="operator">=</span> <span class="number">95</span>;</span><br></pre></td></tr></table></figure><h2 id="19-2">19</h2><ul><li>[x] （19）查询选课数量大于3门的女同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> course_count</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">) <span class="keyword">AS</span> course_counts</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">ON</span> course_counts.sno <span class="operator">=</span> student.sno</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> course_count <span class="operator">&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="20-2">20</h2><ul><li>[x] （20）查询平均成绩大于80分的男同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student.sname <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno) <span class="keyword">AS</span> avg_sc <span class="keyword">ON</span> student.sno <span class="operator">=</span> avg_sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> avg_sc.avg_grade <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> student.ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="21-2">21</h2><ul><li>[x] （21）查询徐永军老师所教的每一门课程的平均成绩。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cname, <span class="built_in">AVG</span>(sc.grade) <span class="keyword">AS</span> avg_grade</span><br><span class="line"><span class="keyword">FROM</span> teaching t</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> t.cno <span class="operator">=</span> sc.cno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> t.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> t.tno <span class="operator">=</span> <span class="string">&#x27;000007&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cname;</span><br></pre></td></tr></table></figure><h2 id="22-2">22</h2><ul><li>[x] （22）查询男同学每一个年龄组的人数，要求按人数升序输出人数超过20人的年龄组。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>((<span class="keyword">YEAR</span>(<span class="built_in">CURRENT_DATE</span>) <span class="operator">-</span> <span class="keyword">YEAR</span>(sbirthday)) <span class="operator">/</span> <span class="number">10</span>) <span class="keyword">AS</span> age_group, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> age_group</span><br><span class="line"><span class="keyword">HAVING</span> student_count <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_count <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h2 id="23-2">23</h2><ul><li>[x] （23）查询每门课程成绩都大于90分的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> course c</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> sc</span><br><span class="line">        <span class="keyword">WHERE</span> s.sno <span class="operator">=</span> sc.sno <span class="keyword">AND</span> c.cno <span class="operator">=</span> sc.cno <span class="keyword">AND</span> grade <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="24-2">24</h2><ul><li>[x] （24）查询比所有女同学年龄要大的男同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> <span class="keyword">YEAR</span>(sbirthday) <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="keyword">YEAR</span>(sbirthday))</span><br><span class="line">    <span class="keyword">FROM</span> student</span><br><span class="line">    <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="25">25</h2><ul><li>[x] （25）查询未选修 800002 课程的女同学的姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="26">26</h2><ul><li>[x] （26）查询所有课程成绩都及格的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> grade <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="27">27</h2><ul><li>[x] （27）查询选修课所有课程的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cno) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="28">28</h2><ul><li>[x] （28）查询选修了葛畅同学所选修的所有课程的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno <span class="operator">=</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;葛畅&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="29">29</h2><ul><li>[x] （29）查询平均成绩最高的学生姓名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_grade <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> highest_avg_grade</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">ON</span> highest_avg_grade.sno <span class="operator">=</span> student.sno;</span><br></pre></td></tr></table></figure><h2 id="30">30</h2><ul><li>[x] （30）找出比所在班级平均成绩高的学生信息。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, s.classno, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sc.grade)</span><br><span class="line">    <span class="keyword">FROM</span> student s2</span><br><span class="line">    <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s2.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">WHERE</span> s2.classno <span class="operator">=</span> s.classno</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s2.classno</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="数据操纵语言DML">数据操纵语言DML</h1><ul><li>[x] （1） 将选修徐永军老师所教课程的女同学的成绩提高5%</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> tno <span class="operator">=</span> <span class="string">&#x27;000007&#x27;</span>) <span class="keyword">AND</span> sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（2） 在基本表Student中检索每一门课程成绩都大于等于80分的学生学号、姓名、性别，并把检索到的值送往另一个已存在的基本表STUD（S#，SNAME，SEX）。</p><ul><li>[x] （3） 在基本表sc中删除尚无成绩的选课记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>[x] （4） 把王威同学的学习选课和成绩全部删除。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno <span class="operator">=</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;王威&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>[x] （5） 把选修数据结构课不及格的成绩全改为空值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据结构&#x27;</span>) <span class="keyword">AND</span> grade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><ul><li>[x] （6） 把低于总平均成绩的女同学的成绩提高5%</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_table <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sc.grade <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(grade)</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> temp_table</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> TEMPORARY <span class="keyword">TABLE</span> temp_table;</span><br><span class="line"></span><br><span class="line">MySQL不允许在<span class="keyword">UPDATE</span>语句的<span class="keyword">FROM</span>子句中直接引用目标表。我们需要使用一个临时表或者将子查询结果保存到一个变量中来解决这个问题。</span><br><span class="line"></span><br><span class="line">这段代码首先创建一个临时表，保存所有低于平均成绩的女同学的学号。然后，它更新sc表中的成绩，将所有在临时表中的学号对应的成绩提高<span class="number">5</span><span class="operator">%</span>。最后，它删除临时表。</span><br></pre></td></tr></table></figure><ul><li>[x] （7） 在基本表SC中修改800004课程的成绩，若成绩小于等于75分时提高5%，若成绩大于75分时提高4%（用两个UPDATE语句实现）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">800004</span> <span class="keyword">AND</span> grade <span class="operator">&lt;=</span> <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.04</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">800004</span> <span class="keyword">AND</span> grade <span class="operator">&gt;</span> <span class="number">75</span>;</span><br></pre></td></tr></table></figure><h1 id="存储过程">存储过程</h1><ul><li>[x] （1） 创建一个能向学生表student中插入一条记录的存储过程insert_student，该过程需要5个参数，分别用来传递学号、姓名、性别、出生日期、班级号。写出调用存储过程insert_student的SQL语句，向数据表student中插入一个新同学，并提供相应的实参值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_student(<span class="keyword">in</span> p_sno <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_sname <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_ssex <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_sbirthday <span class="type">date</span>, <span class="keyword">in</span> p_classno <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student(sno, sname, ssex, sbirthday, classno)</span><br><span class="line">    <span class="keyword">values</span> (p_sno, p_sname, p_ssex, p_sbirthday, p_classno);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> insert_student(<span class="string">&#x27;20301104&#x27;</span>, <span class="string">&#x27;廖学武&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-06-29&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>[x] （2） 创建一个向课程表course中插入一门新课程的存储过程insert_course，该存储过程需要三个参数，分别用来传递课程号、课程名、学分，但允许参数“学分”的默认值为4，即当调用存储过程insert_course时，未给第三个参数“学分”提供实参值时，存储过程将按默认值4进行运算。<br>调用存储过程insert_course，向课程表course中插入一门新课程。分两种情况（给出第三个参数和未给出第三个参数）写出相应的SQL命令，并比较结果。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_course(<span class="keyword">in</span> p_cno <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_cname <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_ccredit <span class="type">smallint</span> <span class="keyword">default</span> <span class="number">4</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if ccredit <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> p_ccredit <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> course(cno, cname, ccredit) <span class="keyword">values</span>(p_cno, p_cname, p_ccredit);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> insert_course(<span class="string">&#x27;CS101&#x27;</span>, <span class="string">&#x27;计算机科学&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">call</span> insert_course(<span class="string">&#x27;CS102&#x27;</span>, <span class="string">&#x27;数据结构&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>[x] （3） 创建一个名称为query_student的存储过程，该存储过程的功能是从数据表student中根据学号查询某一同学的姓名、性别、出生日期、班级号。<br>调用存储过程query_student，查询学号为“08301050”的姓名、性别、出生日期、班级号，并写出完成此功能的SQL命令。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> query_student(<span class="keyword">in</span> p_sno <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> sname, ssex, sbirthday, classno <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> p_sno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> query_student(<span class="string">&#x27;08300010&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>[x] （4） 建立存储过程，输出平均成绩大于80分的学生的姓名、性别、年龄和平均成绩。调用该存储过程，并输出相应的结果。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_low_course()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> student.sname <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">           student.ssex <span class="keyword">as</span> <span class="string">&#x27;性别&#x27;</span>, </span><br><span class="line">           <span class="keyword">year</span>(curdate()) <span class="operator">-</span> <span class="keyword">year</span>(student.sbirthday) <span class="keyword">as</span> <span class="string">&#x27;年龄&#x27;</span>, </span><br><span class="line">           <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> <span class="string">&#x27;平均成绩&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> student.sno</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">avg</span>(sc.grade) <span class="operator">&lt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_high_achievers();</span><br></pre></td></tr></table></figure><ul><li>[x] （5） 写存储过程显示所有选择了与给定学生姓名选择的全部课程的学生的学号、姓名、选课数、平均成绩、总学分，调用该存储过程，并根据指定的学生姓名输出与其相应的结果。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_student_info(<span class="keyword">in</span> student_name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        s.sno <span class="keyword">as</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">        s.sname <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">        <span class="built_in">count</span>(sc.cno) <span class="keyword">as</span> <span class="string">&#x27;选课数&#x27;</span>,</span><br><span class="line">        <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> <span class="string">&#x27;平均成绩&#x27;</span>,</span><br><span class="line">        <span class="built_in">sum</span>(c.ccredit) <span class="keyword">as</span> <span class="string">&#x27;总学分&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> student s</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">join</span> course c <span class="keyword">on</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        s.sno <span class="keyword">in</span> (</span><br><span class="line">            <span class="keyword">select</span> sc.sno</span><br><span class="line">            <span class="keyword">from</span> student s</span><br><span class="line">            <span class="keyword">join</span> sc <span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line">            <span class="keyword">where</span> s.sname <span class="operator">=</span> student_name</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        s.sno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_student_info(<span class="string">&#x27;胡贤斌&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>[x]（6） 写存储过程显示所有平均成绩小于给定班级号的平均成绩的学生的学号、</li></ul><p>名字、平均成绩</p><p>调用该存储过程，并根据指定的班级号输出与其相应的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_students_below_class_average(<span class="keyword">in</span> class_no <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 计算给定班级的平均成绩</span></span><br><span class="line">    <span class="keyword">declare</span> class_avg_grade <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sc.grade) <span class="keyword">into</span> class_avg_grade</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">where</span> student.classno <span class="operator">=</span> class_no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 查询所有平均成绩小于给定班级平均成绩的学生</span></span><br><span class="line">    <span class="keyword">select</span> student.sno, student.sname, <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> avg_grade</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> student.sno, student.sname</span><br><span class="line">    <span class="keyword">having</span> avg_grade <span class="operator">&lt;</span> class_avg_grade;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_students_below_class_average(<span class="string">&#x27;Rj0801&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="触发器-1-5有问题">触发器 1/5有问题</h1><ul><li>[x] （1） 创建一个当向学生表student中插入一新同学时能自动列出全部同学信息的触发器display_trigger。执行存储过程insert_student，向学生表中插入一个新同学，看触发器display_trigger是否被触发。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> display_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> triggers; <span class="comment">-- 查看已创建的触发器</span></span><br></pre></td></tr></table></figure><ul><li>[x] （2） 创建一个触发器，当向学生表student中插入一新同学时能自动更新（增加1）class班级表中该生所在班级的总人数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_count_add</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> new.classno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> if <span class="keyword">exists</span> update_student_count;    <span class="comment">-- 删除触发器</span></span><br></pre></td></tr></table></figure><ul><li>[x] （3） 创建一个触发器，当从学生表student中删除一个同学时能自动更新（减1）class班级表中该生所在班级的总人数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_number_delete</span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> old.classno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>[x] （4） 创建一个触发器，当将学生表student中某一个同学从一个班级改为另一个班级时，能自动更新class班级表中该生所在原来班级的总人数（减1）和新班级的总人数（增加1）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_count</span><br><span class="line">after <span class="keyword">update</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if old.classno <span class="operator">!=</span> new.classno <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> old.classno;</span><br><span class="line">        <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> new.classno;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>[x] （5） 建一个触发器，当往SC表中插入一个在STUDENT 表中不存在的学号SNO时，就往STUDENT表中插入该学号，其他属性全是NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> insert_student</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> new.sno) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> student (sno) <span class="keyword">values</span> (new.sno);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>[x] （6） 写一个触发器阻止将学生成绩降低</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> prevent_grade before <span class="keyword">update</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if new.grade <span class="operator">&gt;</span> old.grade <span class="keyword">then</span></span><br><span class="line">        signal <span class="keyword">sqlstate</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">        <span class="keyword">set</span> message_text <span class="operator">=</span> <span class="string">&#x27;cannot asc student grade&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>[x] （7） 在sc表上创建触发器，只要有人选修的课程超过3门，就中断操作并提示警告</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> check_course_limit</span><br><span class="line">before <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> course_count <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> course_count <span class="keyword">from</span> sc <span class="keyword">where</span> sno <span class="operator">=</span> new.sno;</span><br><span class="line">    if course_count <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">        signal <span class="keyword">sqlstate</span> <span class="string">&#x27;45000&#x27;</span> <span class="keyword">set</span> message_text <span class="operator">=</span> <span class="string">&#x27;一个学生不能选修超过3门课程&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>[x] （8） 创建一个触发器，当往SC表插入选修的课程时自动将该课程的学分累加到STUDENT表的该生的总学分（TOTALCREDIT）中，当从SC表中退课时自动从STUDENT表的该生的总学分中减去该课程的学分。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当插入新的选课记录时，增加学生的总学分</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> increase_totalcredit</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> student</span><br><span class="line">    <span class="keyword">set</span> totalcredit <span class="operator">=</span> totalcredit <span class="operator">+</span> (<span class="keyword">select</span> ccredit <span class="keyword">from</span> course <span class="keyword">where</span> cno <span class="operator">=</span> new.cno)</span><br><span class="line">    <span class="keyword">where</span> sno <span class="operator">=</span> new.sno;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当删除选课记录时，减少学生的总学分</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> decrease_totalcredit</span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> student</span><br><span class="line">    <span class="keyword">set</span> totalcredit <span class="operator">=</span> totalcredit <span class="operator">-</span> (<span class="keyword">select</span> ccredit <span class="keyword">from</span> course <span class="keyword">where</span> cno <span class="operator">=</span> old.cno)</span><br><span class="line">    <span class="keyword">where</span> sno <span class="operator">=</span> old.sno;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SQL语句与基本语法</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="SQL" scheme="http://chfychin.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Office新版安装与激活</title>
    <link href="http://chfychin.cn/posts/db289af5.html"/>
    <id>http://chfychin.cn/posts/db289af5.html</id>
    <published>2024-09-01T15:39:46.000Z</published>
    <updated>2024-09-01T16:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Office安装">Office安装</h1><p><a href="https://otp.landian.vip/zh-cn/">Office Tool下载</a><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/1.jpg" alt="img"><br>解压后右键管理员身份运行<code>Office Tool Plus.exe</code><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/2.jpg" alt="img"><br><strong>打开后会自动更新，若是更新卡着不动关防火墙</strong><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/3.jpg" alt="img"><br>本机若是有Office需要先移除<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/4.jpg" alt="img"><br>添加产品，选择自己想要安装的版本及应用程序和语言<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/5.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/6.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/7.jpg" alt="img"><br>一键部署，等待部署完成，即安装完成Office<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/8.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/9.png" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/10.jpg" alt="img"><br>部署完成，打开Word显示未激活<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/11.jpg" alt="img"></p><h1 id="Office激活">Office激活</h1><p>安装许可证，选择与前面安装版本对应的许可证安装<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/12.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/13.png" alt="img"><br>设置KMS主机为<code>kms.loli.beer</code><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/14..jpg" alt="img"><br>一键激活<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/15.jpg" alt="img"><br>激活完成<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/16.jpg" alt="img"><br><strong>若是安装许可证失败或者激活失败，可使用 <a href="https://www.chfychin.cn/posts/51605980.html"><code>power shell</code></a> 激活</strong></p>]]></content>
    
    
    <summary type="html">Office新版安装与激活</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="Office" scheme="http://chfychin.cn/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>cpeditor</title>
    <link href="http://chfychin.cn/posts/aa1df803.html"/>
    <id>http://chfychin.cn/posts/aa1df803.html</id>
    <published>2024-08-19T11:20:42.000Z</published>
    <updated>2024-08-20T14:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cpeditor</p><h2 id="Cpeditor-编辑器下载">Cpeditor 编辑器下载</h2><p>1、进<a href="https://cpeditor.org/">cpeditor编辑器官网</a></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/3A08B2E067B1736865E5890D2CDBFB51.png" alt="3A08B2E067B1736865E5890D2CDBFB51.png"></p><p>2、选择合适的版本下载，站长使用：<strong>cpeditor-6.11.2-windows-x64-setup-with-gcc-13.2.0-LLVM-17.0.6.exe (224 MB)</strong></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/A169AC4093179D8232D71525A45BA580.png" alt="A169AC4093179D8232D71525A45BA580.png"></p><p>3、傻瓜式安装</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/6A5A6AB4144EDDC1FA60BA23C00C9FE6.png" alt="6A5A6AB4144EDDC1FA60BA23C00C9FE6.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/AA784F263B3BE5E151421473D15CE121.png" alt="AA784F263B3BE5E151421473D15CE121.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/4A82E97DF7C2774450E8963C8B0C6325.png" alt="4A82E97DF7C2774450E8963C8B0C6325.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/7E6A95E0D3C8D5CACFE6411A0BBD6437.png" alt="7E6A95E0D3C8D5CACFE6411A0BBD6437.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/44C5C5444FCC0652E94C581CD7D0C077.png" alt="44C5C5444FCC0652E94C581CD7D0C077.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/7A517DABEF138BD69D37B37980589268.png" alt="7A517DABEF138BD69D37B37980589268.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/0A1C16FFD7391738123951902E0DEC65.png" alt="0A1C16FFD7391738123951902E0DEC65.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/488A0AB17C565509B7E6174649BDCD22.png" alt="488A0AB17C565509B7E6174649BDCD22.png"></p><h2 id="配置环境变量">配置环境变量</h2><p>1、找到自己安装目录下(或者别处的 mingw64)的 bin 目录，站长的：<strong>C:\Program Files (x86)\MySoftWare\CP-Editor\cpeditor\mingw64\bin</strong><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/6738B7AFA11617200AF49E8055767B70.png" alt="6738B7AFA11617200AF49E8055767B70.png"></p><p>2、在环境变量中添加，点开 PATH 环境变量，添加新的路径</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/811CA38FE0BF775FF833204FA81ACF20.png" alt="811CA38FE0BF775FF833204FA81ACF20.png"></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/406F3C106C6449FE3CCC304342FDFFD8.png" alt="406F3C106C6449FE3CCC304342FDFFD8.png"></p><p>3、验证是否配置成功，在 cmd 中输入 g++ -v 查看 g++ 版本信息，站长用的gcc-11.2.0</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/075E4DB0D069DD1B639784151FC5BDCC.png" alt="075E4DB0D069DD1B639784151FC5BDCC.png"></p><h2 id="配置个人化的-CP-Editor">配置个人化的 CP Editor</h2><p>1、点击选项中的设置按钮</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/5A46E171C7DD7B687092A69F604578E3.png" alt="5A46E171C7DD7B687092A69F604578E3.png"></p><p>2、编辑器外观的设置</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/D15B455378087063F7A5228283918229.png" alt="D15B455378087063F7A5228283918229.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/9B2AB28D8874750AEAE1E6675C1AE7D7.png" alt="9B2AB28D8874750AEAE1E6675C1AE7D7.png"></p><p>3、C++配置<br><strong>c++ -Wall -std=c++14 -O2</strong>：用于开启 c++14 和 O2 优化<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/00471A08B785873A6CDEFBCCD4AA1F28.png" alt="00471A08B785873A6CDEFBCCD4AA1F28.png"><br>模板位置<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/9D286981FBD4295924B1FBBA201C6387.png" alt="9D286981FBD4295924B1FBBA201C6387.png"><br>个性化快捷键<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/AB17D34B5BB829799D282D48EC4FA4CB.png" alt="AB17D34B5BB829799D282D48EC4FA4CB.png"></p><p>4、设置 C++ Server<br>C++ Server 会进行一定程度的代码提示和错误提示<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/07FD84ED50E90D9185D3778C0CED0807.png" alt="07FD84ED50E90D9185D3778C0CED0807.png"></p><h2 id="配置完成">配置完成</h2><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/6B42F384D9CA048ACAE25D2E732230F1.png" alt="6B42F384D9CA048ACAE25D2E732230F1.png"></p>]]></content>
    
    
    <summary type="html">cpeditor安装与配置</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="cpeditor" scheme="http://chfychin.cn/tags/cpeditor/"/>
    
  </entry>
  
  <entry>
    <title>激活Office和Windows</title>
    <link href="http://chfychin.cn/posts/51605980.html"/>
    <id>http://chfychin.cn/posts/51605980.html</id>
    <published>2024-08-14T04:56:34.000Z</published>
    <updated>2024-08-15T05:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、免费激活Office办公软件">一、免费激活Office办公软件</h1><p>若系统没安装 Office 先去 <a href="https://gravesoft.dev/office_c2r_links#chinese-simplified-zh-cn">下载安装</a><br><img src="https://wp-oss.hcolor.pro/2024/08/20240818074112586.png" alt="img"><br>1.打开 powershell，先输入以下代码，然后选择是<br>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex<br>2.根据以下选项解释选择’2’激活Office</p><p>————————————————————————————————————————————————————</p><p>Activation Methods：<br>[1] HWID         |  Windows            |  Permanent<br>[2] Ohook        |  Office             |  Permanent<br>[3] KMS38        |  Windows            |  Year 2038<br>[4] Online KMS   |  Windows / office   |   180 Days</p><p>————————————————————————————————————————————————————</p><p>[5] Activation Status<br>[6] Troubleshoot<br>[7] Extras<br>[8] Help<br>[0] Exit</p><p>————————————————————————————————————————————————————</p><p>Enter a menu option in the Keyboard [1, 2, 3, 4, 5, 6, 7, 8, 0]</p><p>解释：<br>————————————————————————————————————————————————————<br>HWID(数字许可证)方法永久激活Windows<br>Ohook永久激活 Office 的方法<br>KMS38方法激活Windows/Server至2038年<br>在线 KMS方法激活 Windows/Server/0ffice 180天(终身续订任务)<br>高级激活疑难解答<br>用于预激活的 $OEM$ 文件夹<br>更改 Windows 版本<br>检查 Windows/Office 激活状态<br>提供一体化和单独文件版本<br>完全开源且基于批处理脚本<br>更少的防病毒检测<br>————————————————————————————————————————————————————</p><p>3.在弹出的界面中选择‘1’</p><p>————————————————————————————————————————————————————<br>[1] Install Ohook Office Activation<br>[2] Uninstall Ohook<br>[3] Download office<br>[0] Go back<br>————————————————————————————————————————————————————<br>Enter a menu option in the Keyboard [1, 2, 3, 0]</p><p>4.后显示Office is permanently activated.成功永久激活 Office，选择任意键返回，后选择‘0’键退出</p><p>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex slmgr /xpr</p><h1 id="二、免费永久激活-Windows">二、免费永久激活 Windows</h1><p>1.打开 powershell，先输入以下代码，然后选择是<br>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex<br>2.根据以下选项解释选择‘1’激活 Windows</p><p>————————————————————————————————————————————————————</p><p>Activation Methods：<br>[1] HWID         |  Windows            |  Permanent<br>[2] Ohook        |  Office             |  Permanent<br>[3] KMS38        |  Windows            |  Year 2038<br>[4] Online KMS   |  Windows / office   |   180 Days</p><p>————————————————————————————————————————————————————</p><p>[5] Activation Status<br>[6] Troubleshoot<br>[7] Extras<br>[8] Help<br>[0] Exit</p><p>————————————————————————————————————————————————————</p><p>Enter a menu option in the Keyboard [1, 2, 3, 4, 5, 6, 7, 8, 0]</p><p>3.后显示 Windows 11 专业版 is permanently activated with a digital license.成功永久激活 Windows，选择任意键返回，后选择‘0’键退出</p><p>4.按 Win + R 键输入以下命令查看计算机激活状态<br>slmgr.vbs /xpr</p><h1 id="三、Windows-修改更新日期">三、Windows 修改更新日期</h1><p>1.按 Win + R 输入 regedit 打开注册表编辑器<br>2.输入<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings</code>。<br>3.新建二进制值命名为 ‘FlightSettingsMaxPauseDays’<br>4.修改十进制的停止更新天数</p><h1 id="任务栏图标异常">任务栏图标异常</h1><p>解决办法：命令提示符结束浏览器进程，清除图标缓存【也可以制作批处理文件】（亲测有效）<br><code>win</code>+<code>r</code>-&gt;<code>cmd</code>-&gt;输入以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">taskkill <span class="regexp">/im explorer.exe /</span>f</span><br><span class="line">cd /d %userprofile%\appdata\local</span><br><span class="line">del iconcache.db /a</span><br><span class="line">start explorer.exe</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">激活Office和Windows</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="Office" scheme="http://chfychin.cn/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://chfychin.cn/posts/3c50d03d.html"/>
    <id>http://chfychin.cn/posts/3c50d03d.html</id>
    <published>2024-07-09T14:34:27.000Z</published>
    <updated>2024-07-10T00:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法">基础语法</h1><h2 id="表格">表格</h2><p><strong>添加表格：</strong></p><p>要添加表，使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。可以选择在表的任一端添加管道。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Syntax      </span>|<span class="string"> Description </span>|</span><br><span class="line">|<span class="string"> --- --- --- </span>|<span class="string"> --- --- --- </span>|</span><br><span class="line">|<span class="string"> Header      </span>|<span class="string"> Title       </span>|</span><br><span class="line">|<span class="string"> Paragraph   </span>|<span class="string"> Text        </span>|</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p><strong>对齐：</strong></p><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| <span class="title class_">Syntax</span>    | <span class="title class_">Description</span> |   <span class="title class_">Test</span> <span class="title class_">Text</span> |</span><br><span class="line">| <span class="symbol">:--------</span> | <span class="symbol">:---------</span>: | ----------: |</span><br><span class="line">| <span class="title class_">Header</span>    |    <span class="title class_">Title</span>    | <span class="title class_">Here</span><span class="string">&#x27;s this |</span></span><br><span class="line"><span class="string">| Paragraph |    Text     |    And more |</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table><p><strong>格式化表格中的文字：</strong></p><p>可以在表格中设置文本格式。例如，可以添加链接，代码（仅反引号（`）中的单词或短语，而不是代码块）和强调。<strong>注：不能添加标题，块引用，列表，水平规则，图像或HTML标签</strong>。</p><p><strong>在表中转义管道字符：</strong></p><p>可以使用表格的HTML字符代码（<code>&amp;#124;</code>）在表中显示竖线（<code>|</code>）字符。</p><h2 id="围栏代码块">围栏代码块</h2><p><strong>代码块：</strong></p><p>通过将行缩进四个空格或一个制表符来创建代码块，在代码块之前和之后的行上使用三个反引号(<code>```</code>）或三个波浪号（<code>~~~</code>）。</p><p>效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="标题编号">标题编号</h2><p>Markdown:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### My Great Heading &#123;#custom-id&#125;</span></span><br></pre></td></tr></table></figure><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>链接到标题ID (#headid)</strong></p><p>通过创建带有数字符号（<code>#</code>）和自定义标题ID的[标准链接]<code>(/basic-syntax/links.html)</code>，可以链接到文件中具有自定义<code>ID</code>的标题。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>效果</th></tr></thead><tbody><tr><td><code>[Heading IDs](#heading-ids)</code></td><td><code>&lt;a href=&quot;#heading-ids&quot;&gt;Heading IDs&lt;/a&gt;</code></td><td><a href="#heading-ids">Heading IDs</a></td></tr></tbody></table><h2 id="表格-2">表格</h2><p><strong>创建定义列表，在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</strong></p><p>Markdown</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is <span class="keyword">the</span> definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is <span class="literal">one</span> definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> term.</span><br><span class="line">: This is another definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> term.</span><br></pre></td></tr></table></figure><p>HTML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br>First Term<br>: This is the definition of the first term.</p><p>Second Term<br>: This is one definition of the second term.<br>: This is another definition of the second term.</p><h2 id="删除线">删除线</h2><p>删除单词，在单词前后使用两个波浪号<code>~~</code>。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br><s>世界是平坦的。</s> 我们现在知道世界是圆的。</p><h2 id="任务列表">任务列表</h2><p>任务列表可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，在方括号<code>[x]</code>之间添加 <code>x</code> 。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] Write the press release</span><br><span class="line"><span class="bullet">- </span>[ ] Update the website</span><br><span class="line"><span class="bullet">- </span>[ ] Contact the media</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li>[x] Write the press release</li><li>[ ] Update the website</li><li>[ ] Contact the media</li></ul><h1 id="公式符号">公式符号</h1><h2 id="上下标">上下标</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$a_i,a_{pre}$</td><td style="text-align:center">a_i,a_{pre}</td></tr><tr><td style="text-align:center">$a^i,a^{[n+m]}$</td><td style="text-align:center">a^i, a^{[n+m]}$\ $</td></tr></tbody></table><h2 id="括号">括号</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">(, )</td><td style="text-align:center">(, )</td></tr><tr><td style="text-align:center">[, ]</td><td style="text-align:center">[, ]</td></tr><tr><td style="text-align:center">⟨,⟩</td><td style="text-align:center">\lang, \rang 或 \langle, \rangle</td></tr><tr><td style="text-align:center">∣,∣</td><td style="text-align:center">\lvert, \rvert</td></tr><tr><td style="text-align:center">∥,∥</td><td style="text-align:center">\lVert, \rVert</td></tr><tr><td style="text-align:center">{,}</td><td style="text-align:center">\lbrace, \rbrace 或 \{,\} $\ $</td></tr></tbody></table><h2 id="增大括号：">增大括号：</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">(x)</td><td style="text-align:center">(x)</td></tr><tr><td style="text-align:center">$\big( x \big)$</td><td style="text-align:center">\big( x \big)</td></tr><tr><td style="text-align:center">$\Big( x \Big)$</td><td style="text-align:center">\Big( x \Big)</td></tr><tr><td style="text-align:center">$\bigg( x \bigg)$</td><td style="text-align:center">\bigg( x \bigg)</td></tr><tr><td style="text-align:center">$\Bigg(x\Bigg)$</td><td style="text-align:center">\Bigg( x \Bigg)</td></tr></tbody></table><h2 id="其他的大括号类似增大括号的方法">其他的大括号类似增大括号的方法</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)$</td><td style="text-align:center">\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)</td></tr><tr><td style="text-align:center">$\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]$</td><td style="text-align:center">\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]</td></tr><tr><td style="text-align:center">$\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle$</td><td style="text-align:center">\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle</td></tr><tr><td style="text-align:center">$\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert$</td><td style="text-align:center">\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert</td></tr><tr><td style="text-align:center">$\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert$</td><td style="text-align:center">\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert</td></tr></tbody></table><h2 id="分数-开方-累加-累乘">分数/开方/累加/累乘</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\frac{a}{b}$</td><td style="text-align:center">frac${a}{b}$</td></tr><tr><td style="text-align:center">$\sqrt{a + b}$</td><td style="text-align:center">sqrt${a + b}$</td></tr><tr><td style="text-align:center">$\sum_{i = 0}^{n}\frac{1}{i^2}$</td><td style="text-align:center">\sum_{i = 0}^{n}\frac{1}{i^2}</td></tr><tr><td style="text-align:center">$\prod_{i = 0}^{n}\frac{1}{x^2}$</td><td style="text-align:center">\prod_{i = 0}^{n}\frac{1}{x^2}</td></tr></tbody></table><h2 id="三角函数">三角函数</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\sin$</td><td style="text-align:center">\sin</td></tr><tr><td style="text-align:center">$\cos$</td><td style="text-align:center">\cos</td></tr><tr><td style="text-align:center">$\tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td></tr><tr><td style="text-align:center">$\csc$</td><td style="text-align:center">\csc</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td></tr><tr><td style="text-align:center">$\angle$</td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center">$40^\circ$</td><td style="text-align:center">40^\circ</td></tr></tbody></table><h2 id="对数函数">对数函数</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\ln{a + b}$</td><td style="text-align:center">\ln${a + b}$</td></tr><tr><td style="text-align:center">$\log_{a}^{b}$</td><td style="text-align:center">\log_{a}^${b}$</td></tr><tr><td style="text-align:center">$\lg{a + b}$</td><td style="text-align:center">\lg${a + b}$</td></tr></tbody></table><h2 id="二元运算符">二元运算符</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\pm$</td><td style="text-align:center">\pm</td><td style="text-align:center">正负号</td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td><td style="text-align:center">负正号</td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td><td style="text-align:center">乘号</td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center">\div</td><td style="text-align:center">除号</td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td><td style="text-align:center">星号</td></tr><tr><td style="text-align:center">$\star$</td><td style="text-align:center">\star</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center">竖线</td></tr><tr><td style="text-align:center">$\nmid$</td><td style="text-align:center">\nmid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td><td style="text-align:center">圈</td></tr><tr><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">点</td></tr><tr><td style="text-align:center">$\wr$</td><td style="text-align:center">\wr</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangle$</td><td style="text-align:center">\triangle</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\lhd$</td><td style="text-align:center">\lhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rhd$</td><td style="text-align:center">\rhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\unlhd$</td><td style="text-align:center">\unlhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\unrhd$</td><td style="text-align:center">\unrhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigodot$</td><td style="text-align:center">\bigodot</td><td style="text-align:center">点积</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:center">\bigotimes</td><td style="text-align:center">克罗内克积</td></tr><tr><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:center">\bigoplus</td><td style="text-align:center">异或</td></tr><tr><td style="text-align:center">$\dagger$</td><td style="text-align:center">\dagger</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ddagger$</td><td style="text-align:center">\ddagger</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\amalg$</td><td style="text-align:center">\amalg</td><td style="text-align:center">…</td></tr></tbody></table><h2 id="关系符号">关系符号</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\leq$</td><td style="text-align:center">\leq</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">$\geq$</td><td style="text-align:center">\leq</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:center">\equiv</td><td style="text-align:center">全等于</td></tr><tr><td style="text-align:center">$\models$</td><td style="text-align:center">\models</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\prec$</td><td style="text-align:center">\prec</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center">\succ</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sim$</td><td style="text-align:center">\sim</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\perp$</td><td style="text-align:center">\perp</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\preceq$</td><td style="text-align:center">\preceq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\succeq$</td><td style="text-align:center">\succeq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\simeq$</td><td style="text-align:center">\simeq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ll$</td><td style="text-align:center">\ll</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\gg$</td><td style="text-align:center">\gg</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\asymp$</td><td style="text-align:center">\asymp</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\parallel$</td><td style="text-align:center">\parallel</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:center">\approx</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cong$</td><td style="text-align:center">\cong</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\neq$</td><td style="text-align:center">\neq</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">$\doteq$</td><td style="text-align:center">\doteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\propto$</td><td style="text-align:center">\propto</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bowtie$</td><td style="text-align:center">\bowtie</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Join$</td><td style="text-align:center">\Join</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\smile$</td><td style="text-align:center">\smile</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\frown$</td><td style="text-align:center">\frown</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td><td style="text-align:center">…</td></tr></tbody></table><h2 id="极限-向量">极限/向量</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\lim$</td><td style="text-align:center">\lim</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center">$\lim_{n\rightarrow+\infty}n$</td><td style="text-align:center">\lim_{n\rightarrow+\infty}n</td></tr><tr><td style="text-align:center">$\vec{a}$</td><td style="text-align:center">\vec{a}</td></tr></tbody></table><h2 id="箭头">箭头</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center">\uparrow</td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center">\downarrow</td></tr><tr><td style="text-align:center">$\updownarrow$</td><td style="text-align:center">\updownarrow</td></tr><tr><td style="text-align:center">$\Uparrow$</td><td style="text-align:center">\Uparrow</td></tr><tr><td style="text-align:center">$\Downarrow$</td><td style="text-align:center">\Downarrow</td></tr><tr><td style="text-align:center">$\Updownarrow$</td><td style="text-align:center">\Updownarrow</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center">\leftarrow</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td></tr><tr><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center">\Leftarrow</td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\longrightarrow$</td><td style="text-align:center">\longrightarrow</td></tr><tr><td style="text-align:center">$\longleftarrow$</td><td style="text-align:center">\longleftarrow</td></tr><tr><td style="text-align:center">$\longleftrightarrow$</td><td style="text-align:center">\longleftrightarrow</td></tr><tr><td style="text-align:center">$\Longrightarrow$</td><td style="text-align:center">\Longrightarrow</td></tr><tr><td style="text-align:center">$\Longleftarrow$</td><td style="text-align:center">\Longleftarrow</td></tr><tr><td style="text-align:center">$\Longleftrightarrow$</td><td style="text-align:center">\Longleftrightarrow</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td></tr><tr><td style="text-align:center">$\longmapsto$</td><td style="text-align:center">\longmapsto</td></tr><tr><td style="text-align:center">$\hookleftarrow$</td><td style="text-align:center">\hookleftarrow</td></tr><tr><td style="text-align:center">$\hookrightarrow$</td><td style="text-align:center">\hookrightarrow</td></tr><tr><td style="text-align:center">$\rightharpoonup$</td><td style="text-align:center">\rightharpoonup</td></tr><tr><td style="text-align:center">$\leftharpoondown$</td><td style="text-align:center">\leftharpoondown</td></tr><tr><td style="text-align:center">$\rightleftharpoons$</td><td style="text-align:center">\rightleftharpoons</td></tr><tr><td style="text-align:center">$\leftharpoonup$</td><td style="text-align:center">\leftharpoonup</td></tr><tr><td style="text-align:center">$\rightharpoondown$</td><td style="text-align:center">\rightharpoondown</td></tr><tr><td style="text-align:center">$\leadsto$</td><td style="text-align:center">\leadsto</td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center">\nearrow</td></tr><tr><td style="text-align:center">$\searrow$</td><td style="text-align:center">\searrow</td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center">\swarrow</td></tr><tr><td style="text-align:center">$\nwarrow$</td><td style="text-align:center">\nwarrow</td></tr></tbody></table><h2 id="集合">集合</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\emptyset$</td><td style="text-align:center">\emptyset</td><td style="text-align:center">空集</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">属于</td></tr><tr><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center">\notin</td><td style="text-align:center">不属于</td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td><td style="text-align:center">子集</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\not\subset$</td><td style="text-align:center">\not\subset</td><td style="text-align:center">非子集</td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center">\subseteq</td><td style="text-align:center">真子集</td></tr><tr><td style="text-align:center">$\supseteq$</td><td style="text-align:center">\supseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td><td style="text-align:center">并集</td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:center">\bigcup</td><td style="text-align:center">并集</td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td><td style="text-align:center">交集</td></tr><tr><td style="text-align:center">$\bigcap$</td><td style="text-align:center">\bigcap</td><td style="text-align:center">交集</td></tr><tr><td style="text-align:center">$\uplus$</td><td style="text-align:center">\uplus</td><td style="text-align:center">多重集</td></tr><tr><td style="text-align:center">$\biguplus$</td><td style="text-align:center">\biguplus</td><td style="text-align:center">多重集</td></tr><tr><td style="text-align:center">$\sqsubset$</td><td style="text-align:center">\sqsubset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsupset$</td><td style="text-align:center">\sqsupset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsubseteq$</td><td style="text-align:center">\sqsubseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsupseteq$</td><td style="text-align:center">\sqsupseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td><td style="text-align:center">集合中的减法</td></tr></tbody></table><h2 id="微积分">微积分</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\prime$</td><td style="text-align:center">\prime</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:center">\int</td><td style="text-align:center">积分</td></tr><tr><td style="text-align:center">$\iint$</td><td style="text-align:center">\iint</td><td style="text-align:center">双重积分</td></tr><tr><td style="text-align:center">$\iiint$</td><td style="text-align:center">\iiint</td><td style="text-align:center">三重积分</td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:center">\oint</td><td style="text-align:center">曲线积分</td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td><td style="text-align:center">梯度</td></tr><tr><td style="text-align:center">$\int_0^2 x^2 dx$</td><td style="text-align:center">\int_0^2 x^2 dx</td><td style="text-align:center">其他的积分符号类似</td></tr></tbody></table><h2 id="逻辑运算">逻辑运算</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\because$</td><td style="text-align:center">\because</td><td style="text-align:center">因为</td></tr><tr><td style="text-align:center">$\therefore$</td><td style="text-align:center">\therefore</td><td style="text-align:center">所以</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td><td style="text-align:center">任意</td></tr><tr><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:center">\bigvee</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:center">\bigwedge</td><td style="text-align:center">逻辑或</td></tr></tbody></table><h2 id="上下标符号">上下标符号</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\bar{a}$</td><td style="text-align:center">\bar${a}$</td></tr><tr><td style="text-align:center">$\acute\a$</td><td style="text-align:center">\acute</td></tr><tr><td style="text-align:center">$\breve{a}$</td><td style="text-align:center">\breve${a}$</td></tr><tr><td style="text-align:center">$\grave{a}$</td><td style="text-align:center">\grave${a}$</td></tr><tr><td style="text-align:center">$\dot{a}$</td><td style="text-align:center">\dot${a}$</td></tr><tr><td style="text-align:center">$\ddot{a}$</td><td style="text-align:center">\ddot${a}$</td></tr><tr><td style="text-align:center">$\hat{a}$</td><td style="text-align:center">\hat${a}$</td></tr><tr><td style="text-align:center">$\check{a}$</td><td style="text-align:center">\check${a}$</td></tr><tr><td style="text-align:center">$\breve{a}$</td><td style="text-align:center">\breve${a}$</td></tr><tr><td style="text-align:center">$\tilde{a}$</td><td style="text-align:center">\tilde${a}$</td></tr><tr><td style="text-align:center">$\vec{a}$</td><td style="text-align:center">\vec${a}$</td></tr><tr><td style="text-align:center">$\overline{a + b + c + d}$</td><td style="text-align:center">\overline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\underline{a + b + c + d}$</td><td style="text-align:center">\underline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\overbrace{a + b + c + d}$</td><td style="text-align:center">\overbrace${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\underline{a + b + c + d}$</td><td style="text-align:center">\underline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\overbrace{a + \underbrace{b + c}_{1.0} + d}^{2.0}$</td><td style="text-align:center">\overbrace{a + \underbrace{b + c}_{1.0} + d}^${2.0}$</td></tr></tbody></table><h2 id="希腊字母">希腊字母</h2><table><thead><tr><th style="text-align:center">大写</th><th style="text-align:center">Markdown</th><th style="text-align:center">小写</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$A$</td><td style="text-align:center">\Alpha</td><td style="text-align:center">$\alpha$</td><td style="text-align:center">\alpha</td></tr><tr><td style="text-align:center">$B$</td><td style="text-align:center"></td><td style="text-align:center">$\beta$</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">$\Gamma$</td><td style="text-align:center">\Gamma</td><td style="text-align:center">$\gamma$</td><td style="text-align:center">\gamma</td></tr><tr><td style="text-align:center">$\Delta$</td><td style="text-align:center">\Delta</td><td style="text-align:center">$\delta$</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">$E$</td><td style="text-align:center">\Epsilon</td><td style="text-align:center">$\epsilon$</td><td style="text-align:center">\epsilon</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">\varepsilon</td></tr><tr><td style="text-align:center">$Z$</td><td style="text-align:center">\Zeta</td><td style="text-align:center">$\zeta$</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">$H$</td><td style="text-align:center">\Eta</td><td style="text-align:center">$\eta$</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">$\Theta$</td><td style="text-align:center">\Theta</td><td style="text-align:center">$\theta$</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">$I$</td><td style="text-align:center">\Iota</td><td style="text-align:center">$\iota$</td><td style="text-align:center">\iota</td></tr><tr><td style="text-align:center">$K$</td><td style="text-align:center">\Kappa</td><td style="text-align:center">$\kappa$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Lambda$</td><td style="text-align:center">\Lambda</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">\lambda</td></tr><tr><td style="text-align:center">$M$</td><td style="text-align:center">\Mu</td><td style="text-align:center">$\mu$</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">$N$</td><td style="text-align:center">\Nu</td><td style="text-align:center">$\nu$</td><td style="text-align:center">\nu</td></tr><tr><td style="text-align:center">$\Xi$</td><td style="text-align:center">\Xi</td><td style="text-align:center">$\xi$</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">$O$</td><td style="text-align:center">\Omicron</td><td style="text-align:center">$\omicron$</td><td style="text-align:center">\omicron</td></tr><tr><td style="text-align:center">$\Pi$</td><td style="text-align:center">\Pi</td><td style="text-align:center">$\pi$</td><td style="text-align:center">\pi</td></tr><tr><td style="text-align:center">$R$</td><td style="text-align:center">\Rho</td><td style="text-align:center">$\rho$</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">$\Sigma$</td><td style="text-align:center">\Sigma</td><td style="text-align:center">$\sigma$</td><td style="text-align:center">\sigma</td></tr><tr><td style="text-align:center">$T$</td><td style="text-align:center">\Tau</td><td style="text-align:center">$\tau$</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">$\Upsilon$</td><td style="text-align:center">\Upsilon</td><td style="text-align:center">$\upsilon$</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">$\Phi$</td><td style="text-align:center">\Phi</td><td style="text-align:center">$\phi$</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\varphi$</td><td style="text-align:center">\varphi</td></tr><tr><td style="text-align:center">$X</td><td style="text-align:center">\Chi</td><td style="text-align:center">$\chi$</td><td style="text-align:center">\chi</td></tr><tr><td style="text-align:center">$\Psi$</td><td style="text-align:center">\Psi</td><td style="text-align:center">$\psi$</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">$\Omega$</td><td style="text-align:center">\Omega</td><td style="text-align:center">$\omega$</td><td style="text-align:center">\omega</td></tr></tbody></table><h2 id="省略号">省略号</h2><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:center">一般用于有下标的序列</td></tr><tr><td style="text-align:center">$\ldots$</td><td style="text-align:center">\ldots</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:center">纵向位置比\dots稍高</td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td><td style="text-align:center">竖向</td></tr><tr><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td><td style="text-align:center">…</td></tr></tbody></table><p><strong>例：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line">x<span class="emphasis">_1, x_</span>2, \dots, x<span class="emphasis">_n \quad \quad 1, 2, \cdots, n \quad \quad \vdots \quad\quad \ddots </span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><p>$$<br>x_1, x_2, \dots, x_n \quad \quad 1, 2, \cdots, n \quad \quad \vdots \quad\quad \ddots<br>$$</p><h2 id="分支">分支</h2><p>$$<br>y=<br>\begin{cases}<br>-x,\quad x\leq 0\<br>x, \quad x&gt;0<br>\end{cases}<br>\tag{1}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">y=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq 0\\</span><br><span class="line">x, \quad x&gt;0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>其他环境</strong></p><p>下面这些标签环境在很多markdown中不能解析</p><table><thead><tr><th style="text-align:center">环境名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">align</td><td style="text-align:center">最基本的对齐环境</td></tr><tr><td style="text-align:center">multline</td><td style="text-align:center">非对齐环境</td></tr><tr><td style="text-align:center">gather</td><td style="text-align:center">无对齐的连续方程</td></tr></tbody></table><h2 id="矩阵">矩阵</h2><p>不带括号：<br>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\tag{1}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>带括号</p><p>$$\left(<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right)<br>\tag{2}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left(</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right)</span><br><span class="line">\tag&#123;2&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="中括号">中括号</h2><p>$$\left[<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right]<br>\tag{3}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">\tag&#123;3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="大括号">大括号</h2><p>$$\left{<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right}<br>\tag{4}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left\&#123;</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right\&#125;</span><br><span class="line">\tag&#123;4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="带省略号">带省略号</h2><p>$$<br>\left[<br>\begin{matrix}<br>a &amp; b &amp; \cdots &amp; a\<br>b &amp; b &amp; \cdots &amp; b\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots\<br>c &amp; c &amp; \cdots &amp; c<br>\end{matrix}<br>\right]<br>\tag{5}<br>$$</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\left[</span></span><br><span class="line"><span class="string">\begin&#123;matrix&#125;</span></span><br><span class="line">a &amp; b &amp; <span class="string">\cdots</span> &amp; a<span class="string">\\</span></span><br><span class="line">b &amp; b &amp; <span class="string">\cdots</span> &amp; b<span class="string">\\</span></span><br><span class="line"><span class="string">\vdots</span> &amp; <span class="string">\vdots</span> &amp; <span class="string">\ddots</span> &amp; <span class="string">\vdots\\</span></span><br><span class="line">c &amp; c &amp; <span class="string">\cdots</span> &amp; c</span><br><span class="line"><span class="string">\end&#123;matrix&#125;</span></span><br><span class="line"><span class="string">\right]</span></span><br><span class="line"><span class="string">\tag&#123;5&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="带横线-竖线分割的矩阵">带横线/竖线分割的矩阵</h2><p>$$<br>\left[<br>\begin{array}{c|cc}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{array}<br>\right]<br>\tag{6}<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;array&#125;&#123;c|cc&#125;</span><br><span class="line">1 &amp; 2 &amp; 3 \\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right]</span><br><span class="line">\tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>横线用 \hline 分割<br>$$<br>\left[<br>\begin{array}{ccc}<br>1 &amp; 2 &amp; 3 \ \hline<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{array}<br>\right]<br>\tag{7}<br>$$</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\left[</span></span><br><span class="line">    <span class="string">\begin&#123;array&#125;&#123;ccc&#125;</span></span><br><span class="line">    <span class="number">1</span> &amp; <span class="number">2</span> &amp; <span class="number">3</span> <span class="string">\\</span> <span class="string">\hline</span></span><br><span class="line">    <span class="number">4</span> &amp; <span class="number">5</span> &amp; <span class="number">6</span> <span class="string">\\</span></span><br><span class="line">    <span class="number">7</span> &amp; <span class="number">8</span> &amp; <span class="number">9</span></span><br><span class="line">    <span class="string">\end&#123;array&#125;</span></span><br><span class="line"><span class="string">\right]</span></span><br><span class="line"><span class="string">\tag&#123;7&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Markdown语法汇总</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="我的Markdown" scheme="http://chfychin.cn/tags/%E6%88%91%E7%9A%84Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数学建模</title>
    <link href="http://chfychin.cn/posts/a66872a2.html"/>
    <id>http://chfychin.cn/posts/a66872a2.html</id>
    <published>2024-07-08T12:48:58.000Z</published>
    <updated>2024-07-11T08:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。">数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。</h1><p><strong>建模步骤</strong>:</p><ul><li>1.分析问题</li><li>2.模型假设</li><li>3.求解或解释模型</li><li>4.模型验证</li><li>5.实施模型</li><li>6.改进模型</li></ul><h1 id="一、成比例模型">一、成比例模型</h1><p>利用成比例思想建立成比例模型:</p><ul><li>(1)画出散点图</li><li>(2)确定他们是过原点的直线，计算出斜率</li></ul><p>当模型为非曲线时，可以将其化为直线:</p><ul><li>1.图象向下凸可以将横坐标的次方系数适量增大，反之，横坐标次方系数减小。（次方系数可出现分数）</li><li>2.当开头结尾都受限制时，可以考虑他的增长率</li></ul><h1 id="二、动力系统">二、动力系统</h1><h2 id="线性动力系统">线性动力系统:</h2><ul><li>1.令$a_{n+1}=r*a_n$，则它的解为$a_n=r^na_0$,其中$a_0$为给定初始值。</li><li>2.当 $a_0=a$时，如果对所有的n=1,2,3,…有$$a_n=a$$则将数α称为动力系统 $a_{n+1} =f(a_n)$的<strong>平衡点或不动点</strong>。即 $a_n=a$是该动力系统的常数解。</li><li>3.线性动力系统解的长期趋势:$$a_{n+1}=ra_n,n=0,1,···（r为常数）$$$$a_n=r^na_0,n=1,2,···$$</li></ul><table><thead><tr><th>r</th><th>趋势</th></tr></thead><tbody><tr><td>r=0</td><td>常数解以及在0处的平衡点</td></tr><tr><td>r=1</td><td>所有初值都是常数解</td></tr><tr><td>r&lt;0</td><td>震荡</td></tr><tr><td>$|r|$&lt;1</td><td>衰减到极限值为0</td></tr><tr><td>$|r|$&gt;1</td><td>无限增长</td></tr></tbody></table><h2 id="形如-a-n-1-ra-n-b-的动力系统">形如 $a_{n+1}=ra_n+b$ 的动力系统</h2><ul><li>$a_{n+1}=ra_n+b$,其平衡点是$a=\frac{b}{1-r},r\neq1$</li><li>当$r=1,b=0$时，每个初始值都是平衡点</li><li>当$r=1,b!=0$时，不存在平衡点。</li></ul><h2 id="形如-a-n-1-ra-n-b-r-neq1-的动力系统">形如 $a_{n+1}=ra_n+b,(r\neq1)$ 的动力系统</h2><ul><li>解为:$a_n=r^nc+\frac{b}{1-r}$,(c是依赖初始值的某一常数)</li><li>对于动力系统$a_{n+1}=ra_n+b,(b\neq0)$<table><thead><tr><th>r的值</th><th>长期趋势</th></tr></thead><tbody><tr><td>|r|&lt;1</td><td>稳定平衡点</td></tr><tr><td>|r|&gt;1</td><td>不稳定平衡点</td></tr><tr><td>r=1</td><td>没有平衡点</td></tr></tbody></table></li></ul><h1 id="三、建模过程">三、建模过程</h1><p>模型准备–&gt;模型假设–&gt;模型建立–&gt;模型求解–&gt;模型分析–&gt;模型检验–&gt;模型应用</p><h1 id="四、模型拟合准则">四、模型拟合准则:</h1><p><strong>按照一个或一些选出的模型类型对数据进行拟合。</strong></p><h2 id="切比雪夫准则">切比雪夫准则</h2><p><strong>切比雪夫准则对有大偏差的单个数据点赋以更大的权重，当极小化最大绝对偏差很重要时可以采用这一准则。</strong></p><ul><li>给定某一函数类型$y=f(x)$及m个数据点$(x_i,y_i),j=1,2,3,···,m$.该切比雪夫准则是在整个数据点集上使最大绝对值偏差:$min{\max_{1 \leq i \leq m}|y_i-f(x_i)|}$最小.</li></ul><h2 id="极小化绝对偏差之和">极小化绝对偏差之和</h2><ul><li>给定某一函数类型$y=f(x)$及m个数据点$(x_i,y_i),j=1,2,3,···,m$.确定函数类型$y=f(x)$的参数，使绝对值偏差之和:$min{\sum_{i=1}^{m}|y_i-f(x_i)|}$最小</li><li>极小化绝对偏差之和这个准则赋以每个数据点相同的权重，其稳健性较好，对异常值不太敏感,<strong>常用数值解法求出近似解。</strong>。</li></ul><h2 id="最小二成准则">最小二成准则</h2><ul><li>给定某一函数类型$y=f(x)$(参数待定)及m个数据点$(x_i,y_i),j=1,2,3,···,m$.该准则是确定函数类型$y=f(x)$的参数，使偏差平方和:$min{\sum_{i=1}^{m}({y_i-f(x_i)})^2}$最小</li><li>最小二乘准则对偏差较大的数据点赋以较大的权重对偏差较小的数据点赋以较小的权重，其稳健性较差对异常值敏感。<br>与前两个准则相比，最小二乘准则产生的优化问题易于解析求解。由于偏差平方和是一个连续函数，可对待定参数求偏导得到正规方程，通过正规方程来确定最优参数进而确定出所给函数类型中的最佳函数。</li></ul><h1 id="回归分析">回归分析</h1><h2 id="回归分析-2">回归分析</h2><h3 id="由来">由来</h3><p><strong>由来：英国著名统计学家高尔顿是最先应用统计方法研究两个变量之间关系问题的人。高尔顿研究发现父母身高与儿女身高之间有这么一种关系:父母高-&gt;儿女也高，父母矮-&gt;儿女也矮</strong></p><table><thead><tr><th style="text-align:center">父母平均身高</th><th style="text-align:center">儿女平均身高</th></tr></thead><tbody><tr><td style="text-align:center">高一个单位</td><td style="text-align:center">高半个单位</td></tr><tr><td style="text-align:center">矮一个单位</td><td style="text-align:center">矮半个单位</td></tr></tbody></table><p>逐步回归<br><strong>具有回归于人口总平均高的趋势</strong></p><p>用高尔顿的话说，儿女身高“回归”到中等身高。这就是回归一词的最初由来。把这种后代的身高向中间靠拢的趋势称为“<strong>回归现象</strong>”。<br>后来，人们把由一个变量的变化去推测另一个变量的方法称为为“<strong>回归方法</strong>”。</p><h3 id="为何使用回归分析">为何使用回归分析</h3><p>(1) 更好地了解:<br>对某一现象建模，以更好地了解该现象并有可能基于对该现象的了解来影响政策的制定以及决定采取何种相应措施。基本目标是测量一个或多个变量的变化对另一变量变化的影响程度。示例:了解某些特定濒危鸟类的主要栖息地特征(例如:降水、食物源、植被、、天敌)，以协助通过立法来保护该物种。<br>(2) 建模预测:<br>示例:如果已知人口增长情况和典型的天气状况，那么明年的用电量将会是多少?<br>(3) 探索检验假设:<br>还可以使用回归分析来深入探索某些假设情况。假设您正在对住宅区的犯罪活动进行建模，以更好地了解犯罪活动并希望实施可能阻止犯罪活动的策略。开始分析时，您很可能有很多问题或想要检验的假设情况。</p><h3 id="回归分析的作用主要有以下几点">回归分析的作用主要有以下几点</h3><ul><li>挑选与因变量相关的自变量;</li><li>描述因变量与自变量之间的关系强度;</li><li>生成模型，通过自变量来预测因变量:</li><li>根据模型，通过因变量，来控制自变量。</li></ul><p>是一种预测预报方法，提前知道未来的状态和发展趋势。<br>它研究的是因变量Y和自变量X之间的关系，是一种预测性的建模技术。</p><p><img src="https://tuchuang.voooe.cn/images/2024/07/16/808aa45672dfef6165819a53d7aa81a6.png" alt="img"></p><h3 id="线性回归">线性回归</h3><table><thead><tr><th style="text-align:center">线性</th><th style="text-align:center">非线性</th></tr></thead><tbody><tr><td style="text-align:center">一元线性回归</td><td style="text-align:center">一元非线性回归</td></tr><tr><td style="text-align:center">多元线性回归</td><td style="text-align:center">多元非线性回归</td></tr></tbody></table><h2 id="一元线性回归">一元线性回归</h2><p><strong>一元线性回归可用来分析自变量x取值与因变量y取值的内在联系，这里的自变量x是确定性的变量，因变量y是随机性的变量。</strong></p><h3 id="一元线性回归模型构建">一元线性回归模型构建</h3><p>一元线性回归的模型为: $y=a+bx+ε目ε\sim N(0，σ^2)$</p><ul><li>其中$a$表示截距，$b$表示直线的倾斜率;$a、b$称为回归系数，与自变量$x$无关。</li><li>$ε$ 是随机误差项，并总是假设$ε\sim N(0，σ^2)$。</li></ul><p>若对自变量x与因变量y分别进行n次独立观测，得到:</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">$X$</td><td style="text-align:center">$x_1$</td><td style="text-align:center">$x_2$</td><td style="text-align:center">···</td><td style="text-align:center">$x_n$</td></tr><tr><td style="text-align:center">$Y$</td><td style="text-align:center">$y_1$</td><td style="text-align:center">$y_2$</td><td style="text-align:center">···</td><td style="text-align:center">$y_n$</td></tr></tbody></table><p>对于参数a,b用最小二乘法估计，即应选取估计值，6，使当$a=\hat{a},b=\hat{b}$ 时$\hat{y_i}$与估计值$\hat{y_i}=\hat{a}+\hat{b}x$, 误差平方和 $Q=\sum_{i=1}^n{ε_i}^2=\sum_{i=1}^n{(y_i-\hat{y_i})}^2$达到最小。</p><p>为此，我们令</p><ul><li>$\frac{\partial Q}{\partial a}=-2\sum_{i=1}^n{(y_i-a-bx_i)}^2=0$</li><li>$\frac{\partial Q}{\partial b}=-2\sum_{i=1}^nx_i{(y_i-a-bx_i)}^2=0$</li></ul><p>得</p><ul><li>$\hat{b}=\frac{\sum_{i=1}^n(x_i-\overline{x})(y_i-\overline{y})}{\sum_{i=1}^n{(x_i-\overline{x})}^2}$</li><li>$\hat{a}=\hat{y_i}-\hat{b}\overline{x}$</li></ul><p>$\hat{a},\hat{b}$为$a,b$的最小二乘估计，其中分别是$\overline{x},\overline{y}$分别是 x,y, 的样本均值。</p><h3 id="回归方程的检验">回归方程的检验</h3><p><strong>回归方程的假设检验</strong>：</p><ul><li>回归模型的假设检验</li><li>回归系数的假设检验</li></ul><h4 id="回归模型的假设检验">回归模型的假设检验</h4><p><strong>检验原因</strong>:因变量y与自变量x之间是否存在如模型所表示的关系是需要检验的。<br><strong>方法</strong>:F检验法</p><ul><li>模型的误差平方和为: $SSE=\sum_{i=1}^n{(y_i-\hat{y_i})}^2$</li><li>模型的回归平方和为: $SSR=\sum_{i=1}^n{(\hat{y_i}-\overline{y_i})}^2$</li><li>模型的总离差平方和为: $SST=\sum_{i=1}^n{(y_i-\overline{y_i})}^2$</li><li>可得: $SST=SSE+SSR$</li></ul><p>对于模型$y=a+b_ix_i+ε,i=1,2…,p.$<br>显然，模型成立的对立面是: y与x的线性关系不明显，即$b_i$很小，所以我们可以令原假设为$H_0:b_1=b_2=…=b_p=0$，如果原假设成立，则构造统计量<br>$$<br>F=\frac{MSR}{MSE}=\frac{SSR/P}{SSE/(n-p-1)}\sim F(p,n-p-1)<br>$$<br>p是自变量个数，$\hat{σ}^2=MSE=SSE/(n-p-1)$ 是 $σ^2$ 的无偏估计。</p><p>在显著性水平$\alpha$下，对于上$\alpha$分位数 $F_\alpha(p,n-p-1)$，若 $F&lt;F_\alpha(p,n-p-1)$，则接受$H_0$,否则拒绝$H_0$。<br><strong>注:这里接受H。只是说明了y与x的线性关系不明显，也可能是非线性关系，如平方关系</strong></p><p><strong>另一种方法</strong>:通过判定系数来衡量$y$与$x_1,x_2,…,x_n$,的相关程度。即(回归平方和在总平方和中的比值):<br>$$<br>R_2=\frac{SSR}{SST}<br>$$<br>其中,$R=\sqrt{R^2}$ 称为复相关系数，$R$ 越大(通常大于$0.8$或$0.9$)，$y$与$x_1,x_2,…,x_n$的相关关系越密切。</p><h4 id="回归系数的假设检验">回归系数的假设检验</h4><p><strong>检验原因</strong>: 当前面的回归模型检验通过，对自变量系数的检验，即考察每一个自变量对因变量的影响是否显著。<br><strong>方法</strong>: $t$ 检验法(做 $p+1$ 次检验)<br>$\quad$设随机变量$x_1,x_2,…,x_n$对应的系数为 $\hat{b_1},\hat{b_2},…,\hat{b_n}$，各个 $x_i$ 都服从正态分布, 所以 6也服从正态分布。($b_0=a$)<br>当 $H_0: b_i=0,i=0,1,2…p.$ 成立时，有$$<br>t_i=\frac{b_j/ \sqrt{c_{ii}}}{\sqrt{SSE/(n-p-1)}}\sim t<br>(n-p-1)$$<br>($c_{ii}$:是正规方程组的系数矩阵的逆矩阵中的元素)</p><p>在显著性水平$\alpha$下，若$t_i&lt;t_{\frac{\alpha}{2}}(n-m-1)$，则接受$H_0$, 否则拒绝$H_0$: 认为系数不为0.即通过检验。</p><h4 id="利用回归模型进行预测-点预测和区间预测">利用回归模型进行预测(点预测和区间预测)</h4><p>$eg$: 总体数量为 $n$，对总体的均值进行预测。<br>(1)当 $x=x_0$ 时，用方程立 $\hat{y_0}=a+bx_0$。预测 $y_0$ 的值，为点预测。($\hat{y_0}$)<br>(2)当 $x=x_0$,时，用区间去换测 $y$ 的取值范围，为区间预测。([$\hat{y_0}-\Delta{x},\hat{y_0}+\Delta{x}$])</p><h2 id="一元非线性回归">一元非线性回归</h2><h3 id="一元非线性回归介绍">一元非线性回归介绍</h3><p>$\quad$ 非线性回归是回归函数关于未知回归系数具有非线性结构的回归。简单理解就是非线性回归就是曲线回归。<br>$\quad$ 实际问题中，变量之间常常不是直线。这时，通常是选配一条比较接近的曲线，通过变量替换把非线性方程加以线性化，然后按照线性回归的方法进行拟合。(<strong>将非线性转化为线性</strong>)。<br>$\quad$ <strong>在做非线性回回归时，一般要先确定该非线性回归模型后再做非线性回归;<br>$\quad$ 解题思路是先将所给的数据点通过matlab绘图的方式画出来，再看看画出来的散点图比较符合哪个非线性回归模型就选择那个模型，最后再做非线性回归分析。</strong></p><p>转化为一元线性常用 <a href="https://blog.csdn.net/A15216110998/article/details/80479942">取对数再做回归</a></p><p><strong>如:我们可以通过对因变量或者自变量进行一定的变形，将问题转化为一元线<br>性回归分析。</strong></p><table><thead><tr><th style="text-align:center">曲线回归方程</th><th style="text-align:center">方法</th><th style="text-align:center">转换后的直线回归方程</th></tr></thead><tbody><tr><td style="text-align:center">$y=a+\frac{b}{x}$</td><td style="text-align:center">对自变量x取倒数</td><td style="text-align:center">$y=a+bx’$</td></tr><tr><td style="text-align:center">$y=ax^b$</td><td style="text-align:center">将方程两边取对数</td><td style="text-align:center">$lny=lna+blnx$</td></tr><tr><td style="text-align:center">$y=ae^{bx}$</td><td style="text-align:center">将方程两边取对数</td><td style="text-align:center">lny=lna+bx</td></tr></tbody></table><table><thead><tr><th style="text-align:center">曲线回归方程</th><th style="text-align:center">$y’$</th><th style="text-align:center">$x’$</th><th style="text-align:center">$a’$</th><th style="text-align:center">$b’$</th><th style="text-align:center">转换后的直线回归方程</th></tr></thead><tbody><tr><td style="text-align:center">$\hat{y}=ae^{bx}(a&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=ab^x(a&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center">$b’=lnb$</td><td style="text-align:center">$y’=a’+b’x$</td></tr><tr><td style="text-align:center">$\hat{y}=a+blnx(x&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center">$x’=lnx$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx’$</td></tr><tr><td style="text-align:center">$\hat{y}=ax^b(a&gt;0,x&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center">$x’=lnx$</td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’+bx’$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{x}{a+bx}(x\neq-\frac{a}{b})$</td><td style="text-align:center">$y’=\frac{x}{y}$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{a+bx}{x}(x\neq0)$</td><td style="text-align:center">$y’=yx$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{1}{a+bx}(x\neq-\frac{a}{b})$</td><td style="text-align:center">$y’=\frac{1}{y}$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{k}{1+ae^{-bx}}(a&gt;0)$</td><td style="text-align:center">$y’=ln(\frac{k-y}{y})$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’-bx$</td></tr></tbody></table><h3 id="步骤">步骤</h3><p>1.描散点图，确立回归方程的模型;<br>2.求方程中待定系数，建立回归方程：</p><ul><li>将非线性方程化为线性方程;</li><li>求待定系数，建立线性方程;</li><li>对线性方程作回归关系显著性检验；</li><li>将线性方程还原为非线性。</li></ul><h2 id="多元线性回归">多元线性回归</h2><h3 id="多元线性回归介绍">多元线性回归介绍</h3><p>$\quad$ 在回归分析中，如果有两个或两个以上的自变量，就称为<strong>多元回归</strong>。实际应用中，一种现象常常是与多个因素相联系的，由多个自变量的最优组合共同来预测或估计因变量，比只用一个自变量进行预测或估计更有效，更符合实际。总的来说，回归分析就是用来做预测的，多元回归要比一元回归更加高效实用。<br>$\quad$ <strong>多元回归分析</strong>是研究多个变量之间的关系的回归分析方法，是反映一种现象或事物的数量依多种现象或事物的数量的变动而相应地变动的规律，建立多个变量之间线性或非线性数学模型数量关系式的统计方法。</p><h3 id="多元线性回归模型">多元线性回归模型</h3><p>多元线性回归模型通常用来描述变量$y$和$x$之间的随机线性关系，即:</p><ul><li>$y=\beta_0+\beta_1x_1+…+\beta_mx_m+\varepsilon$</li><li>$ε$ 是随机误差项，并总是假设$ε\sim N(0，σ^2)$。</li></ul><p>式中: $\beta_0,\beta_1,…,\beta_m,σ2$ 都是与 $x_1,x_2,…,x_m$ 无关的未知参数，其中 $\beta_0,\beta_1,…,\beta_m$ 称为<strong>回归系数</strong>。</p><h2 id="多元非线性回归">多元非线性回归</h2><h3 id="多元非线性回归介绍">多元非线性回归介绍</h3><p>$\quad$ 建立多元非线性回归方程在科学研究中应用广泛，其重要方法是将<strong>非线性</strong>回归方程转化为<strong>线性</strong>回归方程。<br><strong>转化时应首先选择合适的非线性回归形式，并将其线性化，确定线性化回归方程的系数，最后确定非线性回归方程中的参数。</strong><br>$\quad$ 首先决定非线性模型的函数类型，对于其中可线性化问题则通过变量变换将其线性化，从而归结为前面的多元线性回归问题来解决。<br>$\quad$ 选择合适的曲线类型不是一件轻而易举的工作，首先对原始数据作图或则依靠专业知识和经验，来选择适当的函数进行拟合。<br>常用的曲线类型有幂函数，指数函数，抛物线函数，对数函数和S型函数</p><h3 id="回归分析中的：线性-非线性">回归分析中的：线性&amp;非线性</h3><p><strong>线性函数</strong> $\neq$ <strong>线性回归方程</strong></p><p>$Y_i=\beta_0+\beta_1x_{i1}+…+\beta_px_{ip}+\varepsilon_i$<br>$Y_i=\beta_1x_1+\beta_2x_i^2+\varepsilon_i$<br>$Y=\beta_0+e^\beta_1x_1+\varepsilon$</p><p><strong>方程一和方程二为线性回归，方程三为非线性回归。</strong><br>线性回归中<strong>线性</strong>的<strong>含义</strong>: 因变量$y$对于未知的回归系数($\beta_0,\beta_1,…,\beta_k$)是线性的。这就是问题中所说的<strong>参数线性</strong>。换句话说只要系数B是线性的就称为线性回归，方程一和方程二中的回归系数B都是线性的，而方程三中自变量X1的回归系数为非线性，因此，方程一和方程二为线性回归，方程三为非线。</p>]]></content>
    
    
    <summary type="html">备战数学建模</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数学建模" scheme="http://chfychin.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>毛概学习笔记</title>
    <link href="http://chfychin.cn/posts/bf6d62af.html"/>
    <id>http://chfychin.cn/posts/bf6d62af.html</id>
    <published>2024-06-24T03:26:37.000Z</published>
    <updated>2024-06-24T11:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7b15abbd7a7d227cf7cc59dd8ade2d1506d7af9d36661f753ebdef08109c092c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">毛泽东思想和中国特色社会主义理论体系概论期末复习（2023版）</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="毛概" scheme="http://chfychin.cn/tags/%E6%AF%9B%E6%A6%82/"/>
    
  </entry>
  
  <entry>
    <title>STM32答辩</title>
    <link href="http://chfychin.cn/posts/e22e37c2.html"/>
    <id>http://chfychin.cn/posts/e22e37c2.html</id>
    <published>2024-06-16T11:42:08.000Z</published>
    <updated>2024-06-17T01:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>STM32：系统内核小、专用性强、系统精简<br>Stm32 三种开发方式：寄存器模式、标准库模式、HAL库模式（全称是Hardware Abstraction Layer）</p><h2 id="GPIO">GPIO</h2><p>GPIO的全称是General-Purpose Input /Output，中文意思是通用IO端口。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/B08C4D251F5874F0AF73421C80CC09A0.png" alt="B08C4D251F5874F0AF73421C80CC09A0.png"></p><p>开漏输出和推挽输出的区别：主要是开漏输出只可以输出低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)；推挽输出可以输出高、低电平，连接数字器件。</p><h2 id="USART">USART</h2><p>USART的全称是Universal Synchronous/Asynchronous Receiver/Transmitter，中文名叫做通用同步异步收发器。这是一种全双工的异步通信，发送端称为TXD(Transmit Data)，接收端称为RXD（Receive Data）。串口的设置是设置起始位、数据位、校验位、停止位和波特率，通信的双方要设置相同的参数，并且硬件硬件交叉连接。<br>USART主要特征</p><ol><li>全双工异步通信。</li><li>单线半双工通信。</li><li>单独的发送器和接收器使能位。</li><li>可配置使用DMA的多缓冲器通信。</li><li>多个带标志的中断源。</li><li>可编程数据字长度（8位或9位） 。</li><li>可配置的停止位（支持1或2个停止位）。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/1678E7A91DE1E3E81C4D1244450B9784.png" alt="1678E7A91DE1E3E81C4D1244450B9784.png"></li></ol><h2 id="ADC">ADC</h2><p><strong>ADC</strong> 的全称是“Analog-to-Digital Converter”，中文是“模拟/数字转换器”，将连续变化的模拟信号转换为离散的数字信号。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/28AD6228738EDCD6D1459AA4F7C4DE63.png" alt="28AD6228738EDCD6D1459AA4F7C4DE63.png"></p><h3 id="ADC的性能指标">ADC的性能指标</h3><ul><li>量程：能测量的电压范围。</li><li>分辨率：ADC能辨别的最小模拟量，通常以输出二进制数的位数表示，比如:8、10、12、16位等。位数越多，分辨率越高，一般来说分辨率越高，转化时间越长。</li><li>转化时间：从转换开始到获得稳定的数字量输出所需要的时间称为转换时间。</li></ul><h3 id="ADC的特性">ADC的特性</h3><ol><li>12位精度下转换速度可高达1MHZ，即1微秒。</li><li>供电电压：VSSA：0V；VDDA：24V~3.6V。</li><li>ADC输入范围：VREF- ≤ VIN ≤ VREF+（一般VREF和VSSA接在一起，即0V；VREF+和VDDA接在一起，即3.3V，所以一般ADC输入范围为0V~3.3V）。</li><li>采样时间可配置，采样时间越长，转换结果相对越准确，但是转换速度就越慢。</li><li>ADC的数据结果是12位，可以左对齐或右对齐方式存储在16位数据寄存器中。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/DE3C360E1F33DEE6CCFF268A78E8F122.png" alt="DE3C360E1F33DEE6CCFF268A78E8F122.png"></li></ol><h2 id="DMA">DMA</h2><p>DMA的全称是“Direct Memory Access”，中文名称“直接存储器访问”，提供在外设与内存、存储器和存储器、外设与外设之间的高速数据传输使用。它允许不同速度的硬件装置来沟通，而不需要依赖于CPU，因此CPU可以在此期间执行其他任务。<br>DMA搬运的地点</p><ul><li>存储器–&gt;存储器（例如:复制某特别大的数据buf）</li><li>存储–&gt;外设（例:将某数据buf写入串口TDR寄存器）</li><li>外设–&gt;存储器（例如:将串口RDR寄存器写入某数据buf）<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/25A3AC7B7267753B450847A07C9FA174.png" alt="25A3AC7B7267753B450847A07C9FA174.png"></li></ul><h2 id="IIC">IIC</h2><p>IIC全称是Inter-Integrated Circuit (集成电路总线)，用于连接微控制器及其外围设备。IIC属于半双工同步通信方式。<br>IIC串行总线有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL。两条线都接上拉电阻，以确保总线空闲时刻为高电平，其中时钟信号是由主控器件产生。</p><ul><li>起始信号<br>当时钟线（SCL）为高平时，数据线（SDA）从高电平跳变到低电平。</li><li>起始信号<br>当时钟线（SCL）为高平时，数据线（SDA）从高电平跳变到低电平。</li><li>应答信号<br>主机每发送一个字节（8个bit），就在第9个时钟脉冲期间释放数据线（SDA），由从机反馈一个应答信号。<br>应答信号（SDA）为低电平时，规定为有效应答位（ACK，简称应答位），表示从机成功地接收了该字节。<br>应答信号（SDA）为高电平时，规定为非应答位（NACK），一般表示从机接收该字节没有成功。</li></ul><h2 id="PWM">PWM</h2><p>PWM全称是Pulse Width Modulation（脉冲宽度调制），它是通过对一系列脉冲的宽度进行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于有效电平的时间占据整个信号周期的百分比。</p><ul><li>PWM模式1<br>在向上计数时，一旦CNT&lt;CCRx 时输出为有效电平，否则为无效电平。<br>在向下计数时，一旦CNT&gt;CCRx 时输出为无效电平，否则为有效电平。</li><li>PWM模式2<br>在向上计数时，一旦CNT&lt;CCRx 时输出为无效电平，否则为有效电平。<br>在向下计数时，一旦CNT&gt;CCRx 时输出为有效电平，否则为无效电平。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/16F22C096F8570792E7467C8D94F516D.png" alt="16F22C096F8570792E7467C8D94F516D.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/DF802ECC05D4F8502679EA4FAA6D1C52.png" alt="DF802ECC05D4F8502679EA4FAA6D1C52.png"></li></ul><h2 id="TIM">TIM</h2><ul><li>时钟产生器<br>STM32通用定时器有四种时钟源：<br>内部时钟（CK_INT）<br>外部时钟模式1：外部触发输入（TIMx_ETR）<br>内部触发输入（ITRx）：使用一个定时器作为另一个定时器的预分频器<br>外部时钟模式2：外部输入引脚</li></ul><p>高级定时器（TIM1、TIM8）、基本定时器（TIM6、TIM7）、通用定时器（TIM2~TIM5）<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/247B25D6084DFDEE33672156715F67C8.png" alt="247B25D6084DFDEE33672156715F67C8.png"></p><ul><li>向上计数：<br>计数器从0开始计数（递增），计数到自动加载值（TIMx_ARR）后产生一个计数器溢出事件并重新从0开始计数。</li><li>向下计数：<br>计数器从自动加载值（TIMx_ARR）开始计数（递减），计数到0后产生一个计数器溢出事件并重新从自动加载值（TIMx_ARR）开始计数。</li><li>中心对齐计数：<br>计数器从0开始计数（递增），计数到自动加载值（TIMx_ARR）- 1后产生一个计数器溢出事件并从自动加载值（TIMx_ARR）开始计数（递减），计数到1后产生一个计数器溢出事件并重新从0开始计数。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/11416BE9E27DA7521661C27E02E55A93.png" alt="11416BE9E27DA7521661C27E02E55A93.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/D7548BCE7BCFD388F49C7E5FCC44C580.png" alt="D7548BCE7BCFD388F49C7E5FCC44C580.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/A9A2811A44F64A543871C719CFAF8B96.png" alt="A9A2811A44F64A543871C719CFAF8B96.png"></li></ul><h2 id="DHT11温湿度传感器">DHT11温湿度传感器</h2><p>工作电压范围：3.3V~5.5V<br>工作电流：平均0.5mA<br>输出：单总线数字信号<br>测量范围：湿度20~90%RH，温度0~50°C<br>精度：湿度±5%，温度±2°C<br>分辨率：湿度±1%，温度±1°C</p><ul><li>电源引脚<br>DHT11的供电电压为3~5.5 V。传感器上电后，要等待 1s 以越过不稳定状态，在此期间无需发送任何指令。电源引脚（VDD，GND）之间可增加一个100nF 的电容，用以去耦滤波。</li><li>串行接口（单线双向）<br>DATA 用于微处理器与 DHT11之间的通讯和同步，采用单总线数据格式，一次通讯时间4ms左右，数据分小数部分和整数部分</li></ul><p>DHT11 采用单总线协议与单片机通信，单片机发送一次复位信号后，DHT11 从低功耗模式转换到高速模式，等待主机复位结束后，DHT11 发送响应信号，并拉高总线准备传输数据。一次完整的数据为 40bit，按照高位在前，低位在后的顺序传输。<br>数据格式为：8bit 湿度整数数据+8bit 湿度小数数据+8bit 温度整数数据+8bit 温度小数数据+8bit 校验和，一共 5 字节（40bit）数据。由于 DHT11 分辨率只能精确到个位，所以小数部分是数据全为 0。校验和为前 4 个字节数据相加，校验的目的是为了保证数据传输的准确性。<br>DHT11 只有在接收到开始信号后才触发一次温湿度采集，如果没有接收到主机发送复位信号，DHT11 不主动进行温湿度采集。当数据采集完毕且无开始信号后，DHT11 自动切换到低速模式。</p><ul><li>主机发送复位信号<br>DHT11 的初始化过程同样分为复位信号和响应信号。<br>首先主机拉低总线至少 18ms，然后再拉高总线，延时 20~40us，取中间值 30us，此时复位信号发送完毕。</li><li>DHT11 发送响应信号<br>DHT11 检测到复位信号后，触发一次采样，并拉低总线 80us 表示响应信号，告诉主机数据已经准备好了；然后 DHT11 拉高总线 80us，之后开始传输数据。如果检测到响应信号为高电平，则 DHT11 初始化失败，请检查线路是否连接正常。<br>当复位信号发送完毕后，如果检测到总线被拉低，就每隔 1us 计数一次，直至总线拉高，计算低电平时间；当总线被拉高后重新计数检测 80us 的高电平。如果检测到响应信号之后的80us 高电平，就准备开始接收数据。实际上 DHT11 的响应时间并不是标准的 80us，往往存在误差，当响应时间处于 20~100us 之间时就可以认定响应成功。</li><li>数据传输<br>DHT11 在拉高总线 80us 后开始传输数据。每 1bit 数据都以 50us 低电平时隙开始，告诉主机开始传输一位数据了。DHT11 以高电平的长短定义数据位是 0 还是 1，当 50us 低电平时隙过后拉高总线，高电平持续 26~28us 表示数据“0”；持续 70us 表示数据“1”。<br>当最后 1bit 数据传送完毕后，DHT11 拉低总线 50us，表示数据传输完毕，随后总线由上拉电阻拉高进入空闲状态。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/FFDBACF61846C1E3BD19F1D79F936885.png" alt="FFDBACF61846C1E3BD19F1D79F936885.png"></li></ul><h2 id="DS18B20温度传感器">DS18B20温度传感器</h2><p>测温范围  -55°C~+125°C<br>工作电源：3.0~5.5V/DC（可以数据线寄生电源）<br>单总线半双工通信方式。<br>DS18B20共有6种信号：复位脉冲、应答脉冲、写0、写1、读0、读1。这些信号中除了应答脉冲以外，都由主机发出同步信号，并且发送所有的命令和数据都是字节的低位在前。</p><ul><li>1、复位脉冲<br>单总线上的所有通信都是以初始化序列开始。主机输出低电平，保持低电平时间至少480us，以产生复位脉冲。接着主机释放总线，4.7K的上拉电阻将单总线拉高，延时15~69us，并进入接收模式（Rx），接着DS18B20拉低总线60~240us，以产生低电平应答脉冲。</li><li>2、写时序<br>写时序包括写0时序和写1时序，所有写时序至少需要60us，且在2次独立的写时序之间至少需要1us的恢复时间，两种写时序均起始于主机拉低总线。<br>写1时序：主机输出低电平，延时2us，然后释放总线，延时60us<br>写0时序：主机输出低电平，延时60us，然后释放总线，延时2us</li><li>3、读时序<br>单总线器件仅在主机发出读时序使，才向主机传输数据，所以在主机发出读数据命令之后，必须马上产生读时序，以便从机能够传输数据。<br>所有读时序至少需要60us，且在2次独立的读时序之间至少需要1us的恢复时间。每个读时序都由主机发起，至少拉低总线1us。主机在读时序期间必须释放总线，并且在时序起始后的15us内采样总线状态。<br>典型的读时序过程为：主机输出低电平延时2us，然后主机转入输入模式延时12us，然后读取单总线当前的电平，然后延时50us。</li><li>DS18B20典型温度读取过程<br>复位–&gt;发SKIP ROM命令（0XCC）–&gt;发开始转换命令（0X44）–&gt;延时–&gt;复位–&gt;发送SKIP ROM命令（0XCC）–&gt;发读存储命令（0XBE）–&gt;连续读出两个字节数据（即温度）–&gt;结束<br>转化后得到的12位数据，存储在DS18B20的两个8比特的RAM中，二进制中的前面5位是符号位，如果测得得温度大于0，这五位为0，只要将测到得数值乘以0.0635即可得到实际温度；如果温度小于0，这五位为1，测到得数值需要取反加一再乘以0.0625即可得到实际温度。</li></ul><h2 id="OLED">OLED</h2><ul><li>起始信号（SDA低电平）: 当SDA线从高电平跳变到低电平时，表示一个数据传输的开始。</li><li>停止信号（SDA高电平）: 当SDA线从低电平跳变到高电平时，表示一个数据传输的结束。</li><li>数据传输: 在IIC通信中，数据传输是通过SDA线上的高低电平变化来实现的。数据传输时，发送方将数据位放在SDA线上，然后通过SCL线上的时钟信号将数据位发送给接收方。接收方通过检测SDA线上的电平变化来接收数据。</li><li>应答信号（ACK）:在数据传输过程中，接收方需要在接收到每个数据位后发送一个应答信号（ACK），表示数据已被正确接收。应答信号是一个低电平，在SDA线上持续一段时间，然后恢复高电平。</li><li>非应答信号（NACK）:在数据传输过程中，如果接收方无法正确接收数据，会发送一个非应答信号（NACK），表示数据未被正确接收。非应答信号是一个高电平，在SDA线上持续一段时间，然后恢复低电平。</li></ul><p>IIC通信的时钟信号（SCL）是由发送方产生的，通常频率为10KHz~100KHz。IIC通信的波特率由时钟信号的频率决定。<br>IIC通信的优点是简单、易于实现，缺点是速度较慢，通常用于低速度外设的通信。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/9C2BB8518D5E73568B517AC86C456297.png" alt="9C2BB8518D5E73568B517AC86C456297.png"></p>]]></content>
    
    
    <summary type="html">STM32答辩内容复习</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="STM32" scheme="http://chfychin.cn/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>git 基本使用</title>
    <link href="http://chfychin.cn/posts/518e617c.html"/>
    <id>http://chfychin.cn/posts/518e617c.html</id>
    <published>2024-06-15T10:53:25.000Z</published>
    <updated>2024-06-15T11:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 命令管理 github 和本地仓库</p><h2 id="1、git-全局设置">1、git 全局设置</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> xxx   <span class="comment">// 设置全局用户名，信息记录在~/.gitconfig文件中</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> xxx@xxx<span class="selector-class">.com</span>  <span class="comment">// 设置全局邮箱地址，信息记录在~/.gitconfig文件中</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span>  <span class="comment">//查看全局配置项</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span>   <span class="comment">//查看全局配置项</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--list</span>   <span class="comment">//查看配置项</span></span><br><span class="line"></span><br><span class="line">git branch -<span class="selector-tag">a</span>   <span class="comment">//查看本地分支</span></span><br></pre></td></tr></table></figure><h2 id="2、git-仓库初始化">2、git 仓库初始化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">init</span>    <span class="comment">// 将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</span></span><br></pre></td></tr></table></figure><h2 id="3、github">3、github</h2><ul><li>新建一个项目，名字要和本地要上传文件夹名称相同</li><li>添加本地公钥</li></ul><h2 id="4、本地（git-bash）">4、本地（git bash）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin git@git.github.com:xxx/XXX.git    <span class="comment">// 将本地仓库关联到远程仓库</span></span><br><span class="line"></span><br><span class="line">git branch -m master main  <span class="meta">#将本地分支改名为main，与线上保持一致</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">add</span> .   <span class="comment">// 将所有待加入暂存区的文件加入暂存区</span></span><br><span class="line"></span><br><span class="line">git rm --cached -r .   <span class="comment">//删除缓存区所有文件</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;给自己看的备注信息&quot;</span>  <span class="comment">// 将暂存区的内容提交到当前分支</span></span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">git pull --rebase origin main  <span class="meta">##解决! [rejected]        main -&gt; main (non-fast-forward)，避免直接push产生的bug</span></span><br><span class="line"></span><br><span class="line">git push --<span class="keyword">set</span>-upstream origin main</span><br></pre></td></tr></table></figure><h2 id="5、示例代码：添加Git安全目录例外">5、示例代码：添加Git安全目录例外</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> <span class="attr">--add</span> safe<span class="selector-class">.directory</span> <span class="selector-tag">G</span>:/Chfy_blog/PicGoDemo</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">git 基本使用</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="git" scheme="http://chfychin.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sublime</title>
    <link href="http://chfychin.cn/posts/f92f48ea.html"/>
    <id>http://chfychin.cn/posts/f92f48ea.html</id>
    <published>2024-06-05T04:56:34.000Z</published>
    <updated>2024-06-06T11:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sublime Text</p><h2 id="Sublime-Text安装">Sublime Text安装</h2><p>1、Sublime Text官网下载 <a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/E3B9FA4C03F3C8F0EDED1D7DA2F6BE3C.webp" alt="E3B9FA4C03F3C8F0EDED1D7DA2F6BE3C.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/49F431C671BC3360FE7E22F23264EE90.webp" alt="49F431C671BC3360FE7E22F23264EE90.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/F5E99CD5E4826BDA3A25E516EB136423.webp" alt="F5E99CD5E4826BDA3A25E516EB136423.webp"></p><p>2安装 sublime text</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/F0C6BE322559A3162863828FEF2A7B5D.webp" alt="F0C6BE322559A3162863828FEF2A7B5D.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/3472BE945985239E9F210BBB60B252A1.webp" alt="3472BE945985239E9F210BBB60B252A1.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/86B47F0FEF0A697D764DEFAC0DAEBDC8.webp" alt="86B47F0FEF0A697D764DEFAC0DAEBDC8.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/6A13B0D344C0C97532CBB9189062336A.webp" alt="6A13B0D344C0C97532CBB9189062336A.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/A81DB6D8867EBBE0BC0F7BCE9B56D2F5.webp" alt="A81DB6D8867EBBE0BC0F7BCE9B56D2F5.webp"></p><h2 id="中文设置">中文设置</h2><p>打开 Sublime Text 的界面都是英文的，下面将 sublime text 设置成中文。</p><p>1、打开软件，点击 Preference ，选择最底部的 Package Control ，出现查找栏。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/303B2FF3E33F0E1D6E8DEBD6688ADCE5.webp" alt="303B2FF3E33F0E1D6E8DEBD6688ADCE5.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/E1F3E50A39B5C9C42DAB26A673B61A5E.webp.png" alt="E1F3E50A39B5C9C42DAB26A673B61A5E.webp.png"></p><p>2、然后在搜索框中输入关键字 install package ,点击选择其中的：Package Control: Install Package。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/60BC75CBD398847080DA98B518C89DD9.webp" alt="60BC75CBD398847080DA98B518C89DD9.webp"></p><p>3、点击之后稍等一会，等待插件列表加载完成。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/0F44619F4ECD20340F536214DDD2C352.webp" alt="0F44619F4ECD20340F536214DDD2C352.webp"></p><p>4、在搜索框中输入 chinese，选择下拉框中的 ChineseLocalizations 。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/455A8D622F6937E26C019ACBAF2A9B3A.webp" alt="455A8D622F6937E26C019ACBAF2A9B3A.webp"></p><p>5、点击之后，中文包就安装完成了。如果软件语言没有更换过来，可以先关闭软件重新打开，然后点击 Help -&gt;最下面的 Language -&gt; 简体中文。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/02C9AED2636329905C5C4117BA5EB3C5.webp" alt="02C9AED2636329905C5C4117BA5EB3C5.webp"></p><h2 id="Sublime-Text-激活方法">Sublime Text 激活方法</h2><p>1、使用浏览器打开该网站 <a href="https://hexed.it">https://hexed.it</a> 。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/BF8890E5B10B15DD5EBE4554B45D7956.webp" alt="BF8890E5B10B15DD5EBE4554B45D7956.webp"></p><p>2、点击“打开文件”，选择 sublime text 安装目录中的“sublime_text.exe”</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/1f3c0549c0d41edb81580f6da2b4e7f0.webp" alt="1f3c0549c0d41edb81580f6da2b4e7f0.webp"></p><p>3、Ctrl + F ，搜索输入 807805000f94c1 ，找到后，并且替换为 c64005014885c9 （4180 新版本将 807905000f94c2 替换为 c6410501b20090）。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/161EA831D2431914677627BD611AA2BA.webp" alt="161EA831D2431914677627BD611AA2BA.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/2bdf4baa-e8db-4387-9d73-be4f5ffa8618.webp" alt="2bdf4baa-e8db-4387-9d73-be4f5ffa8618.webp"></p><p>4、点击“另存为”，保存到本地并命名为：sublime_text.exe</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/798ECF386A8B1B9D67008D9C0E58D5ED.webp" alt="798ECF386A8B1B9D67008D9C0E58D5ED.webp"></p><p>5、找到 sublime text 安装目录，将原来的 sublime_text.exe重命名为：sublime_text_bak.exe。将刚刚保存的 sublime_text.exe 复制到原 sublime text4 安装目录中。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/982335C843150BBCD19A1E4F851523D9.webp" alt="982335C843150BBCD19A1E4F851523D9.webp"></p><p>6、激活成功</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/11/9DFB1E972C2CECBD80E0E3EEC695501B.png" alt="9DFB1E972C2CECBD80E0E3EEC695501B.png"></p><p>7、激活前后对比</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/67D7E0CA9BA70C09CCF1D04B52553BE8.webp.png" alt="67D7E0CA9BA70C09CCF1D04B52553BE8.webp.png"></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/9D5DAE76FE5A2089275613498F0786A1.webp.png" alt="9D5DAE76FE5A2089275613498F0786A1.webp.png"></p>]]></content>
    
    
    <summary type="html">sublime安装与破解</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="sublime" scheme="http://chfychin.cn/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>有感</title>
    <link href="http://chfychin.cn/posts/67481514.html"/>
    <id>http://chfychin.cn/posts/67481514.html</id>
    <published>2024-05-28T13:37:54.000Z</published>
    <updated>2024-05-29T06:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>你是一名二本学校的学生 高考志愿填报出来后 你决定了既然你在二本学校就要好好努力 你进入了学校确实也打了鸡血好好努力。但你看到同学参加了一些竞赛你没有机会接触，于是你着急忙慌的联系老师希望能接触一些竞赛提升自己，你开始接触了算法 那个时候正好在学c语言，你只觉得你的基础突飞猛进你觉得这是一条对的路，于是你开始自己摸索算法道路，但你渐渐发现这个东西很难，自己的学习浪费了很多不必要的时间。学长都告诉你我们学校算法难度比较大，缺少底蕴弄不出来，学校也没有算法的学习氛围，你开始觉得你走错了方向，你担心你选错了路浪费了青春年华，但你没有放弃，终于在半年的磕磕碰碰中进步了微小的一点点。<br>时间来到2024jscpc，你第一次来到这么厉害的大学里 ，伙伴们相互调侃说高考再有两百分指定能上这个学校，你也点头默认微笑回应，大家都说这只是个见世面的机会。比赛结束，你只做出来了两题，虽然老师说没关系，继续努力，但你还是些许的失落，虽然你早就知道你没法在这种比赛中获奖，回来的大巴车上太阳很刺眼，很像当初充满信心闪闪发亮的你，回想那些厉害的高中选手这么早就能获得金牌，你觉得或许你的终点才是别人的起点。人生本就各不相同，如果每个人都能心想事成，事事顺利或许人生会少了很多惊喜，比如在紧张的赛场上终于AC一道题后的欣喜以及听到别人比赛快要截止时又AC一题的欢呼声，你也由衷的赞叹他们的能力，试图去体会他们的快乐。虽然技不如人但你并不因此感到伤心，你调侃着和同学说WA也是A，虽然嘴里乐观着，但你的心里还是觉得 忙碌了几个学期如果没有获奖是不是就代表着浪费了几个学期的努力，是不是代表着大学生涯也被糊弄过去了 大家都说只看结果不看过程，那既然没有结果 过程是不是意义也就不大了。<br>到现在你也仍然为此焦虑，虽然你不因为没有获奖而失望，但你内心却担忧着没法和家长交代没法和社会交代，父母并不会怪罪我没有拿到很好的名次也愿意相信我在学校有好好学习了算法，但你却没法安慰你自己因为你只觉得自己不够努力，也觉得缺少了好的方法和资源，现在你并不那么悲观 你只觉得 未来社会会有属于自己的容身之处 自己并没有想象中那么渺小。</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/21/10001.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/08/21/10002.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/08/21/10003.jpg" alt="img"></p>]]></content>
    
    
    <summary type="html">有感</summary>
    
    
    
    <category term="生活趣闻" scheme="http://chfychin.cn/categories/%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB/"/>
    
    
    <category term="有感" scheme="http://chfychin.cn/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机操作系统笔记</title>
    <link href="http://chfychin.cn/posts/521a3173.html"/>
    <id>http://chfychin.cn/posts/521a3173.html</id>
    <published>2024-05-12T05:23:27.000Z</published>
    <updated>2024-05-15T08:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7f726b04b37e6172afcba061cf28bbdc04903aae497a8c1a8641767b249587cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">开始计算机操作系统学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机操作系统" scheme="http://chfychin.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法续与外挂标签</title>
    <link href="http://chfychin.cn/posts/2013454d.html"/>
    <id>http://chfychin.cn/posts/2013454d.html</id>
    <published>2024-05-02T04:45:27.000Z</published>
    <updated>2024-05-03T00:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="41c36fbdea108ae04f7e16d4631862f3bd6ec7eea4a35af4217da781dc9baaf3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Markdown语法续与外挂标签写法汇总</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="我的Markdown" scheme="http://chfychin.cn/tags/%E6%88%91%E7%9A%84Markdown/"/>
    
  </entry>
  
  <entry>
    <title>线性代数</title>
    <link href="http://chfychin.cn/posts/c23efd5b.html"/>
    <id>http://chfychin.cn/posts/c23efd5b.html</id>
    <published>2024-04-14T04:45:27.000Z</published>
    <updated>2024-04-15T11:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对,你看不了! 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3381c36987fd4f42618c186c78a6e9cfb9722932c02285e4c952be5629a2fe1a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">线性代数学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="线性代数复习" scheme="http://chfychin.cn/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记</title>
    <link href="http://chfychin.cn/posts/9d1d146e.html"/>
    <id>http://chfychin.cn/posts/9d1d146e.html</id>
    <published>2024-03-25T04:45:27.000Z</published>
    <updated>2024-03-26T05:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="45fa2f7d78fe828ba5581e3b85818d7233ef4d4952c5355ae35474efd4fecace"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">开始计算机网络学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://chfychin.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>代码模板总结</title>
    <link href="http://chfychin.cn/posts/e27b006a.html"/>
    <id>http://chfychin.cn/posts/e27b006a.html</id>
    <published>2024-03-21T07:10:17.000Z</published>
    <updated>2024-03-21T14:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的模板">常用的模板</h1><p>我刷题常用的几个板子，因为敲一次代价太大，就给做成模板了!QAQ</p><h2 id="万能模板1">万能模板1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(nullptr),cout.tie(nullptr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(ver) cout&lt;&lt;#ver&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;ver&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(ver,ver2) cout&lt;&lt;#ver&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;ver&lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; #ver2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; ver2 &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(ver1,ver2) (ver1&gt;ver2?ver1:ver2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(ver1,ver2) (ver1&gt;ver2?ver2:ver1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(ver) ver&amp;(-ver)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="comment">//#define inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fl(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ef emplace_front</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eb empalce_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> em emplace</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ikun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);c=<span class="built_in">getchar</span>();&#125;<span class="keyword">return</span> x * f;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">Write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> x,<span class="type">char</span> c)</span></span>&#123;<span class="built_in">Write</span>(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MEGURINE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;../input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;../output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>; <span class="comment">//ikun();</span></span><br><span class="line"><span class="comment">//    cin &gt;&gt; T;</span></span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">while</span> (T --) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MEGURINE</span></span><br><span class="line">    <span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\nRunning Time: &quot;</span> &lt;&lt; (<span class="type">double</span>) (end - start) / CLOCKS_PER_SEC * <span class="number">1000</span> &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> T ^ T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="万能模板2">万能模板2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> deb(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(f) f.begin(), f.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rall(f) f.rbegin(), f.rend()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all1(f) f.begin() + 1, f.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> here system(<span class="string">&quot;pause&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Y second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbg(...) <span class="string">&quot;cyh2.2&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) <span class="string">&quot;cyh2.2&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;x = <span class="number">0</span>;<span class="type">char</span> c = <span class="built_in">getchar</span>();<span class="type">bool</span> f = <span class="number">0</span>;<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>()) f ^= (c == <span class="string">&#x27;-&#x27;</span>); <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>()) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>); x = f ? -x : x; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;<span class="keyword">if</span>(x &lt; <span class="number">10</span>) <span class="built_in">putchar</span>(x + <span class="number">48</span>);<span class="keyword">else</span> <span class="built_in">write</span>(x / <span class="number">10</span>), <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;<span class="type">int</span> ans = <span class="number">1</span> % p;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % p;a = a * a % p;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> p)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">qmi</span>(a, p - <span class="number">2</span>, p) % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">150</span>, maxn = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> E = <span class="built_in">exp</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(_ --) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _ ^ _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="debug">debug</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define debug1(X) cout&lt;&lt;#X&lt;&lt;&quot; = &quot;&lt;&lt;X&lt;&lt;&quot;\n&quot;</span></span><br><span class="line"><span class="comment">// #define debug2(X,Y) cout&lt;&lt;#Y&lt;&lt;&quot; = &quot;&lt;&lt;Y&lt;&lt;&quot;, &quot;&lt;&lt;#X&lt;&lt;&quot; = &quot;&lt;&lt;X&lt;&lt;&quot;\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _GLIBCXX_DEBUG</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(pair&lt;A, B&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C, D&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span> + s + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">to_string</span>((string) s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (b ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(vector&lt;<span class="type">bool</span>&gt; v)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">  string res = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(v.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">      res += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    first = <span class="literal">false</span>;</span><br><span class="line">    res += <span class="built_in">to_string</span>(v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(bitset&lt;N&gt; v)</span> </span>&#123;</span><br><span class="line">  string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    res += <span class="built_in">static_cast</span>&lt;<span class="type">char</span>&gt;(<span class="string">&#x27;0&#x27;</span> + v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(A v)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">  string res = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">      res += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    first = <span class="literal">false</span>;</span><br><span class="line">    res += <span class="built_in">to_string</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(pair&lt;A, B&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(p.first) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(p.second) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(p)) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C, D&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(p)) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug_out</span><span class="params">()</span> </span>&#123; cerr &lt;&lt; endl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug_out</span><span class="params">(Head H, Tail... T)</span> </span>&#123;</span><br><span class="line">  cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(H);</span><br><span class="line">  <span class="built_in">debug_out</span>(T...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug(...) cerr &lt;&lt; &quot;[&quot; &lt;&lt; #__VA_ARGS__ &lt;&lt; &quot;]:&quot;, debug_out(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) cerr &lt;&lt; #__VA_ARGS__ &lt;&lt; <span class="string">&quot;:&quot;</span>, debug_out(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug1(X) cout&lt;&lt;#X&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;X&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(X,Y) cout&lt;&lt;#Y&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;Y&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;#X&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;X&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="排序板子">排序板子</h1><h2 id="选择排序">选择排序</h2><p>稳定性：不稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">selection_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[t])</span><br><span class="line">                t = j;</span><br><span class="line">        &#125; <span class="built_in">swap</span>(a[i], a[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序">冒泡排序</h2><p>稳定性：稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(f) &#123;</span><br><span class="line">        f = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                f = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">swap</span>(a[i], a[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序">插入排序</h2><p>稳定性：稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = a[i], j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>&amp;&amp;a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j], j --;</span><br><span class="line">        &#125; a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="折半插入排序">折半插入排序</h2><p>稳定性：不稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">inssertion_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i != n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="keyword">auto</span> j = <span class="built_in">upper_bound</span>(a, a + i, t) - a;</span><br><span class="line">        <span class="built_in">memmove</span>(a + j + <span class="number">1</span>, a + j, (i - j) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序">计数排序</h2><p>稳定性：稳定<br>时间复杂度：O(n + mx)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">counting_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> b[mx], s[mx];</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        s[a[i]] ++;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= mx; i ++) &#123;</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">        b[s[a[i]] --] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序">快速排序</h2><p>稳定性：不稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> x = a[(l+r<span class="number">+1</span>)/<span class="number">2</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[++ i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span>(a[-- j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">    &#125; <span class="built_in">quick_sort</span>(a, l, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quick_sort</span>(a, i, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序">归并排序</h2><p>稳定性：稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(l, mid), <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid&amp;&amp;j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i] &lt; f[j]) &#123;</span><br><span class="line">            t[k ++] = f[i ++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t[k ++] = f[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">        t[k ++] = f[i ++];</span><br><span class="line">    &#125; <span class="keyword">while</span>(j &lt;= r) &#123;</span><br><span class="line">        t[k ++] = f[j ++];</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = l, k = <span class="number">0</span>; i &lt;= r; i ++, k ++) &#123;</span><br><span class="line">        f[i] = t[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分">二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l &lt; r)<span class="comment">//模板一：找最左边的那个与目标值相等的下标</span></span><br><span class="line">&#123;</span><br><span class="line">    mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l &lt; r)<span class="comment">//模板二：找最右边的那个与目标值相等的下标</span></span><br><span class="line">&#123;</span><br><span class="line">    mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度">高精度</h1><h2 id="加法">加法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string aa, bb;</span><br><span class="line">    <span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line">    cin &gt;&gt; aa &gt;&gt; bb;</span><br><span class="line">    <span class="type">int</span> la = aa.<span class="built_in">size</span>(), lb = bb.<span class="built_in">size</span>(), mx = <span class="built_in">max</span>(la, lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; la; i ++) &#123;</span><br><span class="line">        a[la - i - <span class="number">1</span>] = aa[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lb; i ++) &#123;</span><br><span class="line">        b[lb - i - <span class="number">1</span>] = bb[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] ++, c[i] -= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c[mx]&amp;&amp;mx &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        mx --;</span><br><span class="line">    &#125; <span class="keyword">while</span>(mx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[mx --]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="减法">减法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string aa, bb;</span><br><span class="line">    <span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line">    cin &gt;&gt; aa &gt;&gt; bb;</span><br><span class="line">    <span class="type">int</span> la = aa.<span class="built_in">size</span>(), lb = bb.<span class="built_in">size</span>(), mx = <span class="built_in">max</span>(la, lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; la; i ++) &#123;</span><br><span class="line">        a[la - i - <span class="number">1</span>] = aa[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lb; i ++) &#123;</span><br><span class="line">        b[lb - i - <span class="number">1</span>] = bb[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] --, c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(c[mx] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; i ++) &#123;</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">            c[i] += b[i] - a[i];</span><br><span class="line">            <span class="keyword">if</span>(c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                c[i + <span class="number">1</span>] --, c[i] += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c[mx]&amp;&amp;mx &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        mx --;</span><br><span class="line">    &#125; <span class="keyword">while</span>(mx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; c[mx --];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法">乘法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span> &gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>()||t; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; a.<span class="built_in">size</span>())</span><br><span class="line">            t += a[i] * b;</span><br><span class="line">        <span class="keyword">if</span>(!i) t += x;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c.<span class="built_in">back</span>() &amp;&amp; c.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125; <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="除法">除法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;B, <span class="type">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / B);</span><br><span class="line">        r %= B;</span><br><span class="line">    &#125; <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>() &gt; <span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125; <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和">前缀和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f[i] = f[i - <span class="number">1</span>] + a[i];</span><br><span class="line">f[i] += f[i - <span class="number">1</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二位前缀和">二位前缀和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f[i][j] = f[i - <span class="number">1</span>][j] + f[i][j - <span class="number">1</span>] - f[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i] [j];</span><br><span class="line">ans = f[x2][y2] - f[x1 - <span class="number">1</span>][y2] - f[x2][y1 - <span class="number">1</span>] + f[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="差分">差分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">f[i] += f[i - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="二维差分">二维差分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f[i][j] = a[i][j] - a[i<span class="number">-1</span>][j] - a[i][j<span class="number">-1</span>] + a[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">f[x1][y1] += c, f[x1][y2<span class="number">+1</span>] -= c;</span><br><span class="line">f[x2<span class="number">+1</span>][y1] -= c, f[x2<span class="number">+1</span>][y2<span class="number">+1</span>] += c;</span><br><span class="line">f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>] - f[i<span class="number">-1</span>][j<span class="number">-1</span>] + f[i][j];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="双指针">双指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="number">0</span>; l &lt; n; l ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>((l &gt;= r||<span class="built_in">checn</span>(s))&amp;&amp;r &lt; n) &#123;</span><br><span class="line">        r ++, s += f[r];</span><br><span class="line">    &#125; s -= f[l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="图论">图论</h1><h2 id="DFS">DFS</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[u].<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[u][i], ww = w[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!st[u]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bfs">bfs</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    st[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[t].<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[t][i];</span><br><span class="line">            <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA">LCA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">LCA_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    ce[root] = <span class="number">1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(ce[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ce[j] = ce[t] + <span class="number">1</span>;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">15</span>; k ++) &#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ce[a] &lt; ce[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ce[fa[a][i]] &gt;= ce[b])</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">    &#125; <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i] != fa[b][i]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路">最短路</h2><h3 id="多源汇Floyd">多源汇Floyd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                p[i][j] = <span class="built_in">min</span>(p[i][j], p[i][k] + p[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单源堆优化Dijkstra">单源堆优化Dijkstra</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; heap;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> y = t.second;</span><br><span class="line">        <span class="keyword">if</span>(st[y]) <span class="keyword">continue</span>;</span><br><span class="line">        st[y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[y]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[y] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[y] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spfa">spfa</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>; st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树">最小生成树</h2><h3 id="Prim">Prim</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, inf, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t == <span class="number">-1</span>||dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125; <span class="keyword">if</span>(i&amp;&amp;dist[t] == inf) <span class="keyword">return</span> inf;</span><br><span class="line">        <span class="keyword">if</span>(i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal">Kruskal</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DSU</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>,s + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> a = s[i].a, b = s[i].b, w = s[i].w;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a) != <span class="built_in">find</span>(b)) &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">            cnt ++;</span><br><span class="line">            res += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(cnt == n - <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">return</span> inf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图">二分图</h2><h3 id="二分图判断">二分图判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!color[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!color[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i, <span class="number">1</span>)) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="匈牙利算二分图最大匹配">匈牙利算二分图最大匹配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!b[j]||<span class="built_in">find</span>(b[j])) &#123;</span><br><span class="line">                b[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序">拓扑排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i]) &#123;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i =ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            d[j] --;</span><br><span class="line">            <span class="keyword">if</span>(d[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tarjan算法">Tarjan算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++timestamp;</span><br><span class="line">    stk[++ top] = u, in_stk[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(in_stk[j]) &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(dfn[u] == low[u]) &#123;</span><br><span class="line">        ++ scc_cnt;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            y = stk[top --];</span><br><span class="line">            in_stk[y] = <span class="literal">false</span>;</span><br><span class="line">            id[y] = scc_cnt;</span><br><span class="line">            Size[scc_cnt] ++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强连通分量的建边缩点">强连通分量的建边缩点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, x;</span><br><span class="line">        <span class="keyword">while</span>(cin &gt;&gt; a, a) &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = h[i]; ~j; j = ne[j]) &#123;</span><br><span class="line">            <span class="type">int</span> k = e[j];</span><br><span class="line">            <span class="type">int</span> a = id[i], b = id[k];</span><br><span class="line">            <span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">                dout[a] ++, in[b] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= scc_cnt; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dout[i]) p ++;</span><br><span class="line">        <span class="keyword">if</span>(!in[i]) q ++;</span><br><span class="line">    &#125; cout &lt;&lt; q &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(scc_cnt == <span class="number">1</span>) p = q = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(p, q) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍增">倍增</h2><h3 id="LCA-2">LCA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">LCA_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    ce[root] = <span class="number">1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(ce[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ce[j] = ce[t] + <span class="number">1</span>;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">15</span>; k ++) &#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ce[a] &lt; ce[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ce[fa[a][i]] &gt;= ce[b]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i] != fa[b][i]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RMQ">RMQ</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_RMQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!j) &#123;</span><br><span class="line">                mn[i][j] = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mn[i][j] = <span class="built_in">max</span>(mn[i][j - <span class="number">1</span>], mn[(i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RMQ</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = r - l + <span class="number">1</span>;</span><br><span class="line">    k = <span class="built_in">log</span>(k) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(mn[l][k], mn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络流Dinic">网络流Dinic</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; q, f, ne, e, h, d, cur;</span><br><span class="line">    <span class="type">int</span> idx, n, m, S, T, inf;</span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> n_, <span class="type">int</span> m_, <span class="type">int</span> S_, <span class="type">int</span> T_) : <span class="built_in">n</span>(n_) &#123;</span><br><span class="line">        idx = <span class="number">0</span>, n = n_, m = m_, S = S_, T = T_, inf = <span class="number">1e8</span>;</span><br><span class="line">        e.<span class="built_in">resize</span>(m_, <span class="number">0</span>), f.<span class="built_in">resize</span>(m_, <span class="number">0</span>);</span><br><span class="line">        ne.<span class="built_in">resize</span>(m_, <span class="number">0</span>), h.<span class="built_in">resize</span>(n_, <span class="number">-1</span>);</span><br><span class="line">        q.<span class="built_in">resize</span>(n_, <span class="number">0</span>), d.<span class="built_in">resize</span>(n_, <span class="number">0</span>);</span><br><span class="line">        cur.<span class="built_in">resize</span>(n_, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">        e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            d[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">            <span class="type">int</span> t = q[hh ++];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(d[j] == <span class="number">-1</span>&amp;&amp;f[i]) &#123;</span><br><span class="line">                    d[j] = d[t] + <span class="number">1</span>;</span><br><span class="line">                    cur[j] = h[j];</span><br><span class="line">                    <span class="keyword">if</span>(j == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    q[++ tt] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u == T) <span class="keyword">return</span> limit;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i&amp;&amp;flow &lt; limit; i = ne[i]) &#123;</span><br><span class="line">            cur[u] = i;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] == d[u] + <span class="number">1</span>&amp;&amp;f[i]) &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">find</span>(j, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">                <span class="keyword">if</span>(!t) d[j] = <span class="number">-1</span>;</span><br><span class="line">                f[i] -= t, f[i ^ <span class="number">1</span>] += t, flow += t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>()) <span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, inf)) r += flow;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="数学">数学</h1><h2 id="素数">素数</h2><h3 id="素数判断">素数判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数分解">素数分解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getdiv</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                s ++, x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数筛">素数筛</h3><h4 id="埃氏筛">埃氏筛</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="欧拉筛-线性筛">欧拉筛(线性筛)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试除法求约数">试除法求约数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span>&gt; <span class="title">get_x</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            s.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(x / i != i) &#123;</span><br><span class="line">                s.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉函数">欧拉函数</h2><h3 id="欧拉函数-2">欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">eular</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans * (i - <span class="number">1</span>) / i;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ans = ans * (x - <span class="number">1</span>) / x;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛法求欧拉函数">筛法求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">phi</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, p</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    st[<span class="number">0</span>] = st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            p.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>()&amp;&amp;i * p[j] &lt;= n; j ++) &#123;</span><br><span class="line">            st[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * p[j]] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        phi[i] += phi[i - <span class="number">1</span>];</span><br><span class="line">    &#125; cout &lt;&lt; phi[n] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂">快速幂</h2><h3 id="快速幂-2">快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        &#125; a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂求逆元">快速幂求逆元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qminv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>, b = p - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数学">组合数学</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Combination &#123;</span><br><span class="line">    <span class="type">int</span> fc[<span class="number">1010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">inti_fc</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        fc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1001</span>; i ++) &#123;</span><br><span class="line">            fc[i] = fc[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span> % mod;</span><br><span class="line">        <span class="keyword">while</span>(b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">            a = a * a % mod;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; i ++, j --)</span><br><span class="line">            y = y * i % mod,</span><br><span class="line">            x = x * j % mod;</span><br><span class="line">        <span class="keyword">return</span> x * <span class="built_in">pow</span>(y, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卢卡斯定理：</span></span><br><span class="line">    <span class="comment">// b    (b mod p)     [b/p]</span></span><br><span class="line">    <span class="comment">// C  ≡   C   *   C  (mod p)</span></span><br><span class="line">    <span class="comment">// a    (a mod p)     [a/p]</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Lucas</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; mod &amp;&amp; b &lt; mod) <span class="keyword">return</span> <span class="built_in">C</span>(a, b, mod);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(a % mod, b % mod, mod) * <span class="built_in">Lucas</span>(a / mod, b / mod, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Combination;</span><br></pre></td></tr></table></figure><h2 id="矩阵乘法">矩阵乘法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> c[][N], <span class="type">int</span> b[][N], <span class="type">int</span> a[][N])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t[N][N];</span><br><span class="line">    <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span> t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k ++) &#123;</span><br><span class="line">                t[i][j] = (t[i][j] + a[i][k] * b[k][j]) % mod1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">memcpy</span>(c, t, <span class="keyword">sizeof</span> t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">mul</span>(f, a, f);</span><br><span class="line">        &#125; <span class="built_in">mul</span>(a, a, a);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得">扩展欧几里得</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高斯消元">高斯消元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span>(c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = r; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c])) &#123;</span><br><span class="line">                t = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">if</span>(<span class="built_in">abs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c; i &lt; n + <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[t][i], a[r][i]);</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= c; i --) &#123;</span><br><span class="line">            a[r][i] /= a[r][c];</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; eps) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt;= c; j --) &#123;</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; r ++;</span><br><span class="line">    &#125; <span class="keyword">if</span>(r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = r; i &lt; n; i ++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            a[i][n] -= a[j][n] * a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斯特林数">斯特林数</h2><h3 id="第一类斯特林数">第一类斯特林数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Strustal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (i - <span class="number">1</span>) * f[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二类斯特林数">第二类斯特林数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Strustal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + j * f[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基">线性基</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">xianxing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = k; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[j] &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(f[j], f[k]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">if</span>((f[k] &gt;&gt; i &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j != k&amp;&amp;f[j] &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                f[j] ^= f[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; k ++;</span><br><span class="line">        <span class="keyword">if</span>(k == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        ans ^= f[i];</span><br><span class="line">    &#125; cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划DP">动态规划DP</h1><h2 id="背包">背包</h2><h3 id="01背包">01背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j --) &#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包">完全背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j ++) &#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包">多重背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i]&amp;&amp;k * v[i] &lt;= j; k ++) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + w[i] * k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制背包">二进制背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    cin &gt;&gt; w &gt;&gt; v &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s &gt; k) &#123;</span><br><span class="line">        s -= k;</span><br><span class="line">        p[cnt ++] = &#123;w * k, v * k&#125;;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">    &#125; p[cnt ++] = &#123;w * s, v * s&#125;;</span><br><span class="line">&#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= p[i].w; j --) &#123;</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - p[i].w] + p[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h3 id="单调队列背包">单调队列背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> r = <span class="number">0</span>; r &lt; v[i]; r ++) &#123;</span><br><span class="line">        <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = r; j &lt;= m; j += v[i]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt;= tt&amp;&amp;j - q[hh] &gt; v[i] * s[i]) hh ++;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt;= tt&amp;&amp;f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[tt]] + (j - q[tt]) / v[i] * w[i] &lt;= f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j]) tt --;</span><br><span class="line">            q[++ tt] = j;</span><br><span class="line">            f[i &amp; <span class="number">1</span>][j] = f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[hh]] + (j - q[hh]) / v[i] * w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维背包">二维背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = V; j &gt;= v[i]; j --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = W; l &gt;= w[i]; l --) &#123;</span><br><span class="line">            f[j][l] = <span class="built_in">max</span>(f[j][l], f[j - v[i]][l - w[i]] + a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包">分组背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>  k = <span class="number">1</span>; k &lt;= s[i]; k ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i][k]) &#123;</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性DP">线性DP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt;= <span class="number">1</span>; j --) &#123;</span><br><span class="line">        f[i][j] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j + <span class="number">1</span>]) + f[i][j];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间DP">区间DP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + len - <span class="number">1</span> &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = i + <span class="number">1</span>; k &lt;= j; k ++) &#123;</span><br><span class="line">            <span class="type">int</span> a = ff[k][<span class="number">0</span>] - ff[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b = ff[j + <span class="number">1</span>][<span class="number">1</span>] - ff[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(a - b)&amp;&amp;<span class="built_in">abs</span>(a - b) &lt;= R) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][k - <span class="number">1</span>] + f[k][j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长上升序列">最长上升序列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> m = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(f[m] &lt; a[i]) l = m;</span><br><span class="line">        <span class="keyword">else</span> r = m - <span class="number">1</span>;</span><br><span class="line">    &#125; f[r + <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="keyword">if</span>(r + <span class="number">1</span> &gt; len) len ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态机">状态机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    f[i][<span class="number">0</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    f[i][<span class="number">1</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] - a[i]);</span><br><span class="line">    f[i][<span class="number">2</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>] + a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串">字符串</h1><h2 id="KMP">KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(j != <span class="number">-1</span>&amp;&amp;a[i] != a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125; <span class="keyword">if</span>(a[i] == a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125; ne[i] = j;</span><br><span class="line">&#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(j != <span class="number">-1</span>&amp;&amp;b[i] != a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125; <span class="keyword">if</span>(b[i] == a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125; <span class="keyword">if</span>(j == n - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; i - j &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trie">Trie</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; son;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; cnt;</span><br><span class="line">    <span class="type">int</span> n, idx;</span><br><span class="line">    <span class="built_in">Trie</span>(<span class="type">int</span> m_, <span class="type">int</span> n_) : <span class="built_in">n</span>(n_) &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        son.<span class="built_in">assign</span>(m_, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (<span class="number">150</span>, <span class="number">0</span>));</span><br><span class="line">        cnt.<span class="built_in">assign</span>(m_, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> u = s[i];</span><br><span class="line">            <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> u = s[i];</span><br><span class="line">            <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="AC自动机">AC自动机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][u]) tr[p][u] = ++ idx;</span><br><span class="line">        p = tr[p][u];</span><br><span class="line">    &#125; cnt[p] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">0</span>][i]) &#123;</span><br><span class="line">            q[++ tt] = tr[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> p = tr[t][i];</span><br><span class="line">            <span class="keyword">if</span>(!p) tr[t][i] = tr[ne[t]][i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ne[p] = tr[ne[t]][i];</span><br><span class="line">                q[++ tt] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manachar">Manachar</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Manachar</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; ss;</span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">Manachar</span>(string s_) &#123;</span><br><span class="line">        n = s_.<span class="built_in">size</span>(), s = s_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        ss.<span class="built_in">resize</span>(n * <span class="number">2</span> + <span class="number">10</span>);</span><br><span class="line">        ss[l ++] = <span class="string">&#x27;$&#x27;</span>, ss[l ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            ss[l ++] = s[i];</span><br><span class="line">            ss[l ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125; ss[l ++] = <span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">        n = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">manachar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        p.<span class="built_in">resize</span>(n + <span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> mr = <span class="number">0</span>, mid, mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; mr) p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i);</span><br><span class="line">            <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(ss[i - p[i]] == ss[i + p[i]]) &#123;</span><br><span class="line">                p[i] ++;</span><br><span class="line">            &#125; <span class="keyword">if</span>(i + p[i] &gt; mr) &#123;</span><br><span class="line">                mr = i + p[i];</span><br><span class="line">                mid = i;</span><br><span class="line">            &#125; mx = <span class="built_in">max</span>(mx, p[i]);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; p[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">        &#125; <span class="keyword">return</span> mx - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最小表示法">最小表示法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">char</span> s[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n&amp;&amp;j &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; n&amp;&amp;s[i + k] == s[j + k]) &#123;</span><br><span class="line">            k ++;</span><br><span class="line">        &#125; <span class="keyword">if</span>(s[i + k] &gt; s[j + k]) &#123;</span><br><span class="line">            i += k + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j += k + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="type">int</span> k = <span class="built_in">min</span>(i, j);</span><br><span class="line">    s[k + n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构">数据结构</h1><h2 id="并查集DSU">并查集DSU</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dsu</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">size_t</span>&gt; pa, size, sum;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">dsu</span><span class="params">(<span class="type">size_t</span> siz)</span> : pa(siz * <span class="number">2</span>), size(siz * <span class="number">2</span>, <span class="number">1</span>), sum(siz * <span class="number">2</span>) &#123;</span></span><br><span class="line">            <span class="built_in">iota</span>(pa.<span class="built_in">begin</span>(), pa.<span class="built_in">begin</span>() + siz, siz);</span><br><span class="line">            <span class="built_in">iota</span>(pa.<span class="built_in">begin</span>() + siz, pa.<span class="built_in">end</span>(), siz);</span><br><span class="line">            <span class="built_in">iota</span>(sum.<span class="built_in">begin</span>() + siz, sum.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">            x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(size[x] &lt; size[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">            pa[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">            sum[x] += sum[y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(fx == fy) <span class="keyword">return</span>;</span><br><span class="line">            pa[x] = fy;</span><br><span class="line">            --size[fx], ++size[fy];</span><br><span class="line">            sum[fx] -= x, sum[fy] += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ask</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">return</span> x == y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">find</span><span class="params">(<span class="type">size_t</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pa[x] == x ? pa[x] : pa[x] = <span class="built_in">find</span>(pa[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br></pre></td></tr></table></figure><h2 id="线段树">线段树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SegmentTree &#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::vector&lt;Info&gt; info;</span><br><span class="line">        <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">            <span class="built_in">init</span>(n_, v_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">        <span class="title">SegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">init</span>(init_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">            <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">        <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">            n = init_.<span class="built_in">size</span>();</span><br><span class="line">            info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">            std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                    info[p] = init_[l];</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                <span class="built_in">pull</span>(p);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">            info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = v;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">                <span class="keyword">return</span> info[p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SegmentTree;</span><br></pre></td></tr></table></figure><h2 id="树状数组">树状数组</h2><h3 id="一维树状数组">一维树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> tr[], <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        tr[i] += y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> tr[], <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        ans += tr[i];</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(tr, x) * (x + <span class="number">1</span>) - <span class="built_in">sum</span>(pretr, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维树状数组">二维树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            tr1[i][j] += d;</span><br><span class="line">            tr2[i][j] += x * d;</span><br><span class="line">            tr3[i][j] += y * d;</span><br><span class="line">            tr4[i][j] += x * y * d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y; j; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            ans += (x + <span class="number">1</span>) * (y + <span class="number">1</span>) * tr1[i][j] - (x + <span class="number">1</span>) * tr3[i][j] - (y + <span class="number">1</span>) * tr2[i][j] + tr4[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x2, y2) - <span class="built_in">sum</span>(x2, y1 - <span class="number">1</span>) - <span class="built_in">sum</span>(x1 - <span class="number">1</span>, y2) + <span class="built_in">sum</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x1, y1, x);</span><br><span class="line">    <span class="built_in">add</span>(x1, y2 + <span class="number">1</span>, -x);</span><br><span class="line">    <span class="built_in">add</span>(x2 + <span class="number">1</span>, y1, -x);</span><br><span class="line">    <span class="built_in">add</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扫描线">扫描线</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y1, y2;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Segment &amp;t)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">double</span> len;</span><br><span class="line">&#125; tr[N * <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">double</span>&gt; ys;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>(), y) - ys.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].cnt) tr[u].len = ys[tr[u].r + <span class="number">1</span>] - ys[tr[u].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[u].l != tr[u].r) &#123;</span><br><span class="line">        tr[u].len = tr[u &lt;&lt; <span class="number">1</span>].len + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    &#125; <span class="keyword">else</span> tr[u].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l != r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">        tr[u].cnt += k;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_cd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="type">double</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        seg[j ++ ] = &#123;x1, y1, y2, <span class="number">1</span>&#125;;</span><br><span class="line">        seg[j ++ ] = &#123;x2, y1, y2, <span class="number">-1</span>&#125;;</span><br><span class="line">        ys.<span class="built_in">push_back</span>(y1), ys.<span class="built_in">push_back</span>(y2);</span><br><span class="line">    &#125; <span class="built_in">sort</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>());</span><br><span class="line">    ys.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>()), ys.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, ys.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">sort</span>(seg, seg + n * <span class="number">2</span>);</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) res += tr[<span class="number">1</span>].len * (seg[i].x - seg[i - <span class="number">1</span>].x);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(seg[i].y1), <span class="built_in">find</span>(seg[i].y2) - <span class="number">1</span>, seg[i].k);</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算几何">计算几何</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CG &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line">        <span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">point</span> (<span class="type">double</span> a, <span class="type">double</span> b) &#123;</span><br><span class="line">            x = a, y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="built_in">sgn</span>(x - b.x)&amp;&amp;!<span class="built_in">sgn</span>(y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>-(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x - b.x,y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>+(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x + b.x, y + b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="keyword">operator</span>^(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="keyword">operator</span>*(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>*(<span class="type">double</span> b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x * b, y * b);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>/(<span class="type">double</span> b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x / b, y / b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">dot</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotleft</span><span class="params">()</span> </span>&#123;            <span class="comment">//逆时针转90 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(-y, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotright</span><span class="params">()</span> </span>&#123;           <span class="comment">//顺时针转90 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(y, -x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotate</span><span class="params">(point p, <span class="type">double</span> angle)</span> </span>&#123;</span><br><span class="line">            point v = (*<span class="keyword">this</span>)-p;</span><br><span class="line">            <span class="type">double</span> c = <span class="built_in">cos</span>(angle);</span><br><span class="line">            <span class="type">double</span> s = <span class="built_in">sin</span>(angle);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">dis2</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - b.x) * (x - b.x) * <span class="number">1.0</span> + (y - b.y) * (y - b.y) * <span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">culk</span><span class="params">(point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (y - b.y) / (x - b.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">        point a, b;</span><br><span class="line">        <span class="built_in">line</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">line</span>(point q,point w) &#123;                  <span class="comment">//两点式 </span></span><br><span class="line">            a = q, b = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">line</span>(point p, <span class="type">double</span> angle) &#123;             <span class="comment">//斜率式 </span></span><br><span class="line">            a = p;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(angle - pi / <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                b=(a+<span class="built_in">point</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                b = (a + <span class="built_in">point</span>(<span class="number">1</span>, <span class="built_in">tan</span>(angle)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">line</span>(<span class="type">double</span> A, <span class="type">double</span> B, <span class="type">double</span> C) &#123;       <span class="comment">//Ax+By+C=0 </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(A) == <span class="number">0</span>)&#123;</span><br><span class="line">                a = <span class="built_in">point</span>(<span class="number">0.0</span>, -C / B);</span><br><span class="line">                b = <span class="built_in">point</span>(<span class="number">1.0</span>, -C / B);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">sgn</span>(B) == <span class="number">0</span>) &#123;</span><br><span class="line">                a = <span class="built_in">point</span>(-C / A, <span class="number">0</span>);</span><br><span class="line">                b = <span class="built_in">point</span>(-C / A, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a = <span class="built_in">point</span>(<span class="number">0</span>, -C / B);</span><br><span class="line">                b = <span class="built_in">point</span>(<span class="number">1</span>, (-A - C) / B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">crosspoint</span><span class="params">(line l)</span> </span>&#123;               <span class="comment">//找交点 </span></span><br><span class="line">            <span class="type">double</span> a1 = point::<span class="built_in">cross</span>(l.b - a, b - a);</span><br><span class="line">            <span class="type">double</span> a2 = point::<span class="built_in">cross</span>(l.a - a, b - a);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>((a1 * l.a.x - a2 * l.b.x) / (a1 - a2), (a1 * l.a.y - a2 * l.b.y) / (a1 - a2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">pointtoLine</span><span class="params">(point p)</span> </span>&#123;                <span class="comment">//点到直线距离 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">fabs</span>((p - a) ^ (b - a)) / <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">pointtoSeg</span><span class="params">(point p)</span> </span>&#123;                 <span class="comment">//点到线段距离 </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>((p - a) * (b - a)) &lt; <span class="number">0</span>||<span class="built_in">sgn</span>((p - b) * (a - b)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">min</span>(point::<span class="built_in">dis2</span>(p, a), point::<span class="built_in">dis2</span>(p, b));</span><br><span class="line">            &#125; <span class="keyword">return</span> <span class="built_in">pointtoLine</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">lineprog</span><span class="params">(point p)</span> </span>&#123;                    <span class="comment">//点在直线上投影 </span></span><br><span class="line">            <span class="keyword">return</span> a + (((b - a) * ((b - a) * (p - a))) / (point::<span class="built_in">dis2</span>(b, a)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">mirrorpoint</span><span class="params">(point p)</span> </span>&#123;                 <span class="comment">//点关于直线对称点 </span></span><br><span class="line">            point q = <span class="built_in">lineprog</span>(p);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(<span class="number">2</span> * q.x - p.x, <span class="number">2</span> * q.y - p.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">triangle</span> &#123;</span><br><span class="line">        point a, b, c;</span><br><span class="line">        <span class="built_in">triangle</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">triangle</span>(vector&lt;point&gt; in) &#123;</span><br><span class="line">            a = in[<span class="number">0</span>], b = in[<span class="number">1</span>], c = in[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Circumcenter</span><span class="params">()</span> </span>&#123;        <span class="comment">//三角形外接圆圆心</span></span><br><span class="line">            <span class="type">double</span> x1 = a.x, y1 = a.y;</span><br><span class="line">            <span class="type">double</span> x2 = b.x, y2 = b.y;</span><br><span class="line">            <span class="type">double</span> x3 = c.x, y3 = c.y;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> a1 = <span class="number">2</span> * (x2 - x1);</span><br><span class="line">            <span class="type">double</span> b1 = <span class="number">2</span> * (y2 - y1);</span><br><span class="line">            <span class="type">double</span> c1 = x2 * x2 + y2 * y2 - x1 * x1 - y1 * y1;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> a2 = <span class="number">2</span> * (x3 - x2);</span><br><span class="line">            <span class="type">double</span> b2 = <span class="number">2</span> * (y3 - y2);</span><br><span class="line">            <span class="type">double</span> c2 = x3 * x3 + y3 * y3 - x2 * x2 - y2 * y2;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> x = (c1 * b2 - c2 * b1) / (a1 * b2 - a2 * b1);</span><br><span class="line">            <span class="type">double</span> y = (a1 * c2 - a2 * c1) / (a1 * b2 - a2 * b1);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Incenter</span><span class="params">()</span> </span>&#123;            <span class="comment">//三角形内切圆圆心</span></span><br><span class="line">            <span class="type">double</span> A = b.<span class="built_in">dis</span>(c);</span><br><span class="line">            <span class="type">double</span> B = a.<span class="built_in">dis</span>(c);</span><br><span class="line">            <span class="type">double</span> C = a.<span class="built_in">dis</span>(b);</span><br><span class="line">            <span class="type">double</span> S = A + B + C; </span><br><span class="line">            <span class="type">double</span> x = (A * a.x + B * b.x + C * c.x) / S;</span><br><span class="line">            <span class="type">double</span> y = (A * a.y + B * b.y + C * c.y) / S;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Orthocenter</span><span class="params">()</span> </span>&#123;        <span class="comment">//三角形垂线交点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>((a.x + b.x + c.x) / <span class="number">3.0</span>, (a.y + b.y + c.y) / <span class="number">3.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Centroid</span><span class="params">()</span> </span>&#123;            <span class="comment">//三角形中线交点</span></span><br><span class="line">            <span class="type">double</span> a1, b1, a2, b2, c1, c2;</span><br><span class="line">            a1 = c.x - b.x, b1 = c.y - b.y, c1 = <span class="number">0</span>;</span><br><span class="line">            a2 = c.x - a.x, b2 = c.y - a.y, c2 = (b.x - a.x) * a2 + (b.y - a.y) * b2;</span><br><span class="line">            <span class="type">double</span> d = a1 * b2 - a2 * b1;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">        point p;</span><br><span class="line">        <span class="type">double</span> r;</span><br><span class="line">        <span class="built_in">circle</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, <span class="type">double</span> b) &#123;</span><br><span class="line">            p = a, r = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> a) &#123;</span><br><span class="line">            p = <span class="built_in">point</span>(x, y);</span><br><span class="line">            r = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, point b, point c) &#123;                <span class="comment">//三角形外接圆 </span></span><br><span class="line">            line u = <span class="built_in">line</span>((a + b) / <span class="number">2</span>, ((a + b) / <span class="number">2</span>) + ((b - a).<span class="built_in">rotleft</span>()));</span><br><span class="line">            line v = <span class="built_in">line</span>((b + c) / <span class="number">2</span>, ((b + c) / <span class="number">2</span>) + ((c - b).<span class="built_in">rotleft</span>()));</span><br><span class="line">            p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">            r = <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(p, a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, point b, point c, <span class="type">bool</span> inside) &#123;            <span class="comment">//三角形内切圆,inside没有用,只是用来区分两个构造函数  </span></span><br><span class="line">            <span class="type">double</span> m = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">            <span class="type">double</span> n = <span class="built_in">atan2</span>((c - a).y, (c - a).x);</span><br><span class="line">            <span class="keyword">if</span>(inside) &#123;r = <span class="number">0</span>;&#125;</span><br><span class="line">            line u, v;</span><br><span class="line">            u.a = a;</span><br><span class="line">            u.b = u.a + <span class="built_in">point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">            v.a = b;</span><br><span class="line">            m = <span class="built_in">atan2</span>((a - b).y, (a - b).x);</span><br><span class="line">            n = <span class="built_in">atan2</span>((c - b).y, (c - b).x);</span><br><span class="line">            v.b = v.a + <span class="built_in">point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">            p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">            r = <span class="built_in">line</span>(a, b).<span class="built_in">pointtoSeg</span>(p);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MRCLP</span> &#123;                               <span class="comment">//最小矩形覆盖信息 </span></span><br><span class="line">        line lne;</span><br><span class="line">        point upp;</span><br><span class="line">        point lep;</span><br><span class="line">        point rip;</span><br><span class="line">        <span class="built_in">MRCLP</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">MRCLP</span>(line a, point u, point l, point r) &#123;</span><br><span class="line">            lne = a;</span><br><span class="line">            upp = u;</span><br><span class="line">            lep = l;</span><br><span class="line">            rip = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">findcp</span><span class="params">(point b, point inline1, point inline2, point sf)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b - inline1 * (point::<span class="built_in">cross</span>(inline2, sf) / point::<span class="built_in">cross</span>(inline1, inline2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">equer</span><span class="params">(point a)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(a.y, -a.x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">getcrosspoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="function">vector&lt;point&gt; <span class="title">ans</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">            point le = lne.b - lne.a;</span><br><span class="line">            point anot = <span class="built_in">equer</span>(le);</span><br><span class="line">            ans[<span class="number">0</span>] = MRCLP::<span class="built_in">findcp</span>(lne.b, le, anot, rip - lne.b);</span><br><span class="line">            ans[<span class="number">1</span>] = MRCLP::<span class="built_in">findcp</span>(rip, anot, le, upp - rip);</span><br><span class="line">            ans[<span class="number">2</span>] = MRCLP::<span class="built_in">findcp</span>(upp, le, anot, lep - upp);</span><br><span class="line">            ans[<span class="number">3</span>] = MRCLP::<span class="built_in">findcp</span>(lep, anot, le, lne.b - lep);</span><br><span class="line">            <span class="type">int</span> ori = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(ans[i].x) == <span class="number">0</span>) ans[i].x = <span class="number">0.000</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(ans[i].y) == <span class="number">0</span>) ans[i].y = <span class="number">0.000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i].y &lt; ans[ori].y||(ans[i].y == ans[ori].y&amp;&amp;ans[i].x &lt; ans[ori].x)) &#123;</span><br><span class="line">                    ori=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(ans[<span class="number">0</span>], ans[ori]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(point::<span class="built_in">cross</span>(ans[i] - ans[<span class="number">0</span>], ans[j] - ans[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">swap</span>(ans[i],ans[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.5lf %.5lf\n&quot;</span>, ans[i].x, ans[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">polygon</span> &#123;                             <span class="comment">//多边形 </span></span><br><span class="line">        vector&lt;point&gt; in;                     <span class="comment">//输入的点集，求凸包操作后成为凸包上的点集(逆时针方向) </span></span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        MRCLP tmp;</span><br><span class="line">        <span class="built_in">polygon</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">polygon</span>(vector&lt;point&gt; a) &#123;</span><br><span class="line">            in = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isPolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> in.<span class="built_in">size</span>() &gt;= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;               <span class="comment">//快排 </span></span><br><span class="line">            <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(in[l], in[(l + r) / <span class="number">2</span>]);</span><br><span class="line">                <span class="type">int</span> i = l, j = r;</span><br><span class="line">                point x = in[l];</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; j&amp;&amp;(point::<span class="built_in">cross</span>(in[j] - in[<span class="number">0</span>], x - in[j]) &lt; <span class="number">0</span>||</span><br><span class="line">                        (point::<span class="built_in">cross</span>(in[j] - in[<span class="number">0</span>], x - in[j]) == <span class="number">0</span>&amp;&amp;point::<span class="built_in">dis2</span>(in[j], in[<span class="number">0</span>]) &gt; point::<span class="built_in">dis2</span>(x, in[<span class="number">0</span>])))) &#123;j --;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; j) &#123;in[i ++] = in[j];&#125;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; j&amp;&amp;(point::<span class="built_in">cross</span>(in[i] - in[<span class="number">0</span>], x - in[i]) &gt; <span class="number">0</span>||</span><br><span class="line">                        (point::<span class="built_in">cross</span>(in[i] - in[<span class="number">0</span>], x - in[i]) == <span class="number">0</span>&amp;&amp;point::<span class="built_in">dis2</span>(in[i], in[<span class="number">0</span>]) &lt; point::<span class="built_in">dis2</span>(x, in[<span class="number">0</span>])))) &#123;i ++;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; j) &#123;in[j --] = in[i];&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                in[i] = x;</span><br><span class="line">                <span class="built_in">quicksort</span>(l, i - <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">quicksort</span>(i + <span class="number">1</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">convexHell</span><span class="params">()</span> </span>&#123;                          <span class="comment">//查找凸包上的点 </span></span><br><span class="line">            <span class="type">int</span> ori = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(in[i].y &lt; in[ori].y||(in[i].y == in[ori].y&amp;&amp;in[i].x &lt; in[ori].x)) &#123;</span><br><span class="line">                    ori = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(in[<span class="number">0</span>], in[ori]);</span><br><span class="line">            <span class="built_in">quicksort</span>(<span class="number">1</span>, in.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">            <span class="function">vector&lt;point&gt; <span class="title">tmp</span><span class="params">(in.size() + <span class="number">10</span>)</span></span>;</span><br><span class="line">            <span class="type">int</span> nw = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(nw &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(point::<span class="built_in">cross</span>(tmp[nw] - tmp[nw - <span class="number">1</span>], in[i] - tmp[nw]) &gt; <span class="number">0</span>) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(point::<span class="built_in">cross</span>(tmp[nw] - tmp[nw - <span class="number">1</span>], in[i] - tmp[nw]) == <span class="number">0</span>) &#123;</span><br><span class="line">                        nw --;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;nw--;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp[++ nw] = in[i];</span><br><span class="line">            &#125;</span><br><span class="line">            in.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nw; i ++) &#123;</span><br><span class="line">                in.<span class="built_in">push_back</span>(tmp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">diameter</span><span class="params">()</span> </span>&#123;                      <span class="comment">//旋转卡壳(返回直径的平方) </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> nw = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[nw % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;</span><br><span class="line">                    point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(nw + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;nw ++;&#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(&#123;ans, point::<span class="built_in">dis2</span>(in[nw % in.<span class="built_in">size</span>()], in[i % in.<span class="built_in">size</span>()]), point::<span class="built_in">dis2</span>(in[nw % in.<span class="built_in">size</span>()], in[i - <span class="number">1</span>])&#125;);</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">MRC</span><span class="params">()</span> </span>&#123;                           <span class="comment">//最小矩形覆盖  </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">1e18</span>;</span><br><span class="line">            <span class="type">int</span> upp = <span class="number">1</span>, lep = in.<span class="built_in">size</span>() - <span class="number">1</span>, rip = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(lep &gt;= <span class="number">1</span>&amp;&amp;point::<span class="built_in">dot</span>(in[<span class="number">0</span>] - in[<span class="number">1</span>], in[lep] - in[<span class="number">1</span>]) &lt;= point::<span class="built_in">dot</span>(in[<span class="number">0</span>] - in[<span class="number">1</span>], in[lep - <span class="number">1</span>] - in[<span class="number">1</span>])) &#123;lep --;&#125;         <span class="comment">//左侧顶点先反向遍历，不然会WA </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[upp % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;=</span><br><span class="line">                    point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(upp + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;upp ++;&#125;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[rip % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>]) &lt;= point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(rip + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>])) &#123;rip++;&#125;</span><br><span class="line">                <span class="keyword">while</span>( point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;=</span><br><span class="line">                    point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[(lep + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;lep ++;&#125;</span><br><span class="line">                <span class="type">double</span> area = <span class="built_in">fabs</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[upp % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> lefleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> rigleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[rip % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>]));</span><br><span class="line">                <span class="type">double</span> dezleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> S = area * (lefleg + rigleg - dezleg) / dezleg;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(S - ans) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    tmp = <span class="built_in">MRCLP</span>(<span class="built_in">line</span>(in[i % in.<span class="built_in">size</span>()], in[i - <span class="number">1</span>]), in[upp % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()], in[rip % in.<span class="built_in">size</span>()]);</span><br><span class="line">                    ans = S;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">cularea</span><span class="params">()</span> </span>&#123;                       <span class="comment">//计算面积 </span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isPolygon</span>()) <span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                ans += point::<span class="built_in">cross</span>(in[i], in[(i + <span class="number">1</span>) % in.<span class="built_in">size</span>()]);</span><br><span class="line">            &#125; <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">culcel</span><span class="params">()</span> </span>&#123;                        <span class="comment">//计算周长 </span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isPolygon</span>()) <span class="keyword">return</span> <span class="number">-1.0</span>;          <span class="comment">//洛谷模板题上删去这句，答案有非多边形情况 </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                ans += <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(in[i], in[(i + <span class="number">1</span>) % in.<span class="built_in">size</span>()]));</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HPIL</span> : <span class="keyword">public</span> line &#123;            <span class="comment">//半平面交直线特性 </span></span><br><span class="line">        <span class="type">double</span> angle;</span><br><span class="line">        <span class="built_in">HPIL</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">HPIL</span>(point q, point w) &#123;</span><br><span class="line">            a = q;</span><br><span class="line">            b = w;</span><br><span class="line">            angle = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">HPIL</span>(line z) &#123;</span><br><span class="line">            a = z.a;</span><br><span class="line">            b = z.b;</span><br><span class="line">            angle = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(HPIL t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(angle - t.angle) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">sgn</span>(point::<span class="built_in">cross</span>(t.a - a, t.b - a)) == <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">return</span> <span class="built_in">sgn</span>(angle - t.angle) == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HPI</span> &#123;                             <span class="comment">//半平面交 向量方向右侧平面 </span></span><br><span class="line">        vector&lt;HPIL&gt; in;</span><br><span class="line">        HPIL e[maxn];</span><br><span class="line">        HPIL dq[maxn];</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>, top, back;</span><br><span class="line">        <span class="built_in">HPI</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">HPI</span>(vector&lt;HPIL&gt; a) &#123;</span><br><span class="line">            in=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">unique</span><span class="params">()</span> </span>&#123;                      <span class="comment">//去重 </span></span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(in[i].angle - in[i - <span class="number">1</span>].angle) != <span class="number">0</span>) in[++ cnt] = in[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; i ++) e[i + <span class="number">1</span>] = in[i];</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">cp</span><span class="params">(HPIL a, HPIL b, HPIL c)</span> </span>&#123;</span><br><span class="line">            point o = b.<span class="built_in">crosspoint</span>(c);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sgn</span>(point::<span class="built_in">cross</span>(a.a - o, a.b - o)) == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">toans</span><span class="params">()</span> </span>&#123;                       <span class="comment">//求解 </span></span><br><span class="line">            <span class="built_in">sort</span>(&amp;in[<span class="number">0</span>], &amp;in[in.<span class="built_in">size</span>()]);</span><br><span class="line">            <span class="built_in">unique</span>();</span><br><span class="line">            top = <span class="number">2</span>, back = <span class="number">1</span>;</span><br><span class="line">            dq[<span class="number">1</span>] = e[<span class="number">1</span>];</span><br><span class="line">            dq[<span class="number">2</span>] = e[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= cnt; i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(e[i], dq[top], dq[top - <span class="number">1</span>])) top --;</span><br><span class="line">                <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(e[i], dq[back], dq[back + <span class="number">1</span>])) back ++;</span><br><span class="line">                dq[++ top] = e[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(dq[back], dq[top], dq[top - <span class="number">1</span>])) top --</span><br><span class="line">            <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(dq[top], dq[back], dq[back + <span class="number">1</span>])) back ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;point&gt; <span class="title">getpolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">toans</span>();</span><br><span class="line">            vector&lt;point&gt; ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = back; i &lt; top; i ++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(dq[i].<span class="built_in">crosspoint</span>(dq[i + <span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(top - back &gt; <span class="number">1</span>) ans.<span class="built_in">push_back</span>(dq[top].<span class="built_in">crosspoint</span>(dq[back]));</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CG;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">代码模板</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="C++模板" scheme="http://chfychin.cn/tags/C-%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>我的小秘密</title>
    <link href="http://chfychin.cn/posts/83cc9e8a.html"/>
    <id>http://chfychin.cn/posts/83cc9e8a.html</id>
    <published>2024-03-19T07:10:17.000Z</published>
    <updated>2024-03-19T14:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对,你看不了我的小秘密wo! 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d45a3bd2fb7372a7e406e5052ac64e552e0e9cec33622054515c72b14df6ffa1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">来看我的小秘密吧！！！</summary>
    
    
    
    <category term="随想" scheme="http://chfychin.cn/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="作为日记加密" scheme="http://chfychin.cn/tags/%E4%BD%9C%E4%B8%BA%E6%97%A5%E8%AE%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://chfychin.cn/posts/4a17b156.html"/>
    <id>http://chfychin.cn/posts/4a17b156.html</id>
    <published>2024-03-18T12:00:00.000Z</published>
    <updated>2024-03-18T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客当然是要给Hello World!!</p><p><img src="https://pcgdemo.chfychin.cn/img/default_cover_1.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">第一篇文章当然是Hello World</summary>
    
    
    
    <category term="生活趣闻" scheme="http://chfychin.cn/categories/%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB/"/>
    
    
    <category term="第一篇博客" scheme="http://chfychin.cn/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
