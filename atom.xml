<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chfychin🥝</title>
  
  
  <link href="http://chfychin.cn/atom.xml" rel="self"/>
  
  <link href="http://chfychin.cn/"/>
  <updated>2024-10-05T14:57:02.000Z</updated>
  <id>http://chfychin.cn/</id>
  
  <author>
    <name>chfychin🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 CCPC 郑州邀请赛暨河南省赛 题解</title>
    <link href="http://chfychin.cn/posts/9f4b8961.html"/>
    <id>http://chfychin.cn/posts/9f4b8961.html</id>
    <published>2024-10-04T12:32:02.000Z</published>
    <updated>2024-10-05T14:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Once-In-My-Life-（构造）"><a href="#A-Once-In-My-Life-（构造）" class="headerlink" title="A - Once In My Life （构造）"></a>A - Once In My Life （构造）</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据题目要求需要两个d，并且要保证<code>123456789</code>都存在，那么就可以尝试先构造出一个数保证存在<code>123456789</code>。<br>尝试以下构造方式：设n的长度为len，则可以构造出 $k<em>n=(\frac{123456789</em>{10}^{len+1}}{n}+1)<em>n$, 可以发现 $k</em>n$ 的前缀一定是<code>1234567890X</code>，此时只要对$k$每次+1，至多一百次一定能出现想要的$d$。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">123456789LL</span>;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n, d;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">123456789LL</span> * std::<span class="built_in">pow</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">2</span> + (<span class="type">int</span>)std::<span class="built_in">log10</span>&lt;<span class="type">int</span>&gt;(n)) / n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> w) &#123;</span><br><span class="line">            std::vector&lt;<span class="type">int</span>&gt; <span class="built_in">c</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="type">int</span> num = w * n;</span><br><span class="line">            <span class="keyword">while</span> (num) c[num % <span class="number">10</span>] += <span class="number">1</span>, num /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) <span class="keyword">if</span> (c[i] &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c[d] &gt;= <span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">check</span>(k)) k += <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; k &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-扫雷-1"><a href="#B-扫雷-1" class="headerlink" title="B - 扫雷 1"></a>B - 扫雷 1</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>队友写的，并没有看题，就贴一下队友代码和思路：<br>贪心。要使得买的探测仪最多，就要尽可能的买价格较便宜的，相同便宜的要买后面出现的，因为这样手中的钱会更多。所以我们只需要把价格作为第一关键词升序排序，出现序号作为第二关键词降序排序，然后一个一个尽可能的多买，直到已经到最后一个时退出就行</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;tuple&lt;ll , ll&gt;&gt; tl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        tl.<span class="built_in">emplace_back</span>(x , -i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(tl.<span class="built_in">begin</span>() , tl.<span class="built_in">end</span>());</span><br><span class="line">    ll ans = <span class="number">0</span> , cur = <span class="number">0</span> , pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [a , b] : tl) &#123;</span><br><span class="line">        b = -b;</span><br><span class="line">        <span class="keyword">if</span> (b &gt;= a &amp;&amp; b &gt; pre) &#123;</span><br><span class="line">            ans += (b - cur) / a;</span><br><span class="line">            cur += (b - cur) / a * a;</span><br><span class="line">            pre = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-中二病也要打比赛-（树状数组-dp）"><a href="#C-中二病也要打比赛-（树状数组-dp）" class="headerlink" title="C - 中二病也要打比赛 （树状数组+dp）"></a>C - 中二病也要打比赛 （树状数组+dp）</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>依旧队友神力</p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;T&gt; d;</span><br><span class="line">    <span class="built_in">Fenwick</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">d</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, T v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n);</span><br><span class="line">        x += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">            d[x - <span class="number">1</span>] = <span class="built_in">max</span>(d[x - <span class="number">1</span>], v);</span><br><span class="line">            x += x &amp; -x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x &lt;= n);</span><br><span class="line">        T v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            v = <span class="built_in">max</span>(v, d[x - <span class="number">1</span>]);</span><br><span class="line">            x -= x &amp; -x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(l &lt;= r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">min_right</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e = __lg(n); ~e; --e) &#123;</span><br><span class="line">            <span class="type">int</span> u = (<span class="number">1</span> &lt;&lt; e);</span><br><span class="line">            <span class="keyword">if</span> (r + u &lt;= n &amp;&amp; d[r + u - <span class="number">1</span>] &lt; k) &#123;</span><br><span class="line">                k -= d[(r += u) - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    --a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(n, n)</span></span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    l[a[i]] = <span class="built_in">min</span>(l[a[i]], i);</span><br><span class="line">    r[a[i]] = <span class="built_in">max</span>(r[a[i]], i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(i == r[a[i]]);</span><br><span class="line">    <span class="type">int</span> j = l[a[i]], k = i;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= j) &#123;</span><br><span class="line">      r[a[k]] = i;</span><br><span class="line">      j = <span class="built_in">min</span>(j, l[a[k]]);</span><br><span class="line">      --k;</span><br><span class="line">    &#125;</span><br><span class="line">    i = k;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Fenwick&lt;<span class="type">int</span>&gt; <span class="title">fen</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(i == l[a[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= r[a[i]]; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == l[a[j]]) &#123;</span><br><span class="line">        dp[l[a[j]]] = fen.<span class="built_in">get</span>(a[j]) + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= r[a[i]]; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == l[a[j]]) &#123;</span><br><span class="line">        fen.<span class="built_in">modify</span>(a[j], dp[l[a[j]]]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = r[a[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()).<span class="built_in">size</span>() - *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-距离之比（推公式-贪心）"><a href="#D-距离之比（推公式-贪心）" class="headerlink" title="D - 距离之比（推公式+贪心）"></a>D - 距离之比（推公式+贪心）</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>设<br>,对原公式进行平方并化简可得：</p><p>。想让这个式子尽可能的大，也就是说让</p><p>尽量取小。设</p><p>, 此时式子变化为</p><p>, 可以发现其在<br>为<br>和<br>时取到最优。因此只要对<br>和<br>分别进行排序，此时两两相邻为最优，两者取个最大值即可。</p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : p) &#123;</span><br><span class="line">            std::cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), </span><br><span class="line">            [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.first + a.second &lt; b.first + b.second;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> d1 = p[i - <span class="number">1</span>].first - p[i].first, d2 = p[i - <span class="number">1</span>].second - p[i].second;</span><br><span class="line">            ans = std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(ans, ((<span class="built_in">abs</span>(d1) + <span class="built_in">abs</span>(d2)) * <span class="number">1.</span> / <span class="built_in">sqrt</span>(d1 * d1 + d2 * d2)));</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), </span><br><span class="line">            [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.first - a.second &lt; b.first - b.second;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> d1 = p[i - <span class="number">1</span>].first - p[i].first, d2 = p[i - <span class="number">1</span>].second - p[i].second;</span><br><span class="line">            ans = std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(ans, ((<span class="built_in">abs</span>(d1) + <span class="built_in">abs</span>(d2)) * <span class="number">1.</span> / <span class="built_in">sqrt</span>(d1 * d1 + d2 * d2)));</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-保卫城邦"><a href="#E-保卫城邦" class="headerlink" title="E - 保卫城邦"></a>E - 保卫城邦</h1><h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>太菜了，不会写</p><h1 id="F-优秀字符串-模拟"><a href="#F-优秀字符串-模拟" class="headerlink" title="F - 优秀字符串 (模拟)"></a>F - 优秀字符串 (模拟)</h1><h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><p>按照题意模拟即可</p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>(s) == <span class="number">5</span> &amp;&amp; s[<span class="number">2</span>] == s[<span class="number">4</span>] &amp;&amp; std::set&lt;<span class="type">char</span>&gt;&#123;s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]&#125;.<span class="built_in">size</span>() == <span class="number">4</span>) &#123;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-扫雷-2-（构造）"><a href="#G-扫雷-2-（构造）" class="headerlink" title="G - 扫雷 2 （构造）"></a>G - 扫雷 2 （构造）</h1><h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>原来扫雷2的2是这个2щ(ಠ益ಠщ)<br>想了有两种构造方法：</p><p>第一种方法：<br>对于<br>时，我们可以直接按照如下方法构造   </p><p>01100        01100<br>11000        11000<br>10000        10000<br>00000        00000<br>00000        00001<br>此时对于m为奇数直接在左上角构造两个斜杠，为偶数时多出来的可以直接放在右下角。（注意特判<br>，<br>的情况）<br>此时对于<br>的情况我们考虑缩小矩阵，可将雷埋在最下面一行和最右边一行，此时可以得到<br>的矩阵，例如<br>时可以构造如下矩阵：<br>011011<br>110011<br>100011<br>000011<br>111111<br>111111<br>此时问题回到<br>的情况，注意构造过程中的细节即可。</p><p>第二种方法（感觉可行，但是并没有能写出来）：<br>构造一个匚字型，形如：   </p><p>11100        11110<br>01000        10100<br>11100        10100<br>01000        10100<br>00000        11110<br>按照以上样子构造即可，构造完后多出来的雷往中间空出来的地方埋就行了，最后注意特判m较小的情况。（其实感觉可以方法一方法二结合写起来更简单一些）</p><h2 id="代码实现（方法1）"><a href="#代码实现（方法1）" class="headerlink" title="代码实现（方法1）"></a>代码实现（方法1）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">auto</span> bury = [&amp;](std::vector&lt;std::string&gt;&amp; adj, <span class="type">int</span> num, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> len = (num + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            adj[i][len - i - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            adj[i][len - i - <span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        adj[k][k] += num % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="function">std::vector&lt;std::string&gt; <span class="title">ans</span><span class="params">(n, std::string(n, <span class="string">&#x27;0&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= <span class="number">2</span> * n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">5</span> &amp;&amp; m == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                        ans[j][n - i - <span class="number">1</span>]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="built_in">bury</span>(ans, m, n - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> now = n;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= <span class="number">2</span> * now + <span class="number">1</span> &amp;&amp; now) &#123;</span><br><span class="line">                m -= <span class="number">2</span> * now - <span class="number">1</span>;</span><br><span class="line">                now--;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; now; ++i) &#123;</span><br><span class="line">                    ans[i][now]++, ans[now][i]++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[now][now]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m &gt;= <span class="number">2</span> &amp;&amp; m &lt; <span class="number">2</span> * now - <span class="number">1</span>) &#123;</span><br><span class="line">                ans[<span class="number">0</span>][now - <span class="number">1</span>]++, ans[now - <span class="number">1</span>][<span class="number">0</span>]++;</span><br><span class="line">                m -= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="number">5</span> &amp;&amp; m == <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; now; ++i) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                            ans[j][now - i - <span class="number">1</span>]++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">3</span> &amp;&amp; m == <span class="number">1</span>) &#123;</span><br><span class="line">                    ans[now - <span class="number">1</span>][now - <span class="number">1</span>]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">4</span> &amp;&amp; m == <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="built_in">bury</span>(ans, m, now - <span class="number">1</span>);</span><br><span class="line">                    ans[<span class="number">0</span>][<span class="number">0</span>]++, ans[now - <span class="number">1</span>][now - <span class="number">1</span>]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((now == <span class="number">4</span> &amp;&amp; (m == <span class="number">3</span> || m == <span class="number">4</span>)) || (now == <span class="number">3</span> &amp;&amp; m == <span class="number">2</span>) || (now == <span class="number">5</span> &amp;&amp; m == <span class="number">5</span>)) &#123;</span><br><span class="line">                        ans[<span class="number">0</span>][now - <span class="number">1</span>]--, ans[now - <span class="number">1</span>][<span class="number">0</span>]--;</span><br><span class="line">                        <span class="keyword">if</span> (now == <span class="number">4</span> &amp;&amp; m == <span class="number">4</span>) &#123;</span><br><span class="line">                            ans[now - <span class="number">1</span>][now - <span class="number">1</span>]--;</span><br><span class="line">                            ans[<span class="number">0</span>][<span class="number">0</span>]++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        m += <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (now &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (now - (m + <span class="number">1</span>) / <span class="number">2</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                            ans[now - <span class="number">2</span>][now - <span class="number">1</span>]++, ans[now - <span class="number">1</span>][now - <span class="number">2</span>]++;</span><br><span class="line">                            m -= <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ((m &amp; <span class="number">1</span>) &amp;&amp; !(now == <span class="number">5</span> &amp;&amp; m == <span class="number">9</span>)) &#123;</span><br><span class="line">                            m += <span class="number">1</span>;</span><br><span class="line">                            ans[n - <span class="number">1</span>][n - <span class="number">1</span>]--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (m) &#123;</span><br><span class="line">                        <span class="built_in">bury</span>(ans, m, now - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">3</span> || now == <span class="number">2</span>) &#123;</span><br><span class="line">                ans[<span class="number">0</span>][now - <span class="number">1</span>]--, ans[now - <span class="number">1</span>][<span class="number">0</span>]--;</span><br><span class="line">                ans[<span class="number">1</span>][<span class="number">1</span>]++, ans[<span class="number">0</span> + <span class="number">2</span> * (now == <span class="number">3</span>)][<span class="number">0</span> + <span class="number">2</span> * (now == <span class="number">3</span>)]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-随机栈"><a href="#H-随机栈" class="headerlink" title="H - 随机栈"></a>H - 随机栈</h1><h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><p>队友写的，题也没有看，贴一下队友代码和思路：<br>这题实际上是求这个随机栈的出栈序列是非降序的概率，然后求逆元就行。那么我们只需要求出这个概率的分子，分母，最后通过费马小定理用快速幂求出逆元就行</p><p>求分子分母的过程就是利用古典概型分别求出总共的情况数（即分母），非降序的情况数（即分子）。<br>求分母的过程就是每次入栈 -1 时要乘上当前栈的大小，就能算出总共的情况数；<br>求分子的过程就是每次入栈 -1 时要乘上当前栈顶元素的个数，表示这些元素都能达到出栈序列非降序。<br>特别的当无法达成出栈序列是非降序时，概率为0，将分子置0就行</p><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>; </span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a , ll b)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (ll)res * a % P;</span><br><span class="line">        a = (ll)a * a % P; </span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    ll n , pren = <span class="number">0</span> , fenzi = <span class="number">1</span> , fenmu = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    n *= <span class="number">2</span>;</span><br><span class="line">    priority_queue &lt;ll, vector&lt;ll&gt;, greater&lt;ll&gt;&gt; ql;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n<span class="number">+2</span>)</span></span>;</span><br><span class="line">    map&lt;ll , ll&gt; mp; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            ll len = (ll)ql.<span class="built_in">size</span>();</span><br><span class="line">            fenmu = fenmu % mod * len % mod;</span><br><span class="line">            fenzi = fenzi % mod * mp[ql.<span class="built_in">top</span>()] % mod;</span><br><span class="line">            pren = <span class="built_in">max</span>(ql.<span class="built_in">top</span>() , pren);</span><br><span class="line">            mp[ql.<span class="built_in">top</span>()]--;</span><br><span class="line">            ql.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">            ql.<span class="built_in">push</span>(a[i]);</span><br><span class="line">            mp[a[i]] ++;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; pren) &#123;</span><br><span class="line">                fenzi = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ll ans = fenzi * <span class="built_in">ksm</span>(fenmu , mod - <span class="number">2</span>) % mod;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-378QAQ-和字符串-（枚举-hash-二分）"><a href="#I-378QAQ-和字符串-（枚举-hash-二分）" class="headerlink" title="I - 378QAQ 和字符串 （枚举+hash+二分）"></a>I - 378QAQ 和字符串 （枚举+hash+二分）</h1><h2 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h2><p>枚举p，每次从p到n开始查找，每次跳过<br>和<br>的lcp，以i % p为起点,统计一下以此起点时需要修改的数量，并且标记一下i % p已经被修改过了，最后判断一下以p为循环节需要修改的数量是否小于k即可。（很极限的创过去了，队友还在想着如何用卷积卷过Test4 “v(〓￣(∵エ∵)￣〓)v”）</p><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ULL = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;)[&amp;] &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">131</span>;</span><br><span class="line">        <span class="function">std::vector&lt;ULL&gt; <span class="title">h</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            h[i + <span class="number">1</span>] = h[i] * P + s[i];</span><br><span class="line">            p[i + <span class="number">1</span>] = p[i] * P; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) &#123; </span><br><span class="line">            <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> lcp = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n - b;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + mid) == <span class="built_in">get</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + mid)) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = n / <span class="number">4</span> + <span class="number">1</span>; p &lt;= n / <span class="number">2</span>; ++p) &#123;</span><br><span class="line">            <span class="type">int</span> cost = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; n &amp;&amp; cost &lt;= k; ++i) &#123;</span><br><span class="line">                i += <span class="built_in">lcp</span>(i - p, i);</span><br><span class="line">                <span class="keyword">if</span> (i == n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> x = i % p;</span><br><span class="line">                <span class="keyword">if</span> (vis[x] != p) &#123;</span><br><span class="line">                    vis[x] = p;</span><br><span class="line">                    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">                    <span class="type">int</span> res = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = x; j &lt; n; j += p) &#123;</span><br><span class="line">                        tot += <span class="number">1</span>;</span><br><span class="line">                        res = std::<span class="built_in">max</span>(res, ++cnt[s[j] - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cost += tot - res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cost &lt;= k) &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-排列与合数-（全排列）"><a href="#J-排列与合数-（全排列）" class="headerlink" title="J - 排列与合数 （全排列）"></a>J - 排列与合数 （全排列）</h1><h2 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h2><p>长度只有5，全排列暴力枚举即可，最后代码队友写的</p><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">//线性筛</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>; </span><br><span class="line"><span class="type">int</span> pnl[maxn + <span class="number">10</span>], cnt;<span class="comment">//pnl</span></span><br><span class="line"><span class="type">int</span> st[maxn + <span class="number">10</span>];<span class="comment">//索引为质数值就是0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_primes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    st[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    st[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            pnl[cnt++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; pnl[j] &lt;= maxn/i; ++j)&#123;</span><br><span class="line">            st[pnl[j]*i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%pnl[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">init_primes</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; tt;</span><br><span class="line">    <span class="keyword">while</span> (tt--) [&amp;]&#123;</span><br><span class="line">        <span class="type">int</span> n , res;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cur</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">4</span>; j&gt;=<span class="number">0</span>; -- j) &#123; </span><br><span class="line">            cur[j] = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(cur.<span class="built_in">begin</span>(), cur.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="type">int</span> nn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; <span class="number">5</span>; ++ j) &#123;</span><br><span class="line">                nn = nn * <span class="number">10</span> + cur[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1e4</span> &lt;= nn &amp;&amp; st[nn] == <span class="number">1</span>) &#123;</span><br><span class="line">                std::cout &lt;&lt; nn &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(cur.<span class="built_in">begin</span>() , cur.<span class="built_in">end</span>()));</span><br><span class="line">        std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K-树上问题-（并查集）"><a href="#K-树上问题-（并查集）" class="headerlink" title="K - 树上问题 （并查集）"></a>K - 树上问题 （并查集）</h1><h2 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h2><p>可以将能够互为父子的视为一个集合，随后对集合之间连边，u-&gt;v代表u可以做v的父亲节点，最后找到唯一的根节点集合（唯一一个没有入度的集合，有多个则无解）即可。</p><h2 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; p, siz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">p</span>(n), <span class="built_in">siz</span>(n, <span class="number">1</span>) &#123; std::<span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">leader</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != p[x]) x = p[x] = p[p[x]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">leader</span>(x) == <span class="built_in">leader</span>(y); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">leader</span>(x), y = <span class="built_in">leader</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        siz[x] += siz[y], p[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> siz[<span class="built_in">leader</span>(x)]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            std::cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--, b--;</span><br><span class="line">            <span class="type">int</span> num = (val[a] * <span class="number">2</span> &gt;= val[b]) + (val[b] * <span class="number">2</span> &gt;= val[a]);</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">2</span>) &#123;</span><br><span class="line">                dsu.<span class="built_in">merge</span>(a, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[a] * <span class="number">2</span> &lt;= val[b]) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(a, b);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(b, a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">use</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : edges) &#123;</span><br><span class="line">            x = dsu.<span class="built_in">leader</span>(x), y = dsu.<span class="built_in">leader</span>(y);</span><br><span class="line">            use[x] = use[y] = <span class="literal">true</span>;</span><br><span class="line">            d[y] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dsu.<span class="built_in">size</span>(<span class="number">0</span>) == n) &#123;</span><br><span class="line">            std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> root = <span class="number">-1</span>, num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i] == <span class="number">0</span> &amp;&amp; use[i]) &#123;</span><br><span class="line">                    root = i;</span><br><span class="line">                    num += <span class="number">1</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                std::cout &lt;&lt; dsu.<span class="built_in">size</span>(root) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L-Toxel-与-PCPC-II（dp）"><a href="#L-Toxel-与-PCPC-II（dp）" class="headerlink" title="L - Toxel 与 PCPC II（dp）"></a>L - Toxel 与 PCPC II（dp）</h1><h2 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h2><p>依旧队友神力，并没有读题的机会</p><h2 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> power = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x * x;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(m + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    dp[i] = <span class="number">2e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>, i - <span class="number">400</span>); j &lt; i; ++j) &#123;</span><br><span class="line">      dp[i] = <span class="built_in">min</span>&lt;<span class="type">int</span>&gt;(dp[i] , dp[j] + a[i - <span class="number">1</span>] + <span class="built_in">power</span>(i - j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; dp[m] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="M-有效算法-（二分）"><a href="#M-有效算法-（二分）" class="headerlink" title="M - 有效算法 （二分）"></a>M - 有效算法 （二分）</h1><h2 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h2><p>可以发现<br>越大，<br>可取的范围越大，因此直接二分<br>的最小值，判断所有<br>可以取到的<br>是否有公共区间即可。</p><h2 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="keyword">for</span> (std::cin &gt;&gt; tt; tt--;) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="type">int</span> x = k * b[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> L = a[<span class="number">0</span>] - x, R = a[<span class="number">0</span>] + x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                x = k * b[i];</span><br><span class="line">                <span class="type">int</span> l = a[i] - x, r = a[i] + x;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; L || l &gt; R) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    L = std::<span class="built_in">max</span>(L, l);</span><br><span class="line">                    R = std::<span class="built_in">min</span>(R, r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> , r = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; r &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-Once-In-My-Life-（构造）&quot;&gt;&lt;a href=&quot;#A-Once-In-My-Life-（构造）&quot; class=&quot;headerlink&quot; title=&quot;A - Once In My Life （构造）&quot;&gt;&lt;/a&gt;A - Once In My Lif</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jiangly算法模板收集</title>
    <link href="http://chfychin.cn/posts/4478d89.html"/>
    <id>http://chfychin.cn/posts/4478d89.html</id>
    <published>2024-09-20T14:57:26.000Z</published>
    <updated>2024-09-20T14:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、杂类"><a href="#一、杂类" class="headerlink" title="一、杂类"></a>一、杂类</h1><h2 id="01-int128-输出流自定义"><a href="#01-int128-输出流自定义" class="headerlink" title="01 - int128 输出流自定义"></a>01 - int128 输出流自定义</h2><p><a href="https://codeforces.com/contest/1806/submission/198413531">2023-03-20</a><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line">using i128 = __int128;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;operator&lt;&lt;(std::ostream &amp;<span class="built_in">os</span>, i128 n) &#123;</span><br><span class="line">    std::<span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">reverse</span>(s.begin(), s.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">os</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="02-常用库函数重载"><a href="#02-常用库函数重载" class="headerlink" title="02 - 常用库函数重载"></a>02 - 常用库函数重载</h2><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">using</span> <span class="variable">i64</span> <span class="operator">=</span> <span class="variable">long</span> <span class="variable">long</span>;</span><br><span class="line"><span class="variable">using</span> <span class="variable">i128</span> <span class="operator">=</span> <span class="variable">__int128</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">i64</span> <span class="title function_">ceilDiv</span>(<span class="params">i64</span> <span class="params">n</span>, <span class="params">i64</span> <span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&gt;=</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">return</span> (<span class="variable">n</span> <span class="operator">+</span> <span class="variable">m</span> <span class="operator">-</span> <span class="number">1</span>) / <span class="variable">m</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">n</span> / <span class="variable">m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">i64</span> <span class="title function_">floorDiv</span>(<span class="params">i64</span> <span class="params">n</span>, <span class="params">i64</span> <span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&gt;=</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">n</span> / <span class="variable">m</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">return</span> (<span class="variable">n</span> <span class="operator">-</span> <span class="variable">m</span> <span class="operator">+</span> <span class="number">1</span>) / <span class="variable">m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">template</span><span class="operator">&lt;</span><span class="keyword">class</span> <span class="title class_">T</span><span class="operator">&gt;</span></span><br><span class="line"><span class="variable">void</span> <span class="title function_">chmax</span>(<span class="params">T</span> &amp;<span class="params">a</span>, <span class="params">T</span> <span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">a</span> <span class="operator">&lt;</span> <span class="variable">b</span>) &#123;</span><br><span class="line">        <span class="variable">a</span> <span class="operator">=</span> <span class="variable">b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">i128</span> <span class="title function_">gcd</span>(<span class="params">i128</span> <span class="params">a</span>, <span class="params">i128</span> <span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">b</span> ? <span class="title function_">gcd</span>(<span class="variable">b</span>, <span class="variable">a</span> <span class="operator">%</span> <span class="variable">b</span>) : <span class="variable">a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、图与网络"><a href="#二、图与网络" class="headerlink" title="二、图与网络"></a>二、图与网络</h1><h2 id="01-强连通分量缩点（SCC）"><a href="#01-强连通分量缩点（SCC）" class="headerlink" title="01 - 强连通分量缩点（SCC）"></a>01 - 强连通分量缩点（SCC）</h2><p><a href="https://codeforces.com/contest/1835/submission/210147209">2023-06-18</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SCC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SCC</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">SCC</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="02-割边与割边缩点（EBCC）"><a href="#02-割边与割边缩点（EBCC）" class="headerlink" title="02 - 割边与割边缩点（EBCC）"></a>02 - 割边与割边缩点（EBCC）</h2><p><a href="https://codeforces.com/contest/118/submission/205426518">2023-05-11</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EBCC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">EBCC</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">EBCC</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == p) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                <span class="built_in">dfs</span>(y, x);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span> &amp;&amp; dfn[y] &lt; dfn[x]) &#123;</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; siz;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; cnte;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Graph <span class="title">compress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Graph g;</span><br><span class="line">        g.n = cnt;</span><br><span class="line">        g.siz.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        g.cnte.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            g.siz[bel[i]]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bel[i] &lt; bel[j]) &#123;</span><br><span class="line">                    g.edges.<span class="built_in">emplace_back</span>(bel[i], bel[j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    g.cnte[bel[i]]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="03-二分图最大权匹配（MaxAssignment-基于KM）【久远】"><a href="#03-二分图最大权匹配（MaxAssignment-基于KM）【久远】" class="headerlink" title="03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】"></a>03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】</h2><p><a href="https://atcoder.jp/contests/abc247/submissions/30867023">2022-04-10</a><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">struct MaxAssignment &#123;</span><br><span class="line">    public:</span><br><span class="line">        T solve(int nx, int ny, std::vector&lt;std::vector&lt;T&gt;&gt; a) &#123;</span><br><span class="line">            assert(0 &lt;= nx &amp;&amp; nx &lt;= ny);</span><br><span class="line">            assert(int(a.size()) == nx);</span><br><span class="line">            for (int i = 0; i &lt; nx; ++i) &#123;</span><br><span class="line">                assert(int(a<span class="comment">[i]</span>.size()) == ny);</span><br><span class="line">                for (auto x : a<span class="comment">[i]</span>)</span><br><span class="line">                    assert(x &gt;= 0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            auto update = <span class="comment">[&amp;]</span>(int x) &#123;</span><br><span class="line">                for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                    if (lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> - a<span class="comment">[x]</span><span class="comment">[y]</span> &lt; slack<span class="comment">[y]</span>) &#123;</span><br><span class="line">                        slack<span class="comment">[y]</span> = lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> - a<span class="comment">[x]</span><span class="comment">[y]</span>;</span><br><span class="line">                        slackx<span class="comment">[y]</span> = x;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            costs.resize(nx + 1);</span><br><span class="line">            costs<span class="comment">[0]</span> = 0;</span><br><span class="line">            lx.assign(nx, std::numeric_limits&lt;T&gt;::max());</span><br><span class="line">            ly.assign(ny, 0);</span><br><span class="line">            xy.assign(nx, -1);</span><br><span class="line">            yx.assign(ny, -1);</span><br><span class="line">            slackx.resize(ny);</span><br><span class="line">            for (int cur = 0; cur &lt; nx; ++cur) &#123;</span><br><span class="line">                std::queue&lt;int&gt; que;</span><br><span class="line">                visx.assign(nx, false);</span><br><span class="line">                visy.assign(ny, false);</span><br><span class="line">                slack.assign(ny, std::numeric_limits&lt;T&gt;::max());</span><br><span class="line">                p.assign(nx, -1);</span><br><span class="line">                </span><br><span class="line">                for (int x = 0; x &lt; nx; ++x) &#123;</span><br><span class="line">                    if (xy<span class="comment">[x]</span> == -1) &#123;</span><br><span class="line">                        que.push(x);</span><br><span class="line">                        visx<span class="comment">[x]</span> = true;</span><br><span class="line">                        update(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                int ex, ey;</span><br><span class="line">                bool found = false;</span><br><span class="line">                while (!found) &#123;</span><br><span class="line">                    while (!que.empty() &amp;&amp; !found) &#123;</span><br><span class="line">                        auto x = que.front();</span><br><span class="line">                        que.pop();</span><br><span class="line">                        for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                            if (a<span class="comment">[x]</span><span class="comment">[y]</span> == lx<span class="comment">[x]</span> + ly<span class="comment">[y]</span> &amp;&amp; !visy<span class="comment">[y]</span>) &#123;</span><br><span class="line">                                if (yx<span class="comment">[y]</span> == -1) &#123;</span><br><span class="line">                                    ex = x;</span><br><span class="line">                                    ey = y;</span><br><span class="line">                                    found = true;</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                                que.push(yx<span class="comment">[y]</span>);</span><br><span class="line">                                p<span class="comment">[yx<span class="comment">[y]</span>]</span> = x;</span><br><span class="line">                                visy<span class="comment">[y]</span> = visx<span class="comment">[yx<span class="comment">[y]</span>]</span> = true;</span><br><span class="line">                                update(yx<span class="comment">[y]</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (found)</span><br><span class="line">                        break;</span><br><span class="line">                    </span><br><span class="line">                    T delta = std::numeric_limits&lt;T&gt;::max();</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y)</span><br><span class="line">                        if (!visy<span class="comment">[y]</span>)</span><br><span class="line">                            delta = std::min(delta, slack<span class="comment">[y]</span>);</span><br><span class="line">                    for (int x = 0; x &lt; nx; ++x)</span><br><span class="line">                        if (visx<span class="comment">[x]</span>)</span><br><span class="line">                            lx<span class="comment">[x]</span> -= delta;</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                        if (visy<span class="comment">[y]</span>) &#123;</span><br><span class="line">                            ly<span class="comment">[y]</span> += delta;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            slack<span class="comment">[y]</span> -= delta;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (int y = 0; y &lt; ny; ++y) &#123;</span><br><span class="line">                        if (!visy<span class="comment">[y]</span> &amp;&amp; slack<span class="comment">[y]</span> == 0) &#123;</span><br><span class="line">                            if (yx<span class="comment">[y]</span> == -1) &#123;</span><br><span class="line">                                ex = slackx<span class="comment">[y]</span>;</span><br><span class="line">                                ey = y;</span><br><span class="line">                                found = true;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            que.push(yx<span class="comment">[y]</span>);</span><br><span class="line">                            p<span class="comment">[yx<span class="comment">[y]</span>]</span> = slackx<span class="comment">[y]</span>;</span><br><span class="line">                            visy<span class="comment">[y]</span> = visx<span class="comment">[yx<span class="comment">[y]</span>]</span> = true;</span><br><span class="line">                            update(yx<span class="comment">[y]</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                costs<span class="comment">[cur + 1]</span> = costs<span class="comment">[cur]</span>;</span><br><span class="line">                for (int x = ex, y = ey, ty; x != -1; x = p<span class="comment">[x]</span>, y = ty) &#123;</span><br><span class="line">                    costs<span class="comment">[cur + 1]</span> += a<span class="comment">[x]</span><span class="comment">[y]</span>;</span><br><span class="line">                    if (xy<span class="comment">[x]</span> != -1)</span><br><span class="line">                        costs<span class="comment">[cur + 1]</span> -= a<span class="comment">[x]</span><span class="comment">[xy<span class="comment">[x]</span>]</span>;</span><br><span class="line">                    ty = xy<span class="comment">[x]</span>;</span><br><span class="line">                    xy<span class="comment">[x]</span> = y;</span><br><span class="line">                    yx<span class="comment">[y]</span> = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return costs<span class="comment">[nx]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;int&gt; assignment() &#123;</span><br><span class="line">            return xy;</span><br><span class="line">        &#125;</span><br><span class="line">        std::pair&lt;std::vector&lt;T&gt;, std::vector&lt;T&gt;&gt; labels() &#123;</span><br><span class="line">            return std::make_pair(lx, ly);</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;T&gt; weights() &#123;</span><br><span class="line">            return costs;</span><br><span class="line">        &#125;</span><br><span class="line">    private:</span><br><span class="line">        std::vector&lt;T&gt; lx, ly, slack, costs;</span><br><span class="line">        std::vector&lt;int&gt; xy, yx, p, slackx;</span><br><span class="line">        std::vector&lt;bool&gt; visx, visy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="04-一般图最大匹配（Graph-带花树算法）【久远】"><a href="#04-一般图最大匹配（Graph-带花树算法）【久远】" class="headerlink" title="04 - 一般图最大匹配（Graph 带花树算法）【久远】"></a>04 - 一般图最大匹配（Graph 带花树算法）【久远】</h2><p><a href="https://codeforces.com/contest/1615/submission/140509278">2021-12-24</a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">findMatching</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">match</span><span class="params">(n, <span class="number">-1</span>)</span>, <span class="title">vis</span><span class="params">(n)</span>, <span class="title">link</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n)</span>, <span class="title">dep</span><span class="params">(n)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// disjoint set union</span></span><br><span class="line">        <span class="keyword">auto</span> find = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            <span class="keyword">while</span> (f[u] != u)</span><br><span class="line">                u = f[u] = f[f[u]];</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> lca = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v) &#123;</span><br><span class="line">            u = <span class="built_in">find</span>(u);</span><br><span class="line">            v = <span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">while</span> (u != v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">                    std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">                u = <span class="built_in">find</span>(link[match[u]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">auto</span> blossom = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> p) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">find</span>(u) != p) &#123;</span><br><span class="line">                link[u] = v;</span><br><span class="line">                v = match[u];</span><br><span class="line">                <span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">                f[u] = f[v] = p;</span><br><span class="line">                u = link[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find an augmenting path starting from u and augment (if exist)</span></span><br><span class="line">        <span class="keyword">auto</span> augment = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// vis = 0 corresponds to inner vertices, vis = 1 corresponds to outer vertices</span></span><br><span class="line">            std::<span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">            </span><br><span class="line">            que.<span class="built_in">push</span>(u);</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            dep[u] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (vis[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        </span><br><span class="line">                        vis[v] = <span class="number">0</span>;</span><br><span class="line">                        link[v] = u;</span><br><span class="line">                        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// found an augmenting path</span></span><br><span class="line">                        <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> x = v, y = u, temp; y != <span class="number">-1</span>; x = temp, y = x == <span class="number">-1</span> ? <span class="number">-1</span> : link[x]) &#123;</span><br><span class="line">                                temp = match[y];</span><br><span class="line">                                match[x] = y;</span><br><span class="line">                                match[y] = x;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        vis[match[v]] = <span class="number">1</span>;</span><br><span class="line">                        dep[match[v]] = dep[u] + <span class="number">2</span>;</span><br><span class="line">                        que.<span class="built_in">push</span>(match[v]);</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] == <span class="number">1</span> &amp;&amp; <span class="built_in">find</span>(v) != <span class="built_in">find</span>(u)) &#123;</span><br><span class="line">                        <span class="comment">// found a blossom</span></span><br><span class="line">                        <span class="type">int</span> p = <span class="built_in">lca</span>(u, v);</span><br><span class="line">                        <span class="built_in">blossom</span>(u, v, p);</span><br><span class="line">                        <span class="built_in">blossom</span>(v, u, p);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find a maximal matching greedily (decrease constant)</span></span><br><span class="line">        <span class="keyword">auto</span> greedy = [&amp;]() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u) &#123;</span><br><span class="line">                <span class="keyword">if</span> (match[u] != <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        match[u] = v;</span><br><span class="line">                        match[v] = u;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">greedy</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</span><br><span class="line">            <span class="keyword">if</span> (match[u] == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">augment</span>(u);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> match;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="05-TwoSat（2-Sat）"><a href="#05-TwoSat（2-Sat）" class="headerlink" title="05 - TwoSat（2-Sat）"></a>05 - TwoSat（2-Sat）</h2><p><a href="https://atcoder.jp/contests/arc161/submissions/46031530">2023-09-29</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TwoSat</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    std::vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">    <span class="built_in">TwoSat</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(<span class="number">2</span> * n), <span class="built_in">ans</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addClause</span><span class="params">(<span class="type">int</span> u, <span class="type">bool</span> f, <span class="type">int</span> v, <span class="type">bool</span> g)</span> </span>&#123;</span><br><span class="line">        e[<span class="number">2</span> * u + !f].<span class="built_in">push_back</span>(<span class="number">2</span> * v + g);</span><br><span class="line">        e[<span class="number">2</span> * v + !g].<span class="built_in">push_back</span>(<span class="number">2</span> * u + f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">satisfiable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">id</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">dfn</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">low</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; tarjan = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            stk.<span class="built_in">push_back</span>(u);</span><br><span class="line">            dfn[u] = low[u] = now++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dfn[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">tarjan</span>(v);</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    v = stk.<span class="built_in">back</span>();</span><br><span class="line">                    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                    id[v] = cnt;</span><br><span class="line">                &#125; <span class="keyword">while</span> (v != u);</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i) <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) <span class="built_in">tarjan</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[<span class="number">2</span> * i] == id[<span class="number">2</span> * i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            ans[i] = id[<span class="number">2</span> * i] &gt; id[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">answer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ans; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="06A-最大流（Flow-旧版其一，整数应用）"><a href="#06A-最大流（Flow-旧版其一，整数应用）" class="headerlink" title="06A - 最大流（Flow 旧版其一，整数应用）"></a>06A - 最大流（Flow 旧版其一，整数应用）</h2><p><a href="https://codeforces.com/contest/1717/submission/170688062">2022-09-03</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="06B-最大流（Flow-旧版其二，浮点数应用）"><a href="#06B-最大流（Flow-旧版其二，浮点数应用）" class="headerlink" title="06B - 最大流（Flow 旧版其二，浮点数应用）"></a>06B - 最大流（Flow 旧版其二，浮点数应用）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412765">2022-04-09</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                res += a;</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, <span class="number">1E100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="06C-最大流（MaxFlow-新版）"><a href="#06C-最大流（MaxFlow-新版）" class="headerlink" title="06C - 最大流（MaxFlow 新版）"></a>06C - 最大流（MaxFlow 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62915815">2023-07-21</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxFlow</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        _Edge(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;_Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MaxFlow</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">MaxFlow</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        e.<span class="built_in">clear</span>();</span><br><span class="line">        g.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        cur.<span class="built_in">resize</span>(n);</span><br><span class="line">        h.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">minCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            c[i] = (h[i] != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> from;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        T flow;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">std::vector&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::vector&lt;Edge&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            Edge x;</span><br><span class="line">            x.from = e[i + <span class="number">1</span>].to;</span><br><span class="line">            x.to = e[i].to;</span><br><span class="line">            x.cap = e[i].cap + e[i + <span class="number">1</span>].cap;</span><br><span class="line">            x.flow = e[i + <span class="number">1</span>].cap;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="07A-费用流（MCFGraph-最小费用可行流）"><a href="#07A-费用流（MCFGraph-最小费用可行流）" class="headerlink" title="07A - 费用流（MCFGraph 最小费用可行流）"></a>07A - 费用流（MCFGraph 最小费用可行流）</h2><p><a href="https://codeforces.com/contest/1766/submission/184974697">2022-12-12</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MCFGraph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, c, f;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">v</span>(v), <span class="built_in">c</span>(c), <span class="built_in">f</span>(f) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;i64&gt; h, dis;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">assign</span>(n, std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>());</span><br><span class="line">        pre.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::priority_queue&lt;std::pair&lt;i64, <span class="type">int</span>&gt;, std::vector&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">emplace</span>(<span class="number">0</span>, s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            i64 d = que.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">top</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis[u] &lt; d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].v;</span><br><span class="line">                <span class="type">int</span> c = e[i].c;</span><br><span class="line">                <span class="type">int</span> f = e[i].f;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; dis[v] &gt; d + h[u] - h[v] + f) &#123;</span><br><span class="line">                    dis[v] = d + h[u] - h[v] + f;</span><br><span class="line">                    pre[v] = i;</span><br><span class="line">                    que.<span class="built_in">emplace</span>(dis[v], v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MCFGraph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, <span class="number">0</span>, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, c, -f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, c, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::pair&lt;<span class="type">int</span>, i64&gt; <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        i64 cost = <span class="number">0</span>;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">dijkstra</span>(s, t)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) h[i] += dis[i];</span><br><span class="line">            <span class="type">int</span> aug = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) aug = std::<span class="built_in">min</span>(aug, e[pre[i]].c);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) &#123;</span><br><span class="line">                e[pre[i]].c -= aug;</span><br><span class="line">                e[pre[i] ^ <span class="number">1</span>].c += aug;</span><br><span class="line">            &#125;</span><br><span class="line">            flow += aug;</span><br><span class="line">            cost += <span class="built_in">i64</span>(aug) * h[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="07B-费用流（MCFGraph-最小费用最大流）"><a href="#07B-费用流（MCFGraph-最小费用最大流）" class="headerlink" title="07B - 费用流（MCFGraph 最小费用最大流）"></a>07B - 费用流（MCFGraph 最小费用最大流）</h2><p>代码同上，但是需要注释掉建边限制。以下为参考：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">addEdge</span>(int u, int v, int c, int f) &#123; <span class="comment">// 可行流</span></span><br><span class="line">    if (f &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(v, <span class="number">0</span>, f);</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(u, c, -f);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(v, c, f);</span><br><span class="line">        <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">        e<span class="selector-class">.emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void <span class="built_in">addEdge</span>(int u, int v, int c, int f) &#123; <span class="comment">// 最大流</span></span><br><span class="line">    <span class="selector-tag">g</span><span class="selector-attr">[u]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">    e<span class="selector-class">.emplace_back</span>(v, c, f);</span><br><span class="line">    <span class="selector-tag">g</span><span class="selector-attr">[v]</span><span class="selector-class">.push_back</span>(e.size());</span><br><span class="line">    e<span class="selector-class">.emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="08-树链剖分（HLD）"><a href="#08-树链剖分（HLD）" class="headerlink" title="08 - 树链剖分（HLD）"></a>08 - 树链剖分（HLD）</h2><p><a href="https://codeforces.com/contest/1863/submission/221214363">2023-08-31</a><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">struct HLD &#123;</span><br><span class="line">    int n;</span><br><span class="line">    std::vector&lt;int&gt; siz, top, dep, parent, in, out, seq;</span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; adj;</span><br><span class="line">    int cur;</span><br><span class="line">    </span><br><span class="line">    HLD() &#123;&#125;</span><br><span class="line">    HLD(int n) &#123;</span><br><span class="line">        init(n);</span><br><span class="line">    &#125;</span><br><span class="line">    void init(int n) &#123;</span><br><span class="line">        this-&gt;n = n;</span><br><span class="line">        siz.resize(n);</span><br><span class="line">        top.resize(n);</span><br><span class="line">        dep.resize(n);</span><br><span class="line">        parent.resize(n);</span><br><span class="line">        in.resize(n);</span><br><span class="line">        out.resize(n);</span><br><span class="line">        seq.resize(n);</span><br><span class="line">        cur = 0;</span><br><span class="line">        adj.assign(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    void addEdge(int u, int v) &#123;</span><br><span class="line">        adj<span class="comment">[u]</span>.push_back(v);</span><br><span class="line">        adj<span class="comment">[v]</span>.push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    void work(int root = 0) &#123;</span><br><span class="line">        top<span class="comment">[root]</span> = root;</span><br><span class="line">        dep<span class="comment">[root]</span> = 0;</span><br><span class="line">        parent<span class="comment">[root]</span> = -1;</span><br><span class="line">        dfs1(root);</span><br><span class="line">        dfs2(root);</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs1(int u) &#123;</span><br><span class="line">        if (parent<span class="comment">[u]</span> != -1) &#123;</span><br><span class="line">            adj<span class="comment">[u]</span>.erase(std::find(adj<span class="comment">[u]</span>.begin(), adj<span class="comment">[u]</span>.end(), parent<span class="comment">[u]</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        siz<span class="comment">[u]</span> = 1;</span><br><span class="line">        for (auto &amp;v : adj<span class="comment">[u]</span>) &#123;</span><br><span class="line">            parent<span class="comment">[v]</span> = u;</span><br><span class="line">            dep<span class="comment">[v]</span> = dep<span class="comment">[u]</span> + 1;</span><br><span class="line">            dfs1(v);</span><br><span class="line">            siz<span class="comment">[u]</span> += siz<span class="comment">[v]</span>;</span><br><span class="line">            if (siz<span class="comment">[v]</span> &gt; siz<span class="comment">[adj<span class="comment">[u]</span><span class="comment">[0]</span>]</span>) &#123;</span><br><span class="line">                std::swap(v, adj<span class="comment">[u]</span><span class="comment">[0]</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs2(int u) &#123;</span><br><span class="line">        in<span class="comment">[u]</span> = cur++;</span><br><span class="line">        seq<span class="comment">[in<span class="comment">[u]</span>]</span> = u;</span><br><span class="line">        for (auto v : adj<span class="comment">[u]</span>) &#123;</span><br><span class="line">            top<span class="comment">[v]</span> = v == adj<span class="comment">[u]</span><span class="comment">[0]</span> ? top<span class="comment">[u]</span> : v;</span><br><span class="line">            dfs2(v);</span><br><span class="line">        &#125;</span><br><span class="line">        out<span class="comment">[u]</span> = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    int lca(int u, int v) &#123;</span><br><span class="line">        while (top<span class="comment">[u]</span> != top<span class="comment">[v]</span>) &#123;</span><br><span class="line">            if (dep<span class="comment">[top<span class="comment">[u]</span>]</span> &gt; dep<span class="comment">[top<span class="comment">[v]</span>]</span>) &#123;</span><br><span class="line">                u = parent<span class="comment">[top<span class="comment">[u]</span>]</span>;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                v = parent<span class="comment">[top<span class="comment">[v]</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dep<span class="comment">[u]</span> &lt; dep<span class="comment">[v]</span> ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int dist(int u, int v) &#123;</span><br><span class="line">        return dep<span class="comment">[u]</span> + dep<span class="comment">[v]</span> - 2 * dep<span class="comment">[lca(u, v)]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int jump(int u, int k) &#123;</span><br><span class="line">        if (dep<span class="comment">[u]</span> &lt; k) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        int d = dep<span class="comment">[u]</span> - k;</span><br><span class="line">        </span><br><span class="line">        while (dep<span class="comment">[top<span class="comment">[u]</span>]</span> &gt; d) &#123;</span><br><span class="line">            u = parent<span class="comment">[top<span class="comment">[u]</span>]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return seq<span class="comment">[in<span class="comment">[u]</span> - dep<span class="comment">[u]</span> + d]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool isAncester(int u, int v) &#123;</span><br><span class="line">        return in<span class="comment">[u]</span> &lt;= in<span class="comment">[v]</span> &amp;&amp; in<span class="comment">[v]</span> &lt; out<span class="comment">[u]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedParent(int u, int v) &#123;</span><br><span class="line">        std::swap(u, v);</span><br><span class="line">        if (u == v) &#123;</span><br><span class="line">            return u;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isAncester(u, v)) &#123;</span><br><span class="line">            return parent<span class="comment">[u]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        auto it = std::upper_bound(adj<span class="comment">[u]</span>.begin(), adj<span class="comment">[u]</span>.end(), v, <span class="comment">[&amp;]</span>(int x, int y) &#123;</span><br><span class="line">            return in<span class="comment">[x]</span> &lt; in<span class="comment">[y]</span>;</span><br><span class="line">        &#125;) - 1;</span><br><span class="line">        return *it;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedSize(int u, int v) &#123;</span><br><span class="line">        if (u == v) &#123;</span><br><span class="line">            return n;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isAncester(v, u)) &#123;</span><br><span class="line">            return siz<span class="comment">[v]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return n - siz<span class="comment">[rootedParent(u, v)]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int rootedLca(int a, int b, int c) &#123;</span><br><span class="line">        return lca(a, b) ^ lca(b, c) ^ lca(c, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="三、数论、几何、多项式"><a href="#三、数论、几何、多项式" class="headerlink" title="三、数论、几何、多项式"></a>三、数论、几何、多项式</h1><h2 id="01-快速幂"><a href="#01-快速幂" class="headerlink" title="01 - 快速幂"></a>01 - 快速幂</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="02-欧拉筛"><a href="#02-欧拉筛" class="headerlink" title="02 - 欧拉筛"></a>02 - 欧拉筛</h2><p><a href="https://cf.dianhsu.com/gym/104479/submission/220987267">2023-08-29</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="03-莫比乌斯函数筛（莫比乌斯函数-反演）"><a href="#03-莫比乌斯函数筛（莫比乌斯函数-反演）" class="headerlink" title="03 - 莫比乌斯函数筛（莫比乌斯函数/反演）"></a>03 - 莫比乌斯函数筛（莫比乌斯函数/反演）</h2><p><a href="https://atcoder.jp/contests/tupc2022/submissions/39391116">2023-03-04</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">std::unordered_map&lt;<span class="type">int</span>, Z&gt; fMu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E7</span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line">std::vector&lt;Z&gt; mu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mu.<span class="built_in">resize</span>(n);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * p] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        mu[i] += mu[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Z <span class="title">sumMu</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">return</span> mu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fMu.<span class="built_in">count</span>(n)) &#123;</span><br><span class="line">        <span class="keyword">return</span> fMu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans -= (r - l + <span class="number">1</span>) * <span class="built_in">sumMu</span>(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sieve</span>(N);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> L, R;</span><br><span class="line">    std::cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    L -= <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    Z ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= R; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = R / (R / l);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= L) &#123;</span><br><span class="line">            r = std::<span class="built_in">min</span>(r, L / (L / l));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ans += (<span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">2</span>), R / l - L / l) - <span class="number">1</span>) * (<span class="built_in">sumMu</span>(r) - <span class="built_in">sumMu</span>(l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="04-求解单个数的欧拉函数"><a href="#04-求解单个数的欧拉函数" class="headerlink" title="04 - 求解单个数的欧拉函数"></a>04 - 求解单个数的欧拉函数</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int phi(int n) &#123;</span><br><span class="line">    int res <span class="operator">=</span> n<span class="comment">;</span></span><br><span class="line">    for (int i <span class="operator">=</span> <span class="number">2</span><span class="comment">; i * i &lt;= n; i++) &#123;</span></span><br><span class="line">        if (n % i <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">            while (n % i <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">                n /<span class="operator">=</span> i<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            res <span class="operator">=</span> res / i * (i - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        res <span class="operator">=</span> res / n * (n - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="05-扩展欧几里得（exGCD）"><a href="#05-扩展欧几里得（exGCD）" class="headerlink" title="05 - 扩展欧几里得（exGCD）"></a>05 - 扩展欧几里得（exGCD）</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a><br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int exgcd(int a, int b, int &amp;<span class="variable language_">x</span>, int &amp;<span class="variable language_">y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        <span class="variable language_">x</span> = <span class="number">1</span>, <span class="variable language_">y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    int g = exgcd(b, a % b, <span class="variable language_">y</span>, <span class="variable language_">x</span>);</span><br><span class="line">    <span class="variable language_">y</span> -= a / b * <span class="variable language_">x</span>;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="06-组合数（Comb-with-MInt-amp-MLong）"><a href="#06-组合数（Comb-with-MInt-amp-MLong）" class="headerlink" title="06 - 组合数（Comb, with. MInt &amp; MLong）"></a>06 - 组合数（Comb, with. MInt &amp; MLong）</h2><p><a href="https://codeforces.com/contest/1864/submission/220584872">2023-08-26</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n&#123;<span class="number">0</span>&#125;, _fac&#123;<span class="number">1</span>&#125;, _invfac&#123;<span class="number">1</span>&#125;, _inv&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        &#125;</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) &#123;</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; comb;</span><br></pre></td></tr></table></figure></p><h2 id="07-二项式（Binomial-任意模数计算）"><a href="#07-二项式（Binomial-任意模数计算）" class="headerlink" title="07 - 二项式（Binomial 任意模数计算）"></a>07 - 二项式（Binomial 任意模数计算）</h2><p><a href="https://codeforces.com/contest/896/submission/219861532">2023-08-22</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">factorize</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(i) * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n % i == <span class="number">0</span>; n /= i)</span><br><span class="line">                ++t;</span><br><span class="line">            factors.<span class="built_in">emplace_back</span>(i, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.<span class="built_in">emplace_back</span>(n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base *= base, exp /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res *= base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base = <span class="number">1LL</span> * base * base % mod, exp /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * base % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> g = m, r = a, x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> q = g / r;</span><br><span class="line">        g %= r;</span><br><span class="line">        std::<span class="built_in">swap</span>(g, r);</span><br><span class="line">        x -= q * y;</span><br><span class="line">        std::<span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + m : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solveModuloEquations</span><span class="params">(<span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        m *= e[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> p = e[i].first;</span><br><span class="line">        res = (res + <span class="number">1LL</span> * e[i].second * (m / p) * <span class="built_in">inverse</span>(m / p, p)) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E5</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Binomial</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mod;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pk;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; prod;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> i64 <span class="title">exponent</span><span class="params">(i64 n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        i64 res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (n /= p; n &gt; <span class="number">0</span>; n /= p) &#123;</span><br><span class="line">            res += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">product</span><span class="params">(i64 n, std::<span class="type">size_t</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p = factors[i].first;</span><br><span class="line">        <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= p) &#123;</span><br><span class="line">            res = <span class="number">1LL</span> * res * <span class="built_in">power</span>(prod[i].<span class="built_in">back</span>(), n / pk[i], pk[i]) % pk[i] * prod[i][n % pk[i]] % pk[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Binomial</span>(<span class="type">int</span> mod) : <span class="built_in">mod</span>(mod), <span class="built_in">factors</span>(<span class="built_in">factorize</span>(mod)) &#123;</span><br><span class="line">        pk.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        prod.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            pk[i] = <span class="built_in">power</span>(p, k);</span><br><span class="line">            prod[i].<span class="built_in">resize</span>(std::<span class="built_in">min</span>(N + <span class="number">1</span>, pk[i]));</span><br><span class="line">            prod[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; prod[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % p == <span class="number">0</span>) &#123;</span><br><span class="line">                    prod[i][j] = prod[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prod[i][j] = <span class="number">1LL</span> * prod[i][j - <span class="number">1</span>] * j % pk[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(i64 n, i64 m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            <span class="type">int</span> e = <span class="built_in">exponent</span>(n, p) - <span class="built_in">exponent</span>(m, p) - <span class="built_in">exponent</span>(n - m, p);</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= k) &#123;</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pn = <span class="built_in">product</span>(n, i);</span><br><span class="line">                <span class="type">int</span> pm = <span class="built_in">product</span>(m, i);</span><br><span class="line">                <span class="type">int</span> pd = <span class="built_in">product</span>(n - m, i);</span><br><span class="line">                <span class="type">int</span> res = <span class="number">1LL</span> * pn * <span class="built_in">inverse</span>(pm, pk[i]) % pk[i] * <span class="built_in">inverse</span>(pd, pk[i]) % pk[i] * <span class="built_in">power</span>(p, e) % pk[i];</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">solveModuloEquations</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="08-素数测试与因式分解（Miller-Rabin-amp-Pollard-Rho）"><a href="#08-素数测试与因式分解（Miller-Rabin-amp-Pollard-Rho）" class="headerlink" title="08 - 素数测试与因式分解（Miller-Rabin &amp; Pollard-Rho）"></a>08 - 素数测试与因式分解（Miller-Rabin &amp; Pollard-Rho）</h2><p><a href="https://cf.dianhsu.com/gym/104354/submission/206130894">2023-05-16</a><br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">i64</span> <span class="keyword">mul</span>(<span class="type">i64</span> a<span class="punctuation">,</span> <span class="type">i64</span> b<span class="punctuation">,</span> <span class="type">i64</span> m) &#123;</span><br><span class="line">    return static_cast&lt;__int<span class="number">128</span>&gt;(a) * b % m<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">i64</span> power(<span class="type">i64</span> a<span class="punctuation">,</span> <span class="type">i64</span> b<span class="punctuation">,</span> <span class="type">i64</span> m) &#123;</span><br><span class="line">    <span class="type">i64</span> res <span class="operator">=</span> <span class="number">1</span> % m<span class="comment">;</span></span><br><span class="line">    for (<span class="comment">; b; b &gt;&gt;= 1, a = mul(a, a, m))</span></span><br><span class="line">        if (b &amp; <span class="number">1</span>)</span><br><span class="line">            res <span class="operator">=</span> <span class="keyword">mul</span>(res<span class="punctuation">,</span> a<span class="punctuation">,</span> m)<span class="comment">;</span></span><br><span class="line">    return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">bool isprime(<span class="type">i64</span> n) &#123;</span><br><span class="line">    if (n &lt; <span class="number">2</span>)</span><br><span class="line">        return <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">    static constexpr int A[] <span class="operator">=</span> &#123;<span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">13</span><span class="punctuation">,</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">19</span><span class="punctuation">,</span> <span class="number">23</span>&#125;<span class="comment">;</span></span><br><span class="line">    int s <span class="operator">=</span> __builtin_ctzll(n - <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">    <span class="type">i64</span> d <span class="operator">=</span> (n - <span class="number">1</span>) &gt;&gt; s<span class="comment">;</span></span><br><span class="line">    for (auto a : A) &#123;</span><br><span class="line">        if (a <span class="operator">=</span><span class="operator">=</span> n)</span><br><span class="line">            return <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">        <span class="type">i64</span> <span class="keyword">x</span> <span class="operator">=</span> power(a<span class="punctuation">,</span> d<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">        if (<span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span> || <span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> n - <span class="number">1</span>)</span><br><span class="line">            continue<span class="comment">;</span></span><br><span class="line">        bool ok <span class="operator">=</span> <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">        for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; s - 1; ++i) &#123;</span></span><br><span class="line">            <span class="keyword">x</span> <span class="operator">=</span> <span class="keyword">mul</span>(<span class="keyword">x</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">            if (<span class="keyword">x</span> <span class="operator">=</span><span class="operator">=</span> n - <span class="number">1</span>) &#123;</span><br><span class="line">                ok <span class="operator">=</span> <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (<span class="title">!ok</span>)</span><br><span class="line">            return <span class="keyword">false</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">std:</span>:vector&lt;<span class="type">i64</span>&gt; factorize(<span class="type">i64</span> n) &#123;</span><br><span class="line"><span class="symbol">    std:</span>:vector&lt;<span class="type">i64</span>&gt; p<span class="comment">;</span></span><br><span class="line"><span class="symbol">    std:</span>:function&lt;<span class="type">void</span>(<span class="type">i64</span>)&gt; f <span class="operator">=</span> [&amp;](<span class="type">i64</span> n) &#123;</span><br><span class="line">        if (n &lt;<span class="operator">=</span> <span class="number">10000</span>) &#123;</span><br><span class="line">            for (int i <span class="operator">=</span> <span class="number">2</span><span class="comment">; i * i &lt;= n; ++i)</span></span><br><span class="line">                for (<span class="comment">; n % i == 0; n /= i)</span></span><br><span class="line">                    p.push_back(i)<span class="comment">;</span></span><br><span class="line">            if (n &gt; <span class="number">1</span>)</span><br><span class="line">                p.push_back(n)<span class="comment">;</span></span><br><span class="line">            return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        if (isprime(n)) &#123;</span><br><span class="line">            p.push_back(n)<span class="comment">;</span></span><br><span class="line">            return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        auto g <span class="operator">=</span> [&amp;](<span class="type">i64</span> <span class="keyword">x</span>) &#123;</span><br><span class="line">            return (<span class="keyword">mul</span>(<span class="keyword">x</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="punctuation">,</span> n) + <span class="number">1</span>) % n<span class="comment">;</span></span><br><span class="line">        &#125;<span class="comment">;</span></span><br><span class="line">        <span class="type">i64</span> <span class="keyword">x</span><span class="number">0</span> <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">        while (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="type">i64</span> <span class="keyword">x</span> <span class="operator">=</span> <span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> y <span class="operator">=</span> <span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> d <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> power <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lam <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">            <span class="type">i64</span> v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">            while (d <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">                y <span class="operator">=</span> g(y)<span class="comment">;</span></span><br><span class="line">                ++lam<span class="comment">;</span></span><br><span class="line">                v <span class="operator">=</span> <span class="keyword">mul</span>(v<span class="punctuation">,</span> std::abs(<span class="keyword">x</span> - y)<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                if (lam % <span class="number">127</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) &#123;</span><br><span class="line">                    d <span class="operator">=</span> std::gcd(v<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                    v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                if (power <span class="operator">=</span><span class="operator">=</span> lam) &#123;</span><br><span class="line">                    <span class="keyword">x</span> <span class="operator">=</span> y<span class="comment">;</span></span><br><span class="line">                    power *<span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">                    lam <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">                    d <span class="operator">=</span> std::gcd(v<span class="punctuation">,</span> n)<span class="comment">;</span></span><br><span class="line">                    v <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (d !<span class="operator">=</span> n) &#123;</span><br><span class="line">                f(d)<span class="comment">;</span></span><br><span class="line">                f(n / d)<span class="comment">;</span></span><br><span class="line">                return<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            ++<span class="keyword">x</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">    f(n)<span class="comment">;</span></span><br><span class="line"><span class="symbol">    std:</span>:sort(p.<span class="keyword">begin</span>()<span class="punctuation">,</span> p.<span class="keyword">end</span>())<span class="comment">;</span></span><br><span class="line">    return p<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="09-平面几何"><a href="#09-平面几何" class="headerlink" title="09 - 平面几何"></a>09 - 平面几何</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62808640">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    T x;</span><br><span class="line">    T y;</span><br><span class="line">    <span class="built_in">Point</span>(T x_ = <span class="number">0</span>, T y_ = <span class="number">0</span>) : <span class="built_in">x</span>(x_), <span class="built_in">y</span>(y_) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    <span class="keyword">operator</span> <span class="built_in">Point</span>&lt;U&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>&lt;U&gt;(<span class="built_in">U</span>(x), <span class="built_in">U</span>(y));</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>+=(Point p) &amp; &#123;</span><br><span class="line">        x += p.x;</span><br><span class="line">        y += p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>-=(Point p) &amp; &#123;</span><br><span class="line">        x -= p.x;</span><br><span class="line">        y -= p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>*=(T v) &amp; &#123;</span><br><span class="line">        x *= v;</span><br><span class="line">        y *= v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-x, -y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>-(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(Point a, T b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(T a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> b *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Point a, Point b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Point &amp;p) &#123;</span><br><span class="line">        <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, Point p) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; p.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p.y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dot</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">cross</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">square</span><span class="params">(Point&lt;T&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(p, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;T&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">double</span>(<span class="built_in">square</span>(p)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;<span class="type">long</span> <span class="type">double</span>&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">square</span>(p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    Point&lt;T&gt; a;</span><br><span class="line">    Point&lt;T&gt; b;</span><br><span class="line">    <span class="built_in">Line</span>(Point&lt;T&gt; a_ = <span class="built_in">Point</span>&lt;T&gt;(), Point&lt;T&gt; b_ = <span class="built_in">Point</span>&lt;T&gt;()) : <span class="built_in">a</span>(a_), <span class="built_in">b</span>(b_) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">rotate</span><span class="params">(Point&lt;T&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-a.y, a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point&lt;T&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnLineLeft</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(l.b - l.a, p - l.a) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">lineIntersection</span><span class="params">(Line&lt;T&gt; l1, Line&lt;T&gt; l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l<span class="number">1.</span>a + (l<span class="number">1.</span>b - l<span class="number">1.</span>a) * (<span class="built_in">cross</span>(l<span class="number">2.</span>b - l<span class="number">2.</span>a, l<span class="number">1.</span>a - l<span class="number">2.</span>a) / <span class="built_in">cross</span>(l<span class="number">2.</span>b - l<span class="number">2.</span>a, l<span class="number">1.</span>a - l<span class="number">1.</span>b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnSegment</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(p - l.a, l.b - l.a) == <span class="number">0</span> &amp;&amp; std::<span class="built_in">min</span>(l.a.x, l.b.x) &lt;= p.x &amp;&amp; p.x &lt;= std::<span class="built_in">max</span>(l.a.x, l.b.x)</span><br><span class="line">    &amp;&amp; std::<span class="built_in">min</span>(l.a.y, l.b.y) &lt;= p.y &amp;&amp; p.y &lt;= std::<span class="built_in">max</span>(l.a.y, l.b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointInPolygon</span><span class="params">(Point&lt;T&gt; a, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(a, <span class="built_in">Line</span>(p[i], p[(i + <span class="number">1</span>) % n]))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">if</span> (u.x &lt; a.x &amp;&amp; v.x &gt;= a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(v, u))) &#123;</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u.x &gt;= a.x &amp;&amp; v.x &lt; a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 : not intersect</span></span><br><span class="line"><span class="comment">// 1 : strictly intersect</span></span><br><span class="line"><span class="comment">// 2 : overlap</span></span><br><span class="line"><span class="comment">// 3 : intersect at endpoint</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::tuple&lt;<span class="type">int</span>, Point&lt;T&gt;, Point&lt;T&gt;&gt; <span class="built_in">segmentIntersection</span>(Line&lt;T&gt; l1, Line&lt;T&gt; l2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x) &lt; std::<span class="built_in">min</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x) &gt; std::<span class="built_in">max</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y) &lt; std::<span class="built_in">min</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y) &gt; std::<span class="built_in">max</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cross</span>(l<span class="number">1.</span>b - l<span class="number">1.</span>a, l<span class="number">2.</span>b - l<span class="number">2.</span>a) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l<span class="number">1.</span>b - l<span class="number">1.</span>a, l<span class="number">2.</span>a - l<span class="number">1.</span>a) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> maxx1 = std::<span class="built_in">max</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx1 = std::<span class="built_in">min</span>(l<span class="number">1.</span>a.x, l<span class="number">1.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy1 = std::<span class="built_in">max</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny1 = std::<span class="built_in">min</span>(l<span class="number">1.</span>a.y, l<span class="number">1.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> maxx2 = std::<span class="built_in">max</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx2 = std::<span class="built_in">min</span>(l<span class="number">2.</span>a.x, l<span class="number">2.</span>b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy2 = std::<span class="built_in">max</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny2 = std::<span class="built_in">min</span>(l<span class="number">2.</span>a.y, l<span class="number">2.</span>b.y);</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p1</span><span class="params">(std::max(minx1, minx2), std::max(miny1, miny2))</span></span>;</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p2</span><span class="params">(std::min(maxx1, maxx2), std::min(maxy1, maxy2))</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">pointOnSegment</span>(p1, l1)) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(p<span class="number">1.</span>y, p<span class="number">2.</span>y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="number">3</span>, p1, p2&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="number">2</span>, p1, p2&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> cp1 = <span class="built_in">cross</span>(l<span class="number">2.</span>a - l<span class="number">1.</span>a, l<span class="number">2.</span>b - l<span class="number">1.</span>a);</span><br><span class="line">    <span class="keyword">auto</span> cp2 = <span class="built_in">cross</span>(l<span class="number">2.</span>a - l<span class="number">1.</span>b, l<span class="number">2.</span>b - l<span class="number">1.</span>b);</span><br><span class="line">    <span class="keyword">auto</span> cp3 = <span class="built_in">cross</span>(l<span class="number">1.</span>a - l<span class="number">2.</span>a, l<span class="number">1.</span>b - l<span class="number">2.</span>a);</span><br><span class="line">    <span class="keyword">auto</span> cp4 = <span class="built_in">cross</span>(l<span class="number">1.</span>a - l<span class="number">2.</span>b, l<span class="number">1.</span>b - l<span class="number">2.</span>b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((cp1 &gt; <span class="number">0</span> &amp;&amp; cp2 &gt; <span class="number">0</span>) || (cp1 &lt; <span class="number">0</span> &amp;&amp; cp2 &lt; <span class="number">0</span>) || (cp3 &gt; <span class="number">0</span> &amp;&amp; cp4 &gt; <span class="number">0</span>) || (cp3 &lt; <span class="number">0</span> &amp;&amp; cp4 &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point p = <span class="built_in">lineIntersection</span>(l1, l2);</span><br><span class="line">    <span class="keyword">if</span> (cp1 != <span class="number">0</span> &amp;&amp; cp2 != <span class="number">0</span> &amp;&amp; cp3 != <span class="number">0</span> &amp;&amp; cp4 != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">1</span>, p, p&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">3</span>, p, p&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">segmentInPolygon</span><span class="params">(Line&lt;T&gt; l, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.a, p)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.b, p)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> w = p[(i + <span class="number">2</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> [t, p1, p2] = <span class="built_in">segmentIntersection</span>(l, <span class="built_in">Line</span>(u, v));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(v, l) &amp;&amp; v != l.a &amp;&amp; v != l.b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cross</span>(v - u, w - v) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 != u &amp;&amp; p1 != v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(l.a, <span class="built_in">Line</span>(v, u))</span><br><span class="line">                    || <span class="built_in">pointOnLineLeft</span>(l.b, <span class="built_in">Line</span>(v, u))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 == v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l.a == v) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l.b == v) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, <span class="built_in">Line</span>(l.b, l.a))) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::vector&lt;Point&lt;T&gt;&gt; <span class="built_in">hp</span>(std::vector&lt;Line&lt;T&gt;&gt; lines) &#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(lines.<span class="built_in">begin</span>(), lines.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> l1, <span class="keyword">auto</span> l2) &#123;</span><br><span class="line">        <span class="keyword">auto</span> d1 = l<span class="number">1.</span>b - l<span class="number">1.</span>a;</span><br><span class="line">        <span class="keyword">auto</span> d2 = l<span class="number">2.</span>b - l<span class="number">2.</span>a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d1) != <span class="built_in">sgn</span>(d2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sgn</span>(d1) == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(d1, d2) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    std::deque&lt;Line&lt;T&gt;&gt; ls;</span><br><span class="line">    std::deque&lt;Point&lt;T&gt;&gt; ps;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> l : lines) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), l)) &#123;</span><br><span class="line">            ps.<span class="built_in">pop_back</span>();</span><br><span class="line">            ls.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps[<span class="number">0</span>], l)) &#123;</span><br><span class="line">            ps.<span class="built_in">pop_front</span>();</span><br><span class="line">            ls.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dot</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">pointOnLineLeft</span>(ls.<span class="built_in">back</span>().a, l)) &#123;</span><br><span class="line">                    <span class="built_in">assert</span>(ls.<span class="built_in">size</span>() == <span class="number">1</span>);</span><br><span class="line">                    ls[<span class="number">0</span>] = l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls.<span class="built_in">back</span>(), l));</span><br><span class="line">        ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), ls[<span class="number">0</span>])) &#123;</span><br><span class="line">        ps.<span class="built_in">pop_back</span>();</span><br><span class="line">        ls.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ls.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls[<span class="number">0</span>], ls.<span class="built_in">back</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">vector</span>(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="10A-静态凸包（with-Point）"><a href="#10A-静态凸包（with-Point）" class="headerlink" title="10A - 静态凸包（with. Point）"></a>10A - 静态凸包（with. Point）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412835">2023-04-09</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="type">Point</span> &#123;</span><br><span class="line">    i64 x;</span><br><span class="line">    i64 y;</span><br><span class="line">    <span class="type">Point</span>(i64 x = <span class="number">0</span>, i64 y = <span class="number">0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Point</span> <span class="keyword">operator</span>+(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(a.x + b.x, a.y + b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Point</span> <span class="keyword">operator</span>-(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(a.x - b.x, a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 dot(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 <span class="keyword">cross</span>(const <span class="type">Point</span> &amp;a, const <span class="type">Point</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> norm(std::vector&lt;<span class="type">Point</span>&gt; &amp;h) &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="type">int</span>(h.size()); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[j].y &lt; h[i].y || (h[j].y == h[i].y &amp;&amp; h[j].x &lt; h[i].x)) &#123;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::rotate(h.<span class="keyword">begin</span>(), h.<span class="keyword">begin</span>() + i, h.<span class="keyword">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sgn(const <span class="type">Point</span> &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">Point</span>&gt; getHull(std::vector&lt;<span class="type">Point</span>&gt; p) &#123;</span><br><span class="line">    std::vector&lt;<span class="type">Point</span>&gt; h, l;</span><br><span class="line">    std::sort(p.<span class="keyword">begin</span>(), p.<span class="keyword">end</span>(), [&amp;](auto a, auto b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x != b.x) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    p.erase(std::<span class="keyword">unique</span>(p.<span class="keyword">begin</span>(), p.<span class="keyword">end</span>()), p.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (p.size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (auto a : p) &#123;</span><br><span class="line">        <span class="keyword">while</span> (h.size() &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">cross</span>(a - h.back(), a - h[h.size() - <span class="number">2</span>]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            h.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l.size() &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">cross</span>(a - l.back(), a - l[l.size() - <span class="number">2</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            l.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_back(a);</span><br><span class="line">        h.push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    l.pop_back();</span><br><span class="line">    std::reverse(h.<span class="keyword">begin</span>(), h.<span class="keyword">end</span>());</span><br><span class="line">    h.pop_back();</span><br><span class="line">    l.<span class="keyword">insert</span>(l.<span class="keyword">end</span>(), h.<span class="keyword">begin</span>(), h.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="10B-静态凸包（with-std-complex）"><a href="#10B-静态凸包（with-std-complex）" class="headerlink" title="10B - 静态凸包（with. std::complex）"></a>10B - 静态凸包（with. std::complex）</h2><p><a href="https://loj.ac/s/1370861">2022-02-04</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = std::complex&lt;i64&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x real</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y imag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">x</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">y</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">rot</span><span class="params">(<span class="type">const</span> Point &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-p.<span class="built_in">y</span>(), p.<span class="built_in">x</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">complexHull</span><span class="params">(std::vector&lt;Point&gt; a)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">x</span>() != b.<span class="built_in">x</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">x</span>() &lt; b.<span class="built_in">x</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">y</span>() &lt; b.<span class="built_in">y</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Point&gt; l, h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : a) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(l.<span class="built_in">back</span>() - l[l.<span class="built_in">size</span>() - <span class="number">2</span>], p - l.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            l.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(h.<span class="built_in">back</span>() - h[h.<span class="built_in">size</span>() - <span class="number">2</span>], p - h.<span class="built_in">back</span>()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            h.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        l.<span class="built_in">push_back</span>(p);</span><br><span class="line">        h.<span class="built_in">push_back</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    h.<span class="built_in">insert</span>(h.<span class="built_in">end</span>(), l.<span class="built_in">begin</span>() + <span class="number">1</span>, l.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">y</span>() &gt; <span class="number">0</span> || (p.<span class="built_in">y</span>() == <span class="number">0</span> &amp;&amp; p.<span class="built_in">x</span>() &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="11A-多项式相关（Poly-with-Z）"><a href="#11A-多项式相关（Poly-with-Z）" class="headerlink" title="11A - 多项式相关（Poly, with. Z）"></a>11A - 多项式相关（Poly, with. Z）</h2><p><a href="https://atcoder.jp/contests/arc155/submissions/38664055">2023-02-06</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line">std::vector&lt;Z&gt; roots&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(roots.<span class="built_in">size</span>()) &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots.<span class="built_in">size</span>());</span><br><span class="line">        roots.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) &#123;</span><br><span class="line">            Z e = <span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">3</span>), (P - <span class="number">1</span>) &gt;&gt; (k + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123;</span><br><span class="line">                roots[<span class="number">2</span> * i] = roots[i];</span><br><span class="line">                roots[<span class="number">2</span> * i + <span class="number">1</span>] = roots[i] * e;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                Z u = a[i + j];</span><br><span class="line">                Z v = a[i + j + k] * roots[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    Z inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Poly</span> &#123;</span><br><span class="line">    std::vector&lt;Z&gt; a;</span><br><span class="line">    <span class="built_in">Poly</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> size, std::function&lt;Z(<span class="type">int</span>)&gt; f = [](<span class="type">int</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;)</span> : a(size) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            a[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::vector&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) &#123;&#125;</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::initializer_list&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>[](<span class="type">int</span> idx) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[idx];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>[](<span class="type">int</span> idx) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">mulxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> b = a;</span><br><span class="line">        b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">modxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        k = std::<span class="built_in">min</span>(k, <span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">divxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() &lt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>() + k, a.<span class="built_in">end</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = a[i] + b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = a[i] - b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (sz &lt; tot) &#123;</span><br><span class="line">            sz *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        b.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        <span class="built_in">dft</span>(a.a);</span><br><span class="line">        <span class="built_in">dft</span>(b.a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            a.a[i] = a[i] * b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">idft</span>(a.a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Z a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Z b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>+=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>-=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Z b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * a[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] = a[i] / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;a[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">modxk</span>(k) * x)).<span class="built_in">modxk</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">modxk</span>(k))).<span class="built_in">modxk</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="built_in">size</span>() &amp;&amp; a[i].<span class="built_in">val</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(m));</span><br><span class="line">        &#125;</span><br><span class="line">        Z v = a[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">divxk</span>(i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">mulxk</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">modxk</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">modxk</span>(k)) * ((P + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.a.<span class="built_in">begin</span>(), b.a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">divxk</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;Z&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Z&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Z&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(<span class="built_in">int</span>(x.<span class="built_in">size</span>()), <span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">modxk</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">modxk</span>(r - m));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><h2 id="11B-多项式相关（Poly-with-MInt-amp-MLong）"><a href="#11B-多项式相关（Poly-with-MInt-amp-MLong）" class="headerlink" title="11B - 多项式相关（Poly, with. MInt &amp; MLong）"></a>11B - 多项式相关（Poly, with. MInt &amp; MLong）</h2><p><a href="https://atcoder.jp/contests/arc163/submissions/45737810">2023-09-20</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">std::vector&lt;MInt&lt;P&gt;&gt; roots&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> MInt&lt;P&gt; <span class="title">findPrimitiveRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MInt&lt;P&gt; i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> k = __builtin_ctz(P - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(i, (P - <span class="number">1</span>) / <span class="number">2</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(i, (P - <span class="number">1</span>) &gt;&gt; k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class="built_in">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;<span class="number">998244353</span>&gt; primitiveRoot&lt;<span class="number">998244353</span>&gt; &#123;<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (roots&lt;P&gt;.<span class="built_in">size</span>() &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots&lt;P&gt;.<span class="built_in">size</span>());</span><br><span class="line">        roots&lt;P&gt;.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) &#123;</span><br><span class="line">            <span class="keyword">auto</span> e = <span class="built_in">power</span>(primitiveRoot&lt;P&gt;, <span class="number">1</span> &lt;&lt; (__builtin_ctz(P - <span class="number">1</span>) - k - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123;</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i] = roots&lt;P&gt;[i];</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i + <span class="number">1</span>] = roots&lt;P&gt;[i] * e;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                MInt&lt;P&gt; u = a[i + j];</span><br><span class="line">                MInt&lt;P&gt; v = a[i + j + k] * roots&lt;P&gt;[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    MInt&lt;P&gt; inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P = <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Poly : <span class="keyword">public</span> std::vector&lt;MInt&lt;P&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> Value = MInt&lt;P&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Poly</span>() : std::<span class="built_in">vector</span>&lt;Value&gt;() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> n)</span> : std::vector&lt;Value&gt;(n) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::vector&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::initializer_list&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> = std::_RequireInputIter&lt;InputIt&gt;&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(InputIt first, InputIt last) : std::<span class="built_in">vector</span>&lt;Value&gt;(first, last) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(<span class="type">int</span> n, F f) : std::<span class="built_in">vector</span>&lt;Value&gt;(n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">shift</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> b = *<span class="keyword">this</span>;</span><br><span class="line">            b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &lt;= -k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>() + (-k), <span class="keyword">this</span>-&gt;<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">trunc</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly f = *<span class="keyword">this</span>;</span><br><span class="line">        f.<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] -= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">            n *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (((P - <span class="number">1</span>) &amp; (n - <span class="number">1</span>)) != <span class="number">0</span> || b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">        b.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">dft</span>(a);</span><br><span class="line">        <span class="built_in">dft</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            a[i] *= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">idft</span>(a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Value a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            a[i] /= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>+=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>-=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>/=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) / b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * (*<span class="keyword">this</span>)[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] = (*<span class="keyword">this</span>)[i] / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;(*<span class="keyword">this</span>)[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">trunc</span>(k) * x)).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">trunc</span>(k))).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">        &#125;</span><br><span class="line">        Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">trunc</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">trunc</span>(k)) * CInv&lt;<span class="number">2</span>, P&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">shift</span>(-(n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> std::vector&lt;Value&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Value&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Value&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(x.<span class="built_in">size</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">resize</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">resize</span>(r - m));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">berlekampMassey</span><span class="params">(<span class="type">const</span> Poly&lt;P&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    Poly&lt;P&gt; c;</span><br><span class="line">    Poly&lt;P&gt; oldC;</span><br><span class="line">    <span class="type">int</span> f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> delta = s[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            delta -= c[j - <span class="number">1</span>] * s[i - j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">-1</span>) &#123;</span><br><span class="line">            c.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line">            f = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> d = oldC;</span><br><span class="line">            d *= <span class="number">-1</span>;</span><br><span class="line">            d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">            MInt&lt;P&gt; df1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= d.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                df1 += d[j - <span class="number">1</span>] * s[f + <span class="number">1</span> - j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">assert</span>(df1 != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">auto</span> coef = delta / df1;</span><br><span class="line">            d *= coef;</span><br><span class="line">            <span class="function">Poly&lt;P&gt; <span class="title">zeros</span><span class="params">(i - f - <span class="number">1</span>)</span></span>;</span><br><span class="line">            zeros.<span class="built_in">insert</span>(zeros.<span class="built_in">end</span>(), d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">            d = zeros;</span><br><span class="line">            <span class="keyword">auto</span> temp = c;</span><br><span class="line">            c += d;</span><br><span class="line">            <span class="keyword">if</span> (i - temp.<span class="built_in">size</span>() &gt; f - oldC.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                oldC = temp;</span><br><span class="line">                f = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c *= <span class="number">-1</span>;</span><br><span class="line">    c.<span class="built_in">insert</span>(c.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">MInt&lt;P&gt; <span class="title">linearRecurrence</span><span class="params">(Poly&lt;P&gt; p, Poly&lt;P&gt; q, i64 n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = q.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> newq = q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i += <span class="number">2</span>) &#123;</span><br><span class="line">            newq[i] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> newp = p * newq;</span><br><span class="line">        newq = q * newq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            p[i] = newp[i * <span class="number">2</span> + n % <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            q[i] = newq[i * <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>] / q[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n&#123;<span class="number">0</span>&#125;, _fac&#123;<span class="number">1</span>&#125;, _invfac&#123;<span class="number">1</span>&#125;, _inv&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        &#125;</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) &#123;</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; comb;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m - <span class="number">1</span>);</span><br><span class="line">        Z p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[n - i] += comb.<span class="built_in">binom</span>(n, i) * p;</span><br><span class="line">            p *= m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> fm = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fm[i] *= comb.<span class="built_in">fac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">pw</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pw[i] = pw[i - <span class="number">1</span>] * (m / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pw[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    fm = fm.<span class="built_in">mulT</span>(pw);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fm[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f + fm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="四、数据结构"><a href="#四、数据结构" class="headerlink" title="四、数据结构"></a>四、数据结构</h1><h2 id="01A-树状数组（Fenwick-旧版）"><a href="#01A-树状数组（Fenwick-旧版）" class="headerlink" title="01A - 树状数组（Fenwick 旧版）"></a>01A - 树状数组（Fenwick 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, <span class="built_in">T</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> ans = <span class="built_in">T</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans += a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; k &gt;= a[x + i - <span class="number">1</span>]) &#123;</span><br><span class="line">                x += i;</span><br><span class="line">                k -= a[x - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="01B-树状数组（Fenwick-新版）"><a href="#01B-树状数组（Fenwick-新版）" class="headerlink" title="01B - 树状数组（Fenwick 新版）"></a>01B - 树状数组（Fenwick 新版）</h2><p><a href="https://codeforces.com/contest/1915/submission/239262801">2023-12-28</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n_ = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        n = n_;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, T&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> T &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        T ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans = ans + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">const</span> T &amp;k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        T cur&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; cur + a[x + i - <span class="number">1</span>] &lt;= k) &#123;</span><br><span class="line">                x += i;</span><br><span class="line">                cur = cur + a[x - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="02-并查集（DSU）"><a href="#02-并查集（DSU）" class="headerlink" title="02 - 并查集（DSU）"></a>02 - 并查集（DSU）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63239142">2023-08-04</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="03A-线段树（SegmentTree-基础区间加乘）"><a href="#03A-线段树（SegmentTree-基础区间加乘）" class="headerlink" title="03A - 线段树（SegmentTree 基础区间加乘）"></a>03A - 线段树（SegmentTree 基础区间加乘）</h2><p><a href="https://cf.dianhsu.com/gym/104417/submission/223800089">2023-10-18</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; tag, sum;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_) : n(n_), tag(<span class="number">4</span> * n, <span class="number">1</span>), sum(<span class="number">4</span> * n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        sum[p] = (sum[<span class="number">2</span> * p] + sum[<span class="number">2</span> * p + <span class="number">1</span>]) % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> mul(<span class="type">int</span> p, <span class="type">int</span> v) &#123;</span><br><span class="line">        tag[p] = <span class="number">1</span>LL * tag[p] * v % P;</span><br><span class="line">        sum[p] = <span class="number">1</span>LL * sum[p] * v % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> push(<span class="type">int</span> p) &#123;</span><br><span class="line">        mul(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        mul(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> query(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        <span class="keyword">return</span> (query(<span class="number">2</span> * p, l, m, x, y) + query(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y)) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> query(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return query</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> rangeMul(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> mul(p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        rangeMul(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        rangeMul(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> rangeMul(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v) &#123;</span><br><span class="line">        rangeMul(<span class="number">1</span>, <span class="number">0</span>, n, x, y, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">add</span>(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            sum[p] = (sum[p] + v) % P;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="keyword">add</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">add</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">add</span>(<span class="type">int</span> x, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="03B-线段树（SegmentTree-Info-查找前驱后继）"><a href="#03B-线段树（SegmentTree-Info-查找前驱后继）" class="headerlink" title="03B - 线段树（SegmentTree+Info 查找前驱后继）"></a>03B - 线段树（SegmentTree+Info 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="keyword">Info</span>&gt;</span><br><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="keyword">Info</span>&gt; <span class="keyword">info</span>;</span><br><span class="line">    SegmentTree() : n(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    SegmentTree(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        init(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(std::vector(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    <span class="type">void</span> init(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        n = init_.size();</span><br><span class="line">        <span class="keyword">info</span>.assign(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="keyword">Info</span>());</span><br><span class="line">        std::<span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">info</span>[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            build(<span class="number">2</span> * p, l, m);</span><br><span class="line">            build(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            pull(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">info</span>[p] = <span class="keyword">info</span>[<span class="number">2</span> * p] + <span class="keyword">info</span>[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">info</span>[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        modify(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">info</span>[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">2</span> * p, l, m, x, y) + rangeQuery(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findFirst(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findFirst(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findFirst(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findLast(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findLast(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLast(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">struct <span class="keyword">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 ans = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">Info</span> <span class="keyword">operator</span>+(<span class="keyword">Info</span> a, <span class="keyword">Info</span> b) &#123;</span><br><span class="line">    <span class="keyword">Info</span> c;</span><br><span class="line">    c.cnt = a.cnt + b.cnt;</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.ans = a.ans + b.ans + a.cnt * b.sum - a.sum * b.cnt;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="03C-线段树（SegmentTree-Info-Merge-区间合并）"><a href="#03C-线段树（SegmentTree-Info-Merge-区间合并）" class="headerlink" title="03C - 线段树（SegmentTree+Info+Merge 区间合并）"></a>03C - 线段树（SegmentTree+Info+Merge 区间合并）</h2><p><a href="https://codeforces.com/contest/1672/submission/154766851">2022-04-23</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="keyword">Info</span>&gt;</span><br><span class="line">struct SegmentTree &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="keyword">Info</span>&gt; <span class="keyword">info</span>;</span><br><span class="line">    SegmentTree() : n(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    SegmentTree(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    SegmentTree(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        init(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init(<span class="type">int</span> n_, <span class="keyword">Info</span> v_ = <span class="keyword">Info</span>()) &#123;</span><br><span class="line">        init(std::vector(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">    <span class="type">void</span> init(std::vector&lt;T&gt; init_) &#123;</span><br><span class="line">        n = init_.size();</span><br><span class="line">        <span class="keyword">info</span>.assign(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="keyword">Info</span>());</span><br><span class="line">        std::<span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">info</span>[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            build(<span class="number">2</span> * p, l, m);</span><br><span class="line">            build(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            pull(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> pull(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">info</span>[p] = <span class="keyword">info</span>[<span class="number">2</span> * p] + <span class="keyword">info</span>[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">info</span>[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modify(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> modify(<span class="type">int</span> p, const <span class="keyword">Info</span> &amp;v) &#123;</span><br><span class="line">        modify(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">info</span>[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">2</span> * p, l, m, x, y) + rangeQuery(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Info</span> rangeQuery(<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeQuery(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findFirst(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findFirst(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findFirst(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findFirst(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !pred(<span class="keyword">info</span>[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = findLast(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = findLast(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="type">int</span> findLast(<span class="type">int</span> l, <span class="type">int</span> r, F pred) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLast(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct <span class="keyword">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Info</span> <span class="keyword">operator</span>+(<span class="keyword">Info</span> a, <span class="keyword">Info</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a.x, a.cnt + b.cnt&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.cnt &gt; b.cnt) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a.x, a.cnt - b.cnt&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;b.x, b.cnt - a.cnt&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="04A-懒标记线段树（LazySegmentTree-基础区间修改）"><a href="#04A-懒标记线段树（LazySegmentTree-基础区间修改）" class="headerlink" title="04A - 懒标记线段树（LazySegmentTree 基础区间修改）"></a>04A - 懒标记线段树（LazySegmentTree 基础区间修改）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].act == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((info[p].min + <span class="number">1</span>) / <span class="number">2</span> == (info[p].max + <span class="number">1</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, &#123;-(info[p].min + <span class="number">1</span>) / <span class="number">2</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> i64 inf = <span class="number">1E18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    i64 add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        add += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    i64 min = inf;</span><br><span class="line">    i64 max = -inf;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 act = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        min += t.add;</span><br><span class="line">        max += t.add;</span><br><span class="line">        sum += act * t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    Info c;</span><br><span class="line">    c.min = std::<span class="built_in">min</span>(a.min, b.min);</span><br><span class="line">    c.max = std::<span class="built_in">max</span>(a.max, b.max);</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.act = a.act + b.act;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="04B-懒标记线段树（LazySegmentTree-查找前驱后继）"><a href="#04B-懒标记线段树（LazySegmentTree-查找前驱后继）" class="headerlink" title="04B - 懒标记线段树（LazySegmentTree 查找前驱后继）"></a>04B - 懒标记线段树（LazySegmentTree 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">LazySegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        n = init_.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">        tag.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Tag</span>());</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    i64 a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        a = std::<span class="built_in">min</span>(a, b + t.a);</span><br><span class="line">        b += t.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    i64 x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123;</span><br><span class="line">        x += t.a;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = (x % k + k) % k;</span><br><span class="line">        &#125;</span><br><span class="line">        x += t.b - t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x + b.x&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="04C-懒标记线段树（LazySegmentTree-二分修改）"><a href="#04C-懒标记线段树（LazySegmentTree-二分修改）" class="headerlink" title="04C - 懒标记线段树（LazySegmentTree 二分修改）"></a>04C - 懒标记线段树（LazySegmentTree 二分修改）</h2><p><a href="https://atcoder.jp/contests/joi2023yo2/submissions/39363123">2023-03-03</a></p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].difl &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowl &lt; pre) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p, l, m, pre);</span><br><span class="line">        pre = std::<span class="built_in">max</span>(pre, info[<span class="number">2</span> * p].max);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, pre);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> suf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (info[p].difr &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowr &lt; suf) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, suf);</span><br><span class="line">        suf = std::<span class="built_in">max</span>(suf, info[<span class="number">2</span> * p + <span class="number">1</span>].max);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p, l, m, suf);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>&#123;</span><br><span class="line">        add += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxl = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxr = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> difl = inf;</span><br><span class="line">    <span class="type">int</span> difr = inf;</span><br><span class="line">    <span class="type">int</span> maxlowl = -inf;</span><br><span class="line">    <span class="type">int</span> maxlowr = -inf;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="number">-1</span>) &#123;</span><br><span class="line">            max += t.add;</span><br><span class="line">        &#125;</span><br><span class="line">        difl += t.add;</span><br><span class="line">        difr += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    Info c;</span><br><span class="line">    <span class="keyword">if</span> (a.max &gt; b.max) &#123;</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = a.maxr;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.max &lt; b.max) &#123;</span><br><span class="line">        c.max = b.max;</span><br><span class="line">        c.maxl = b.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    c.difl = std::<span class="built_in">min</span>(a.difl, b.difl);</span><br><span class="line">    c.difr = std::<span class="built_in">min</span>(a.difr, b.difr);</span><br><span class="line">    <span class="keyword">if</span> (a.max != <span class="number">-1</span>) &#123;</span><br><span class="line">        c.difl = std::<span class="built_in">min</span>(c.difl, a.max - b.maxlowl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.max != <span class="number">-1</span>) &#123;</span><br><span class="line">        c.difr = std::<span class="built_in">min</span>(c.difr, b.max - a.maxlowr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a.max == <span class="number">-1</span>) &#123;</span><br><span class="line">        c.maxlowl = std::<span class="built_in">max</span>(a.maxlowl, b.maxlowl);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.maxlowl = a.maxlowl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.max == <span class="number">-1</span>) &#123;</span><br><span class="line">        c.maxlowr = std::<span class="built_in">max</span>(a.maxlowr, b.maxlowr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.maxlowr = b.maxlowr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="05A-取模类（MLong-amp-MInt）"><a href="#05A-取模类（MLong-amp-MInt）" class="headerlink" title="05A - 取模类（MLong &amp; MInt）"></a>05A - 取模类（MLong &amp; MInt）</h2><p><a href="https://codeforces.com/contest/1697/submission/160317720">2022-06-12</a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">constexpr int P = <span class="number">998244353</span>;</span><br><span class="line">using i64 = long long;</span><br><span class="line"><span class="comment">// assume -P &lt;= x &lt; 2P</span></span><br><span class="line">int norm(int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x += P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= P) &#123;</span><br><span class="line">        x -= P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">template&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T power(T a, i64 b) &#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">struct Z &#123;</span><br><span class="line">    int x;</span><br><span class="line">    Z(int x = <span class="number">0</span>) : x(norm(x)) &#123;&#125;</span><br><span class="line">    Z(i64 x) : x(norm(x % P)) &#123;&#125;</span><br><span class="line">    int <span class="keyword">val</span>() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Z(norm(P - x));</span><br><span class="line">    &#125;</span><br><span class="line">    Z inv() <span class="keyword">const</span> &#123;</span><br><span class="line">        assert(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> power(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>*=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = i64(x) * rhs.x % P;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = norm(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>-=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = norm(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>/=(<span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.inv();</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>*(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>+(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>-(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend Z <span class="keyword">operator</span>/(<span class="keyword">const</span> Z &amp;lhs, <span class="keyword">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;<span class="keyword">is</span>, Z &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        <span class="keyword">is</span> &gt;&gt; v;</span><br><span class="line">        a = Z(v);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">is</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    friend std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="keyword">const</span> Z &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="keyword">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="05B-取模类（MLong-amp-MInt-新版）"><a href="#05B-取模类（MLong-amp-MInt-新版）" class="headerlink" title="05B - 取模类（MLong &amp; MInt 新版）"></a>05B - 取模类（MLong &amp; MInt 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63433564">2023-08-14</a></p><p>根据输入内容动态修改 MOD 的方法：<code>Z::setMod(p)</code>; 。</p><details><summary>长度过长，点击查看</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 p)</span> </span>&#123;</span><br><span class="line">    i64 res = a * b - <span class="built_in">i64</span>(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;i64 P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLong</span> &#123;</span><br><span class="line">    i64 x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">(i64 x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> i64 Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> i64 <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(i64 Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">norm</span><span class="params">(i64 x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">i64</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MLong res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MLong <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>*=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>+=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>-=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>/=(MLong rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>*(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>+(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>/(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MLong</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MLong &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">i64 MLong&lt;<span class="number">0LL</span>&gt;::Mod = <span class="built_in">i64</span>(<span class="number">1E18</span>) + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(i64 x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">int</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>*=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="number">1LL</span> * x * rhs.x % <span class="built_in">getMod</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>+=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>-=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>/=(MInt rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MInt &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int</span> MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> V, <span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="built_in">MInt</span>&lt;P&gt;(V).<span class="built_in">inv</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">using</span> Z = MInt&lt;P&gt;;</span><br></pre></td></tr></table></figure></details><h2 id="06-状压RMQ（RMQ）"><a href="#06-状压RMQ（RMQ）" class="headerlink" title="06 - 状压RMQ（RMQ）"></a>06 - 状压RMQ（RMQ）</h2><p><a href="https://atcoder.jp/contests/joi2022ho/submissions/39351739">2023-03-02</a><br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">template</span>&lt;<span class="keyword">class</span> <span class="type">T</span>,</span><br><span class="line"><span class="class">    <span class="keyword">class</span> <span class="type">Cmp</span> = std::less&lt;<span class="type">T</span>&gt;&gt;</span></span><br><span class="line"><span class="class">struct <span class="type">RMQ</span> &#123;</span></span><br><span class="line"><span class="class">    const <span class="type">Cmp</span> cmp = <span class="type">Cmp</span>();</span></span><br><span class="line"><span class="class">    static constexpr unsigned <span class="type">B</span> = 64;</span></span><br><span class="line"><span class="class">    using u64 = unsigned long long;</span></span><br><span class="line"><span class="class">    int n;</span></span><br><span class="line"><span class="class">    std::vector&lt;std::vector&lt;<span class="type">T</span>&gt;&gt; a;</span></span><br><span class="line"><span class="class">    std::vector&lt;<span class="type">T</span>&gt; pre, suf, ini;</span></span><br><span class="line"><span class="class">    std::vector&lt;u64&gt; stk;</span></span><br><span class="line"><span class="class">    <span class="type">RMQ</span>() &#123;&#125;</span></span><br><span class="line"><span class="class">    <span class="type">RMQ</span>(<span class="title">const</span> <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="class">        init(<span class="title">v</span>);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    void init(<span class="title">const</span> <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="class">        n = v.size();</span></span><br><span class="line"><span class="class">        pre = suf = ini = v;</span></span><br><span class="line"><span class="class">        stk.resize(<span class="title">n</span>);</span></span><br><span class="line"><span class="class">        if (!<span class="title">n</span>) &#123;</span></span><br><span class="line"><span class="class">            return;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        const int <span class="type">M</span> = (<span class="title">n</span> - 1) / <span class="type">B</span> + 1;</span></span><br><span class="line"><span class="class">        const int lg = std::__lg(<span class="type">M</span>);</span></span><br><span class="line"><span class="class">        a.assign(<span class="title">lg</span> + 1, <span class="title">std</span>::<span class="title">vector</span>&lt;<span class="type">T</span>&gt;(<span class="type">M</span>));</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="type">M</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            a[0][i] = v[i * <span class="type">B</span>];</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">j</span> = 1; <span class="title">j</span> &lt; <span class="type">B</span> &amp;&amp; <span class="title">i</span> * <span class="type">B</span> + <span class="title">j</span> &lt; <span class="title">n</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">                a[0][i] = std::min(<span class="title">a</span>[0][<span class="title">i</span>], <span class="title">v</span>[<span class="title">i</span> * <span class="type">B</span> + <span class="title">j</span>], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 1; <span class="title">i</span> &lt; <span class="title">n</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            if (<span class="title">i</span> % <span class="type">B</span>) &#123;</span></span><br><span class="line"><span class="class">                pre[i] = std::min(<span class="title">pre</span>[<span class="title">i</span>], <span class="title">pre</span>[<span class="title">i</span> - 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = <span class="title">n</span> - 2; <span class="title">i</span> &gt;= 0; <span class="title">i</span><span class="comment">--) &#123;</span></span></span><br><span class="line"><span class="class">            <span class="title">if</span> (<span class="title">i</span> % <span class="type">B</span> != <span class="type">B</span> - 1) &#123;</span></span><br><span class="line"><span class="class">                suf[i] = std::min(<span class="title">suf</span>[<span class="title">i</span>], <span class="title">suf</span>[<span class="title">i</span> + 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">j</span> = 0; <span class="title">j</span> &lt; <span class="title">lg</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> + (2 &lt;&lt; <span class="title">j</span>) &lt;= <span class="type">M</span>; i++) &#123;</span></span><br><span class="line"><span class="class">                a[j + 1][i] = std::min(<span class="title">a</span>[<span class="title">j</span>][<span class="title">i</span>], <span class="title">a</span>[<span class="title">j</span>][<span class="title">i</span> + (1 &lt;&lt; <span class="title">j</span>)], cmp);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="type">M</span>; <span class="title">i</span>++) &#123;</span></span><br><span class="line"><span class="class">            const int l = i * <span class="type">B</span>;</span></span><br><span class="line"><span class="class">            const int r = std::min(1U * <span class="title">n</span>, <span class="title">l</span> + <span class="type">B</span>);</span></span><br><span class="line"><span class="class">            u64 s = 0;</span></span><br><span class="line"><span class="class">            for (<span class="title">int</span> <span class="title">j</span> = <span class="title">l</span>; <span class="title">j</span> &lt; <span class="title">r</span>; <span class="title">j</span>++) &#123;</span></span><br><span class="line"><span class="class">                while (<span class="title">s</span> &amp;&amp; <span class="title">cmp</span>(<span class="title">v</span>[<span class="title">j</span>], <span class="title">v</span>[<span class="title">std</span>::<span class="title">__lg</span>(<span class="title">s</span>) + l])) &#123;</span></span><br><span class="line"><span class="class">                    s ^= 1ULL &lt;&lt; std::__lg(<span class="title">s</span>);</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">                s |= 1ULL &lt;&lt; (<span class="title">j</span> - <span class="title">l</span>);</span></span><br><span class="line"><span class="class">                stk[j] = s;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125; </span></span><br><span class="line"><span class="class">    <span class="type">T</span> operator()(<span class="title">int</span> <span class="title">l</span>, <span class="title">int</span> <span class="title">r</span>) &#123;</span></span><br><span class="line"><span class="class">        if (<span class="title">l</span> / <span class="type">B</span> != (<span class="title">r</span> - 1) / <span class="type">B</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">T</span> ans = std::min(<span class="title">suf</span>[<span class="title">l</span>], <span class="title">pre</span>[<span class="title">r</span> - 1], <span class="title">cmp</span>);</span></span><br><span class="line"><span class="class">            l = l / <span class="type">B</span> + 1;</span></span><br><span class="line"><span class="class">            r = r / <span class="type">B</span>;</span></span><br><span class="line"><span class="class">            if (<span class="title">l</span> &lt; <span class="title">r</span>) &#123;</span></span><br><span class="line"><span class="class">                int k = std::__lg(<span class="title">r</span> - <span class="title">l</span>);</span></span><br><span class="line"><span class="class">                ans = std::min(&#123;<span class="title">ans</span>, <span class="title">a</span>[<span class="title">k</span>][<span class="title">l</span>], <span class="title">a</span>[<span class="title">k</span>][<span class="title">r</span> - (1 &lt;&lt; <span class="title">k</span>)]&#125;, cmp);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">            return ans;</span></span><br><span class="line"><span class="class">        &#125; else &#123;</span></span><br><span class="line"><span class="class">            int x = <span class="type">B</span> * (<span class="title">l</span> / <span class="type">B</span>);</span></span><br><span class="line"><span class="class">            return ini[__builtin_ctzll(<span class="title">stk</span>[<span class="title">r</span> - 1] &gt;&gt; (<span class="title">l</span> - <span class="title">x</span>)) + l];</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure></p><h2 id="07-Splay"><a href="#07-Splay" class="headerlink" title="07 - Splay"></a>07 - Splay</h2><p><a href="https://atcoder.jp/contests/joi2023ho/submissions/38901674">2023-02-15</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, int l, int r, int p, int v) &#123;</span><br><span class="line">    Node *x = new Node;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        *x = *t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>sum += v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">l</span> = add(x-&gt;</span>l, l, m, p, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">r</span> = add(x-&gt;</span>r, m, r, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int find(Node *tl, Node *tr, int l, int r, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= x) &#123;</span><br><span class="line">        return -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x) &#123;</span><br><span class="line">        <span class="function"><span class="title">int</span> cnt = (tr ? tr-&gt;</span><span class="function"><span class="title">cnt</span> : 0) - (tl ? tl-&gt;</span>cnt : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            return -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            return l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> res = find(tl ? tl-&gt;</span><span class="function"><span class="title">l</span> : tl, tr ? tr-&gt;</span>l : tr, l, m, x);</span><br><span class="line">    <span class="keyword">if</span> (res == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">res</span> = find(tl ? tl-&gt;</span><span class="function"><span class="title">r</span> : tl, tr ? tr-&gt;</span>r : tr, m, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;int, i64&gt; get(Node *t, int l, int r, int x, int y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !t) &#123;</span><br><span class="line">        return &#123;<span class="number">0</span>, <span class="number">0</span>LL&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> &#123;t-&gt;</span><span class="function"><span class="title">cnt</span>, t-&gt;</span>sum&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">auto</span> [cl, sl] = get(t-&gt;</span>l, l, m, x, y);</span><br><span class="line">    <span class="function"><span class="title">auto</span> [cr, sr] = get(t-&gt;</span>r, m, r, x, y);</span><br><span class="line">    return &#123;cl + cr, sl + sr&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Tree &#123;</span><br><span class="line">    int add = <span class="number">0</span>;</span><br><span class="line">    int val = <span class="number">0</span>;</span><br><span class="line">    int id = <span class="number">0</span>;</span><br><span class="line">    Tree *ch[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">    Tree *p = nullptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int pos(Tree *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void add(Tree *t, int v) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>val += v;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>add += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void push(Tree *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(t-&gt;</span><span class="function"><span class="title">ch</span>[0], t-&gt;</span>add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(t-&gt;</span><span class="function"><span class="title">ch</span>[1], t-&gt;</span>add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rotate(Tree *t) &#123;</span><br><span class="line">    T<span class="function"><span class="title">ree</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">ch</span>[x]) t-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="function"><span class="title">if</span> (q-&gt;</span><span class="function"><span class="title">p</span>) q-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void splay(Tree *t) &#123;</span><br><span class="line">    std::vector&lt;Tree *&gt; s;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Tree *i = t; i-&gt;</span><span class="function"><span class="title">p</span>; i = i-&gt;</span><span class="function"><span class="title">p</span>) s.push_back(i-&gt;</span>p);</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        push(s.back());</span><br><span class="line">        s.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">while</span> (t-&gt;</span>p) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>p) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span><span class="function"><span class="title">p</span>)) rotate(t-&gt;</span>p);</span><br><span class="line">            <span class="keyword">else</span> rotate(t);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insert(Tree *&amp;t, Tree *x, Tree *p = nullptr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        t = x;</span><br><span class="line">        <span class="function"><span class="title">x</span>-&gt;</span>p = p;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">if</span> (x-&gt;</span><span class="function"><span class="title">val</span> &lt; t-&gt;</span>val) &#123;</span><br><span class="line">        <span class="function"><span class="title">insert</span>(t-&gt;</span>ch[<span class="number">0</span>], x, t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">insert</span>(t-&gt;</span>ch[<span class="number">1</span>], x, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(Tree *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">    <span class="function"><span class="title">dfs</span>(t-&gt;</span>ch[<span class="number">0</span>]);</span><br><span class="line">    <span class="function"><span class="title">std</span>::cerr &lt;&lt; t-&gt;</span>val <span class="string">&lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">    dfs(t-&gt;ch[1]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">std::pair&lt;Tree *, Tree *&gt; split(Tree *t, int x) &#123;</span></span><br><span class="line"><span class="string">    if (!t) &#123;</span></span><br><span class="line"><span class="string">        return &#123;t, t&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Tree *v = nullptr;</span></span><br><span class="line"><span class="string">    Tree *j = t;</span></span><br><span class="line"><span class="string">    for (Tree *i = t; i; ) &#123;</span></span><br><span class="line"><span class="string">        push(i);</span></span><br><span class="line"><span class="string">        j = i;</span></span><br><span class="line"><span class="string">        if (i-&gt;val &gt;= x) &#123;</span></span><br><span class="line"><span class="string">            v = i;</span></span><br><span class="line"><span class="string">            i = i-&gt;ch[0];</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            i = i-&gt;ch[1];</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    splay(j);</span></span><br><span class="line"><span class="string">    if (!v) &#123;</span></span><br><span class="line"><span class="string">        return &#123;j, nullptr&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    splay(v);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Tree *u = v-&gt;ch[0];</span></span><br><span class="line"><span class="string">    if (u) &#123;</span></span><br><span class="line"><span class="string">        v-&gt;ch[0] = u-&gt;p = nullptr;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;split &quot; &lt;&lt; x &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    // dfs(u);</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    // dfs(v);</span></span><br><span class="line"><span class="string">    // std::cerr &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    return &#123;u, v&#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Tree *merge(Tree *l, Tree *r) &#123;</span></span><br><span class="line"><span class="string">    if (!l) &#123;</span></span><br><span class="line"><span class="string">        return r;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (!r) &#123;</span></span><br><span class="line"><span class="string">        return l;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Tree *i = l;</span></span><br><span class="line"><span class="string">    while (i-&gt;ch[1]) &#123;</span></span><br><span class="line"><span class="string">        i = i-&gt;ch[1];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    splay(i);</span></span><br><span class="line"><span class="string">    i-&gt;ch[1] = r;</span></span><br><span class="line"><span class="string">    r-&gt;p = i;</span></span><br><span class="line"><span class="string">    return i;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br><a href="https://cf.dianhsu.com/gym/104479/submission/221036520">2023-09-30</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    bool rev;</span><br><span class="line">    int siz = <span class="number">1</span>;</span><br><span class="line">    Node() : ch&#123;nullptr, nullptr&#125;, p(nullptr), rev(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void reverse(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        <span class="function"><span class="title">std</span>::swap(t-&gt;</span><span class="function"><span class="title">ch</span>[0], t-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void push(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>rev) &#123;</span><br><span class="line">        <span class="function"><span class="title">reverse</span>(t-&gt;</span>ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="function"><span class="title">reverse</span>(t-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>rev = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> = (t-&gt;</span><span class="function"><span class="title">ch</span>[0] ? t-&gt;</span><span class="function"><span class="title">ch</span>[0]-&gt;</span><span class="function"><span class="title">siz</span> : 0) + 1 + (t-&gt;</span><span class="function"><span class="title">ch</span>[1] ? t-&gt;</span><span class="function"><span class="title">ch</span>[1]-&gt;</span>siz : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">bool isroot(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span> == nullptr || (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">ch</span>[0] != t &amp;&amp; t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] != t);</span><br><span class="line">&#125;</span><br><span class="line">int pos(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line">void pushAll(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">pushAll</span>(t-&gt;</span>p);</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">&#125;</span><br><span class="line">void rotate(Node *t) &#123;</span><br><span class="line">    N<span class="function"><span class="title">ode</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[x]) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(q)) &#123;</span><br><span class="line">        <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">    pull(q);</span><br><span class="line">&#125;</span><br><span class="line">void splay(Node *t) &#123;</span><br><span class="line">    pushAll(t);</span><br><span class="line">    <span class="keyword">while</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (!isroot(t-&gt;</span>p)) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span>p)) &#123;</span><br><span class="line">                <span class="function"><span class="title">rotate</span>(t-&gt;</span>p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rotate(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line">void access(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Node *i = t, *q = nullptr; i; q = i, i = i-&gt;</span>p) &#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>ch[<span class="number">1</span>] = q;</span><br><span class="line">        pull(i);</span><br><span class="line">    &#125;</span><br><span class="line">    splay(t);</span><br><span class="line">&#125;</span><br><span class="line">void makeroot(Node *t) &#123;</span><br><span class="line">    access(t);</span><br><span class="line">    reverse(t);</span><br><span class="line">&#125;</span><br><span class="line">void link(Node *x, Node *y) &#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span>p = y;</span><br><span class="line">&#125;</span><br><span class="line">void split(Node *x, Node *y) &#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    access(y);</span><br><span class="line">&#125;</span><br><span class="line">void cut(Node *x, Node *y) &#123;</span><br><span class="line">    split(x, y);</span><br><span class="line">    <span class="function"><span class="title">x</span>-&gt;</span><span class="function"><span class="title">p</span> = y-&gt;</span>ch[<span class="number">0</span>] = nullptr;</span><br><span class="line">    pull(y);</span><br><span class="line">&#125;</span><br><span class="line">int dist(Node *x, Node *y) &#123;</span><br><span class="line">    split(x, y);</span><br><span class="line">    <span class="function"><span class="title">return</span> y-&gt;</span>siz - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://codeforces.com/contest/1942/submission/254202464">2024-03-30</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">struct Matrix : std::array&lt;std::array&lt;i64, <span class="number">4</span>&gt;, <span class="number">4</span>&gt; &#123;</span><br><span class="line">    Matrix(i64 v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                (*this)[i][j] = (i == j ? v : inf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Matrix operator*(const Matrix &amp;a, const Matrix &amp;b) &#123;</span><br><span class="line">    Matrix c(inf);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                c[i][k] = std::min(c[i][k], a[i][j] + b[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c[i][<span class="number">3</span>] = std::min(c[i][<span class="number">3</span>], a[i][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    c[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">struct Node &#123;</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    i64 sumg = <span class="number">0</span>;</span><br><span class="line">    i64 sumh = <span class="number">0</span>;</span><br><span class="line">    i64 sumb = <span class="number">0</span>;</span><br><span class="line">    i64 g = <span class="number">0</span>;</span><br><span class="line">    i64 h = <span class="number">0</span>;</span><br><span class="line">    i64 b = <span class="number">0</span>;</span><br><span class="line">    Matrix mat;</span><br><span class="line">    Matrix prd;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; ans&#123;&#125;;</span><br><span class="line">    Node() : ch&#123;nullptr, nullptr&#125;, p(nullptr) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    void update() &#123;</span><br><span class="line">        mat = Matrix(inf);</span><br><span class="line">        mat[<span class="number">0</span>][<span class="number">0</span>] = b + h - g + sumg;</span><br><span class="line">        mat[<span class="number">1</span>][<span class="number">1</span>] = mat[<span class="number">1</span>][<span class="number">2</span>] = mat[<span class="number">1</span>][<span class="number">3</span>] = h + sumh;</span><br><span class="line">        mat[<span class="number">2</span>][<span class="number">0</span>] = mat[<span class="number">2</span>][<span class="number">1</span>] = mat[<span class="number">2</span>][<span class="number">2</span>] = mat[<span class="number">2</span>][<span class="number">3</span>] = b + h + sumb;</span><br><span class="line">        mat[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void push(Node *t) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">prd</span> = (t-&gt;</span><span class="function"><span class="title">ch</span>[0] ? t-&gt;</span><span class="function"><span class="title">ch</span>[0]-&gt;</span><span class="function"><span class="title">prd</span> : Matrix()) * t-&gt;</span><span class="function"><span class="title">mat</span> * (t-&gt;</span><span class="function"><span class="title">ch</span>[1] ? t-&gt;</span><span class="function"><span class="title">ch</span>[1]-&gt;</span>prd : Matrix());</span><br><span class="line">&#125;</span><br><span class="line">bool isroot(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span> == nullptr || (t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">ch</span>[0] != t &amp;&amp; t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] != t);</span><br><span class="line">&#125;</span><br><span class="line">int pos(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">return</span> t-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[<span class="number">1</span>] == t;</span><br><span class="line">&#125;</span><br><span class="line">void pushAll(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">pushAll</span>(t-&gt;</span>p);</span><br><span class="line">    &#125;</span><br><span class="line">    push(t);</span><br><span class="line">&#125;</span><br><span class="line">void rotate(Node *t) &#123;</span><br><span class="line">    N<span class="function"><span class="title">ode</span> *q = t-&gt;</span>p;</span><br><span class="line">    int x = !pos(t);</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">ch</span>[!x] = t-&gt;</span>ch[x];</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>ch[x]) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">ch</span>[x]-&gt;</span>p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">p</span> = q-&gt;</span>p;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(q)) &#123;</span><br><span class="line">        <span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">p</span>-&gt;</span>ch[pos(q)] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>ch[x] = q;</span><br><span class="line">    <span class="function"><span class="title">q</span>-&gt;</span>p = t;</span><br><span class="line">    pull(q);</span><br><span class="line">&#125;</span><br><span class="line">void splay(Node *t) &#123;</span><br><span class="line">    pushAll(t);</span><br><span class="line">    <span class="keyword">while</span> (!isroot(t)) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (!isroot(t-&gt;</span>p)) &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span> (pos(t) == pos(t-&gt;</span>p)) &#123;</span><br><span class="line">                <span class="function"><span class="title">rotate</span>(t-&gt;</span>p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rotate(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(t);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">std::array&lt;i64, <span class="number">4</span>&gt; get(Node *t) &#123;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; ans;</span><br><span class="line">    ans.fill(inf);</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="function"><span class="title">ans</span>[i] = std::min(ans[i], t-&gt;</span>prd[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void access(Node *t) &#123;</span><br><span class="line">    std::array&lt;i64, <span class="number">4</span>&gt; old&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">for</span> (Node *i = t, *q = nullptr; i; q = i, i = i-&gt;</span>p) &#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="function"><span class="title">if</span> (i-&gt;</span>ch[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="function"><span class="title">auto</span> res = get(i-&gt;</span>ch[<span class="number">1</span>]);</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumg += res[<span class="number">0</span>];</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumh += std::min(&#123;res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]&#125;);</span><br><span class="line">            <span class="function"><span class="title">i</span>-&gt;</span>sumb += std::min(&#123;res[<span class="number">0</span>], res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>ch[<span class="number">1</span>] = q;</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumg -= old[<span class="number">0</span>];</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumh -= std::min(&#123;old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]&#125;);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>sumb -= std::min(&#123;old[<span class="number">0</span>], old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]&#125;);</span><br><span class="line">        old = get(i);</span><br><span class="line">        <span class="function"><span class="title">i</span>-&gt;</span>update();</span><br><span class="line">        pull(i);</span><br><span class="line">    &#125;</span><br><span class="line">    splay(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="08-其他平衡树"><a href="#08-其他平衡树" class="headerlink" title="08 - 其他平衡树"></a>08 - 其他平衡树</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63246177">2023-08-04</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int sum = <span class="number">0</span>;</span><br><span class="line">    int sumodd = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Node(Node *t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t) &#123;</span><br><span class="line">            *this = *t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, int l, int r, int x, int v) &#123;</span><br><span class="line">    t = new Node(t);</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>sum += v;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>sumodd += (x % <span class="number">2</span>) * v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">l</span> = add(t-&gt;</span>l, l, m, x, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">r</span> = add(t-&gt;</span>r, m, r, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query1(Node *t1, Node *t2, int l, int r, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> odd = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="title">int</span> cnt = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sum</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sum : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (odd &gt; <span class="number">0</span> || cnt &gt; k) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query1(t1 ? t1-&gt;</span><span class="function"><span class="title">r</span> : t1, t2 ? t2-&gt;</span>r : t2, m, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query1(t1 ? t1-&gt;</span><span class="function"><span class="title">l</span> : t1, t2 ? t2-&gt;</span>l : t2, l, m, k - cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::array&lt;int, <span class="number">3</span>&gt; query2(Node *t1, Node *t2, int l, int r, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">int</span> cnt = (t1 ? t1-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 ? t2-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">        return &#123;l, cnt, k&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">int</span> cnt = (t1 &amp;&amp; t1-&gt;</span><span class="function"><span class="title">r</span> ? t1-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span><span class="function"><span class="title">sumodd</span> : 0) - (t2 &amp;&amp; t2-&gt;</span><span class="function"><span class="title">r</span> ? t2-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; k) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query2(t1 ? t1-&gt;</span><span class="function"><span class="title">r</span> : t1, t2 ? t2-&gt;</span>r : t2, m, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> query2(t1 ? t1-&gt;</span><span class="function"><span class="title">l</span> : t1, t2 ? t2-&gt;</span>l : t2, l, m, k - cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://codeforces.com/contest/1864/submission/220558951">2023-08-26</a><br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(Node *t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        t = <span class="keyword">new</span> Node(*t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t = <span class="keyword">new</span> Node;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        t-&gt;l = add(t-&gt;l, l, m, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t-&gt;r = add(t-&gt;r, m, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> query(Node *t1, Node *t2, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = (t2 ? t2-&gt;cnt : <span class="number">0</span>) - (t1 ? t1-&gt;cnt : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || l &gt;= x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> res = query(t1 ? t1-&gt;r : t1, t2 ? t2-&gt;r : t2, m, r, x);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">        res = query(t1 ? t1-&gt;l : t1, t2 ? t2-&gt;l : t2, l, m, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://codeforces.com/contest/38/submission/200537139">2023-04-03</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">struct Info &#123;</span><br><span class="line">    int imp = <span class="number">0</span>;</span><br><span class="line">    int id = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info operator+(Info a, Info b) &#123;</span><br><span class="line">    return &#123;std::max(a.imp, b.imp), <span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Node &#123;</span><br><span class="line">    int w = rng();</span><br><span class="line">    Info info;</span><br><span class="line">    Info sum;</span><br><span class="line">    int siz = <span class="number">1</span>;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span>info;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>siz = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>l) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">sum</span> + t-&gt;</span>sum;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> += t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>r) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">sum</span> = t-&gt;</span><span class="function"><span class="title">sum</span> + t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>sum;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">siz</span> += t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;Node *, Node *&gt; splitAt(Node *t, int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return &#123;t, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (p &lt;= (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="function"><span class="title">auto</span> [l, r] = splitAt(t-&gt;</span>l, p);</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = r;</span><br><span class="line">        pull(t);</span><br><span class="line">        return &#123;l, t&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">auto</span> [l, r] = splitAt(t-&gt;</span><span class="function"><span class="title">r</span>, p - 1 - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>));</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = l;</span><br><span class="line">        pull(t);</span><br><span class="line">        return &#123;t, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insertAt(Node *&amp;t, int p, Node *x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        t = x;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (x-&gt;</span><span class="function"><span class="title">w</span> &lt; t-&gt;</span>w) &#123;</span><br><span class="line">        auto [l, r] = splitAt(t, p);</span><br><span class="line">        t = x;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = l;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = r;</span><br><span class="line">        pull(t);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (p &lt;= (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="function"><span class="title">insertAt</span>(t-&gt;</span>l, p, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">insertAt</span>(t-&gt;</span><span class="function"><span class="title">r</span>, p - 1 - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>siz : <span class="number">0</span>), x);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *merge(Node *a, Node *b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">if</span> (a-&gt;</span><span class="function"><span class="title">w</span> &lt; b-&gt;</span>w) &#123;</span><br><span class="line">        <span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">r</span> = merge(a-&gt;</span>r, b);</span><br><span class="line">        pull(a);</span><br><span class="line">        return a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">b</span>-&gt;</span><span class="function"><span class="title">l</span> = merge(a, b-&gt;</span>l);</span><br><span class="line">        pull(b);</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(Node *t, int v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>sum.imp &lt; v) &#123;</span><br><span class="line">        <span class="function"><span class="title">return</span> t-&gt;</span>siz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">int</span> res = query(t-&gt;</span>r, v);</span><br><span class="line">    <span class="function"><span class="title">if</span> (res != (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>siz : <span class="number">0</span>)) &#123;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (t-&gt;</span>info.imp &gt; v) &#123;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">return</span> res + 1 + query(t-&gt;</span>l, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">dfs</span>(t-&gt;</span>l);</span><br><span class="line">    <span class="function"><span class="title">std</span>::cout &lt;&lt; t-&gt;</span>info.id <span class="string">&lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">    dfs(t-&gt;r);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63162242">2023-07-31</a><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">    Node *l = nullptr;</span><br><span class="line">    Node *r = nullptr;</span><br><span class="line">    int cnt = <span class="number">0</span>;</span><br><span class="line">    int cntnew = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *add(int l, int r, int x, int isnew) &#123;</span><br><span class="line">    Node *t = new Node;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span>cntnew = isnew;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>l = add(l, m, x, isnew);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>r = add(m, r, x, isnew);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Info &#123;</span><br><span class="line">    Node *t = nullptr;</span><br><span class="line">    int psum = <span class="number">0</span>;</span><br><span class="line">    bool rev = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void pull(Node *t) &#123;</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">cnt</span> = (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">cnt</span> : 0) + (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt : <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">cntnew</span> = (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span><span class="function"><span class="title">cntnew</span> : 0) + (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cntnew : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;Node *, Node *&gt; split(Node *t, int l, int r, int x, bool rev) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        return &#123;t, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        return &#123;nullptr, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (x == t-&gt;</span>cnt) &#123;</span><br><span class="line">        return &#123;t, nullptr&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        Node *t2 = new Node;</span><br><span class="line">        <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">cnt</span> = t-&gt;</span>cnt - x;</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span>cnt = x;</span><br><span class="line">        return &#123;t, t2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *t2 = new Node;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (!rev) &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">l</span> &amp;&amp; x &lt;= t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>cnt) &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span><span class="function"><span class="title">l</span>) = split(t-&gt;</span>l, l, m, x, rev);</span><br><span class="line">            <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">r</span> = t-&gt;</span>r;</span><br><span class="line">            <span class="function"><span class="title">t</span>-&gt;</span>r = nullptr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span><span class="function"><span class="title">r</span>) = split(t-&gt;</span><span class="function"><span class="title">r</span>, m, r, x - (t-&gt;</span><span class="function"><span class="title">l</span> ? t-&gt;</span><span class="function"><span class="title">l</span>-&gt;</span>cnt : <span class="number">0</span>), rev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (t-&gt;</span><span class="function"><span class="title">r</span> &amp;&amp; x &lt;= t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt) &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span><span class="function"><span class="title">r</span>) = split(t-&gt;</span>r, m, r, x, rev);</span><br><span class="line">            <span class="function"><span class="title">t2</span>-&gt;</span><span class="function"><span class="title">l</span> = t-&gt;</span>l;</span><br><span class="line">            <span class="function"><span class="title">t</span>-&gt;</span>l = nullptr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">std</span>::tie(t-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span><span class="function"><span class="title">l</span>) = split(t-&gt;</span><span class="function"><span class="title">l</span>, l, m, x - (t-&gt;</span><span class="function"><span class="title">r</span> ? t-&gt;</span><span class="function"><span class="title">r</span>-&gt;</span>cnt : <span class="number">0</span>), rev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pull(t);</span><br><span class="line">    pull(t2);</span><br><span class="line">    return &#123;t, t2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *merge(Node *t1, Node *t2, int l, int r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t1) &#123;</span><br><span class="line">        return t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!t2) &#123;</span><br><span class="line">        return t1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">cnt</span> += t2-&gt;</span>cnt;</span><br><span class="line">        <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">cntnew</span> += t2-&gt;</span>cntnew;</span><br><span class="line">        delete t2;</span><br><span class="line">        return t1;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">l</span> = merge(t1-&gt;</span><span class="function"><span class="title">l</span>, t2-&gt;</span>l, l, m);</span><br><span class="line">    <span class="function"><span class="title">t1</span>-&gt;</span><span class="function"><span class="title">r</span> = merge(t1-&gt;</span><span class="function"><span class="title">r</span>, t2-&gt;</span>r, m, r);</span><br><span class="line">    delete t2;</span><br><span class="line">    pull(t1);</span><br><span class="line">    return t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="09-分数四则运算（Frac）"><a href="#09-分数四则运算（Frac）" class="headerlink" title="09 - 分数四则运算（Frac）"></a>09 - 分数四则运算（Frac）</h2><p><a href="https://codeforces.com/contest/598/submission/203186397">2023-04-23</a><br><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">template</span><span class="operator">&lt;</span><span class="keyword">class</span> <span class="title class_">T</span><span class="operator">&gt;</span></span><br><span class="line"><span class="variable">struct</span> <span class="title class_">Frac</span> &#123;</span><br><span class="line">    <span class="variable">T</span> <span class="variable">num</span>;</span><br><span class="line">    <span class="variable">T</span> <span class="variable">den</span>;</span><br><span class="line">    <span class="title class_">Frac</span>(<span class="variable">T</span> <span class="variable">num_</span>, <span class="variable">T</span> <span class="variable">den_</span>) : <span class="title function_">num</span>(<span class="variable">num_</span>), <span class="title function_">den</span>(<span class="params">den_</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">den</span> <span class="operator">&lt;</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">den</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">den</span>;</span><br><span class="line">            <span class="variable">num</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">num</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span>() : <span class="title class_">Frac</span>(<span class="number">0</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="title class_">Frac</span>(<span class="variable">T</span> <span class="variable">num_</span>) : <span class="title class_">Frac</span>(<span class="variable">num_</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="variable">explicit</span> <span class="variable">operator</span> <span class="title function_">double</span>() <span class="title function_">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.</span> <span class="operator">*</span> <span class="variable">num</span> / <span class="variable">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">+</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">=</span> <span class="variable">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">+</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">-</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">=</span> <span class="variable">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">-</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="operator">*</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">num</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">operator</span>/<span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="variable">num</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">den</span>;</span><br><span class="line">        <span class="variable">den</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>.<span class="property">num</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">den</span> <span class="operator">&lt;</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">num</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">num</span>;</span><br><span class="line">            <span class="variable">den</span> <span class="operator">=</span> <span class="operator">-</span><span class="variable">den</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">*</span><span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">+</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">+</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">-</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">-</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">*</span>(<span class="params">Frac</span> <span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> <span class="operator">*</span><span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span>/(<span class="title class_">Frac</span> <span class="variable">lhs</span>, <span class="variable">const</span> <span class="title class_">Frac</span> <span class="operator">&amp;</span><span class="variable">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span> /<span class="operator">=</span> <span class="variable">rhs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="title class_">Frac</span> <span class="variable">operator</span><span class="title function_">-</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Frac</span>(<span class="operator">-</span><span class="variable">a</span>.<span class="property">num</span>, <span class="variable">a</span>.<span class="property">den</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">==</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">==</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator!</span><span class="title function_">=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">!=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&lt;</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&lt;</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&gt;</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&gt;</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&lt;=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&lt;=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">bool</span> <span class="variable">operator</span><span class="title function_">&gt;=</span>(<span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">lhs</span>, <span class="params">const</span> <span class="params">Frac</span> &amp;<span class="params">rhs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">lhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">rhs</span>.<span class="property">den</span> <span class="operator">&gt;=</span> <span class="variable">rhs</span>.<span class="property">num</span> <span class="operator">*</span> <span class="variable">lhs</span>.<span class="property">den</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">friend</span> <span class="variable">std</span>::<span class="variable">ostream</span> <span class="operator">&amp;</span><span class="variable">operator</span><span class="title function_">&lt;&lt;</span>(<span class="params">std</span>::<span class="params">ostream</span> &amp;<span class="params">os</span>, <span class="params">Frac</span> <span class="params">x</span>) &#123;</span><br><span class="line">        <span class="variable">T</span> <span class="variable">g</span> <span class="operator">=</span> <span class="variable">std</span>::<span class="title function_">gcd</span>(<span class="variable">x</span>.<span class="property">num</span>, <span class="variable">x</span>.<span class="property">den</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">x</span>.<span class="property">den</span> <span class="operator">==</span> <span class="variable">g</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">os</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">num</span> / <span class="variable">g</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">os</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">num</span> / <span class="variable">g</span> <span class="operator">&lt;&lt;</span> <span class="string">&quot;/&quot;</span> <span class="operator">&lt;&lt;</span> <span class="variable">x</span>.<span class="property">den</span> / <span class="variable">g</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="10-线性基（Basis）"><a href="#10-线性基（Basis）" class="headerlink" title="10 - 线性基（Basis）"></a>10 - 线性基（Basis）</h2><p><a href="https://codeforces.com/contest/1902/submission/235594491">2023-12-03</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Basis</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> t[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Basis</span>() &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(t, t + <span class="number">20</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">1E9</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y &gt; t[i]) &#123;</span><br><span class="line">                    std::<span class="built_in">swap</span>(a[i], x);</span><br><span class="line">                    std::<span class="built_in">swap</span>(t[i], y);</span><br><span class="line">                &#125;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i &amp; <span class="number">1</span>) &amp;&amp; t[i] &gt;= y) &#123;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h1><h2 id="01A-马拉车（Manacher-旧版）"><a href="#01A-马拉车（Manacher-旧版）" class="headerlink" title="01A - 马拉车（Manacher 旧版）"></a>01A - 马拉车（Manacher 旧版）</h2><p><a href="https://codeforces.com/contest/1827/submission/205865086">2023-05-14</a><br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s<span class="symbol">td:</span><span class="symbol">:ve</span>ctor&lt;<span class="built_in">int</span>&gt; manacher(s<span class="symbol">td:</span><span class="symbol">:st</span>ring s) &#123;</span><br><span class="line">    s<span class="symbol">td:</span><span class="symbol">:st</span>ring <span class="built_in">t</span> = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    for (auto c <span class="symbol">:</span> s) &#123;</span><br><span class="line">        <span class="built_in">t</span> += c;</span><br><span class="line">        <span class="built_in">t</span> += &#x27;#&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = t.size();</span><br><span class="line">    s<span class="symbol">td:</span><span class="symbol">:ve</span>ctor&lt;<span class="built_in">int</span>&gt; r(<span class="built_in">n</span>);</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) &#123;</span><br><span class="line">            r[i] = s<span class="symbol">td:</span><span class="symbol">:mi</span><span class="built_in">n</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        while (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; <span class="built_in">n</span> &amp;&amp; <span class="built_in">t</span>[i - r[i]] == <span class="built_in">t</span>[i + r[i]]) &#123;</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">if</span> (i + r[i] &gt; j + r[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="01B-马拉车（Manacher-新版）"><a href="#01B-马拉车（Manacher-新版）" class="headerlink" title="01B - 马拉车（Manacher 新版）"></a>01B - 马拉车（Manacher 新版）</h2><p><a href="https://atcoder.jp/contests/abc349/submissions/52365777">2024-04-14</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; s)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; t&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        t.<span class="built_in">push_back</span>(c);</span><br><span class="line">        t.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) &#123;</span><br><span class="line">            r[i] = std::<span class="built_in">min</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; n &amp;&amp; t[i - r[i]] == t[i + r[i]]) &#123;</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + r[i] &gt; j + r[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="02-Z函数"><a href="#02-Z函数" class="headerlink" title="02 - Z函数"></a>02 - Z函数</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63378373">2023-08-11</a><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;int&gt; zFunction(std::string s) &#123;</span><br><span class="line">    int n = s.size();</span><br><span class="line">    std::vector&lt;int&gt; z(n + 1);</span><br><span class="line">    z<span class="comment">[0]</span> = n;</span><br><span class="line">    for (int i = 1, j = 1; i &lt; n; i++) &#123;</span><br><span class="line">        z<span class="comment">[i]</span> = std::max(0, std::min(j + z<span class="comment">[j]</span> - i, z<span class="comment">[i - j]</span>));</span><br><span class="line">        while (i + z<span class="comment">[i]</span> &lt; n &amp;&amp; s<span class="comment">[z<span class="comment">[i]</span>]</span> == s<span class="comment">[i + z<span class="comment">[i]</span>]</span>) &#123;</span><br><span class="line">            z<span class="comment">[i]</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i + z<span class="comment">[i]</span> &gt; j + z<span class="comment">[j]</span>) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="03-后缀数组（SA）"><a href="#03-后缀数组（SA）" class="headerlink" title="03 - 后缀数组（SA）"></a>03 - 后缀数组（SA）</h2><p><a href="https://atcoder.jp/contests/discovery2016-qual/submissions/39727257">2023-03-14</a><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">struct SuffixArray &#123;</span><br><span class="line">    int n;</span><br><span class="line">    std::vector&lt;int&gt; sa, rk, lc;</span><br><span class="line">    SuffixArray(const std::string &amp;s) &#123;</span><br><span class="line">        n = s.length();</span><br><span class="line">        sa.resize(n);</span><br><span class="line">        lc.resize(n - 1);</span><br><span class="line">        rk.resize(n);</span><br><span class="line">        std::iota(sa.begin(), sa.end(), 0);</span><br><span class="line">        std::sort(sa.begin(), sa.end(), <span class="comment">[&amp;]</span>(int a, int b) &#123;return s<span class="comment">[a]</span> &lt; s<span class="comment">[b]</span>;&#125;);</span><br><span class="line">        rk<span class="comment">[sa<span class="comment">[0]</span>]</span> = 0;</span><br><span class="line">        for (int i = 1; i &lt; n; ++i)</span><br><span class="line">            rk<span class="comment">[sa<span class="comment">[i]</span>]</span> = rk<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> + (s<span class="comment">[sa<span class="comment">[i]</span>]</span> != s<span class="comment">[sa<span class="comment">[i - 1]</span>]</span>);</span><br><span class="line">        int k = 1;</span><br><span class="line">        std::vector&lt;int&gt; tmp, cnt(n);</span><br><span class="line">        tmp.reserve(n);</span><br><span class="line">        while (rk<span class="comment">[sa<span class="comment">[n - 1]</span>]</span> &lt; n - 1) &#123;</span><br><span class="line">            tmp.clear();</span><br><span class="line">            for (int i = 0; i &lt; k; ++i)</span><br><span class="line">                tmp.push_back(n - k + i);</span><br><span class="line">            for (auto i : sa)</span><br><span class="line">                if (i &gt;= k)</span><br><span class="line">                    tmp.push_back(i - k);</span><br><span class="line">            std::fill(cnt.begin(), cnt.end(), 0);</span><br><span class="line">            for (int i = 0; i &lt; n; ++i)</span><br><span class="line">                ++cnt<span class="comment">[rk<span class="comment">[i]</span>]</span>;</span><br><span class="line">            for (int i = 1; i &lt; n; ++i)</span><br><span class="line">                cnt<span class="comment">[i]</span> += cnt<span class="comment">[i - 1]</span>;</span><br><span class="line">            for (int i = n - 1; i &gt;= 0; --i)</span><br><span class="line">                sa<span class="comment">[--cnt<span class="comment">[rk<span class="comment">[tmp<span class="comment">[i]</span>]</span>]</span>]</span> = tmp<span class="comment">[i]</span>;</span><br><span class="line">            std::swap(rk, tmp);</span><br><span class="line">            rk<span class="comment">[sa<span class="comment">[0]</span>]</span> = 0;</span><br><span class="line">            for (int i = 1; i &lt; n; ++i)</span><br><span class="line">                rk<span class="comment">[sa<span class="comment">[i]</span>]</span> = rk<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> + (tmp<span class="comment">[sa<span class="comment">[i - 1]</span>]</span> &lt; tmp<span class="comment">[sa<span class="comment">[i]</span>]</span> || sa<span class="comment">[i - 1]</span> + k == n || tmp<span class="comment">[sa<span class="comment">[i - 1]</span> + k]</span> &lt; tmp<span class="comment">[sa<span class="comment">[i]</span> + k]</span>);</span><br><span class="line">            k *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0, j = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            if (rk<span class="comment">[i]</span> == 0) &#123;</span><br><span class="line">                j = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for (j -= j &gt; 0; i + j &lt; n &amp;&amp; sa<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> + j &lt; n &amp;&amp; s<span class="comment">[i + j]</span> == s<span class="comment">[sa<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> + j]</span>; )</span><br><span class="line">                    ++j;</span><br><span class="line">                lc<span class="comment">[rk<span class="comment">[i]</span> - 1]</span> = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="04A-后缀自动机（SuffixAutomaton-旧版）"><a href="#04A-后缀自动机（SuffixAutomaton-旧版）" class="headerlink" title="04A - 后缀自动机（SuffixAutomaton 旧版）"></a>04A - 后缀自动机（SuffixAutomaton 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=53409023&amp;returnHomeType=1&amp;uid=329687984">2022-08-17</a><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">struct SuffixAutomaton &#123;</span><br><span class="line">    static constexpr int ALPHABET_SIZE = 26, N = 5e5;</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        int len;</span><br><span class="line">        int link;</span><br><span class="line">        int next<span class="comment">[ALPHABET_SIZE]</span>;</span><br><span class="line">        Node() : len(0), link(0), next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125; t<span class="comment">[2 * N]</span>;</span><br><span class="line">    int cntNodes;</span><br><span class="line">    SuffixAutomaton() &#123;</span><br><span class="line">        cntNodes = 1;</span><br><span class="line">        std::fill(t<span class="comment">[0]</span>.next, t<span class="comment">[0]</span>.next + ALPHABET_SIZE, 1);</span><br><span class="line">        t<span class="comment">[0]</span>.len = -1;</span><br><span class="line">    &#125;</span><br><span class="line">    int extend(int p, int c) &#123;</span><br><span class="line">        if (t<span class="comment">[p]</span>.next<span class="comment">[c]</span>) &#123;</span><br><span class="line">            int q = t<span class="comment">[p]</span>.next<span class="comment">[c]</span>;</span><br><span class="line">            if (t<span class="comment">[q]</span>.len == t<span class="comment">[p]</span>.len + 1)</span><br><span class="line">                return q;</span><br><span class="line">            int r = ++cntNodes;</span><br><span class="line">            t<span class="comment">[r]</span>.len = t<span class="comment">[p]</span>.len + 1;</span><br><span class="line">            t<span class="comment">[r]</span>.link = t<span class="comment">[q]</span>.link;</span><br><span class="line">            std::copy(t<span class="comment">[q]</span>.next, t<span class="comment">[q]</span>.next + ALPHABET_SIZE, t<span class="comment">[r]</span>.next);</span><br><span class="line">            t<span class="comment">[q]</span>.link = r;</span><br><span class="line">            while (t<span class="comment">[p]</span>.next<span class="comment">[c]</span> == q) &#123;</span><br><span class="line">                t<span class="comment">[p]</span>.next<span class="comment">[c]</span> = r;</span><br><span class="line">                p = t<span class="comment">[p]</span>.link;</span><br><span class="line">            &#125;</span><br><span class="line">            return r;</span><br><span class="line">        &#125;</span><br><span class="line">        int cur = ++cntNodes;</span><br><span class="line">        t<span class="comment">[cur]</span>.len = t<span class="comment">[p]</span>.len + 1;</span><br><span class="line">        while (!t<span class="comment">[p]</span>.next<span class="comment">[c]</span>) &#123;</span><br><span class="line">            t<span class="comment">[p]</span>.next<span class="comment">[c]</span> = cur;</span><br><span class="line">            p = t<span class="comment">[p]</span>.link;</span><br><span class="line">        &#125;</span><br><span class="line">        t<span class="comment">[cur]</span>.link = extend(p, c);</span><br><span class="line">        return cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="04B-后缀自动机（SAM-新版）"><a href="#04B-后缀自动机（SAM-新版）" class="headerlink" title="04B - 后缀自动机（SAM 新版）"></a>04B - 后缀自动机（SAM 新版）</h2><p><a href="https://cf.dianhsu.com/gym/104353/submission/207318083">2023-05-27</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">struct SAM &#123;</span><br><span class="line">    static constexpr <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::<span class="keyword">array</span>&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        Node() : len&#123;&#125;, link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    SAM() &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> init() &#123;</span><br><span class="line">        t.assign(<span class="number">2</span>, Node());</span><br><span class="line">        t[<span class="number">0</span>].next.fill(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> newNode() &#123;</span><br><span class="line">        t.emplace_back();</span><br><span class="line">        <span class="keyword">return</span> t.size() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> extend(<span class="type">int</span> p, <span class="type">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[p].next[c]) &#123;</span><br><span class="line">            <span class="type">int</span> q = t[p].next[c];</span><br><span class="line">            <span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> r = newNode();</span><br><span class="line">            t[r].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            t[r].link = t[q].link;</span><br><span class="line">            t[r].next = t[q].next;</span><br><span class="line">            t[q].link = r;</span><br><span class="line">            <span class="keyword">while</span> (t[p].next[c] == q) &#123;</span><br><span class="line">                t[p].next[c] = r;</span><br><span class="line">                p = t[p].link;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = newNode();</span><br><span class="line">        t[cur].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!t[p].next[c]) &#123;</span><br><span class="line">            t[p].next[c] = cur;</span><br><span class="line">            p = t[p].link;</span><br><span class="line">        &#125;</span><br><span class="line">        t[cur].link = extend(p, c);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> extend(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> <span class="keyword">offset</span> = <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> extend(p, c - <span class="keyword">offset</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> next(<span class="type">int</span> p, <span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> next(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> <span class="keyword">offset</span> = <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return next</span>(p, c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> link(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len(<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> size() &#123;</span><br><span class="line">        <span class="keyword">return</span> t.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="05-回文自动机（PAM）"><a href="#05-回文自动机（PAM）" class="headerlink" title="05 - 回文自动机（PAM）"></a>05 - 回文自动机（PAM）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62237107&amp;returnHomeType=1&amp;uid=329687984">2023-05-19</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, cnt&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    <span class="type">int</span> suff;</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="built_in">PAM</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">        suff = <span class="number">1</span>;</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(<span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = s.<span class="built_in">size</span>();</span><br><span class="line">        s += c;</span><br><span class="line">        <span class="type">int</span> let = c - offset;</span><br><span class="line">        <span class="type">int</span> cur = suff, curlen = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos])</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">if</span> (t[cur].next[let]) &#123;  </span><br><span class="line">            suff = t[cur].next[let];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">newNode</span>();</span><br><span class="line">        suff = num;</span><br><span class="line">        t[num].len = t[cur].len + <span class="number">2</span>;</span><br><span class="line">        t[cur].next[let] = num;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (t[num].len == <span class="number">1</span>) &#123;</span><br><span class="line">            t[num].link = <span class="number">1</span>;</span><br><span class="line">            t[num].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos]) &#123;</span><br><span class="line">                t[num].link = t[cur].next[let];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;           </span><br><span class="line"> </span><br><span class="line">        t[num].cnt = <span class="number">1</span> + t[t[num].link].cnt;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PAM pam;</span><br></pre></td></tr></table></figure></p><h2 id="06A-AC自动机（AC-旧版）"><a href="#06A-AC自动机（AC-旧版）" class="headerlink" title="06A - AC自动机（AC 旧版）"></a>06A - AC自动机（AC 旧版）</h2><p><a href="https://codeforces.com/contest/710/submission/121661266">2021-07-07</a><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">constexpr int <span class="symbol">N</span> = <span class="number">3e5</span> + <span class="number">30</span>, <span class="symbol">A</span> = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">struct <span class="symbol">Node</span> &#123;</span><br><span class="line">    int fail;</span><br><span class="line">    int sum;</span><br><span class="line">    int next[<span class="symbol">A</span>];</span><br><span class="line">    <span class="symbol">Node</span>() : fail(<span class="number">-1</span>), sum(<span class="number">0</span>) &#123;</span><br><span class="line">        std::memset(next, <span class="number">-1</span>, sizeof(next));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; node[<span class="symbol">N</span>];</span><br><span class="line"></span><br><span class="line">int cnt = <span class="number">0</span>;</span><br><span class="line">int bin[<span class="symbol">N</span>];</span><br><span class="line">int nBin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">int newNode() &#123;</span><br><span class="line">    int p = nBin &gt; <span class="number">0</span> ? bin[--nBin] : cnt++;</span><br><span class="line">    node[p] = <span class="symbol">Node</span>();</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct <span class="symbol">AC</span> &#123;</span><br><span class="line">    std::vector&lt;int&gt; x;</span><br><span class="line">    <span class="symbol">AC</span>(<span class="symbol">AC</span> &amp;&amp;a) : x(std::move(a.x)) &#123;&#125;</span><br><span class="line">    <span class="symbol">AC</span>(std::vector&lt;std::string&gt; s, std::vector&lt;int&gt; w) &#123;</span><br><span class="line">        x = &#123;newNode(), newNode()&#125;;</span><br><span class="line">        std::fill(node[x[<span class="number">0</span>]].next, node[x[<span class="number">0</span>]].next + <span class="symbol">A</span>, x[<span class="number">1</span>]);</span><br><span class="line">        node[x[<span class="number">1</span>]].fail = x[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; int(s.size()); i++) &#123;</span><br><span class="line">            int p = x[<span class="number">1</span>];</span><br><span class="line">            for (int j = <span class="number">0</span>; j &lt; int(s[i].length()); j++) &#123;</span><br><span class="line">                int c = s[i][j] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                if (node[p].next[c] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    int u = newNode();</span><br><span class="line">                    x.push_back(u);</span><br><span class="line">                    node[p].next[c] = u;</span><br><span class="line">                &#125;</span><br><span class="line">                p = node[p].next[c];</span><br><span class="line">            &#125;</span><br><span class="line">            node[p].sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;int&gt; que;</span><br><span class="line">        que.push(x[<span class="number">1</span>]);</span><br><span class="line">        while (!que.empty()) &#123;</span><br><span class="line">            int u = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            node[u].sum += node[node[u].fail].sum;</span><br><span class="line">            for (int c = <span class="number">0</span>; c &lt; <span class="symbol">A</span>; c++) &#123;</span><br><span class="line">                if (node[u].next[c] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    node[u].next[c] = node[node[u].fail].next[c];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    node[node[u].next[c]].fail = node[node[u].fail].next[c];</span><br><span class="line">                    que.push(node[u].next[c]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="symbol">AC</span>() &#123;</span><br><span class="line">        for (auto p : x) &#123;</span><br><span class="line">            bin[nBin++] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i64 query(const std::string &amp;s) const &#123;</span><br><span class="line">        i64 ans = <span class="number">0</span>;</span><br><span class="line">        int p = x[<span class="number">1</span>];</span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; int(s.length()); i++)  &#123;</span><br><span class="line">            int c = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            p = node[p].next[c];</span><br><span class="line">            ans += node[p].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="06B-AC自动机（AhoCorasick-新版）"><a href="#06B-AC自动机（AhoCorasick-新版）" class="headerlink" title="06B - AC自动机（AhoCorasick 新版）"></a>06B - AC自动机（AhoCorasick 新版）</h2><p><a href="https://codeforces.com/contest/1801/submission/201155712">2023-04-07</a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) &#123;</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            b[i] = a[i] - offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="06C-AC自动机（AhoCorasick-新新版）"><a href="#06C-AC自动机（AhoCorasick-新新版）" class="headerlink" title="06C - AC自动机（AhoCorasick 新新版）"></a>06C - AC自动机（AhoCorasick 新新版）</h2><p><a href="https://www.luogu.com.cn/record/155114676">2024-04-09</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;<span class="number">0</span>&#125;, link&#123;<span class="number">0</span>&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : a) &#123;</span><br><span class="line">            <span class="type">int</span> x = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) &#123;</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="07-随机生成模底-字符串哈希（例题）"><a href="#07-随机生成模底-字符串哈希（例题）" class="headerlink" title="07 - 随机生成模底 字符串哈希（例题）"></a>07 - 随机生成模底 字符串哈希（例题）</h2><p><a href="https://codeforces.com/contest/1598/submission/160006998">2022-06-09</a><br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i64 = long long;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isprime(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> findPrime(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!isprime(n)) &#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Hash = std::<span class="keyword">array</span>&lt;<span class="type">int</span>, <span class="number">2</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    </span><br><span class="line">    std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());</span><br><span class="line">    </span><br><span class="line">    const <span class="type">int</span> P = findPrime(rng() % <span class="number">900000000</span> + <span class="number">100000000</span>);</span><br><span class="line">    </span><br><span class="line">    std::string s, x;</span><br><span class="line">    std::cin &gt;&gt; s &gt;&gt; x;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n = s.length();</span><br><span class="line">    <span class="type">int</span> m = x.length();</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; h(n + <span class="number">1</span>), p(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        h[i + <span class="number">1</span>] = (<span class="number">10</span>LL * h[i] + s[i] - <span class="string">&#x27;0&#x27;</span>) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p[i + <span class="number">1</span>] = <span class="number">10</span>LL * p[i] % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto <span class="keyword">get</span> = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">return</span> (h[r] + <span class="number">1</span>LL * (P - h[l]) * p[r - l]) % P;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> px = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (auto c : x) &#123;</span><br><span class="line">        px = (<span class="number">10</span>LL * px + c - <span class="string">&#x27;0&#x27;</span>) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> * (m - <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">get</span>(i, i + m - <span class="number">1</span>) + <span class="keyword">get</span>(i + m - <span class="number">1</span>, i + <span class="number">2</span> * m - <span class="number">2</span>)) % P == px) &#123;</span><br><span class="line">            std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m - <span class="number">1</span> &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            std::cout &lt;&lt; i + m &lt;&lt; &quot; &quot; &lt;&lt; i + <span class="number">2</span> * m - <span class="number">2</span> &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; z(m + <span class="number">1</span>), f(n + <span class="number">1</span>);</span><br><span class="line">    z[<span class="number">0</span>] = m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) &#123;</span><br><span class="line">            z[i] = std::max(<span class="number">0</span>, std::min(j + z[j] - i, z[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (z[i] + i &lt; m &amp;&amp; x[z[i]] == x[z[i] + i]) &#123;</span><br><span class="line">            z[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + z[i] &gt; j + z[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) &#123;</span><br><span class="line">            f[i] = std::max(<span class="number">0</span>, std::min(j + f[j] - i, z[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (f[i] + i &lt; n &amp;&amp; f[i] &lt; m &amp;&amp; x[f[i]] == s[f[i] + i]) &#123;</span><br><span class="line">            f[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + f[i] &gt; j + f[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = std::min(m, f[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (auto j : &#123; m - l, m - l - <span class="number">1</span> &#125;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= i &amp;&amp; (<span class="keyword">get</span>(i - j, i) + <span class="keyword">get</span>(i, i + m)) % P == px) &#123;</span><br><span class="line">                std::cout &lt;&lt; i - j + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + m + j &lt;= n &amp;&amp; (<span class="keyword">get</span>(i, i + m) + <span class="keyword">get</span>(i + m, i + m + j)) % P == px) &#123;</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                std::cout &lt;&lt; i + m + <span class="number">1</span> &lt;&lt; &quot; &quot; &lt;&lt; i + m + j &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">Jiangly算法模板收集</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="算法模板" scheme="http://chfychin.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="http://chfychin.cn/posts/4d712855.html"/>
    <id>http://chfychin.cn/posts/4d712855.html</id>
    <published>2024-09-14T13:03:44.000Z</published>
    <updated>2024-09-16T16:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><h2 id="学生基本信息表student"><a href="#学生基本信息表student" class="headerlink" title="学生基本信息表student"></a>学生基本信息表student</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>sno</td><td>Varchar2(8)</td><td>Primary key</td><td>学号</td></tr><tr><td>sname</td><td>Varchar2(8)</td><td>Not null</td><td>姓名</td></tr><tr><td>ssex</td><td>Varchar2(2)</td><td>‘男’或’女’</td><td>性别</td></tr><tr><td>sbirthday</td><td>date</td><td></td><td>出生日期</td></tr><tr><td>classno</td><td>Varchar2(6)</td><td>Foreign key</td><td>班级号</td></tr><tr><td>Totalcredit</td><td>Smallint</td><td>初值为0</td><td>已选修的总学分</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sno <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    ssex <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span> (ssex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>)) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    sbirthday <span class="type">DATE</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    classno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;班级号&#x27;</span>,</span><br><span class="line">    Totalcredit <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;已选修的总学分&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> class(classno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="班级信息表class"><a href="#班级信息表class" class="headerlink" title="班级信息表class"></a>班级信息表class</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>classno</td><td>Varchar2(6)</td><td>Primary key</td><td>班级号</td></tr><tr><td>classname</td><td>Varchar(20)</td><td>Not null</td><td>班级名称</td></tr><tr><td>classmajor</td><td>Varchar2(20)</td><td></td><td>所属专业</td></tr><tr><td>classdept</td><td>Varchar2(20)</td><td></td><td>所属系别</td></tr><tr><td>studentnumber</td><td>smallint</td><td>[20…40]</td><td>学生数</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class (</span><br><span class="line">    classno <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;班级号&#x27;</span>,</span><br><span class="line">    classname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级名称&#x27;</span>,</span><br><span class="line">    classmajor <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;所属专业&#x27;</span>,</span><br><span class="line">    classdept <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;所属系别&#x27;</span>,</span><br><span class="line">    studentnumber <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (studentnumber <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span>) COMMENT <span class="string">&#x27;学生数&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="课程信息表course"><a href="#课程信息表course" class="headerlink" title="课程信息表course"></a>课程信息表course</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>cno</td><td>Varchar2 (6)</td><td>Primary key</td><td>课程号</td></tr><tr><td>cname</td><td>Varchar(30) Not null</td><td>课程名称</td></tr><tr><td>ccredit</td><td>smallint</td><td>[1…4]</td><td>学分</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    cname <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    ccredit <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (ccredit <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span>) COMMENT <span class="string">&#x27;学分&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="选修课程信息表sc"><a href="#选修课程信息表sc" class="headerlink" title="选修课程信息表sc"></a>选修课程信息表sc</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>sno</td><td>varchar (8)</td><td>Foreign key</td><td>学号</td></tr><tr><td>cno</td><td>varchar (6)</td><td>Foreign key</td><td>课程号</td></tr><tr><td>grade</td><td>integer</td><td>[0…100]</td><td>成绩</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc (</span><br><span class="line">    sno <span class="type">VARCHAR</span>(<span class="number">8</span>) COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    grade <span class="type">INTEGER</span> <span class="keyword">CHECK</span> (grade <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>) COMMENT <span class="string">&#x27;成绩&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sno) <span class="keyword">REFERENCES</span> student(sno),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="教师信息表teacher"><a href="#教师信息表teacher" class="headerlink" title="教师信息表teacher"></a>教师信息表teacher</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>tno</td><td>Number(6)</td><td>Primary key</td><td>教师号</td></tr><tr><td>tname</td><td>Varchar2(8)</td><td>Not null</td><td>教师姓名</td></tr><tr><td>tsex</td><td>Varchar2(2)</td><td>‘男’或’女’</td><td>性别</td></tr><tr><td>tbirthday</td><td>date</td><td></td><td>出生日期</td></tr><tr><td>ttitle</td><td>Varchar2(20)</td><td></td><td>职称</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">    tno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;教师号&#x27;</span>,</span><br><span class="line">    tname <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;教师姓名&#x27;</span>,</span><br><span class="line">    tsex <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span> (tsex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>)) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    tbirthday <span class="type">DATE</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    ttitle <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;职称&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="教师任课情况表teaching"><a href="#教师任课情况表teaching" class="headerlink" title="教师任课情况表teaching"></a>教师任课情况表teaching</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>字段类型</th><th>约束条件</th><th>字段含义说明</th></tr></thead><tbody><tr><td>tno</td><td>Number(6)</td><td>Foreign key</td><td>教师号</td></tr><tr><td>cno</td><td>Varchar (6)</td><td>Foreign key</td><td>课程号</td></tr><tr><td>language</td><td>Varchar2 (10)</td><td>Chinese, Bilingual, English</td><td>授课语言</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teaching (</span><br><span class="line">    tno <span class="type">INT</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;教师号&#x27;</span>,</span><br><span class="line">    cno <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line">    <span class="keyword">language</span> <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">CHECK</span> (<span class="keyword">language</span> <span class="keyword">IN</span> (<span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Bilingual&#x27;</span>, <span class="string">&#x27;English&#x27;</span>)) COMMENT <span class="string">&#x27;授课语言&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (tno) <span class="keyword">REFERENCES</span> teacher(tno),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="表student"><a href="#表student" class="headerlink" title="表student"></a>表student</h2><div class="table-container"><table><thead><tr><th>sno</th><th>sname</th><th>ssex</th><th>sbirthday</th><th>classno</th></tr></thead><tbody><tr><td>08300010</td><td>李在</td><td>男</td><td>1991-10-1</td><td>Rj0801</td></tr><tr><td>08300012</td><td>葛畅</td><td>男</td><td>1990-8-8</td><td>Rj0801</td></tr><tr><td>08300015</td><td>刘晶</td><td>女</td><td>1990-5-22</td><td>Rj0801</td></tr><tr><td>08300020</td><td>杨敏</td><td>女</td><td>1989-1-8</td><td>Rj0801</td></tr><tr><td>08300030</td><td>胡贤斌</td><td>男</td><td>1990-10-8</td><td>Rj0801</td></tr><tr><td>08300048</td><td>赵鸿泽</td><td>男</td><td>1989-6-6</td><td>Rj0802</td></tr><tr><td>08300050</td><td>王威</td><td>男</td><td>1990-6-10</td><td>Rj0802</td></tr><tr><td>08300067</td><td>赵玮</td><td>女</td><td>1990-8-21</td><td>Rj0803</td></tr><tr><td>08300075</td><td>王娜娜</td><td>女</td><td>1991-9-23</td><td>Rj0803</td></tr><tr><td>08300088</td><td>秦键</td><td>男</td><td>1989-3-1</td><td>Rj0803</td></tr><tr><td>08300100</td><td>田邦仪</td><td>女</td><td>1990-2-26</td><td>Rj0804</td></tr><tr><td>08300148</td><td>赵心砚</td><td>男</td><td>1991-4-25</td><td>Rj0805</td></tr><tr><td>08300150</td><td>杨青</td><td>女</td><td>1989-11-15</td><td>Rj0805</td></tr><tr><td>08300160</td><td>杨玲玲</td><td>女</td><td>1990-12-12</td><td>Rj0806</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sno, sname, ssex, sbirthday, classno) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;08300010&#x27;</span>, <span class="string">&#x27;李在&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1991-10-1&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300012&#x27;</span>, <span class="string">&#x27;葛畅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-8-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300015&#x27;</span>, <span class="string">&#x27;刘晶&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-5-22&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300020&#x27;</span>, <span class="string">&#x27;杨敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1989-1-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300030&#x27;</span>, <span class="string">&#x27;胡贤斌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-10-8&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300048&#x27;</span>, <span class="string">&#x27;赵鸿泽&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1989-6-6&#x27;</span>, <span class="string">&#x27;Rj0802&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300050&#x27;</span>, <span class="string">&#x27;王威&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1990-6-10&#x27;</span>, <span class="string">&#x27;Rj0802&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300067&#x27;</span>, <span class="string">&#x27;赵玮&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-8-21&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300075&#x27;</span>, <span class="string">&#x27;王娜娜&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1991-9-23&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300088&#x27;</span>, <span class="string">&#x27;秦键&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1989-3-1&#x27;</span>, <span class="string">&#x27;Rj0803&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300100&#x27;</span>, <span class="string">&#x27;田邦仪&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-2-26&#x27;</span>, <span class="string">&#x27;Rj0804&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300148&#x27;</span>, <span class="string">&#x27;赵心砚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1991-4-25&#x27;</span>, <span class="string">&#x27;Rj0805&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300150&#x27;</span>, <span class="string">&#x27;杨青&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1989-11-15&#x27;</span>, <span class="string">&#x27;Rj0805&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;08300160&#x27;</span>, <span class="string">&#x27;杨玲玲&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-12-12&#x27;</span>, <span class="string">&#x27;Rj0806&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="表class"><a href="#表class" class="headerlink" title="表class"></a>表class</h2><div class="table-container"><table><thead><tr><th>classno</th><th>classname</th><th>Classs-major</th><th>classdept</th><th>studentnumber</th></tr></thead><tbody><tr><td>Rj0801</td><td>软件0801</td><td>软件工程</td><td>软件开发</td><td>24</td></tr><tr><td>Rj0802</td><td>软件0802</td><td>软件工程</td><td>软件开发</td><td>26</td></tr><tr><td>Rj0803</td><td>软件0803</td><td>软件工程</td><td>数字媒体</td><td>25</td></tr><tr><td>Rj0804</td><td>软件0804</td><td>软件工程</td><td>软件开发</td><td>25</td></tr><tr><td>Rj0805</td><td>软件0805</td><td>软件工程</td><td>数字媒体</td><td>24</td></tr><tr><td>Rj0806</td><td>软件0806</td><td>软件工程</td><td>软件开发</td><td>24</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class (classno, classname, Classs<span class="operator">-</span>major, classdept, studentnumber) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;Rj0801&#x27;</span>, <span class="string">&#x27;软件0801&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0802&#x27;</span>, <span class="string">&#x27;软件0802&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">26</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0803&#x27;</span>, <span class="string">&#x27;软件0803&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;数字媒体&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0804&#x27;</span>, <span class="string">&#x27;软件0804&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0805&#x27;</span>, <span class="string">&#x27;软件0805&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;数字媒体&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">(<span class="string">&#x27;Rj0806&#x27;</span>, <span class="string">&#x27;软件0806&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;软件开发&#x27;</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure><h2 id="表course"><a href="#表course" class="headerlink" title="表course"></a>表course</h2><div class="table-container"><table><thead><tr><th>cno</th><th>cname</th><th>credit</th></tr></thead><tbody><tr><td>800001</td><td>计算机基础</td><td>4</td></tr><tr><td>800002</td><td>程序设计语言</td><td>4</td></tr><tr><td>800003</td><td>数据结构</td><td>4</td></tr><tr><td>810011</td><td>数据库系统</td><td>4</td></tr><tr><td>810013</td><td>计算机网络</td><td>3</td></tr><tr><td>810015</td><td>微机原理与应用</td><td>4</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course (cno, cname, credit) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">800001</span>, <span class="string">&#x27;计算机基础&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="string">&#x27;程序设计语言&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="string">&#x27;数据结构&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="string">&#x27;数据库系统&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="string">&#x27;计算机网络&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">810015</span>, <span class="string">&#x27;微机原理与应用&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="表sc"><a href="#表sc" class="headerlink" title="表sc"></a>表sc</h2><div class="table-container"><table><thead><tr><th>sno</th><th>cno</th><th>grade</th></tr></thead><tbody><tr><td>08300012</td><td>800003</td><td>88</td></tr><tr><td>08300015</td><td>800003</td><td></td></tr><tr><td>08300020</td><td>800003</td><td>91</td></tr><tr><td>08300030</td><td>800003</td><td>78</td></tr><tr><td>08300048</td><td>800003</td><td>95</td></tr><tr><td>08300100</td><td>810011</td><td>67</td></tr><tr><td>08300148</td><td>810011</td><td>58</td></tr><tr><td>08300150</td><td>810011</td><td>89</td></tr><tr><td>08300160</td><td>810011</td><td>71</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc (sno, cno, grade) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;08300012&#x27;</span>, <span class="number">800003</span>, <span class="number">88</span>),</span><br><span class="line">(<span class="string">&#x27;08300015&#x27;</span>, <span class="number">800003</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;08300020&#x27;</span>, <span class="number">800003</span>, <span class="number">91</span>),</span><br><span class="line">(<span class="string">&#x27;08300030&#x27;</span>, <span class="number">800003</span>, <span class="number">78</span>),</span><br><span class="line">(<span class="string">&#x27;08300048&#x27;</span>, <span class="number">800003</span>, <span class="number">95</span>),</span><br><span class="line">(<span class="string">&#x27;08300100&#x27;</span>, <span class="number">810011</span>, <span class="number">67</span>),</span><br><span class="line">(<span class="string">&#x27;08300148&#x27;</span>, <span class="number">810011</span>, <span class="number">58</span>),</span><br><span class="line">(<span class="string">&#x27;08300150&#x27;</span>, <span class="number">810011</span>, <span class="number">89</span>),</span><br><span class="line">(<span class="string">&#x27;08300160&#x27;</span>, <span class="number">810011</span>, <span class="number">71</span>);</span><br></pre></td></tr></table></figure><h2 id="表teacher"><a href="#表teacher" class="headerlink" title="表teacher"></a>表teacher</h2><div class="table-container"><table><thead><tr><th>tno</th><th>tname</th><th>tsex</th><th>tbirthday</th><th>ttitle</th></tr></thead><tbody><tr><td>000001</td><td>李英</td><td>女</td><td>1975-11-3</td><td>讲师</td></tr><tr><td>000002</td><td>王大山</td><td>男</td><td>1969-3-2</td><td>副教授</td></tr><tr><td>000003</td><td>张朋</td><td>男</td><td>1970-2-13</td><td>讲师</td></tr><tr><td>000004</td><td>陈为军</td><td>男</td><td>1985-8-14</td><td>助教</td></tr><tr><td>000005</td><td>宋浩然</td><td>男</td><td>1976-4-23</td><td>讲师</td></tr><tr><td>000006</td><td>许红霞</td><td>女</td><td>1966-2-12</td><td>副教授</td></tr><tr><td>000007</td><td>徐永军</td><td>男</td><td>1962-1-24</td><td>教授</td></tr><tr><td>000008</td><td>李桂菁</td><td>女</td><td>1960-12-15</td><td>教授</td></tr><tr><td>000009</td><td>王一凡</td><td>女</td><td>1974-12-8</td><td>讲师</td></tr><tr><td>000010</td><td>田峰</td><td>男</td><td>1988-1-18</td><td>助教</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher (tno, tname, tsex, tbirthday, ttitle) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;000001&#x27;</span>, <span class="string">&#x27;李英&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1975-11-3&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000002&#x27;</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1969-3-2&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000003&#x27;</span>, <span class="string">&#x27;张朋&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1970-2-13&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000004&#x27;</span>, <span class="string">&#x27;陈为军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1985-8-14&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000005&#x27;</span>, <span class="string">&#x27;宋浩然&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1976-4-23&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000006&#x27;</span>, <span class="string">&#x27;许红霞&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1966-2-12&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000007&#x27;</span>, <span class="string">&#x27;徐永军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1962-1-24&#x27;</span>, <span class="string">&#x27;教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000008&#x27;</span>, <span class="string">&#x27;李桂菁&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1960-12-15&#x27;</span>, <span class="string">&#x27;教授&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000009&#x27;</span>, <span class="string">&#x27;王一凡&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1974-12-8&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;000010&#x27;</span>, <span class="string">&#x27;田峰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1988-1-18&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="表teaching"><a href="#表teaching" class="headerlink" title="表teaching"></a>表teaching</h2><div class="table-container"><table><thead><tr><th>cno</th><th>tno</th><th>Language</th></tr></thead><tbody><tr><td>800001</td><td>000001</td><td>English</td></tr><tr><td>800002</td><td>000002</td><td>Chinese</td></tr><tr><td>800003</td><td>000002</td><td>Bilingual</td></tr><tr><td>810011</td><td>000003</td><td>Chinese</td></tr><tr><td>810013</td><td>000004</td><td>English</td></tr><tr><td>800001</td><td>000005</td><td>Chinese</td></tr><tr><td>800002</td><td>000006</td><td>Chinese</td></tr><tr><td>800003</td><td>000007</td><td>English</td></tr><tr><td>810011</td><td>000007</td><td>English</td></tr><tr><td>810013</td><td>000008</td><td>Bilingual</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teaching (cno, tno, <span class="keyword">language</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">800001</span>, <span class="number">1</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="number">2</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="number">2</span>, <span class="string">&#x27;Bilingual&#x27;</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="number">3</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="number">4</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">800001</span>, <span class="number">5</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800002</span>, <span class="number">6</span>, <span class="string">&#x27;Chinese&#x27;</span>),</span><br><span class="line">(<span class="number">800003</span>, <span class="number">7</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">810011</span>, <span class="number">7</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">(<span class="number">810013</span>, <span class="number">8</span>, <span class="string">&#x27;Bilingual&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="简单的数据操作"><a href="#简单的数据操作" class="headerlink" title="简单的数据操作"></a>简单的数据操作</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ul><li>[x] 查询所有同学的所有基本信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2></li><li>[x] 查询所有男同学的学号、姓名、出生日期。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sbirthday <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2></li><li>[x] 在基本表 <code>student</code> 中增加 <code>addr</code>：<code>varchar(20)</code> 列，然后将其长度由 20 改为 25。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> addr <span class="type">VARCHAR</span>(<span class="number">20</span>) comment &quot;地址&quot;;     <span class="comment">-- 添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY <span class="keyword">COLUMN</span> addr <span class="type">VARCHAR</span>(<span class="number">25</span>) comment &quot;地址&quot;;  <span class="comment">-- 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> addr;   <span class="comment">-- 删除</span></span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2></li><li>[x] 在基本表 <code>student</code> 中增加 <code>register_date</code>：<code>date</code> 列，并为其设置默认值为当前系统时间，再删除该列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> register_date DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;日期&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> register_date;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2></li><li>[x] 在基本表 <code>student</code> 中为 <code>age</code> 列，增加默认值为 <code>18</code>。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2></li><li>[x] 在基本表 sc 中将 sname 设置为唯一值（unique）。（应该是student表）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_sname <span class="keyword">UNIQUE</span> (sname);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_sname <span class="keyword">UNIQUE</span> (sname); <span class="comment">-- 删除唯一索引</span></span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2></li><li>[x] 在基本表 course 中创建索引：（sno，cno desc）。（应该是sc表）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sno_cno_desc <span class="keyword">ON</span> course (sno, cno <span class="keyword">DESC</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除受到外键影响</span></span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2></li><li>[x] 在基本表 student 中增加约束条件：男生年龄小于 23 岁，女生年龄小于 21 岁。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE sbirthday sage <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> check_age <span class="keyword">CHECK</span> (</span><br><span class="line">    (ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> sage <span class="operator">&lt;</span> <span class="number">23</span>) <span class="keyword">OR</span></span><br><span class="line">    (ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sage <span class="operator">&lt;</span> <span class="number">21</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2></li><li>[x] 创建视图 View_80，存放成绩高于 80 分的选课信息，显示学号、课程号和成绩，使用 WITH CHECK OPTION 选项。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> View_80 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> grade <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2></li><li>[x] 在视图 View_80 中查询成绩高于 90 的选课信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> View_80 <span class="keyword">WHERE</span> grade <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2></li><li>[x] 在视图 View_80 中依次插入如下元组：08301168，810011，87（可插入成功）</li></ul><p>这个错误是由于外键约束导致的。在尝试向View_80视图插入数据时，MySQL检查了sc表的外键约束sc_ibfk_1。这个约束要求，sc表中的sno字段的值必须在student表的sno字段的值中存在。换句话说，你不能为一个不存在的学生分配成绩。</p><p>错误信息表明，你尝试插入的sno值（‘08301168’）在student表中不存在。你需要先确保student表中存在这个学生号，然后再尝试插入数据。</p><p>你可以使用以下SQL查询来检查student表中是否存在这个学生号：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span>;</span><br></pre></td></tr></table></figure><br>如果这个查询没有返回任何结果，那么你需要先向student表中插入这个学生号，然后再尝试向View_80插入数据。</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><ul><li>[x] 在视图 View_80 中依次修改如下元组：将（08301168，810011）所对应的成绩改为 90（可修改成功）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> View_80 <span class="keyword">SET</span> grade <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span> <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2></li><li>[x] 在视图 View_80 中删除如下元组：sno=08301168，cno=810011<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> View_80 <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="string">&#x27;08301168&#x27;</span> <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2></li><li>[x] 查询所有在“1980-01-01”之前出生的女同学的学号、姓名、性别、出生日期。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, ssex, sbirthday </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sbirthday <span class="operator">&lt;</span> <span class="string">&#x27;1980-01-01&#x27;</span> <span class="keyword">AND</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2></li><li>[x] 查询所有姓“李”的男同学的学号、姓名、性别、出生日期。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, ssex, sbirthday </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span> <span class="keyword">AND</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2></li><li>[x] 查询所有用英文授课的教师号、姓名及英语授课的门数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.tno, t.tname, <span class="built_in">COUNT</span>(te.cno) <span class="keyword">AS</span> <span class="string">&#x27;英语授课的门数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> teacher t</span><br><span class="line"><span class="keyword">JOIN</span> teaching te <span class="keyword">ON</span> t.tno <span class="operator">=</span> te.tno</span><br><span class="line"><span class="keyword">WHERE</span> te.language <span class="operator">=</span> <span class="string">&#x27;English&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.tno, t.tname;</span><br></pre></td></tr></table></figure><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2></li><li>[x] 查询所有职称不是“讲师”的教师号、姓名、职称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno, tname, ttitle </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">&lt;&gt;</span> <span class="string">&#x27;讲师&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tno, tname, ttitle </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">!=</span> <span class="string">&#x27;讲师&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2></li><li>[x] 查询虽然选修了课程，但未参加考试的所有同学的学号。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno </span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2></li><li>[x] 查询所有考试不及格的同学的学号、成绩，并按成绩降序排列。（降序desc升序asc并且默认为升序）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, grade </span><br><span class="line"><span class="keyword">FROM</span> sc </span><br><span class="line"><span class="keyword">WHERE</span> grade <span class="operator">&lt;</span> <span class="number">60</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="20"><a href="#20" class="headerlink" title="20"></a>20</h2></li><li>[x] 查询在1970年出生的教师号、姓名、出生日期。（也可以改成月份和年份）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno, tname, tbirthday </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(tbirthday) <span class="operator">=</span> <span class="number">1970</span>;</span><br></pre></td></tr></table></figure><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2></li><li>[x] 查询各个课程号的选课人数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cno, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br></pre></td></tr></table></figure><h2 id="22"><a href="#22" class="headerlink" title="22"></a>22</h2></li><li>[x] 查询讲授2门课以上的教师号。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tno</span><br><span class="line"><span class="keyword">FROM</span> teaching</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="23"><a href="#23" class="headerlink" title="23"></a>23</h2></li><li>[x] 查询选修了 800001 课程的学生平均分数、最低分数和最高分数。（此处课程号应为810011）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(grade), <span class="built_in">min</span>(grade), <span class="built_in">max</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="operator">=</span> <span class="string">&#x27;810011&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="24"><a href="#24" class="headerlink" title="24"></a>24</h2></li><li>[x] 查询1960年以后出生的，职称为讲师的教师的姓名、出生日期，并按出生日期升序排列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname, tbirthday </span><br><span class="line"><span class="keyword">FROM</span> teacher </span><br><span class="line"><span class="keyword">WHERE</span> ttitle <span class="operator">=</span> <span class="string">&#x27;讲师&#x27;</span> <span class="keyword">AND</span> tbirthday <span class="operator">&gt;</span> <span class="string">&#x27;1960-01-01&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tbirthday <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h1 id="复杂数据查询-3问题"><a href="#复杂数据查询-3问题" class="headerlink" title="复杂数据查询 3问题"></a>复杂数据查询 3问题</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h2></li><li>[x] （1）创建视图 new_View 显示所有同学的选课及成绩情况，列出学生的学号、姓名、班号、课程名称和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库中的所有视图</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">IN</span> your_database_name <span class="keyword">WHERE</span> TABLE_TYPE <span class="keyword">LIKE</span> <span class="string">&#x27;VIEW&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_you_create;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AS关键字于定义视图结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> new_View <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, s.classno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno;</span><br></pre></td></tr></table></figure><h2 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h2></li><li>[x] （2）在视图 new_View 中查询“软件0801”班的同学的选课及成绩情况，显示学号、姓名、课程名称、成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, cname, grade</span><br><span class="line"><span class="keyword">FROM</span> new_View</span><br><span class="line"><span class="keyword">WHERE</span> classno <span class="operator">=</span> <span class="string">&#x27;Rj0801&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h2></li><li>[x] （3）在视图 new_View 中插入如下元组：08300010，李在，R,j0801，数据库系统，88（此为不成功的操作）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">## <span class="number">4</span></span><br><span class="line"><span class="operator">-</span> [x] （<span class="number">4</span>）查询所有同学的学分情况（假设课程成绩<span class="operator">&gt;=</span><span class="number">60</span>时可获得该门课程的学分），显示学号、姓名、总学分（用 <span class="keyword">JOIN</span>）。</span><br><span class="line">```<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, <span class="built_in">SUM</span>(IF(sc.grade <span class="operator">&gt;=</span> <span class="number">60</span>, c.ccredit, <span class="number">0</span>)) <span class="keyword">AS</span> total_credit</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.sno, s.sname;</span><br></pre></td></tr></table></figure><h2 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h2></li><li>[x] （5）查询所有同学的平均成绩及选课门数，显示学号、姓名、平均成绩、选课门数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, <span class="built_in">AVG</span>(sc.grade) <span class="keyword">AS</span> avg_grade, <span class="built_in">COUNT</span>(sc.cno) <span class="keyword">AS</span> course_count</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.sno, s.sname;</span><br></pre></td></tr></table></figure><h2 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h2></li><li>[x] （6）查询所有选修了课程但未参加考试的所有同学及相应的课程，显示学号、姓名、课程号、课程名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, sc.cno, c.cname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="7-1"><a href="#7-1" class="headerlink" title="7"></a>7</h2></li><li>[x] （7）查询所有选修了课程但考试不及格的所有同学及相应的课程，显示学号、姓名、课程号、课程名称、成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, sc.cno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><h2 id="8-1"><a href="#8-1" class="headerlink" title="8"></a>8</h2></li><li>[x] （8）查询选修了课程名为“程序设计语言”的所有同学及成绩情况，显示学生姓名、课程成绩（用 ANY 运算符）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cno <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;程序设计语言&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h2></li><li>[x] （9）查询“软件开发系”的所有同学及成绩情况，显示学号、姓名、班级名称、课程号、课程名称、成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, cl.classname, sc.cno, c.cname, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">JOIN</span> class cl <span class="keyword">ON</span> s.classno <span class="operator">=</span> cl.classno</span><br><span class="line"><span class="keyword">WHERE</span> cl.classdept <span class="operator">=</span> <span class="string">&#x27;软件开发&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="10-1"><a href="#10-1" class="headerlink" title="10"></a>10</h1></li><li>[x] （10）查询所有教师的任课情况，显示教师姓名、课程名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.tname, c.cname</span><br><span class="line"><span class="keyword">FROM</span> teacher t</span><br><span class="line"><span class="keyword">JOIN</span> teaching tc <span class="keyword">ON</span> t.tno <span class="operator">=</span> tc.tno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> tc.cno <span class="operator">=</span> c.cno;</span><br></pre></td></tr></table></figure><h2 id="11-1"><a href="#11-1" class="headerlink" title="11"></a>11</h2></li><li>[x] （11）查询成绩低于同门课程平均成绩的信息，显示学生学号、姓名、课程名称及低于平均成绩的值（即比平均成绩低多少）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student.sno <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    student.sname <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    course.cname <span class="keyword">AS</span> <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    (avg_grade <span class="operator">-</span> sc.grade) <span class="keyword">AS</span> <span class="string">&#x27;低于平均成绩的值&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">ON</span> sc.cno <span class="operator">=</span> course.cno</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> cno) <span class="keyword">AS</span> avg_sc <span class="keyword">ON</span> sc.cno <span class="operator">=</span> avg_sc.cno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&lt;</span> avg_sc.avg_grade;</span><br></pre></td></tr></table></figure><h2 id="12-1"><a href="#12-1" class="headerlink" title="12"></a>12</h2></li><li>[x] （12）查询和“葛畅”在同一班级的同学的姓名（使用子查询）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> classno <span class="operator">=</span> (<span class="keyword">SELECT</span> classno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;葛畅&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="13-1"><a href="#13-1" class="headerlink" title="13"></a>13</h2></li><li>[x] （13）查询没有选修“计算机基础”课程的学生姓名（用 NOT EXISTS）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> s.sno <span class="operator">=</span> sc.sno <span class="keyword">AND</span> sc.cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="14-1"><a href="#14-1" class="headerlink" title="14"></a>14</h2></li><li>[x] （14）查询主讲“数据库系统”和主讲“数据结构”的教师姓名（用 UNION）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据库系统&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据结构&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="15-1"><a href="#15-1" class="headerlink" title="15"></a>15</h2></li><li>[x] （15）查询讲授了所有课程的教师的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> tno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> tno</span><br><span class="line">    <span class="keyword">FROM</span> teaching</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> tno</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cno</span><br><span class="line"></span><br><span class="line">) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="16-1"><a href="#16-1" class="headerlink" title="16"></a>16</h2></li><li>[x] （16）查询同时选修学课程800001和800002的女同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc sc1 <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc1.sno <span class="keyword">AND</span> sc1.cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span></span><br><span class="line"><span class="keyword">JOIN</span> sc sc2 <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc2.sno <span class="keyword">AND</span> sc2.cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="17-1"><a href="#17-1" class="headerlink" title="17"></a>17</h2></li><li>[x] （17）查询既未选修课程800001又未选修课程800002的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800001&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="18-1"><a href="#18-1" class="headerlink" title="18"></a>18</h2></li><li>[x] （18）查询有一门课程成绩为95分的女同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sc.grade <span class="operator">=</span> <span class="number">95</span>;</span><br></pre></td></tr></table></figure><h2 id="19-1"><a href="#19-1" class="headerlink" title="19"></a>19</h2></li><li>[x] （19）查询选课数量大于3门的女同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> course_count</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">) <span class="keyword">AS</span> course_counts</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">ON</span> course_counts.sno <span class="operator">=</span> student.sno</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> course_count <span class="operator">&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="20-1"><a href="#20-1" class="headerlink" title="20"></a>20</h2></li><li>[x] （20）查询平均成绩大于80分的男同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student.sname <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno) <span class="keyword">AS</span> avg_sc <span class="keyword">ON</span> student.sno <span class="operator">=</span> avg_sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> avg_sc.avg_grade <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> student.ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="21-1"><a href="#21-1" class="headerlink" title="21"></a>21</h2></li><li>[x] （21）查询徐永军老师所教的每一门课程的平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cname, <span class="built_in">AVG</span>(sc.grade) <span class="keyword">AS</span> avg_grade</span><br><span class="line"><span class="keyword">FROM</span> teaching t</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> t.cno <span class="operator">=</span> sc.cno</span><br><span class="line"><span class="keyword">JOIN</span> course c <span class="keyword">ON</span> t.cno <span class="operator">=</span> c.cno</span><br><span class="line"><span class="keyword">WHERE</span> t.tno <span class="operator">=</span> <span class="string">&#x27;000007&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cname;</span><br></pre></td></tr></table></figure><h2 id="22-1"><a href="#22-1" class="headerlink" title="22"></a>22</h2></li><li>[x] （22）查询男同学每一个年龄组的人数，要求按人数升序输出人数超过20人的年龄组。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>((<span class="keyword">YEAR</span>(<span class="built_in">CURRENT_DATE</span>) <span class="operator">-</span> <span class="keyword">YEAR</span>(sbirthday)) <span class="operator">/</span> <span class="number">10</span>) <span class="keyword">AS</span> age_group, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> age_group</span><br><span class="line"><span class="keyword">HAVING</span> student_count <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_count <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h2 id="23-1"><a href="#23-1" class="headerlink" title="23"></a>23</h2></li><li>[x] （23）查询每门课程成绩都大于90分的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> course c</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> sc</span><br><span class="line">        <span class="keyword">WHERE</span> s.sno <span class="operator">=</span> sc.sno <span class="keyword">AND</span> c.cno <span class="operator">=</span> sc.cno <span class="keyword">AND</span> grade <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="24-1"><a href="#24-1" class="headerlink" title="24"></a>24</h2></li><li>[x] （24）查询比所有女同学年龄要大的男同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> <span class="keyword">YEAR</span>(sbirthday) <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="keyword">YEAR</span>(sbirthday))</span><br><span class="line">    <span class="keyword">FROM</span> student</span><br><span class="line">    <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="25"><a href="#25" class="headerlink" title="25"></a>25</h2></li><li>[x] （25）查询未选修 800002 课程的女同学的姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;800002&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="26"><a href="#26" class="headerlink" title="26"></a>26</h2></li><li>[x] （26）查询所有课程成绩都及格的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> grade <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="27"><a href="#27" class="headerlink" title="27"></a>27</h2></li><li>[x] （27）查询选修课所有课程的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cno) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="28"><a href="#28" class="headerlink" title="28"></a>28</h2></li><li>[x] （28）查询选修了葛畅同学所选修的所有课程的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno <span class="operator">=</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;葛畅&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="29"><a href="#29" class="headerlink" title="29"></a>29</h2></li><li>[x] （29）查询平均成绩最高的学生姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span> avg_grade</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_grade <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> highest_avg_grade</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">ON</span> highest_avg_grade.sno <span class="operator">=</span> student.sno;</span><br></pre></td></tr></table></figure><h2 id="30"><a href="#30" class="headerlink" title="30"></a>30</h2></li><li>[x] （30）找出比所在班级平均成绩高的学生信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, s.sname, s.classno, sc.grade</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.grade <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sc.grade)</span><br><span class="line">    <span class="keyword">FROM</span> student s2</span><br><span class="line">    <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s2.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">WHERE</span> s2.classno <span class="operator">=</span> s.classno</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s2.classno</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="数据操纵语言DML"><a href="#数据操纵语言DML" class="headerlink" title="数据操纵语言DML"></a>数据操纵语言DML</h1></li><li><p>[x] （1） 将选修徐永军老师所教课程的女同学的成绩提高5%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> teaching <span class="keyword">WHERE</span> tno <span class="operator">=</span> <span class="string">&#x27;000007&#x27;</span>) <span class="keyword">AND</span> sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（2） 在基本表Student中检索每一门课程成绩都大于等于80分的学生学号、姓名、性别，并把检索到的值送往另一个已存在的基本表STUD（S#，SNAME，SEX）。</p></li><li><p>[x] （3） 在基本表sc中删除尚无成绩的选课记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li><li>[x] （4） 把王威同学的学习选课和成绩全部删除。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno <span class="operator">=</span> (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="operator">=</span> <span class="string">&#x27;王威&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>[x] （5） 把选修数据结构课不及格的成绩全改为空值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;数据结构&#x27;</span>) <span class="keyword">AND</span> grade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure></li><li>[x] （6） 把低于总平均成绩的女同学的成绩提高5%<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_table <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> s.ssex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">AND</span> sc.grade <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(grade)</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> temp_table</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> TEMPORARY <span class="keyword">TABLE</span> temp_table;</span><br><span class="line"></span><br><span class="line">MySQL不允许在<span class="keyword">UPDATE</span>语句的<span class="keyword">FROM</span>子句中直接引用目标表。我们需要使用一个临时表或者将子查询结果保存到一个变量中来解决这个问题。</span><br><span class="line"></span><br><span class="line">这段代码首先创建一个临时表，保存所有低于平均成绩的女同学的学号。然后，它更新sc表中的成绩，将所有在临时表中的学号对应的成绩提高<span class="number">5</span><span class="operator">%</span>。最后，它删除临时表。</span><br></pre></td></tr></table></figure></li><li>[x] （7） 在基本表SC中修改800004课程的成绩，若成绩小于等于75分时提高5%，若成绩大于75分时提高4%（用两个UPDATE语句实现）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.05</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">800004</span> <span class="keyword">AND</span> grade <span class="operator">&lt;=</span> <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> sc</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> grade <span class="operator">*</span> <span class="number">1.04</span></span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">800004</span> <span class="keyword">AND</span> grade <span class="operator">&gt;</span> <span class="number">75</span>;</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1></li><li>[x] （1） 创建一个能向学生表student中插入一条记录的存储过程insert_student，该过程需要5个参数，分别用来传递学号、姓名、性别、出生日期、班级号。写出调用存储过程insert_student的SQL语句，向数据表student中插入一个新同学，并提供相应的实参值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_student(<span class="keyword">in</span> p_sno <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_sname <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_ssex <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_sbirthday <span class="type">date</span>, <span class="keyword">in</span> p_classno <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student(sno, sname, ssex, sbirthday, classno)</span><br><span class="line">    <span class="keyword">values</span> (p_sno, p_sname, p_ssex, p_sbirthday, p_classno);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> insert_student(<span class="string">&#x27;20301104&#x27;</span>, <span class="string">&#x27;廖学武&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-06-29&#x27;</span>, <span class="string">&#x27;Rj0801&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>[x] （2） 创建一个向课程表course中插入一门新课程的存储过程insert_course，该存储过程需要三个参数，分别用来传递课程号、课程名、学分，但允许参数“学分”的默认值为4，即当调用存储过程insert_course时，未给第三个参数“学分”提供实参值时，存储过程将按默认值4进行运算。<br>调用存储过程insert_course，向课程表course中插入一门新课程。分两种情况（给出第三个参数和未给出第三个参数）写出相应的SQL命令，并比较结果。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_course(<span class="keyword">in</span> p_cno <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_cname <span class="type">varchar</span>(<span class="number">20</span>), <span class="keyword">in</span> p_ccredit <span class="type">smallint</span> <span class="keyword">default</span> <span class="number">4</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if ccredit <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> p_ccredit <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> course(cno, cname, ccredit) <span class="keyword">values</span>(p_cno, p_cname, p_ccredit);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> insert_course(<span class="string">&#x27;CS101&#x27;</span>, <span class="string">&#x27;计算机科学&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">call</span> insert_course(<span class="string">&#x27;CS102&#x27;</span>, <span class="string">&#x27;数据结构&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li>[x] （3） 创建一个名称为query_student的存储过程，该存储过程的功能是从数据表student中根据学号查询某一同学的姓名、性别、出生日期、班级号。<br>调用存储过程query_student，查询学号为“08301050”的姓名、性别、出生日期、班级号，并写出完成此功能的SQL命令。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> query_student(<span class="keyword">in</span> p_sno <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> sname, ssex, sbirthday, classno <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> p_sno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> query_student(<span class="string">&#x27;08300010&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>[x] （4） 建立存储过程，输出平均成绩大于80分的学生的姓名、性别、年龄和平均成绩。调用该存储过程，并输出相应的结果。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_low_course()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> student.sname <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">           student.ssex <span class="keyword">as</span> <span class="string">&#x27;性别&#x27;</span>, </span><br><span class="line">           <span class="keyword">year</span>(curdate()) <span class="operator">-</span> <span class="keyword">year</span>(student.sbirthday) <span class="keyword">as</span> <span class="string">&#x27;年龄&#x27;</span>, </span><br><span class="line">           <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> <span class="string">&#x27;平均成绩&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> student.sno</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">avg</span>(sc.grade) <span class="operator">&lt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_high_achievers();</span><br></pre></td></tr></table></figure></li><li>[x] （5） 写存储过程显示所有选择了与给定学生姓名选择的全部课程的学生的学号、姓名、选课数、平均成绩、总学分，调用该存储过程，并根据指定的学生姓名输出与其相应的结果。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_student_info(<span class="keyword">in</span> student_name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        s.sno <span class="keyword">as</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">        s.sname <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">        <span class="built_in">count</span>(sc.cno) <span class="keyword">as</span> <span class="string">&#x27;选课数&#x27;</span>,</span><br><span class="line">        <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> <span class="string">&#x27;平均成绩&#x27;</span>,</span><br><span class="line">        <span class="built_in">sum</span>(c.ccredit) <span class="keyword">as</span> <span class="string">&#x27;总学分&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> student s</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">join</span> course c <span class="keyword">on</span> sc.cno <span class="operator">=</span> c.cno</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        s.sno <span class="keyword">in</span> (</span><br><span class="line">            <span class="keyword">select</span> sc.sno</span><br><span class="line">            <span class="keyword">from</span> student s</span><br><span class="line">            <span class="keyword">join</span> sc <span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line">            <span class="keyword">where</span> s.sname <span class="operator">=</span> student_name</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        s.sno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_student_info(<span class="string">&#x27;胡贤斌&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>[x]（6） 写存储过程显示所有平均成绩小于给定班级号的平均成绩的学生的学号、</li></ul><p>名字、平均成绩</p><p>调用该存储过程，并根据指定的班级号输出与其相应的结果。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> get_students_below_class_average(<span class="keyword">in</span> class_no <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 计算给定班级的平均成绩</span></span><br><span class="line">    <span class="keyword">declare</span> class_avg_grade <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sc.grade) <span class="keyword">into</span> class_avg_grade</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">where</span> student.classno <span class="operator">=</span> class_no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 查询所有平均成绩小于给定班级平均成绩的学生</span></span><br><span class="line">    <span class="keyword">select</span> student.sno, student.sname, <span class="built_in">avg</span>(sc.grade) <span class="keyword">as</span> avg_grade</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno <span class="operator">=</span> sc.sno</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> student.sno, student.sname</span><br><span class="line">    <span class="keyword">having</span> avg_grade <span class="operator">&lt;</span> class_avg_grade;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> get_students_below_class_average(<span class="string">&#x27;Rj0801&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h1 id="触发器-1-5有问题"><a href="#触发器-1-5有问题" class="headerlink" title="触发器 1/5有问题"></a>触发器 1/5有问题</h1><ul><li>[x] （1） 创建一个当向学生表student中插入一新同学时能自动列出全部同学信息的触发器display_trigger。执行存储过程insert_student，向学生表中插入一个新同学，看触发器display_trigger是否被触发。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> display_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> triggers; <span class="comment">-- 查看已创建的触发器</span></span><br></pre></td></tr></table></figure></li><li>[x] （2） 创建一个触发器，当向学生表student中插入一新同学时能自动更新（增加1）class班级表中该生所在班级的总人数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_count_add</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> new.classno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> if <span class="keyword">exists</span> update_student_count;    <span class="comment">-- 删除触发器</span></span><br></pre></td></tr></table></figure></li><li>[x] （3） 创建一个触发器，当从学生表student中删除一个同学时能自动更新（减1）class班级表中该生所在班级的总人数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_number_delete</span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> old.classno;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li>[x] （4） 创建一个触发器，当将学生表student中某一个同学从一个班级改为另一个班级时，能自动更新class班级表中该生所在原来班级的总人数（减1）和新班级的总人数（增加1）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> update_student_count</span><br><span class="line">after <span class="keyword">update</span> <span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if old.classno <span class="operator">!=</span> new.classno <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> old.classno;</span><br><span class="line">        <span class="keyword">update</span> class <span class="keyword">set</span> studentnumber <span class="operator">=</span> studentnumber <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> classno <span class="operator">=</span> new.classno;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li>[x] （5） 建一个触发器，当往SC表中插入一个在STUDENT 表中不存在的学号SNO时，就往STUDENT表中插入该学号，其他属性全是NULL<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> insert_student</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> new.sno) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> student (sno) <span class="keyword">values</span> (new.sno);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li>[x] （6） 写一个触发器阻止将学生成绩降低<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> prevent_grade before <span class="keyword">update</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if new.grade <span class="operator">&gt;</span> old.grade <span class="keyword">then</span></span><br><span class="line">        signal <span class="keyword">sqlstate</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">        <span class="keyword">set</span> message_text <span class="operator">=</span> <span class="string">&#x27;cannot asc student grade&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li>[x] （7） 在sc表上创建触发器，只要有人选修的课程超过3门，就中断操作并提示警告<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> check_course_limit</span><br><span class="line">before <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> course_count <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> course_count <span class="keyword">from</span> sc <span class="keyword">where</span> sno <span class="operator">=</span> new.sno;</span><br><span class="line">    if course_count <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">        signal <span class="keyword">sqlstate</span> <span class="string">&#x27;45000&#x27;</span> <span class="keyword">set</span> message_text <span class="operator">=</span> <span class="string">&#x27;一个学生不能选修超过3门课程&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li>[x] （8） 创建一个触发器，当往SC表插入选修的课程时自动将该课程的学分累加到STUDENT表的该生的总学分（TOTALCREDIT）中，当从SC表中退课时自动从STUDENT表的该生的总学分中减去该课程的学分。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当插入新的选课记录时，增加学生的总学分</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> increase_totalcredit</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> student</span><br><span class="line">    <span class="keyword">set</span> totalcredit <span class="operator">=</span> totalcredit <span class="operator">+</span> (<span class="keyword">select</span> ccredit <span class="keyword">from</span> course <span class="keyword">where</span> cno <span class="operator">=</span> new.cno)</span><br><span class="line">    <span class="keyword">where</span> sno <span class="operator">=</span> new.sno;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当删除选课记录时，减少学生的总学分</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> decrease_totalcredit</span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> student</span><br><span class="line">    <span class="keyword">set</span> totalcredit <span class="operator">=</span> totalcredit <span class="operator">-</span> (<span class="keyword">select</span> ccredit <span class="keyword">from</span> course <span class="keyword">where</span> cno <span class="operator">=</span> old.cno)</span><br><span class="line">    <span class="keyword">where</span> sno <span class="operator">=</span> old.sno;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">SQL语句与基本语法</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="SQL" scheme="http://chfychin.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Office新版安装与激活</title>
    <link href="http://chfychin.cn/posts/db289af5.html"/>
    <id>http://chfychin.cn/posts/db289af5.html</id>
    <published>2024-09-01T15:39:46.000Z</published>
    <updated>2024-09-01T16:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Office安装"><a href="#Office安装" class="headerlink" title="Office安装"></a>Office安装</h1><p><a href="https://otp.landian.vip/zh-cn/">Office Tool下载</a><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/1.jpg" alt="img"><br>解压后右键管理员身份运行<code>Office Tool Plus.exe</code><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/2.jpg" alt="img"><br><strong>打开后会自动更新，若是更新卡着不动关防火墙</strong><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/3.jpg" alt="img"><br>本机若是有Office需要先移除<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/4.jpg" alt="img"><br>添加产品，选择自己想要安装的版本及应用程序和语言<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/5.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/6.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/7.jpg" alt="img"><br>一键部署，等待部署完成，即安装完成Office<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/8.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/9.png" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/10.jpg" alt="img"><br>部署完成，打开Word显示未激活<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/11.jpg" alt="img"></p><h1 id="Office激活"><a href="#Office激活" class="headerlink" title="Office激活"></a>Office激活</h1><p>安装许可证，选择与前面安装版本对应的许可证安装<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/12.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/13.png" alt="img"><br>设置KMS主机为<code>kms.loli.beer</code><br><img src="https://tuchuang.voooe.cn/images/2024/09/01/14..jpg" alt="img"><br>一键激活<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/15.jpg" alt="img"><br>激活完成<br><img src="https://tuchuang.voooe.cn/images/2024/09/01/16.jpg" alt="img"><br><strong>若是安装许可证失败或者激活失败，可使用 <a href="https://www.chfychin.cn/posts/51605980.html"><code>power shell</code></a> 激活</strong></p>]]></content>
    
    
    <summary type="html">Office新版安装与激活</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="Office" scheme="http://chfychin.cn/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>cpeditor</title>
    <link href="http://chfychin.cn/posts/aa1df803.html"/>
    <id>http://chfychin.cn/posts/aa1df803.html</id>
    <published>2024-08-19T11:20:42.000Z</published>
    <updated>2024-08-20T14:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cpeditor</p><h2 id="Cpeditor-编辑器下载"><a href="#Cpeditor-编辑器下载" class="headerlink" title="Cpeditor 编辑器下载"></a>Cpeditor 编辑器下载</h2><p>1、进<a href="https://cpeditor.org/">cpeditor编辑器官网</a></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/3A08B2E067B1736865E5890D2CDBFB51.png" alt="3A08B2E067B1736865E5890D2CDBFB51.png"></p><p>2、选择合适的版本下载，站长使用：<strong>cpeditor-6.11.2-windows-x64-setup-with-gcc-13.2.0-LLVM-17.0.6.exe (224 MB)</strong></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/A169AC4093179D8232D71525A45BA580.png" alt="A169AC4093179D8232D71525A45BA580.png"></p><p>3、傻瓜式安装</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/6A5A6AB4144EDDC1FA60BA23C00C9FE6.png" alt="6A5A6AB4144EDDC1FA60BA23C00C9FE6.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/AA784F263B3BE5E151421473D15CE121.png" alt="AA784F263B3BE5E151421473D15CE121.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/4A82E97DF7C2774450E8963C8B0C6325.png" alt="4A82E97DF7C2774450E8963C8B0C6325.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/7E6A95E0D3C8D5CACFE6411A0BBD6437.png" alt="7E6A95E0D3C8D5CACFE6411A0BBD6437.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/44C5C5444FCC0652E94C581CD7D0C077.png" alt="44C5C5444FCC0652E94C581CD7D0C077.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/7A517DABEF138BD69D37B37980589268.png" alt="7A517DABEF138BD69D37B37980589268.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/0A1C16FFD7391738123951902E0DEC65.png" alt="0A1C16FFD7391738123951902E0DEC65.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/488A0AB17C565509B7E6174649BDCD22.png" alt="488A0AB17C565509B7E6174649BDCD22.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>1、找到自己安装目录下(或者别处的 mingw64)的 bin 目录，站长的：<strong>C:\Program Files (x86)\MySoftWare\CP-Editor\cpeditor\mingw64\bin</strong><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/6738B7AFA11617200AF49E8055767B70.png" alt="6738B7AFA11617200AF49E8055767B70.png"></p><p>2、在环境变量中添加，点开 PATH 环境变量，添加新的路径</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/811CA38FE0BF775FF833204FA81ACF20.png" alt="811CA38FE0BF775FF833204FA81ACF20.png"></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/406F3C106C6449FE3CCC304342FDFFD8.png" alt="406F3C106C6449FE3CCC304342FDFFD8.png"></p><p>3、验证是否配置成功，在 cmd 中输入 g++ -v 查看 g++ 版本信息，站长用的gcc-11.2.0</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/075E4DB0D069DD1B639784151FC5BDCC.png" alt="075E4DB0D069DD1B639784151FC5BDCC.png"></p><h2 id="配置个人化的-CP-Editor"><a href="#配置个人化的-CP-Editor" class="headerlink" title="配置个人化的 CP Editor"></a>配置个人化的 CP Editor</h2><p>1、点击选项中的设置按钮</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/5A46E171C7DD7B687092A69F604578E3.png" alt="5A46E171C7DD7B687092A69F604578E3.png"></p><p>2、编辑器外观的设置</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/D15B455378087063F7A5228283918229.png" alt="D15B455378087063F7A5228283918229.png"><br><img src="https://tuchuang.voooe.cn/images/2024/08/20/9B2AB28D8874750AEAE1E6675C1AE7D7.png" alt="9B2AB28D8874750AEAE1E6675C1AE7D7.png"></p><p>3、C++配置<br><strong>c++ -Wall -std=c++14 -O2</strong>：用于开启 c++14 和 O2 优化<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/00471A08B785873A6CDEFBCCD4AA1F28.png" alt="00471A08B785873A6CDEFBCCD4AA1F28.png"><br>模板位置<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/9D286981FBD4295924B1FBBA201C6387.png" alt="9D286981FBD4295924B1FBBA201C6387.png"><br>个性化快捷键<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/AB17D34B5BB829799D282D48EC4FA4CB.png" alt="AB17D34B5BB829799D282D48EC4FA4CB.png"></p><p>4、设置 C++ Server<br>C++ Server 会进行一定程度的代码提示和错误提示<br><img src="https://tuchuang.voooe.cn/images/2024/08/20/07FD84ED50E90D9185D3778C0CED0807.png" alt="07FD84ED50E90D9185D3778C0CED0807.png"></p><h2 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h2><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/6B42F384D9CA048ACAE25D2E732230F1.png" alt="6B42F384D9CA048ACAE25D2E732230F1.png"></p>]]></content>
    
    
    <summary type="html">cpeditor安装与配置</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="cpeditor" scheme="http://chfychin.cn/tags/cpeditor/"/>
    
  </entry>
  
  <entry>
    <title>激活Office和Windows</title>
    <link href="http://chfychin.cn/posts/51605980.html"/>
    <id>http://chfychin.cn/posts/51605980.html</id>
    <published>2024-08-14T04:56:34.000Z</published>
    <updated>2024-08-15T05:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、免费激活Office办公软件"><a href="#一、免费激活Office办公软件" class="headerlink" title="一、免费激活Office办公软件"></a>一、免费激活Office办公软件</h1><p>若系统没安装 Office 先去 <a href="https://gravesoft.dev/office_c2r_links#chinese-simplified-zh-cn">下载安装</a><br><img src="https://wp-oss.hcolor.pro/2024/08/20240818074112586.png" alt="img"><br>1.打开 powershell，先输入以下代码，然后选择是<br>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex<br>2.根据以下选项解释选择’2’激活Office</p><p>————————————————————————————————————————————————————</p><p>Activation Methods：<br>[1] HWID         |  Windows            |  Permanent<br>[2] Ohook        |  Office             |  Permanent<br>[3] KMS38        |  Windows            |  Year 2038<br>[4] Online KMS   |  Windows / office   |   180 Days</p><p>————————————————————————————————————————————————————</p><p>[5] Activation Status<br>[6] Troubleshoot<br>[7] Extras<br>[8] Help<br>[0] Exit</p><p>————————————————————————————————————————————————————</p><p>Enter a menu option in the Keyboard [1, 2, 3, 4, 5, 6, 7, 8, 0]</p><p>解释：<br>————————————————————————————————————————————————————<br>HWID(数字许可证)方法永久激活Windows<br>Ohook永久激活 Office 的方法<br>KMS38方法激活Windows/Server至2038年<br>在线 KMS方法激活 Windows/Server/0ffice 180天(终身续订任务)<br>高级激活疑难解答<br>用于预激活的 $OEM$ 文件夹<br>更改 Windows 版本<br>检查 Windows/Office 激活状态<br>提供一体化和单独文件版本<br>完全开源且基于批处理脚本<br>更少的防病毒检测<br>————————————————————————————————————————————————————</p><p>3.在弹出的界面中选择‘1’</p><p>————————————————————————————————————————————————————<br>[1] Install Ohook Office Activation<br>[2] Uninstall Ohook<br>[3] Download office<br>[0] Go back<br>————————————————————————————————————————————————————<br>Enter a menu option in the Keyboard [1, 2, 3, 0]</p><p>4.后显示Office is permanently activated.成功永久激活 Office，选择任意键返回，后选择‘0’键退出</p><p>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex slmgr /xpr</p><h1 id="二、免费永久激活-Windows"><a href="#二、免费永久激活-Windows" class="headerlink" title="二、免费永久激活 Windows"></a>二、免费永久激活 Windows</h1><p>1.打开 powershell，先输入以下代码，然后选择是<br>irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex<br>2.根据以下选项解释选择‘1’激活 Windows</p><p>————————————————————————————————————————————————————</p><p>Activation Methods：<br>[1] HWID         |  Windows            |  Permanent<br>[2] Ohook        |  Office             |  Permanent<br>[3] KMS38        |  Windows            |  Year 2038<br>[4] Online KMS   |  Windows / office   |   180 Days</p><p>————————————————————————————————————————————————————</p><p>[5] Activation Status<br>[6] Troubleshoot<br>[7] Extras<br>[8] Help<br>[0] Exit</p><p>————————————————————————————————————————————————————</p><p>Enter a menu option in the Keyboard [1, 2, 3, 4, 5, 6, 7, 8, 0]</p><p>3.后显示 Windows 11 专业版 is permanently activated with a digital license.成功永久激活 Windows，选择任意键返回，后选择‘0’键退出</p><p>4.按 Win + R 键输入以下命令查看计算机激活状态<br>slmgr.vbs /xpr</p><h1 id="三、Windows-修改更新日期"><a href="#三、Windows-修改更新日期" class="headerlink" title="三、Windows 修改更新日期"></a>三、Windows 修改更新日期</h1><p>1.按 Win + R 输入 regedit 打开注册表编辑器<br>2.输入<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings</code>。<br>3.新建二进制值命名为 ‘FlightSettingsMaxPauseDays’<br>4.修改十进制的停止更新天数</p><h1 id="任务栏图标异常"><a href="#任务栏图标异常" class="headerlink" title="任务栏图标异常"></a>任务栏图标异常</h1><p>解决办法：命令提示符结束浏览器进程，清除图标缓存【也可以制作批处理文件】（亲测有效）<br><code>win</code>+<code>r</code>-&gt;<code>cmd</code>-&gt;输入以下命令<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">taskkill <span class="regexp">/im explorer.exe /</span>f</span><br><span class="line">cd /d %userprofile%\appdata\local</span><br><span class="line">del iconcache.db /a</span><br><span class="line">start explorer.exe</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">激活Office和Windows</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="Office" scheme="http://chfychin.cn/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://chfychin.cn/posts/3c50d03d.html"/>
    <id>http://chfychin.cn/posts/3c50d03d.html</id>
    <published>2024-07-09T14:34:27.000Z</published>
    <updated>2024-07-10T00:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>添加表格：</strong></p><p>要添加表，使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。可以选择在表的任一端添加管道。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Syntax      </span>|<span class="string"> Description </span>|</span><br><span class="line">|<span class="string"> --- --- --- </span>|<span class="string"> --- --- --- </span>|</span><br><span class="line">|<span class="string"> Header      </span>|<span class="string"> Title       </span>|</span><br><span class="line">|<span class="string"> Paragraph   </span>|<span class="string"> Text        </span>|</span><br></pre></td></tr></table></figure></p><p><strong>效果：</strong></p><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><p><strong>对齐：</strong></p><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| <span class="title class_">Syntax</span>    | <span class="title class_">Description</span> |   <span class="title class_">Test</span> <span class="title class_">Text</span> |</span><br><span class="line">| <span class="symbol">:--------</span> | <span class="symbol">:---------</span>: | ----------: |</span><br><span class="line">| <span class="title class_">Header</span>    |    <span class="title class_">Title</span>    | <span class="title class_">Here</span><span class="string">&#x27;s this |</span></span><br><span class="line"><span class="string">| Paragraph |    Text     |    And more |</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table></div><p><strong>格式化表格中的文字：</strong></p><p>可以在表格中设置文本格式。例如，可以添加链接，代码（仅反引号（`）中的单词或短语，而不是代码块）和强调。<strong>注：不能添加标题，块引用，列表，水平规则，图像或HTML标签</strong>。</p><p><strong>在表中转义管道字符：</strong></p><p>可以使用表格的HTML字符代码（<code>&amp;#124;</code>）在表中显示竖线（<code>|</code>）字符。</p><h2 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h2><p><strong>代码块：</strong></p><p>通过将行缩进四个空格或一个制表符来创建代码块，在代码块之前和之后的行上使用三个反引号(<code>``` </code>）或三个波浪号（<code>~~~</code>）。</p><p>效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="标题编号"><a href="#标题编号" class="headerlink" title="标题编号"></a>标题编号</h2><p>Markdown:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### My Great Heading &#123;#custom-id&#125;</span></span><br></pre></td></tr></table></figure><br>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>链接到标题ID (#headid)</strong></p><p>通过创建带有数字符号（<code>#</code>）和自定义标题ID的[标准链接]<code>(/basic-syntax/links.html)</code>，可以链接到文件中具有自定义<code>ID</code>的标题。</p><div class="table-container"><table><thead><tr><th>Markdown</th><th>HTML</th><th>效果</th></tr></thead><tbody><tr><td><code>[Heading IDs](#heading-ids)</code></td><td><code>&lt;a href=&quot;#heading-ids&quot;&gt;Heading IDs&lt;/a&gt;</code></td><td><a href="#heading-ids">Heading IDs</a></td></tr></tbody></table></div><h2 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h2><p><strong>创建定义列表，在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</strong></p><p>Markdown<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is <span class="keyword">the</span> definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is <span class="literal">one</span> definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> term.</span><br><span class="line">: This is another definition <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> term.</span><br></pre></td></tr></table></figure><br>HTML<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>效果：</strong><br>First Term<br>: This is the definition of the first term.</p><p>Second Term<br>: This is one definition of the second term.<br>: This is another definition of the second term.</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>删除单词，在单词前后使用两个波浪号<code>~~</code>。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br><del>世界是平坦的。</del> 我们现在知道世界是圆的。</p><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>任务列表可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，在方括号<code>[x]</code>之间添加 <code>x</code> 。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] Write the press release</span><br><span class="line"><span class="bullet">- </span>[ ] Update the website</span><br><span class="line"><span class="bullet">- </span>[ ] Contact the media</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li>[x] Write the press release</li><li>[ ] Update the website</li><li>[ ] Contact the media</li></ul><h1 id="公式符号"><a href="#公式符号" class="headerlink" title="公式符号"></a>公式符号</h1><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$a<em>i,a</em>{pre}$</td><td style="text-align:center">a<em>i,a</em>{pre}</td></tr><tr><td style="text-align:center">$a^i,a^{[n+m]}$</td><td style="text-align:center">a^i, a^{[n+m]}$\ $</td></tr></tbody></table></div><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">(, )</td><td style="text-align:center">(, )</td></tr><tr><td style="text-align:center">[, ]</td><td style="text-align:center">[, ]</td></tr><tr><td style="text-align:center">⟨,⟩</td><td style="text-align:center">\lang, \rang 或 \langle, \rangle</td></tr><tr><td style="text-align:center">∣,∣</td><td style="text-align:center">\lvert, \rvert</td></tr><tr><td style="text-align:center">∥,∥</td><td style="text-align:center">\lVert, \rVert</td></tr><tr><td style="text-align:center">{,}</td><td style="text-align:center">\lbrace, \rbrace 或 \{,\} $\ $</td></tr></tbody></table></div><h2 id="增大括号："><a href="#增大括号：" class="headerlink" title="增大括号："></a>增大括号：</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">(x)</td><td style="text-align:center">(x)</td></tr><tr><td style="text-align:center">$\big( x \big)$</td><td style="text-align:center">\big( x \big)</td></tr><tr><td style="text-align:center">$\Big( x \Big)$</td><td style="text-align:center">\Big( x \Big)</td></tr><tr><td style="text-align:center">$\bigg( x \bigg)$</td><td style="text-align:center">\bigg( x \bigg)</td></tr><tr><td style="text-align:center">$\Bigg(x\Bigg)$</td><td style="text-align:center">\Bigg( x \Bigg)</td></tr></tbody></table></div><h2 id="其他的大括号类似增大括号的方法"><a href="#其他的大括号类似增大括号的方法" class="headerlink" title="其他的大括号类似增大括号的方法"></a>其他的大括号类似增大括号的方法</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)$</td><td style="text-align:center">\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)</td></tr><tr><td style="text-align:center">$\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]$</td><td style="text-align:center">\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]</td></tr><tr><td style="text-align:center">$\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle$</td><td style="text-align:center">\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle</td></tr><tr><td style="text-align:center">$\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert$</td><td style="text-align:center">\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert</td></tr><tr><td style="text-align:center">$\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert$</td><td style="text-align:center">\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert</td></tr></tbody></table></div><h2 id="分数-开方-累加-累乘"><a href="#分数-开方-累加-累乘" class="headerlink" title="分数/开方/累加/累乘"></a>分数/开方/累加/累乘</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\frac{a}{b}$</td><td style="text-align:center">frac${a}{b}$</td></tr><tr><td style="text-align:center">$\sqrt{a + b}$</td><td style="text-align:center">sqrt${a + b}$</td></tr><tr><td style="text-align:center">$\sum_{i = 0}^{n}\frac{1}{i^2}$</td><td style="text-align:center">\sum_{i = 0}^{n}\frac{1}{i^2}</td></tr><tr><td style="text-align:center">$\prod_{i = 0}^{n}\frac{1}{x^2}$</td><td style="text-align:center">\prod_{i = 0}^{n}\frac{1}{x^2}</td></tr></tbody></table></div><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\sin$</td><td style="text-align:center">\sin</td></tr><tr><td style="text-align:center">$\cos$</td><td style="text-align:center">\cos</td></tr><tr><td style="text-align:center">$\tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td></tr><tr><td style="text-align:center">$\csc$</td><td style="text-align:center">\csc</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td></tr><tr><td style="text-align:center">$\angle$</td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center">$40^\circ$</td><td style="text-align:center">40^\circ</td></tr></tbody></table></div><h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\ln{a + b}$</td><td style="text-align:center">\ln${a + b}$</td></tr><tr><td style="text-align:center">$\log_{a}^{b}$</td><td style="text-align:center">\log_{a}^${b}$</td></tr><tr><td style="text-align:center">$\lg{a + b}$</td><td style="text-align:center">\lg${a + b}$</td></tr></tbody></table></div><h2 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\pm$</td><td style="text-align:center">\pm</td><td style="text-align:center">正负号</td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td><td style="text-align:center">负正号</td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td><td style="text-align:center">乘号</td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center">\div</td><td style="text-align:center">除号</td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td><td style="text-align:center">星号</td></tr><tr><td style="text-align:center">$\star$</td><td style="text-align:center">\star</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center">竖线</td></tr><tr><td style="text-align:center">$\nmid$</td><td style="text-align:center">\nmid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td><td style="text-align:center">圈</td></tr><tr><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">点</td></tr><tr><td style="text-align:center">$\wr$</td><td style="text-align:center">\wr</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangle$</td><td style="text-align:center">\triangle</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\lhd$</td><td style="text-align:center">\lhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rhd$</td><td style="text-align:center">\rhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\unlhd$</td><td style="text-align:center">\unlhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\unrhd$</td><td style="text-align:center">\unrhd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigodot$</td><td style="text-align:center">\bigodot</td><td style="text-align:center">点积</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:center">\bigotimes</td><td style="text-align:center">克罗内克积</td></tr><tr><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:center">\bigoplus</td><td style="text-align:center">异或</td></tr><tr><td style="text-align:center">$\dagger$</td><td style="text-align:center">\dagger</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ddagger$</td><td style="text-align:center">\ddagger</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\amalg$</td><td style="text-align:center">\amalg</td><td style="text-align:center">…</td></tr></tbody></table></div><h2 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\leq$</td><td style="text-align:center">\leq</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">$\geq$</td><td style="text-align:center">\leq</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:center">\equiv</td><td style="text-align:center">全等于</td></tr><tr><td style="text-align:center">$\models$</td><td style="text-align:center">\models</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\prec$</td><td style="text-align:center">\prec</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center">\succ</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sim$</td><td style="text-align:center">\sim</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\perp$</td><td style="text-align:center">\perp</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\preceq$</td><td style="text-align:center">\preceq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\succeq$</td><td style="text-align:center">\succeq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\simeq$</td><td style="text-align:center">\simeq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\ll$</td><td style="text-align:center">\ll</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\gg$</td><td style="text-align:center">\gg</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\asymp$</td><td style="text-align:center">\asymp</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\parallel$</td><td style="text-align:center">\parallel</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:center">\approx</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cong$</td><td style="text-align:center">\cong</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\neq$</td><td style="text-align:center">\neq</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">$\doteq$</td><td style="text-align:center">\doteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\propto$</td><td style="text-align:center">\propto</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\bowtie$</td><td style="text-align:center">\bowtie</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Join$</td><td style="text-align:center">\Join</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\smile$</td><td style="text-align:center">\smile</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\frown$</td><td style="text-align:center">\frown</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td><td style="text-align:center">…</td></tr></tbody></table></div><h2 id="极限-向量"><a href="#极限-向量" class="headerlink" title="极限/向量"></a>极限/向量</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\lim$</td><td style="text-align:center">\lim</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center">$\lim_{n\rightarrow+\infty}n$</td><td style="text-align:center">\lim_{n\rightarrow+\infty}n</td></tr><tr><td style="text-align:center">$\vec{a}$</td><td style="text-align:center">\vec{a}</td></tr></tbody></table></div><h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center">\uparrow</td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center">\downarrow</td></tr><tr><td style="text-align:center">$\updownarrow$</td><td style="text-align:center">\updownarrow</td></tr><tr><td style="text-align:center">$\Uparrow$</td><td style="text-align:center">\Uparrow</td></tr><tr><td style="text-align:center">$\Downarrow$</td><td style="text-align:center">\Downarrow</td></tr><tr><td style="text-align:center">$\Updownarrow$</td><td style="text-align:center">\Updownarrow</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center">\leftarrow</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td></tr><tr><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center">\Leftarrow</td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\longrightarrow$</td><td style="text-align:center">\longrightarrow</td></tr><tr><td style="text-align:center">$\longleftarrow$</td><td style="text-align:center">\longleftarrow</td></tr><tr><td style="text-align:center">$\longleftrightarrow$</td><td style="text-align:center">\longleftrightarrow</td></tr><tr><td style="text-align:center">$\Longrightarrow$</td><td style="text-align:center">\Longrightarrow</td></tr><tr><td style="text-align:center">$\Longleftarrow$</td><td style="text-align:center">\Longleftarrow</td></tr><tr><td style="text-align:center">$\Longleftrightarrow$</td><td style="text-align:center">\Longleftrightarrow</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td></tr><tr><td style="text-align:center">$\longmapsto$</td><td style="text-align:center">\longmapsto</td></tr><tr><td style="text-align:center">$\hookleftarrow$</td><td style="text-align:center">\hookleftarrow</td></tr><tr><td style="text-align:center">$\hookrightarrow$</td><td style="text-align:center">\hookrightarrow</td></tr><tr><td style="text-align:center">$\rightharpoonup$</td><td style="text-align:center">\rightharpoonup</td></tr><tr><td style="text-align:center">$\leftharpoondown$</td><td style="text-align:center">\leftharpoondown</td></tr><tr><td style="text-align:center">$\rightleftharpoons$</td><td style="text-align:center">\rightleftharpoons</td></tr><tr><td style="text-align:center">$\leftharpoonup$</td><td style="text-align:center">\leftharpoonup</td></tr><tr><td style="text-align:center">$\rightharpoondown$</td><td style="text-align:center">\rightharpoondown</td></tr><tr><td style="text-align:center">$\leadsto$</td><td style="text-align:center">\leadsto</td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center">\nearrow</td></tr><tr><td style="text-align:center">$\searrow$</td><td style="text-align:center">\searrow</td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center">\swarrow</td></tr><tr><td style="text-align:center">$\nwarrow$</td><td style="text-align:center">\nwarrow</td></tr></tbody></table></div><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\emptyset$</td><td style="text-align:center">\emptyset</td><td style="text-align:center">空集</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">属于</td></tr><tr><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center">\notin</td><td style="text-align:center">不属于</td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td><td style="text-align:center">子集</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\not\subset$</td><td style="text-align:center">\not\subset</td><td style="text-align:center">非子集</td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center">\subseteq</td><td style="text-align:center">真子集</td></tr><tr><td style="text-align:center">$\supseteq$</td><td style="text-align:center">\supseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td><td style="text-align:center">并集</td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:center">\bigcup</td><td style="text-align:center">并集</td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td><td style="text-align:center">交集</td></tr><tr><td style="text-align:center">$\bigcap$</td><td style="text-align:center">\bigcap</td><td style="text-align:center">交集</td></tr><tr><td style="text-align:center">$\uplus$</td><td style="text-align:center">\uplus</td><td style="text-align:center">多重集</td></tr><tr><td style="text-align:center">$\biguplus$</td><td style="text-align:center">\biguplus</td><td style="text-align:center">多重集</td></tr><tr><td style="text-align:center">$\sqsubset$</td><td style="text-align:center">\sqsubset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsupset$</td><td style="text-align:center">\sqsupset</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsubseteq$</td><td style="text-align:center">\sqsubseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\sqsupseteq$</td><td style="text-align:center">\sqsupseteq</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td><td style="text-align:center">集合中的减法</td></tr></tbody></table></div><h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\prime$</td><td style="text-align:center">\prime</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:center">\int</td><td style="text-align:center">积分</td></tr><tr><td style="text-align:center">$\iint$</td><td style="text-align:center">\iint</td><td style="text-align:center">双重积分</td></tr><tr><td style="text-align:center">$\iiint$</td><td style="text-align:center">\iiint</td><td style="text-align:center">三重积分</td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:center">\oint</td><td style="text-align:center">曲线积分</td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td><td style="text-align:center">梯度</td></tr><tr><td style="text-align:center">$\int_0^2 x^2 dx$</td><td style="text-align:center">\int_0^2 x^2 dx</td><td style="text-align:center">其他的积分符号类似</td></tr></tbody></table></div><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\because$</td><td style="text-align:center">\because</td><td style="text-align:center">因为</td></tr><tr><td style="text-align:center">$\therefore$</td><td style="text-align:center">\therefore</td><td style="text-align:center">所以</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td><td style="text-align:center">任意</td></tr><tr><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:center">\bigvee</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:center">\bigwedge</td><td style="text-align:center">逻辑或</td></tr></tbody></table></div><h2 id="上下标符号"><a href="#上下标符号" class="headerlink" title="上下标符号"></a>上下标符号</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$\bar{a}$</td><td style="text-align:center">\bar${a}$</td></tr><tr><td style="text-align:center">$\acute\a$</td><td style="text-align:center">\acute</td></tr><tr><td style="text-align:center">$\breve{a}$</td><td style="text-align:center">\breve${a}$</td></tr><tr><td style="text-align:center">$\grave{a}$</td><td style="text-align:center">\grave${a}$</td></tr><tr><td style="text-align:center">$\dot{a}$</td><td style="text-align:center">\dot${a}$</td></tr><tr><td style="text-align:center">$\ddot{a}$</td><td style="text-align:center">\ddot${a}$</td></tr><tr><td style="text-align:center">$\hat{a}$</td><td style="text-align:center">\hat${a}$</td></tr><tr><td style="text-align:center">$\check{a}$</td><td style="text-align:center">\check${a}$</td></tr><tr><td style="text-align:center">$\breve{a}$</td><td style="text-align:center">\breve${a}$</td></tr><tr><td style="text-align:center">$\tilde{a}$</td><td style="text-align:center">\tilde${a}$</td></tr><tr><td style="text-align:center">$\vec{a}$</td><td style="text-align:center">\vec${a}$</td></tr><tr><td style="text-align:center">$\overline{a + b + c + d}$</td><td style="text-align:center">\overline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\underline{a + b + c + d}$</td><td style="text-align:center">\underline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\overbrace{a + b + c + d}$</td><td style="text-align:center">\overbrace${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\underline{a + b + c + d}$</td><td style="text-align:center">\underline${a + b + c + d}$</td></tr><tr><td style="text-align:center">$\overbrace{a + \underbrace{b + c}_{1.0} + d}^{2.0}$</td><td style="text-align:center">\overbrace{a + \underbrace{b + c}_{1.0} + d}^${2.0}$</td></tr></tbody></table></div><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><div class="table-container"><table><thead><tr><th style="text-align:center">大写</th><th style="text-align:center">Markdown</th><th style="text-align:center">小写</th><th style="text-align:center">Markdown</th></tr></thead><tbody><tr><td style="text-align:center">$A$</td><td style="text-align:center">\Alpha</td><td style="text-align:center">$\alpha$</td><td style="text-align:center">\alpha</td></tr><tr><td style="text-align:center">$B$</td><td style="text-align:center"></td><td style="text-align:center">$\beta$</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">$\Gamma$</td><td style="text-align:center">\Gamma</td><td style="text-align:center">$\gamma$</td><td style="text-align:center">\gamma</td></tr><tr><td style="text-align:center">$\Delta$</td><td style="text-align:center">\Delta</td><td style="text-align:center">$\delta$</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">$E$</td><td style="text-align:center">\Epsilon</td><td style="text-align:center">$\epsilon$</td><td style="text-align:center">\epsilon</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">\varepsilon</td></tr><tr><td style="text-align:center">$Z$</td><td style="text-align:center">\Zeta</td><td style="text-align:center">$\zeta$</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">$H$</td><td style="text-align:center">\Eta</td><td style="text-align:center">$\eta$</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">$\Theta$</td><td style="text-align:center">\Theta</td><td style="text-align:center">$\theta$</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">$I$</td><td style="text-align:center">\Iota</td><td style="text-align:center">$\iota$</td><td style="text-align:center">\iota</td></tr><tr><td style="text-align:center">$K$</td><td style="text-align:center">\Kappa</td><td style="text-align:center">$\kappa$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\Lambda$</td><td style="text-align:center">\Lambda</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">\lambda</td></tr><tr><td style="text-align:center">$M$</td><td style="text-align:center">\Mu</td><td style="text-align:center">$\mu$</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">$N$</td><td style="text-align:center">\Nu</td><td style="text-align:center">$\nu$</td><td style="text-align:center">\nu</td></tr><tr><td style="text-align:center">$\Xi$</td><td style="text-align:center">\Xi</td><td style="text-align:center">$\xi$</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">$O$</td><td style="text-align:center">\Omicron</td><td style="text-align:center">$\omicron$</td><td style="text-align:center">\omicron</td></tr><tr><td style="text-align:center">$\Pi$</td><td style="text-align:center">\Pi</td><td style="text-align:center">$\pi$</td><td style="text-align:center">\pi</td></tr><tr><td style="text-align:center">$R$</td><td style="text-align:center">\Rho</td><td style="text-align:center">$\rho$</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">$\Sigma$</td><td style="text-align:center">\Sigma</td><td style="text-align:center">$\sigma$</td><td style="text-align:center">\sigma</td></tr><tr><td style="text-align:center">$T$</td><td style="text-align:center">\Tau</td><td style="text-align:center">$\tau$</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">$\Upsilon$</td><td style="text-align:center">\Upsilon</td><td style="text-align:center">$\upsilon$</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">$\Phi$</td><td style="text-align:center">\Phi</td><td style="text-align:center">$\phi$</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\varphi$</td><td style="text-align:center">\varphi</td></tr><tr><td style="text-align:center">$X</td><td style="text-align:center">\Chi</td><td style="text-align:center">$\chi$</td><td style="text-align:center">\chi</td></tr><tr><td style="text-align:center">$\Psi$</td><td style="text-align:center">\Psi</td><td style="text-align:center">$\psi$</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">$\Omega$</td><td style="text-align:center">\Omega</td><td style="text-align:center">$\omega$</td><td style="text-align:center">\omega</td></tr></tbody></table></div><h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><div class="table-container"><table><thead><tr><th style="text-align:center">算式</th><th style="text-align:center">Markdown</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:center">一般用于有下标的序列</td></tr><tr><td style="text-align:center">$\ldots$</td><td style="text-align:center">\ldots</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:center">纵向位置比\dots稍高</td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td><td style="text-align:center">竖向</td></tr><tr><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td><td style="text-align:center">…</td></tr></tbody></table></div><p><strong>例：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line">x<span class="emphasis">_1, x_</span>2, \dots, x<span class="emphasis">_n \quad \quad 1, 2, \cdots, n \quad \quad \vdots \quad\quad \ddots </span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">x_1, x_2, \dots, x_n \quad \quad 1, 2, \cdots, n \quad \quad \vdots \quad\quad \ddots</script><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><script type="math/tex; mode=display">y=\begin{cases}-x,\quad x\leq 0\\x, \quad x>0\end{cases}\tag{1}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">y=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq 0\\</span><br><span class="line">x, \quad x&gt;0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>其他环境</strong></p><p>下面这些标签环境在很多markdown中不能解析</p><div class="table-container"><table><thead><tr><th style="text-align:center">环境名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">align</td><td style="text-align:center">最基本的对齐环境</td></tr><tr><td style="text-align:center">multline</td><td style="text-align:center">非对齐环境</td></tr><tr><td style="text-align:center">gather</td><td style="text-align:center">无对齐的连续方程</td></tr></tbody></table></div><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>不带括号：</p><script type="math/tex; mode=display">\begin{matrix}1 & 2 & 3\\4 & 5 & 6 \\7 & 8 & 9\end{matrix}\tag{1}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>带括号</p><script type="math/tex; mode=display">\left(\begin{matrix}1 & 2 & 3\\4 & 5 & 6 \\7 & 8 & 9\end{matrix}\right)\tag{2}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left(</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right)</span><br><span class="line">\tag&#123;2&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h2><script type="math/tex; mode=display">\left[\begin{matrix}1 & 2 & 3\\4 & 5 & 6 \\7 & 8 & 9\end{matrix}\right]\tag{3}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">\tag&#123;3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><script type="math/tex; mode=display">\left\{\begin{matrix}1 & 2 & 3\\4 & 5 & 6 \\7 & 8 & 9\end{matrix}\right\}\tag{4}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$\left\&#123;</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3\\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right\&#125;</span><br><span class="line">\tag&#123;4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="带省略号"><a href="#带省略号" class="headerlink" title="带省略号"></a>带省略号</h2><script type="math/tex; mode=display">\left[\begin{matrix}a & b & \cdots & a\\b & b & \cdots & b\\\vdots & \vdots & \ddots & \vdots\\c & c & \cdots & c\end{matrix}\right]\tag{5}</script><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\left[</span></span><br><span class="line"><span class="string">\begin&#123;matrix&#125;</span></span><br><span class="line">a &amp; b &amp; <span class="string">\cdots</span> &amp; a<span class="string">\\</span></span><br><span class="line">b &amp; b &amp; <span class="string">\cdots</span> &amp; b<span class="string">\\</span></span><br><span class="line"><span class="string">\vdots</span> &amp; <span class="string">\vdots</span> &amp; <span class="string">\ddots</span> &amp; <span class="string">\vdots\\</span></span><br><span class="line">c &amp; c &amp; <span class="string">\cdots</span> &amp; c</span><br><span class="line"><span class="string">\end&#123;matrix&#125;</span></span><br><span class="line"><span class="string">\right]</span></span><br><span class="line"><span class="string">\tag&#123;5&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="带横线-竖线分割的矩阵"><a href="#带横线-竖线分割的矩阵" class="headerlink" title="带横线/竖线分割的矩阵"></a>带横线/竖线分割的矩阵</h2><script type="math/tex; mode=display">\left[\begin{array}{c|cc}1 & 2 & 3 \\4 & 5 & 6 \\7 & 8 & 9\end{array}\right]\tag{6}</script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;array&#125;&#123;c|cc&#125;</span><br><span class="line">1 &amp; 2 &amp; 3 \\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right]</span><br><span class="line">\tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>横线用 \hline 分割</p><script type="math/tex; mode=display">\left[    \begin{array}{ccc}    1 & 2 & 3 \\ \hline    4 & 5 & 6 \\    7 & 8 & 9    \end{array}\right]\tag{7}</script><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\left[</span></span><br><span class="line">    <span class="string">\begin&#123;array&#125;&#123;ccc&#125;</span></span><br><span class="line">    <span class="number">1</span> &amp; <span class="number">2</span> &amp; <span class="number">3</span> <span class="string">\\</span> <span class="string">\hline</span></span><br><span class="line">    <span class="number">4</span> &amp; <span class="number">5</span> &amp; <span class="number">6</span> <span class="string">\\</span></span><br><span class="line">    <span class="number">7</span> &amp; <span class="number">8</span> &amp; <span class="number">9</span></span><br><span class="line">    <span class="string">\end&#123;array&#125;</span></span><br><span class="line"><span class="string">\right]</span></span><br><span class="line"><span class="string">\tag&#123;7&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Markdown语法汇总</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="我的Markdown" scheme="http://chfychin.cn/tags/%E6%88%91%E7%9A%84Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数学建模</title>
    <link href="http://chfychin.cn/posts/a66872a2.html"/>
    <id>http://chfychin.cn/posts/a66872a2.html</id>
    <published>2024-07-08T12:48:58.000Z</published>
    <updated>2024-07-11T08:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。"><a href="#数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。" class="headerlink" title="数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。"></a>数学建模：应用定量的思维方式探讨自然现象、社会现象解决实际问题。</h1><p><strong>建模步骤</strong>:</p><ul><li>1.分析问题</li><li>2.模型假设</li><li>3.求解或解释模型</li><li>4.模型验证</li><li>5.实施模型</li><li>6.改进模型<h1 id="一、成比例模型"><a href="#一、成比例模型" class="headerlink" title="一、成比例模型"></a>一、成比例模型</h1>利用成比例思想建立成比例模型:<ul><li>(1)画出散点图</li><li>(2)确定他们是过原点的直线，计算出斜率</li></ul></li></ul><p>当模型为非曲线时，可以将其化为直线:</p><ul><li>1.图象向下凸可以将横坐标的次方系数适量增大，反之，横坐标次方系数减小。（次方系数可出现分数）</li><li>2.当开头结尾都受限制时，可以考虑他的增长率</li></ul><h1 id="二、动力系统"><a href="#二、动力系统" class="headerlink" title="二、动力系统"></a>二、动力系统</h1><h2 id="线性动力系统"><a href="#线性动力系统" class="headerlink" title="线性动力系统:"></a>线性动力系统:</h2><ul><li>1.令$a_{n+1}=r*a_n$，则它的解为$a_n=r^na_0$,其中$a_0$为给定初始值。</li><li>2.当 $a<em>0=a$时，如果对所有的n=1,2,3,…有<script type="math/tex">a_n=a</script>则将数α称为动力系统 $a</em>{n+1} =f(a_n)$的<strong>平衡点或不动点</strong>。即 $a_n=a$是该动力系统的常数解。</li><li>3.线性动力系统解的长期趋势:<script type="math/tex">a_{n+1}=ra_n,n=0,1,···（r为常数）$$$$a_n=r^na_0,n=1,2,···</script></li></ul><div class="table-container"><table><thead><tr><th>r</th><th>趋势</th></tr></thead><tbody><tr><td>r=0</td><td>常数解以及在0处的平衡点</td></tr><tr><td>r=1</td><td>所有初值都是常数解</td></tr><tr><td>r&lt;0</td><td>震荡</td></tr><tr><td>$\</td><td>r\</td><td>$&lt;1</td><td>衰减到极限值为0</td></tr><tr><td>$\</td><td>r\</td><td>$&gt;1</td><td>无限增长</td></tr></tbody></table></div><h2 id="形如-a-n-1-ra-n-b-的动力系统"><a href="#形如-a-n-1-ra-n-b-的动力系统" class="headerlink" title="形如 $a_{n+1}=ra_n+b$ 的动力系统"></a>形如 $a_{n+1}=ra_n+b$ 的动力系统</h2><ul><li>$a_{n+1}=ra_n+b$,其平衡点是$a=\frac{b}{1-r},r\neq1$</li><li>当$r=1,b=0$时，每个初始值都是平衡点</li><li>当$r=1,b!=0$时，不存在平衡点。<h2 id="形如-a-n-1-ra-n-b-r-neq1-的动力系统"><a href="#形如-a-n-1-ra-n-b-r-neq1-的动力系统" class="headerlink" title="形如 $a_{n+1}=ra_n+b,(r\neq1)$ 的动力系统"></a>形如 $a_{n+1}=ra_n+b,(r\neq1)$ 的动力系统</h2><ul><li>解为:$a_n=r^nc+\frac{b}{1-r}$,(c是依赖初始值的某一常数)</li><li>对于动力系统$a_{n+1}=ra_n+b,(b\neq0)$<br>| r的值 | 长期趋势 |<br>| ———— | ———— |<br>||r|<1|稳定平衡点||\|r\|>1|不稳定平衡点|<br>|r=1|没有平衡点|<h1 id="三、建模过程"><a href="#三、建模过程" class="headerlink" title="三、建模过程"></a>三、建模过程</h1>模型准备—&gt;模型假设—&gt;模型建立—&gt;模型求解—&gt;模型分析—&gt;模型检验—&gt;模型应用<h1 id="四、模型拟合准则"><a href="#四、模型拟合准则" class="headerlink" title="四、模型拟合准则:"></a>四、模型拟合准则:</h1><strong>按照一个或一些选出的模型类型对数据进行拟合。</strong><h2 id="切比雪夫准则"><a href="#切比雪夫准则" class="headerlink" title="切比雪夫准则"></a>切比雪夫准则</h2><strong>切比雪夫准则对有大偏差的单个数据点赋以更大的权重，当极小化最大绝对偏差很重要时可以采用这一准则。</strong></li><li>给定某一函数类型$y=f(x)$及m个数据点$(x<em>i,y_i),j=1,2,3,···,m$.该切比雪夫准则是在整个数据点集上使最大绝对值偏差:$min{\max</em>{1 \leq i \leq m}|y_i-f(x_i)|}$最小.<h2 id="极小化绝对偏差之和"><a href="#极小化绝对偏差之和" class="headerlink" title="极小化绝对偏差之和"></a>极小化绝对偏差之和</h2></li><li>给定某一函数类型$y=f(x)$及m个数据点$(x<em>i,y_i),j=1,2,3,···,m$.确定函数类型$y=f(x)$的参数，使绝对值偏差之和:$min{\sum</em>{i=1}^{m}|y_i-f(x_i)|}$最小</li><li>极小化绝对偏差之和这个准则赋以每个数据点相同的权重，其稳健性较好，对异常值不太敏感,<strong>常用数值解法求出近似解。</strong>。<h2 id="最小二成准则"><a href="#最小二成准则" class="headerlink" title="最小二成准则"></a>最小二成准则</h2></li><li>给定某一函数类型$y=f(x)$(参数待定)及m个数据点$(x<em>i,y_i),j=1,2,3,···,m$.该准则是确定函数类型$y=f(x)$的参数，使偏差平方和:$min{\sum</em>{i=1}^{m}({y_i-f(x_i)})^2}$最小</li><li>最小二乘准则对偏差较大的数据点赋以较大的权重对偏差较小的数据点赋以较小的权重，其稳健性较差对异常值敏感。<br>与前两个准则相比，最小二乘准则产生的优化问题易于解析求解。由于偏差平方和是一个连续函数，可对待定参数求偏导得到正规方程，通过正规方程来确定最优参数进而确定出所给函数类型中的最佳函数。</li></ul></li></ul><h1 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h1><h2 id="回归分析-1"><a href="#回归分析-1" class="headerlink" title="回归分析"></a>回归分析</h2><h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p><strong>由来：英国著名统计学家高尔顿是最先应用统计方法研究两个变量之间关系问题的人。高尔顿研究发现父母身高与儿女身高之间有这么一种关系:父母高-&gt;儿女也高，父母矮-&gt;儿女也矮</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">父母平均身高</th><th style="text-align:center">儿女平均身高</th></tr></thead><tbody><tr><td style="text-align:center">高一个单位</td><td style="text-align:center">高半个单位</td></tr><tr><td style="text-align:center">矮一个单位</td><td style="text-align:center">矮半个单位</td></tr></tbody></table></div><p>逐步回归<br><strong>具有回归于人口总平均高的趋势</strong></p><p>用高尔顿的话说，儿女身高“回归”到中等身高。这就是回归一词的最初由来。把这种后代的身高向中间靠拢的趋势称为“<strong>回归现象</strong>”。<br>后来，人们把由一个变量的变化去推测另一个变量的方法称为为“<strong>回归方法</strong>”。</p><h3 id="为何使用回归分析"><a href="#为何使用回归分析" class="headerlink" title="为何使用回归分析"></a>为何使用回归分析</h3><p>(1) 更好地了解:<br>对某一现象建模，以更好地了解该现象并有可能基于对该现象的了解来影响政策的制定以及决定采取何种相应措施。基本目标是测量一个或多个变量的变化对另一变量变化的影响程度。示例:了解某些特定濒危鸟类的主要栖息地特征(例如:降水、食物源、植被、、天敌)，以协助通过立法来保护该物种。<br>(2) 建模预测:<br>示例:如果已知人口增长情况和典型的天气状况，那么明年的用电量将会是多少?<br>(3) 探索检验假设:<br>还可以使用回归分析来深入探索某些假设情况。假设您正在对住宅区的犯罪活动进行建模，以更好地了解犯罪活动并希望实施可能阻止犯罪活动的策略。开始分析时，您很可能有很多问题或想要检验的假设情况。</p><h3 id="回归分析的作用主要有以下几点"><a href="#回归分析的作用主要有以下几点" class="headerlink" title="回归分析的作用主要有以下几点"></a>回归分析的作用主要有以下几点</h3><ul><li>挑选与因变量相关的自变量;</li><li>描述因变量与自变量之间的关系强度;</li><li>生成模型，通过自变量来预测因变量:</li><li>根据模型，通过因变量，来控制自变量。</li></ul><p>是一种预测预报方法，提前知道未来的状态和发展趋势。<br>它研究的是因变量Y和自变量X之间的关系，是一种预测性的建模技术。</p><p><img src="https://tuchuang.voooe.cn/images/2024/07/16/808aa45672dfef6165819a53d7aa81a6.png" alt="img"></p><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><div class="table-container"><table><thead><tr><th style="text-align:center">线性</th><th style="text-align:center">非线性</th></tr></thead><tbody><tr><td style="text-align:center">一元线性回归</td><td style="text-align:center">一元非线性回归</td></tr><tr><td style="text-align:center">多元线性回归</td><td style="text-align:center">多元非线性回归</td></tr></tbody></table></div><h2 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h2><p><strong>一元线性回归可用来分析自变量x取值与因变量y取值的内在联系，这里的自变量x是确定性的变量，因变量y是随机性的变量。</strong></p><h3 id="一元线性回归模型构建"><a href="#一元线性回归模型构建" class="headerlink" title="一元线性回归模型构建"></a>一元线性回归模型构建</h3><p>一元线性回归的模型为: $y=a+bx+ε目ε\sim N(0，σ^2)$</p><ul><li>其中$a$表示截距，$b$表示直线的倾斜率;$a、b$称为回归系数，与自变量$x$无关。</li><li>$ε$ 是随机误差项，并总是假设$ε\sim N(0，σ^2)$。</li></ul><p>若对自变量x与因变量y分别进行n次独立观测，得到:</p><div class="table-container"><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">$X$</td><td style="text-align:center">$x_1$</td><td style="text-align:center">$x_2$</td><td style="text-align:center">···</td><td style="text-align:center">$x_n$</td></tr><tr><td style="text-align:center">$Y$</td><td style="text-align:center">$y_1$</td><td style="text-align:center">$y_2$</td><td style="text-align:center">···</td><td style="text-align:center">$y_n$</td></tr></tbody></table></div><p>对于参数a,b用最小二乘法估计，即应选取估计值，6，使当$a=\hat{a},b=\hat{b}$ 时$\hat{y<em>i}$与估计值$\hat{y_i}=\hat{a}+\hat{b}x$, 误差平方和 $Q=\sum</em>{i=1}^n{ε<em>i}^2=\sum</em>{i=1}^n{(y_i-\hat{y_i})}^2$达到最小。</p><p>为此，我们令</p><ul><li>$\frac{\partial Q}{\partial a}=-2\sum_{i=1}^n{(y_i-a-bx_i)}^2=0$</li><li>$\frac{\partial Q}{\partial b}=-2\sum_{i=1}^nx_i{(y_i-a-bx_i)}^2=0$</li></ul><p>得</p><ul><li>$\hat{b}=\frac{\sum<em>{i=1}^n(x_i-\overline{x})(y_i-\overline{y})}{\sum</em>{i=1}^n{(x_i-\overline{x})}^2}$</li><li>$\hat{a}=\hat{y_i}-\hat{b}\overline{x}$</li></ul><p>$\hat{a},\hat{b}$为$a,b$的最小二乘估计，其中分别是$\overline{x},\overline{y}$分别是 x,y, 的样本均值。</p><h3 id="回归方程的检验"><a href="#回归方程的检验" class="headerlink" title="回归方程的检验"></a>回归方程的检验</h3><p><strong>回归方程的假设检验</strong>：</p><ul><li>回归模型的假设检验</li><li>回归系数的假设检验</li></ul><h4 id="回归模型的假设检验"><a href="#回归模型的假设检验" class="headerlink" title="回归模型的假设检验"></a>回归模型的假设检验</h4><p><strong>检验原因</strong>:因变量y与自变量x之间是否存在如模型所表示的关系是需要检验的。<br><strong>方法</strong>:F检验法</p><ul><li>模型的误差平方和为: $SSE=\sum_{i=1}^n{(y_i-\hat{y_i})}^2$</li><li>模型的回归平方和为: $SSR=\sum_{i=1}^n{(\hat{y_i}-\overline{y_i})}^2$</li><li>模型的总离差平方和为: $SST=\sum_{i=1}^n{(y_i-\overline{y_i})}^2$</li><li>可得: $SST=SSE+SSR$</li></ul><p>对于模型$y=a+b_ix_i+ε,i=1,2…,p.$<br>显然，模型成立的对立面是: y与x的线性关系不明显，即$b_i$很小，所以我们可以令原假设为$H_0:b_1=b_2=…=b_p=0$，如果原假设成立，则构造统计量</p><script type="math/tex; mode=display">F=\frac{MSR}{MSE}=\frac{SSR/P}{SSE/(n-p-1)}\sim F(p,n-p-1)</script><p>p是自变量个数，$\hat{σ}^2=MSE=SSE/(n-p-1)$ 是 $σ^2$ 的无偏估计。</p><p>在显著性水平$\alpha$下，对于上$\alpha$分位数 $F<em>\alpha(p,n-p-1)$，若 $F&lt;F</em>\alpha(p,n-p-1)$，则接受$H_0$,否则拒绝$H_0$。<br><strong>注:这里接受H。只是说明了y与x的线性关系不明显，也可能是非线性关系，如平方关系</strong></p><p><strong>另一种方法</strong>:通过判定系数来衡量$y$与$x_1,x_2,…,x_n$,的相关程度。即(回归平方和在总平方和中的比值): </p><script type="math/tex; mode=display">R_2=\frac{SSR}{SST}</script><p>其中,$R=\sqrt{R^2}$ 称为复相关系数，$R$ 越大(通常大于$0.8$或$0.9$)，$y$与$x_1,x_2,…,x_n$的相关关系越密切。</p><h4 id="回归系数的假设检验"><a href="#回归系数的假设检验" class="headerlink" title="回归系数的假设检验"></a>回归系数的假设检验</h4><p><strong>检验原因</strong>: 当前面的回归模型检验通过，对自变量系数的检验，即考察每一个自变量对因变量的影响是否显著。<br><strong>方法</strong>: $t$ 检验法(做 $p+1$ 次检验)<br>$\quad$设随机变量$x<em>1,x_2,…,x_n$对应的系数为 $\hat{b_1},\hat{b_2},…,\hat{b_n}$，各个 $x_i$ 都服从正态分布, 所以 6也服从正态分布。($b_0=a$)<br>当 $H_0: b_i=0,i=0,1,2..p.$ 成立时，有$$<br>t_i=\frac{b_j/ \sqrt{c</em>{ii}}}{\sqrt{SSE/(n-p-1)}}\sim t<br>(n-p-1)$$<br>($c_{ii}$:是正规方程组的系数矩阵的逆矩阵中的元素)</p><p>在显著性水平$\alpha$下，若$t<em>i&lt;t</em>{\frac{\alpha}{2}}(n-m-1)$，则接受$H_0$, 否则拒绝$H_0$: 认为系数不为0.即通过检验。</p><h4 id="利用回归模型进行预测-点预测和区间预测"><a href="#利用回归模型进行预测-点预测和区间预测" class="headerlink" title="利用回归模型进行预测(点预测和区间预测)"></a>利用回归模型进行预测(点预测和区间预测)</h4><p>$eg$: 总体数量为 $n$，对总体的均值进行预测。<br>(1)当 $x=x_0$ 时，用方程立 $\hat{y_0}=a+bx_0$。预测 $y_0$ 的值，为点预测。($\hat{y_0}$)<br>(2)当 $x=x_0$,时，用区间去换测 $y$ 的取值范围，为区间预测。([$\hat{y_0}-\Delta{x},\hat{y_0}+\Delta{x}$])</p><h2 id="一元非线性回归"><a href="#一元非线性回归" class="headerlink" title="一元非线性回归"></a>一元非线性回归</h2><h3 id="一元非线性回归介绍"><a href="#一元非线性回归介绍" class="headerlink" title="一元非线性回归介绍"></a>一元非线性回归介绍</h3><p>$\quad$ 非线性回归是回归函数关于未知回归系数具有非线性结构的回归。简单理解就是非线性回归就是曲线回归。<br>$\quad$ 实际问题中，变量之间常常不是直线。这时，通常是选配一条比较接近的曲线，通过变量替换把非线性方程加以线性化，然后按照线性回归的方法进行拟合。(<strong>将非线性转化为线性</strong>)。<br>$\quad$ <strong>在做非线性回回归时，一般要先确定该非线性回归模型后再做非线性回归;<br>$\quad$ 解题思路是先将所给的数据点通过matlab绘图的方式画出来，再看看画出来的散点图比较符合哪个非线性回归模型就选择那个模型，最后再做非线性回归分析。</strong></p><p>转化为一元线性常用 <a href="https://blog.csdn.net/A15216110998/article/details/80479942">取对数再做回归</a></p><p><strong>如:我们可以通过对因变量或者自变量进行一定的变形，将问题转化为一元线<br>性回归分析。</strong><br>|曲线回归方程|方法|转换后的直线回归方程|<br>|:-:|:-:|:-:|<br>|$y=a+\frac{b}{x}$|对自变量x取倒数|$y=a+bx’$|<br>|$y=ax^b$|将方程两边取对数|$lny=lna+blnx$|<br>|$y=ae^{bx}$|将方程两边取对数|lny=lna+bx|</p><div class="table-container"><table><thead><tr><th style="text-align:center">曲线回归方程</th><th style="text-align:center">$y’$</th><th style="text-align:center">$x’$</th><th style="text-align:center">$a’$</th><th style="text-align:center">$b’$</th><th style="text-align:center">转换后的直线回归方程</th></tr></thead><tbody><tr><td style="text-align:center">$\hat{y}=ae^{bx}(a&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=ab^x(a&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center">$b’=lnb$</td><td style="text-align:center">$y’=a’+b’x$</td></tr><tr><td style="text-align:center">$\hat{y}=a+blnx(x&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center">$x’=lnx$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx’$</td></tr><tr><td style="text-align:center">$\hat{y}=ax^b(a&gt;0,x&gt;0)$</td><td style="text-align:center">$y’=lny$</td><td style="text-align:center">$x’=lnx$</td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’+bx’$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{x}{a+bx}(x\neq-\frac{a}{b})$</td><td style="text-align:center">$y’=\frac{x}{y}$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{a+bx}{x}(x\neq0)$</td><td style="text-align:center">$y’=yx$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{1}{a+bx}(x\neq-\frac{a}{b})$</td><td style="text-align:center">$y’=\frac{1}{y}$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$y’=a+bx$</td></tr><tr><td style="text-align:center">$\hat{y}=\frac{k}{1+ae^{-bx}}(a&gt;0)$</td><td style="text-align:center">$y’=ln(\frac{k-y}{y})$</td><td style="text-align:center"></td><td style="text-align:center">$a’=lna$</td><td style="text-align:center"></td><td style="text-align:center">$y’=a’-bx$</td></tr></tbody></table></div><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.描散点图，确立回归方程的模型;<br>2.求方程中待定系数，建立回归方程：</p><ul><li>将非线性方程化为线性方程;</li><li>求待定系数，建立线性方程;</li><li>对线性方程作回归关系显著性检验；</li><li>将线性方程还原为非线性。</li></ul><h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><h3 id="多元线性回归介绍"><a href="#多元线性回归介绍" class="headerlink" title="多元线性回归介绍"></a>多元线性回归介绍</h3><p>$\quad$ 在回归分析中，如果有两个或两个以上的自变量，就称为<strong>多元回归</strong>。实际应用中，一种现象常常是与多个因素相联系的，由多个自变量的最优组合共同来预测或估计因变量，比只用一个自变量进行预测或估计更有效，更符合实际。总的来说，回归分析就是用来做预测的，多元回归要比一元回归更加高效实用。<br>$\quad$ <strong>多元回归分析</strong>是研究多个变量之间的关系的回归分析方法，是反映一种现象或事物的数量依多种现象或事物的数量的变动而相应地变动的规律，建立多个变量之间线性或非线性数学模型数量关系式的统计方法。</p><h3 id="多元线性回归模型"><a href="#多元线性回归模型" class="headerlink" title="多元线性回归模型"></a>多元线性回归模型</h3><p>多元线性回归模型通常用来描述变量$y$和$x$之间的随机线性关系，即:</p><ul><li>$y=\beta_0+\beta_1x_1+…+\beta_mx_m+\varepsilon$</li><li>$ε$ 是随机误差项，并总是假设$ε\sim N(0，σ^2)$。</li></ul><p>式中: $\beta_0,\beta_1,…,\beta_m,σ2$ 都是与 $x_1,x_2,…,x_m$ 无关的未知参数，其中 $\beta_0,\beta_1,…,\beta_m$ 称为<strong>回归系数</strong>。</p><h2 id="多元非线性回归"><a href="#多元非线性回归" class="headerlink" title="多元非线性回归"></a>多元非线性回归</h2><h3 id="多元非线性回归介绍"><a href="#多元非线性回归介绍" class="headerlink" title="多元非线性回归介绍"></a>多元非线性回归介绍</h3><p>$\quad$ 建立多元非线性回归方程在科学研究中应用广泛，其重要方法是将<strong>非线性</strong>回归方程转化为<strong>线性</strong>回归方程。<br><strong>转化时应首先选择合适的非线性回归形式，并将其线性化，确定线性化回归方程的系数，最后确定非线性回归方程中的参数。</strong><br>$\quad$ 首先决定非线性模型的函数类型，对于其中可线性化问题则通过变量变换将其线性化，从而归结为前面的多元线性回归问题来解决。<br>$\quad$ 选择合适的曲线类型不是一件轻而易举的工作，首先对原始数据作图或则依靠专业知识和经验，来选择适当的函数进行拟合。<br>常用的曲线类型有幂函数，指数函数，抛物线函数，对数函数和S型函数</p><h3 id="回归分析中的：线性-amp-非线性"><a href="#回归分析中的：线性-amp-非线性" class="headerlink" title="回归分析中的：线性&amp;非线性"></a>回归分析中的：线性&amp;非线性</h3><p><strong>线性函数</strong> $\neq$ <strong>线性回归方程</strong></p><p>$Y<em>i=\beta_0+\beta_1x</em>{i1}+…+\beta<em>px</em>{ip}+\varepsilon_i$<br>$Y_i=\beta_1x_1+\beta_2x_i^2+\varepsilon_i$<br>$Y=\beta_0+e^\beta_1x_1+\varepsilon$</p><p><strong>方程一和方程二为线性回归，方程三为非线性回归。</strong><br>线性回归中<strong>线性</strong>的<strong>含义</strong>: 因变量$y$对于未知的回归系数($\beta_0,\beta_1,…,\beta_k$)是线性的。这就是问题中所说的<strong>参数线性</strong>。换句话说只要系数B是线性的就称为线性回归，方程一和方程二中的回归系数B都是线性的，而方程三中自变量X1的回归系数为非线性，因此，方程一和方程二为线性回归，方程三为非线。</p>]]></content>
    
    
    <summary type="html">备战数学建模</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数学建模" scheme="http://chfychin.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>毛概学习笔记</title>
    <link href="http://chfychin.cn/posts/bf6d62af.html"/>
    <id>http://chfychin.cn/posts/bf6d62af.html</id>
    <published>2024-06-24T03:26:37.000Z</published>
    <updated>2024-06-24T11:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d92e85118541340fe84975b62ecb2ebf4c8879a87fe62c9cc454b522a15cec6c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">毛泽东思想和中国特色社会主义理论体系概论期末复习（2023版）</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="毛概" scheme="http://chfychin.cn/tags/%E6%AF%9B%E6%A6%82/"/>
    
  </entry>
  
  <entry>
    <title>STM32答辩</title>
    <link href="http://chfychin.cn/posts/e22e37c2.html"/>
    <id>http://chfychin.cn/posts/e22e37c2.html</id>
    <published>2024-06-16T11:42:08.000Z</published>
    <updated>2024-06-17T01:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>STM32：系统内核小、专用性强、系统精简<br>Stm32 三种开发方式：寄存器模式、标准库模式、HAL库模式（全称是Hardware Abstraction Layer）</p><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><p>GPIO的全称是General-Purpose Input /Output，中文意思是通用IO端口。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/B08C4D251F5874F0AF73421C80CC09A0.png" alt="B08C4D251F5874F0AF73421C80CC09A0.png"></p><p>开漏输出和推挽输出的区别：主要是开漏输出只可以输出低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)；推挽输出可以输出高、低电平，连接数字器件。</p><h2 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h2><p>USART的全称是Universal Synchronous/Asynchronous Receiver/Transmitter，中文名叫做通用同步异步收发器。这是一种全双工的异步通信，发送端称为TXD(Transmit Data)，接收端称为RXD（Receive Data）。串口的设置是设置起始位、数据位、校验位、停止位和波特率，通信的双方要设置相同的参数，并且硬件硬件交叉连接。<br>USART主要特征</p><ol><li>全双工异步通信。</li><li>单线半双工通信。</li><li>单独的发送器和接收器使能位。</li><li>可配置使用DMA的多缓冲器通信。</li><li>多个带标志的中断源。</li><li>可编程数据字长度（8位或9位） 。</li><li>可配置的停止位（支持1或2个停止位）。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/1678E7A91DE1E3E81C4D1244450B9784.png" alt="1678E7A91DE1E3E81C4D1244450B9784.png"><h2 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h2><strong>ADC</strong> 的全称是“Analog-to-Digital Converter”，中文是“模拟/数字转换器”，将连续变化的模拟信号转换为离散的数字信号。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/28AD6228738EDCD6D1459AA4F7C4DE63.png" alt="28AD6228738EDCD6D1459AA4F7C4DE63.png"><h3 id="ADC的性能指标"><a href="#ADC的性能指标" class="headerlink" title="ADC的性能指标"></a>ADC的性能指标</h3></li></ol><ul><li>量程：能测量的电压范围。</li><li>分辨率：ADC能辨别的最小模拟量，通常以输出二进制数的位数表示，比如:8、10、12、16位等。位数越多，分辨率越高，一般来说分辨率越高，转化时间越长。</li><li>转化时间：从转换开始到获得稳定的数字量输出所需要的时间称为转换时间。<h3 id="ADC的特性"><a href="#ADC的特性" class="headerlink" title="ADC的特性"></a>ADC的特性</h3></li></ul><ol><li>12位精度下转换速度可高达1MHZ，即1微秒。</li><li>供电电压：VSSA：0V；VDDA：24V~3.6V。</li><li>ADC输入范围：VREF- ≤ VIN ≤ VREF+（一般VREF和VSSA接在一起，即0V；VREF+和VDDA接在一起，即3.3V，所以一般ADC输入范围为0V~3.3V）。</li><li>采样时间可配置，采样时间越长，转换结果相对越准确，但是转换速度就越慢。</li><li>ADC的数据结果是12位，可以左对齐或右对齐方式存储在16位数据寄存器中。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/DE3C360E1F33DEE6CCFF268A78E8F122.png" alt="DE3C360E1F33DEE6CCFF268A78E8F122.png"><h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2>DMA的全称是“Direct Memory Access”，中文名称“直接存储器访问”，提供在外设与内存、存储器和存储器、外设与外设之间的高速数据传输使用。它允许不同速度的硬件装置来沟通，而不需要依赖于CPU，因此CPU可以在此期间执行其他任务。<br>DMA搬运的地点</li></ol><ul><li>存储器—&gt;存储器（例如:复制某特别大的数据buf）</li><li>存储—&gt;外设（例:将某数据buf写入串口TDR寄存器）</li><li>外设—&gt;存储器（例如:将串口RDR寄存器写入某数据buf）<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/25A3AC7B7267753B450847A07C9FA174.png" alt="25A3AC7B7267753B450847A07C9FA174.png"><h2 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h2>IIC全称是Inter-Integrated Circuit (集成电路总线)，用于连接微控制器及其外围设备。IIC属于半双工同步通信方式。<br>IIC串行总线有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL。两条线都接上拉电阻，以确保总线空闲时刻为高电平，其中时钟信号是由主控器件产生。</li><li>起始信号<br>当时钟线（SCL）为高平时，数据线（SDA）从高电平跳变到低电平。</li><li>起始信号<br>当时钟线（SCL）为高平时，数据线（SDA）从高电平跳变到低电平。</li><li>应答信号<br>主机每发送一个字节（8个bit），就在第9个时钟脉冲期间释放数据线（SDA），由从机反馈一个应答信号。<br>应答信号（SDA）为低电平时，规定为有效应答位（ACK，简称应答位），表示从机成功地接收了该字节。<br>应答信号（SDA）为高电平时，规定为非应答位（NACK），一般表示从机接收该字节没有成功。</li></ul><h2 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h2><p>PWM全称是Pulse Width Modulation（脉冲宽度调制），它是通过对一系列脉冲的宽度进行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于有效电平的时间占据整个信号周期的百分比。</p><ul><li>PWM模式1<br>在向上计数时，一旦CNT<CCRx 时输出为有效电平，否则为无效电平。在向下计数时，一旦CNT>CCRx 时输出为无效电平，否则为有效电平。</li><li>PWM模式2<br>在向上计数时，一旦CNT<CCRx 时输出为无效电平，否则为有效电平。在向下计数时，一旦CNT>CCRx 时输出为有效电平，否则为无效电平。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/16F22C096F8570792E7467C8D94F516D.png" alt="16F22C096F8570792E7467C8D94F516D.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/DF802ECC05D4F8502679EA4FAA6D1C52.png" alt="DF802ECC05D4F8502679EA4FAA6D1C52.png"><h2 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h2></li><li>时钟产生器<br>STM32通用定时器有四种时钟源：<br>内部时钟（CK_INT）<br>外部时钟模式1：外部触发输入（TIMx_ETR）<br>内部触发输入（ITRx）：使用一个定时器作为另一个定时器的预分频器<br>外部时钟模式2：外部输入引脚</li></ul><p>高级定时器（TIM1、TIM8）、基本定时器（TIM6、TIM7）、通用定时器（TIM2~TIM5）<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/247B25D6084DFDEE33672156715F67C8.png" alt="247B25D6084DFDEE33672156715F67C8.png"></p><ul><li>向上计数：<br>计数器从0开始计数（递增），计数到自动加载值（TIMx_ARR）后产生一个计数器溢出事件并重新从0开始计数。</li><li>向下计数：<br>计数器从自动加载值（TIMx_ARR）开始计数（递减），计数到0后产生一个计数器溢出事件并重新从自动加载值（TIMx_ARR）开始计数。</li><li>中心对齐计数：<br>计数器从0开始计数（递增），计数到自动加载值（TIMx_ARR）- 1后产生一个计数器溢出事件并从自动加载值（TIMx_ARR）开始计数（递减），计数到1后产生一个计数器溢出事件并重新从0开始计数。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/11416BE9E27DA7521661C27E02E55A93.png" alt="11416BE9E27DA7521661C27E02E55A93.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/D7548BCE7BCFD388F49C7E5FCC44C580.png" alt="D7548BCE7BCFD388F49C7E5FCC44C580.png"><br><img src="https://tuchuang.voooe.cn/images/2024/06/17/A9A2811A44F64A543871C719CFAF8B96.png" alt="A9A2811A44F64A543871C719CFAF8B96.png"><h2 id="DHT11温湿度传感器"><a href="#DHT11温湿度传感器" class="headerlink" title="DHT11温湿度传感器"></a>DHT11温湿度传感器</h2>工作电压范围：3.3V~5.5V<br>工作电流：平均0.5mA<br>输出：单总线数字信号<br>测量范围：湿度20~90%RH，温度0~50°C<br>精度：湿度±5%，温度±2°C<br>分辨率：湿度±1%，温度±1°C</li><li>电源引脚<br>DHT11的供电电压为3~5.5 V。传感器上电后，要等待 1s 以越过不稳定状态，在此期间无需发送任何指令。电源引脚（VDD，GND）之间可增加一个100nF 的电容，用以去耦滤波。</li><li>串行接口（单线双向）<br>DATA 用于微处理器与 DHT11之间的通讯和同步，采用单总线数据格式，一次通讯时间4ms左右，数据分小数部分和整数部分</li></ul><p>DHT11 采用单总线协议与单片机通信，单片机发送一次复位信号后，DHT11 从低功耗模式转换到高速模式，等待主机复位结束后，DHT11 发送响应信号，并拉高总线准备传输数据。一次完整的数据为 40bit，按照高位在前，低位在后的顺序传输。<br>数据格式为：8bit 湿度整数数据+8bit 湿度小数数据+8bit 温度整数数据+8bit 温度小数数据+8bit 校验和，一共 5 字节（40bit）数据。由于 DHT11 分辨率只能精确到个位，所以小数部分是数据全为 0。校验和为前 4 个字节数据相加，校验的目的是为了保证数据传输的准确性。<br>DHT11 只有在接收到开始信号后才触发一次温湿度采集，如果没有接收到主机发送复位信号，DHT11 不主动进行温湿度采集。当数据采集完毕且无开始信号后，DHT11 自动切换到低速模式。</p><ul><li>主机发送复位信号<br>DHT11 的初始化过程同样分为复位信号和响应信号。<br>首先主机拉低总线至少 18ms，然后再拉高总线，延时 20~40us，取中间值 30us，此时复位信号发送完毕。</li><li>DHT11 发送响应信号<br>DHT11 检测到复位信号后，触发一次采样，并拉低总线 80us 表示响应信号，告诉主机数据已经准备好了；然后 DHT11 拉高总线 80us，之后开始传输数据。如果检测到响应信号为高电平，则 DHT11 初始化失败，请检查线路是否连接正常。<br>当复位信号发送完毕后，如果检测到总线被拉低，就每隔 1us 计数一次，直至总线拉高，计算低电平时间；当总线被拉高后重新计数检测 80us 的高电平。如果检测到响应信号之后的80us 高电平，就准备开始接收数据。实际上 DHT11 的响应时间并不是标准的 80us，往往存在误差，当响应时间处于 20~100us 之间时就可以认定响应成功。</li><li>数据传输<br>DHT11 在拉高总线 80us 后开始传输数据。每 1bit 数据都以 50us 低电平时隙开始，告诉主机开始传输一位数据了。DHT11 以高电平的长短定义数据位是 0 还是 1，当 50us 低电平时隙过后拉高总线，高电平持续 26~28us 表示数据“0”；持续 70us 表示数据“1”。<br>当最后 1bit 数据传送完毕后，DHT11 拉低总线 50us，表示数据传输完毕，随后总线由上拉电阻拉高进入空闲状态。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/FFDBACF61846C1E3BD19F1D79F936885.png" alt="FFDBACF61846C1E3BD19F1D79F936885.png"><h2 id="DS18B20温度传感器"><a href="#DS18B20温度传感器" class="headerlink" title="DS18B20温度传感器"></a>DS18B20温度传感器</h2>测温范围  -55°C~+125°C<br>工作电源：3.0~5.5V/DC（可以数据线寄生电源）<br>单总线半双工通信方式。<br>DS18B20共有6种信号：复位脉冲、应答脉冲、写0、写1、读0、读1。这些信号中除了应答脉冲以外，都由主机发出同步信号，并且发送所有的命令和数据都是字节的低位在前。</li><li>1、复位脉冲<br>单总线上的所有通信都是以初始化序列开始。主机输出低电平，保持低电平时间至少480us，以产生复位脉冲。接着主机释放总线，4.7K的上拉电阻将单总线拉高，延时15~69us，并进入接收模式（Rx），接着DS18B20拉低总线60~240us，以产生低电平应答脉冲。</li><li>2、写时序<br>写时序包括写0时序和写1时序，所有写时序至少需要60us，且在2次独立的写时序之间至少需要1us的恢复时间，两种写时序均起始于主机拉低总线。<br>写1时序：主机输出低电平，延时2us，然后释放总线，延时60us<br>写0时序：主机输出低电平，延时60us，然后释放总线，延时2us</li><li>3、读时序<br>单总线器件仅在主机发出读时序使，才向主机传输数据，所以在主机发出读数据命令之后，必须马上产生读时序，以便从机能够传输数据。<br>所有读时序至少需要60us，且在2次独立的读时序之间至少需要1us的恢复时间。每个读时序都由主机发起，至少拉低总线1us。主机在读时序期间必须释放总线，并且在时序起始后的15us内采样总线状态。<br>典型的读时序过程为：主机输出低电平延时2us，然后主机转入输入模式延时12us，然后读取单总线当前的电平，然后延时50us。</li><li>DS18B20典型温度读取过程<br>复位—&gt;发SKIP ROM命令（0XCC）—&gt;发开始转换命令（0X44）—&gt;延时—&gt;复位—&gt;发送SKIP ROM命令（0XCC）—&gt;发读存储命令（0XBE）—&gt;连续读出两个字节数据（即温度）—&gt;结束<br>转化后得到的12位数据，存储在DS18B20的两个8比特的RAM中，二进制中的前面5位是符号位，如果测得得温度大于0，这五位为0，只要将测到得数值乘以0.0635即可得到实际温度；如果温度小于0，这五位为1，测到得数值需要取反加一再乘以0.0625即可得到实际温度。<h2 id="OLED"><a href="#OLED" class="headerlink" title="OLED"></a>OLED</h2></li><li>起始信号（SDA低电平）: 当SDA线从高电平跳变到低电平时，表示一个数据传输的开始。</li><li>停止信号（SDA高电平）: 当SDA线从低电平跳变到高电平时，表示一个数据传输的结束。</li><li>数据传输: 在IIC通信中，数据传输是通过SDA线上的高低电平变化来实现的。数据传输时，发送方将数据位放在SDA线上，然后通过SCL线上的时钟信号将数据位发送给接收方。接收方通过检测SDA线上的电平变化来接收数据。</li><li>应答信号（ACK）:在数据传输过程中，接收方需要在接收到每个数据位后发送一个应答信号（ACK），表示数据已被正确接收。应答信号是一个低电平，在SDA线上持续一段时间，然后恢复高电平。</li><li>非应答信号（NACK）:在数据传输过程中，如果接收方无法正确接收数据，会发送一个非应答信号（NACK），表示数据未被正确接收。非应答信号是一个高电平，在SDA线上持续一段时间，然后恢复低电平。</li></ul><p>IIC通信的时钟信号（SCL）是由发送方产生的，通常频率为10KHz~100KHz。IIC通信的波特率由时钟信号的频率决定。<br>IIC通信的优点是简单、易于实现，缺点是速度较慢，通常用于低速度外设的通信。<br><img src="https://tuchuang.voooe.cn/images/2024/06/17/9C2BB8518D5E73568B517AC86C456297.png" alt="9C2BB8518D5E73568B517AC86C456297.png"></p>]]></content>
    
    
    <summary type="html">STM32答辩内容复习</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="STM32" scheme="http://chfychin.cn/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>git 基本使用</title>
    <link href="http://chfychin.cn/posts/518e617c.html"/>
    <id>http://chfychin.cn/posts/518e617c.html</id>
    <published>2024-06-15T10:53:25.000Z</published>
    <updated>2024-06-15T11:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 命令管理 github 和本地仓库</p><h2 id="1、git-全局设置"><a href="#1、git-全局设置" class="headerlink" title="1、git 全局设置"></a>1、git 全局设置</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> xxx   <span class="comment">// 设置全局用户名，信息记录在~/.gitconfig文件中</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> xxx@xxx<span class="selector-class">.com</span>  <span class="comment">// 设置全局邮箱地址，信息记录在~/.gitconfig文件中</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span>  <span class="comment">//查看全局配置项</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span>   <span class="comment">//查看全局配置项</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--list</span>   <span class="comment">//查看配置项</span></span><br><span class="line"></span><br><span class="line">git branch -<span class="selector-tag">a</span>   <span class="comment">//查看本地分支</span></span><br></pre></td></tr></table></figure><h2 id="2、git-仓库初始化"><a href="#2、git-仓库初始化" class="headerlink" title="2、git 仓库初始化"></a>2、git 仓库初始化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">init</span>    <span class="comment">// 将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</span></span><br></pre></td></tr></table></figure><h2 id="3、github"><a href="#3、github" class="headerlink" title="3、github"></a>3、github</h2><ul><li>新建一个项目，名字要和本地要上传文件夹名称相同</li><li>添加本地公钥<h2 id="4、本地（git-bash）"><a href="#4、本地（git-bash）" class="headerlink" title="4、本地（git bash）"></a>4、本地（git bash）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin git@git.github.com:xxx/XXX.git    <span class="comment">// 将本地仓库关联到远程仓库</span></span><br><span class="line"></span><br><span class="line">git branch -m master main  <span class="meta">#将本地分支改名为main，与线上保持一致</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">add</span> .   <span class="comment">// 将所有待加入暂存区的文件加入暂存区</span></span><br><span class="line"></span><br><span class="line">git rm --cached -r .   <span class="comment">//删除缓存区所有文件</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;给自己看的备注信息&quot;</span>  <span class="comment">// 将暂存区的内容提交到当前分支</span></span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">git pull --rebase origin main  <span class="meta">##解决! [rejected]        main -&gt; main (non-fast-forward)，避免直接push产生的bug</span></span><br><span class="line"></span><br><span class="line">git push --<span class="keyword">set</span>-upstream origin main</span><br></pre></td></tr></table></figure><h2 id="5、示例代码：添加Git安全目录例外"><a href="#5、示例代码：添加Git安全目录例外" class="headerlink" title="5、示例代码：添加Git安全目录例外"></a>5、示例代码：添加Git安全目录例外</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> <span class="attr">--add</span> safe<span class="selector-class">.directory</span> <span class="selector-tag">G</span>:/Chfy_blog/PicGoDemo</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">git 基本使用</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="git" scheme="http://chfychin.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sublime</title>
    <link href="http://chfychin.cn/posts/f92f48ea.html"/>
    <id>http://chfychin.cn/posts/f92f48ea.html</id>
    <published>2024-06-05T04:56:34.000Z</published>
    <updated>2024-06-06T11:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sublime Text</p><h2 id="Sublime-Text安装"><a href="#Sublime-Text安装" class="headerlink" title="Sublime Text安装"></a>Sublime Text安装</h2><p>1、Sublime Text官网下载 <a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/E3B9FA4C03F3C8F0EDED1D7DA2F6BE3C.webp" alt="E3B9FA4C03F3C8F0EDED1D7DA2F6BE3C.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/49F431C671BC3360FE7E22F23264EE90.webp" alt="49F431C671BC3360FE7E22F23264EE90.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/F5E99CD5E4826BDA3A25E516EB136423.webp" alt="F5E99CD5E4826BDA3A25E516EB136423.webp"></p><p>2安装 sublime text</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/F0C6BE322559A3162863828FEF2A7B5D.webp" alt="F0C6BE322559A3162863828FEF2A7B5D.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/3472BE945985239E9F210BBB60B252A1.webp" alt="3472BE945985239E9F210BBB60B252A1.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/86B47F0FEF0A697D764DEFAC0DAEBDC8.webp" alt="86B47F0FEF0A697D764DEFAC0DAEBDC8.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/6A13B0D344C0C97532CBB9189062336A.webp" alt="6A13B0D344C0C97532CBB9189062336A.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/A81DB6D8867EBBE0BC0F7BCE9B56D2F5.webp" alt="A81DB6D8867EBBE0BC0F7BCE9B56D2F5.webp"></p><h2 id="中文设置"><a href="#中文设置" class="headerlink" title="中文设置"></a>中文设置</h2><p>打开 Sublime Text 的界面都是英文的，下面将 sublime text 设置成中文。</p><p>1、打开软件，点击 Preference ，选择最底部的 Package Control ，出现查找栏。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/303B2FF3E33F0E1D6E8DEBD6688ADCE5.webp" alt="303B2FF3E33F0E1D6E8DEBD6688ADCE5.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/E1F3E50A39B5C9C42DAB26A673B61A5E.webp.png" alt="E1F3E50A39B5C9C42DAB26A673B61A5E.webp.png"></p><p>2、然后在搜索框中输入关键字 install package ,点击选择其中的：Package Control: Install Package。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/60BC75CBD398847080DA98B518C89DD9.webp" alt="60BC75CBD398847080DA98B518C89DD9.webp"></p><p>3、点击之后稍等一会，等待插件列表加载完成。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/0F44619F4ECD20340F536214DDD2C352.webp" alt="0F44619F4ECD20340F536214DDD2C352.webp"></p><p>4、在搜索框中输入 chinese，选择下拉框中的 ChineseLocalizations 。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/455A8D622F6937E26C019ACBAF2A9B3A.webp" alt="455A8D622F6937E26C019ACBAF2A9B3A.webp"></p><p>5、点击之后，中文包就安装完成了。如果软件语言没有更换过来，可以先关闭软件重新打开，然后点击 Help -&gt;最下面的 Language -&gt; 简体中文。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/02C9AED2636329905C5C4117BA5EB3C5.webp" alt="02C9AED2636329905C5C4117BA5EB3C5.webp"></p><h2 id="Sublime-Text-激活方法"><a href="#Sublime-Text-激活方法" class="headerlink" title="Sublime Text 激活方法"></a>Sublime Text 激活方法</h2><p>1、使用浏览器打开该网站 <a href="https://hexed.it">https://hexed.it</a> 。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/BF8890E5B10B15DD5EBE4554B45D7956.webp" alt="BF8890E5B10B15DD5EBE4554B45D7956.webp"></p><p>2、点击“打开文件”，选择 sublime text 安装目录中的“sublime_text.exe”</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/1f3c0549c0d41edb81580f6da2b4e7f0.webp" alt="1f3c0549c0d41edb81580f6da2b4e7f0.webp"></p><p>3、Ctrl + F ，搜索输入 807805000f94c1 ，找到后，并且替换为 c64005014885c9 （4180 新版本将 807905000f94c2 替换为 c6410501b20090）。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/161EA831D2431914677627BD611AA2BA.webp" alt="161EA831D2431914677627BD611AA2BA.webp"></p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/2bdf4baa-e8db-4387-9d73-be4f5ffa8618.webp" alt="2bdf4baa-e8db-4387-9d73-be4f5ffa8618.webp"></p><p>4、点击“另存为”，保存到本地并命名为：sublime_text.exe</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/798ECF386A8B1B9D67008D9C0E58D5ED.webp" alt="798ECF386A8B1B9D67008D9C0E58D5ED.webp"></p><p>5、找到 sublime text 安装目录，将原来的 sublime_text.exe重命名为：sublime_text_bak.exe。将刚刚保存的 sublime_text.exe 复制到原 sublime text4 安装目录中。</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/06/982335C843150BBCD19A1E4F851523D9.webp" alt="982335C843150BBCD19A1E4F851523D9.webp"></p><p>6、激活成功</p><p><img src="https://tuchuang.voooe.cn/images/2024/06/11/9DFB1E972C2CECBD80E0E3EEC695501B.png" alt="9DFB1E972C2CECBD80E0E3EEC695501B.png"></p><p>7、激活前后对比</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/67D7E0CA9BA70C09CCF1D04B52553BE8.webp.png" alt="67D7E0CA9BA70C09CCF1D04B52553BE8.webp.png"></p><p><img src="https://tuchuang.voooe.cn/images/2024/08/20/9D5DAE76FE5A2089275613498F0786A1.webp.png" alt="9D5DAE76FE5A2089275613498F0786A1.webp.png"></p>]]></content>
    
    
    <summary type="html">sublime安装与破解</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="sublime" scheme="http://chfychin.cn/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>有感</title>
    <link href="http://chfychin.cn/posts/67481514.html"/>
    <id>http://chfychin.cn/posts/67481514.html</id>
    <published>2024-05-28T13:37:54.000Z</published>
    <updated>2024-05-29T06:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>你是一名二本学校的学生 高考志愿填报出来后 你决定了既然你在二本学校就要好好努力 你进入了学校确实也打了鸡血好好努力。但你看到同学参加了一些竞赛你没有机会接触，于是你着急忙慌的联系老师希望能接触一些竞赛提升自己，你开始接触了算法 那个时候正好在学c语言，你只觉得你的基础突飞猛进你觉得这是一条对的路，于是你开始自己摸索算法道路，但你渐渐发现这个东西很难，自己的学习浪费了很多不必要的时间。学长都告诉你我们学校算法难度比较大，缺少底蕴弄不出来，学校也没有算法的学习氛围，你开始觉得你走错了方向，你担心你选错了路浪费了青春年华，但你没有放弃，终于在半年的磕磕碰碰中进步了微小的一点点。<br>时间来到2024jscpc，你第一次来到这么厉害的大学里 ，伙伴们相互调侃说高考再有两百分指定能上这个学校，你也点头默认微笑回应，大家都说这只是个见世面的机会。比赛结束，你只做出来了两题，虽然老师说没关系，继续努力，但你还是些许的失落，虽然你早就知道你没法在这种比赛中获奖，回来的大巴车上太阳很刺眼，很像当初充满信心闪闪发亮的你，回想那些厉害的高中选手这么早就能获得金牌，你觉得或许你的终点才是别人的起点。人生本就各不相同，如果每个人都能心想事成，事事顺利或许人生会少了很多惊喜，比如在紧张的赛场上终于AC一道题后的欣喜以及听到别人比赛快要截止时又AC一题的欢呼声，你也由衷的赞叹他们的能力，试图去体会他们的快乐。虽然技不如人但你并不因此感到伤心，你调侃着和同学说WA也是A，虽然嘴里乐观着，但你的心里还是觉得 忙碌了几个学期如果没有获奖是不是就代表着浪费了几个学期的努力，是不是代表着大学生涯也被糊弄过去了 大家都说只看结果不看过程，那既然没有结果 过程是不是意义也就不大了。<br>到现在你也仍然为此焦虑，虽然你不因为没有获奖而失望，但你内心却担忧着没法和家长交代没法和社会交代，父母并不会怪罪我没有拿到很好的名次也愿意相信我在学校有好好学习了算法，但你却没法安慰你自己因为你只觉得自己不够努力，也觉得缺少了好的方法和资源，现在你并不那么悲观 你只觉得 未来社会会有属于自己的容身之处 自己并没有想象中那么渺小。</p><p><img src="https://tuchuang.voooe.cn/images/2024/08/21/10001.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/08/21/10002.jpg" alt="img"><br><img src="https://tuchuang.voooe.cn/images/2024/08/21/10003.jpg" alt="img"></p>]]></content>
    
    
    <summary type="html">有感</summary>
    
    
    
    <category term="生活趣闻" scheme="http://chfychin.cn/categories/%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB/"/>
    
    
    <category term="有感" scheme="http://chfychin.cn/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机操作系统笔记</title>
    <link href="http://chfychin.cn/posts/521a3173.html"/>
    <id>http://chfychin.cn/posts/521a3173.html</id>
    <published>2024-05-12T05:23:27.000Z</published>
    <updated>2024-05-15T08:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d89c504ab026c9cdf11d09bd837c9ba67ff56727166eb66e7403c914e87dd4ae">ec3a31742d91755fb33828633f5c2355f9d21aa3c472285e5746d35a9ce878a8ee02334635e00eef92233d52f86ee4be7823a89c3b02a69642c9d0ed334c61578114b6a06f332836da52d8ef044cfef144aac2273f6576e3a4c5fe5a07e3aa595670192750482aef6d4918eed6bc71863d5e3e492e20c50715b974e605a8aca9f540eba8c5b34bfde1fef8704104fc3c7157c095223fac1300af9823bbf01eda1b5665566266bd90c2215d0d937ca3f17fee77795dd2bf296e2f4b5ab3966d57f9ae4eec60f9535e01c451c3a78032ad9ec7a638c3cb67ae9c97d4151d74f251447c5f74bc887cbbea0ca61e173b667471ae7fc3615fa20f1f850d148f02d7d1f6d6fcd8853556554bb348830a926f4de2f69556173c81ce88d303bb81cd42b77651053321d39a4a68c1a9774b22b4a22cdb939d2dd0e245010b211c0e68252b9ce4fd762e76a9ed8baee1ec219eff1fcf87862988dda503c8d1dc51b9bf07c51fd335a89364ee5d398132ecd879bb144f5fc093418d2b745d768a86818119bc846a63c82b0fb965e1085098e3129d50f0e701a55428d3d3d0d152bcddb217d424855fba29afe7c7962950e2754fc21893228b561c703b5cb8d2e63d13e169d50364fdfaf7d37b5a95bcc3401c436c10ab263525df5230f0f55f8b26be7703ba5468b62ebe1e0e9114ba0384d33ca005d8e5d5f079206b8c1ebde86b4129b5ff717abaeb77ef86b6a539833b2bd579e933bac8efe817230fd89cbc938c7c6ecdf4702547d6a30a6d7e9ccc866373fe1b9a11fc759c94aa419133569b992221ea4881b173cf4dcf5da61f023861d8519ae023cc6b0c8be9c6735c2d3ae8a878a43b1f4779987224c9f062832abe8db0b8331e5cdd0b602cf2736c63dd3e9f301f1983d5fee5bc6288edf55bc85da4726df364b7f358df99551032dfa7ec66ff0b6460fc09e7992b3ce9598b90cde00c953eba42c4b51148804c87b1c3671d26fdd028b4ca250efc7368d5be8a20957e24f2cb8e29f144a3f4daa6c008f7360aab4936f8ee5a9da37ce614df3824f548be78aaf50d1fe8cbbc09ebe1f425274a78db786ff91e5711c203569c296b5ac9603d1ac4a0690569cacbe89baa94d374a9cf248d8acf09a6ea4f53bc9b5805b1c2e1a07cdb5e42919d142a32b452eb1f825201d0f1caa445fffe82cb128a431bdff70515859d50c848ed4ee900098e4cb0c4cd5b53a815a3bbfde485bcebe8fce45a266b506a0c404fbdd59ecfe2035e56ec15d03959006af2c6b3fc2b76203fe7e146221d09d20c412a4a1e4519d7af8b10ad49d98542bd98ac0df73f798c6abb2b8bd8ca9f9be0b78ecc95c5c3d7a98976e3a40b7b3f839368888d6064782cb1f0a20564e888ea7ce11676986f3f5f5e243139e1aa53109a09ffd4828048bb26f8f3a66d5f35624801091d0b2b32819cef14d83d78bd37e74e87aa64b25e54386ca9b49f302bb6a7390e4eea0115e4036d0f07371327d66c044fb7c223c89be7fb9c0d183cc49b901f937671b4c8ebca2e9a7570d73dc52eea11c9f0c16df9a6a16db56f7c2a544e924af49317e631686a24ff47e7a368e06ba3e302d6d4b926ab8b237fb440a4a225b08b8479e1ff6ee4d469d76b709d2f7f23977ca8f8ae89a53441425644845abaf359863bd6bd9fb04b4cdec01e6ca62e83caeed68a1fda86d99e840905d55a69dc4e12315afb8583a0602e4ff9627d5468e24a086b61b1bcb639c913502d46d9206c50c6837cb90e4da8bd6fefd0cbd0b912a3764506eb7acc9d646842448c1c2d6759c0f93f472f7ea4b974390fcbd3385fb13a457bdc89ccf09648f8fbd483c96c071a884e550f9936a5541dcb77170d819ccba679aa29e903310a984d296e81c6388c2e338df04cfc92da6ebe1374c399b4a2c58c2d4de3698212d76ddf2f8e442ca096731020613429ed1988f1f9b332dd5e777e4598cec29a0647f2b4d30e08766123c581bc93ecd7c6504d332dfa5a1ada73783550c4534bcd7533d9b4b96bfa72c5b10e6c13c480a8f7602d9b790101316b8ef19a931ef6138155ae7e7c61f6c2f95d2aae1957eeefee50a4079f43a955198d3cd753065659e0226d685669c55e85c7beb7a2407272a15d8867b419b80126572160d8e23936154516f9a7ac03441bfd623d8cb2e77edd02cf09005e321bc4858f69b912db99a59e80bca1d82a807dc2252e92c2cd3ba6c6bdd397b72b5fad4f41ef5eab8896a6d19de168345d04aa645747cc34ec6f2ae1fe2ffaf00af38e46f785bdafa82d3dcfa2eb58b53d36efa6f68ab3e70e16928a69ae6bece155c8db6319d77a3c4ddf971fd58279fbc23dc961d39deb08cb57905d272526025448bdf65f0abf9ae07c6d10c9566f89dd7d8e4403cab380e6c5df61b1c7f4fa5482b0826cb36dd4cd44d267ab40ab76bedaf4c81bc35845310567fb1bdbe36027fe326f5c5e81e9e6f5fa46195494257b6c39826cf3c1f81e5b705fbe738988c75f1423dfa167458083f33c3d6a0e524f4cfc5401bf6588dd54931b3ab9d3b26d3879e2c0573d352b38dbb2761bb5196ede52f8de3dd57c359190563d9c5cbd9ad45e1d24cd6e062b6febc7761b7de04d2e5ad6d0de17e8ba1e866b276c828cea310885afbfcc531707e44e8f44aa499bed9d6f5b7c405b06caa72783840daaff6cea5aa8ad8a191611c1de2383d1185adbb756f34c3abc31f7c2984d079271e7bfcbc696432013fd832b03dbd633596d6aebd2e2b7e73fd770254e21ec4617948f945e5422484e283e4822720c593c1e0ce25778c69c32515e2439845f679de6a8250ca3b114f24e5b0a55be52462e9996e66a1a797e1ef3ed7a0c5fa40488c8e21bee08281fa9230648d372f7f1e7a28433acabce8707d4ef477ec63bb9418dad2fdf8b2a1d14da9d2fcfd609656e6f16088bf66ce16336fbcce63f8dc96b34d04590c8cdcbde5c9aa6ca69b729da06905e3c8fe2bd1a5dcb8cced3994bb30ecc06a93fb377d0f580c788ba6b82ea1eb5a1e5376c117f78cac008c5eaf38983bbe2fc7ebb487ddc0242e94195a8af4b038125163cad1bf307227dfa58c95383d4412913409b156f06c45a60ccb4d9b766cfed966dfe6e278127b3d805fb79dca6c9b15f9a00eedae86774298960a33a319e25fc737a44f82e9a73bfdd8a63f1412e06d046a9c4aacc4b14fbdbd99834cceea3da0780e8bb1e0b4ea7e3290a8e4f933a27aba6ed8d7c8190e7c49c479364b2a4cd545fcf975c33e515eff857af384fd1128aa43db7e41038748affc8a59f29c4686a604168acd4185e544cc719e04067e63961fe075a59f792e87993bbf91640183d23e2ec93ee2047ef127166e98aafa704bf535cdb24771d97da0a271f5700a5f0523fb4cbaae805a753355e477e21b200642b3b7890efd514ea2cf9c236860a3b279d07912ae0c332f295afc92fa739b7cf354971e13a1760ccbc5aeea5418211b54f6272cb727fe7ed20537be05456369baa07fb318fd486ea13bfaae1509a738e5ec608a465d65f6861aea23cc4b1fb1e3df303972b6f0ee6807afe61aef915ccf76098db8841bc7db71e79ac617478e68e89ca61afe0b7e767bd0681cf6b03557707d833b5170b48d09eefe31cee9ae84602f882a54ddaa8ad073aaabd32634e4e8362ed449baff5981e0dda130d338b254b8f0e570fcc97334ee422200bb30c1d3f3ee7febe7eabc237df62090343e12748ac18f4e587fb30b636da6aa9cc76f93548d58bf3842d2fa452f2640161be42f610b1e4b60929f7064608f2bb8d7a122f10335803963e0acb1748a99ede0561d9fca7a06a8b39eb37aa28c2a9721620be2acda05772b4029e711c8f7c659f69731676edc79df8a6b15cfe3f03bb692fdd562c2ae668148db944391e12b6a4305aa8bf76e454d736b2a0c5a6cb92841166ef71d642ab69c0148d89b905424d356da6e2a97dffcf42f312aff61f646d47c9338067d83323d4f1571acc95cf225e95bc8c9a376886056a5053510c666bb7fa022cdbce7339e00d023a2c0f2936552d17dfa543b25f2763324c52d213642f38b0f464eb5eaca1a7be8db0ee1627a8cb23d8028c0e70fb94c371614fec12d5158a9f9a1e029f3ac83671ede67d3d40c8d33f5f1e93b5a3fd67df4a29f6313d8d7368c152ce022d8df1c855dd79b06f8f3455d70fe6ab1629d63f19a4366f6be9c359e056661e193fbc184da24dfa2be44d21f496902c13556816d2aa7d37b2f6a5194a4b18f2d741b37058e827fc34f47e23de2d826f18dc9a58e2b6522d388a0e76cbc44d8f9531ab7879e29e601076d02ab88eb00f9e008aa85708a9373d72e123f68ed016c9243fecf5dd764ef8d223d07e8c9ec31b56186293bf4693f32abcda3110491940645c3990aa979926a9a0fe6c135d873894aab65f920db10bdec2ba1f09aa994380fb6c070aeaf0a92fbea7c0c1974465e078669eba7d97355c87922ac10b2afa4468fb8cdbcca2da7236a0eb338cd8859c4ed82966472f89024794915eb48b3ddfa624921cce59a57ba8b57c44f2892099261444c3ad64193415c8e6bb4aa0c89906d1366da9f7ea8479244594d928b638d5497bcbd4bb65ec32a4324b43d65f6b9ce701602d897f31f1b76b6e34252f08dd90d9c93dd96474bb9350cb910b708ed83b640d3af931f8ab8cf3091445cb93ee8fbe68eaa50d6b3ba18f3b36d004510fe273c4084c61e9a87b14143580b3e090e0d020db982f1392e25cb1a8fb98fb63c31b9469b304da94afb6ab27d5ea80bca80de0ebd4d8f5284c3a8a25bf456a0caa9ebe7251b58d4d9db4fabb25a3b1a4b66199a27e140b428b4ed6b5adc15367259e36460883222cfed7c9de37688293b64745214adf8c832261ea28f8a7f7903b9259d45137fb2008d20e9929797bff7d4d5e7c5d90ccce20b07d0fcc731d62ff22f0b8c5f70a5b0b729922fe8437c41151a49641e4f19b82f69b9d98c6eca279c421ac74dbbe2f041aeda176aa301576052389fe376da036cd044f92c815744df124f57555ba4e461969af642669cf43407811b9ebdf02e840c03f31d76fc286221a692e62a8e28de0607c9627309fabb2d6d7bdc1e7733436fcd0420ce86a7c71aa5a1d01b9db17d58025052230f95623fe577d78a48415200b27426cdd01ab7d4424b897d0a4f13f59bdadbe8ed7e3d46584ee91e30fe2aee20987ce7adab9d8ea90f1a8b95d66c6259d30b6f21c67895887fd524619cb64cb8c7a10ed6b2045ec80b44f13c2df4573d5ee3e533befcf61408873da93d70340444bb9ecc7a508641734e39a326e123fcf3e00ed1340e72b9783ea9fa6b0aebf362b267cb7acd4d3af5a97760d109db0641a658115dd9625b43f454773bb27f433367585a9faeffda5536625f05fddd9cd15cca648ca31898f3c83dc446e2d56c69359590fb9365bf6b30297edcd30018c994f0702eb5aa76b46d08435efacd3c9d8cf2713057f8b68f472b5d314f42213172708e8629dfd8eb3b46c0135dfc6bf9c8df27453d2b01211e6585149c49cb7cc48cfb93d160ca4b8e4a89dc67403ff519577d0a3c2ff2726b4e390b080e154b50df83b60e5fb59beb3e932f55522d278ff5f399edf4e0b93681830cfbfd553fdd9195c971addf4a49e24e6d764c459ff02d32d1cdb4359c1883aa861c5a2da65b59c8e4d9b4a43efd1479a187cf9ec35f7538d8123cc45cf996db29edc331af0bfd4c0e4edac08a95a731ca6219600a092421f0168ff588011e6bc448cefb3e2d0490442d3533400e9782b614ebf52197e1fcccee458b07bfa46d0a2654169ee31640672adf746db78bbee95cd932158fe98406b39b529d9a99d4a30d81f51d346f8e19e0fe4c047a609f51538d64015fd999b0a42b706b4265671ec0f6e2a8cb3ce30b2d0f1eb9069fbf8a91ccc9868cdb64aa62ec31818a2b95ce22017b3adffbf7b02ab4a27f1d74f38fec3fe5b6e5405019a393244f092020bd7804536b3de9a32440bf39c56db9a65c9c71f66a6c8a09f782bb11af55e45a135d6b554cbf2cb1fa47dc40e11d6ea3a1f7b09edaa2fa9b4a9eb647c9869745afa10e5610ab2e29f33bd641e646af4c13242dd8801ea8cd311838e08b2d9e8d9cb6ae598d65253e8755cae4c7bbe1e8c2a742518b7fb15a29861482a5ae278630dca50ad8722c70115bbf741fcdb81a3195809d3b7768e39f6e19c2335c5ec905dbd0da7f76e02044bd3051256a4b19f4a077abe6db2bf968fec22d01bd139d6a5f9abe53e8e1dc7a57d349d09c6e2e9f476d7a5baaf28b6bcc16d19d9a16e1551ce3867541e46d594c3702ab0096f3b0894900525cb9a06923f980bf57ae033dffdec03b3c3c3e9f6f872bf79d821bfbbdf2a5895fb736ea9db56a92d11470215781e93f03f6a801b3104970651860347444015be7e8ef9a28aac9b0cc9101f25ae2dc110d7a39fa5fd3fd52a240ed21a058402efd0911db1253b27e10bf42dcb8ff121566900996c988cee67b8118193569578ce13bc91d9be99f3de0d43cd77cb56609c32efd65c91856fb1c112ddee0d479b171f7f5d02238a4151dea9ed7949927168dff4acda7624e0081cff6c9bbec7b6be525e57864dd4d8d4d968d9f6ec3a24f50460c1802554777788875663b62205814c25c09df4e8da3010b5b346e9e9e63397dad955774ca5d1a582f9b06fc64db2684bbf4c18b8b6a98dd5f39f04aaa32c8090c6434b95001361230df89f5a73efde712107f5ba81496f58aec336a223350c4ae3092c5f18ebb28fe4ee4362df1ecbbb451f9fb6c65d489fadfeabac707cf265a192a68d14602087e00ba7321278d866628d4b9fb736b074f20230bedfa096b4dbdbdb0e8789a09288379b5b913419b85dfa784c22c91f5f107bfd1987cef7c9c8487e630f840bbca3caf42a7957dc651c355076003c9455a31e5c3e25f5d70a7c9a2f5b310ea6e52d5257bc8d25573a2bb9c11d179eb7db371ce73246b17dd176a7a10853aa0432246d98f7e6f6805c0f0b9112676ef04c010a2732a07fc33636b2626404b752bf7b167ad2bfb637b57c3506659d79e3290354e8db22b99e2a7b920e9b470e5a13ebd82da624aef85653055d09f3a62e9b8b19fdf605d1fa6ad49abdfd19b29edea1e4cedfdc26ca35ae1833d1506987f7d0d464ac557d6a6c6d739feef4a2a85afaa8d0ae5d1b7b849826aed9777fc3fbeb8a6c2d3b7479697acec829aef1756c8f2280267bc7f6abd37d5ff92664424e5fd607aaf1cd9c5115f635d959de54a5a55cdd1acfe86d41bd81386c9a7a09024bc23207684fb1cbbe94258092a719dfcb5f59e4803a0a0afbf1216f63b4d1c0c834eabd78d993400efbdf26828800788827038bb4ca87ef01abc1daf60a0c1999d302cb0756f208e7074b40d5bae592b63e82c743d49f5dcbfe06065029657bef644405899986b0cbf0b9a75f8430a3217dbef2c13e8a6d1edd742d76ad5d509493a5f92360db8a1a6e94dc0e40bd5bc87680cb8caa6ac54b03d62a69507fee5fb905a97f2655bff320219f4e07f641653df91161f9ce0f9f539740838f88fa74727725de23c5533cbed757799a73c71f41216a7175afcd9808f9db540fd74cbcc3e3ca7f5a849434e94d63f049f8bebe1790327d766dbc2bf49b266ead338a959c80554b07c8b6c2a0808fd3af7e72dd2adabcf89b59375aedfba845127381df66469812d9c85fc9f04d1f9f8957d3326ca25f3349f6623eb540d459698bc9773355437ae84ebca2e07f2bdc62311540e679f86887535791b519f206cb12fd519ca5670a5cedfe2a03e1f10bf6c325d61b7e2820a33517712be9d872d1b36b8f079c398864d85e6d19882bf122d326e253a225838ec0d5a57ed38dd2ca931194a91e41fd9db3f5f51957ee550db0beeec20ed4eed7513b41098ee4aab72480c3e988bd038699c1110eec3420f210c7f515424e57c5cef9f4d14147697f4950b8f4603936dc67f7e94caeb0b460836c6736f7f6e0c312d3965c9a9dd39bfaacc0adf95e32316e1deb0848e915a82c938042ce8f9f711b5bc1fd47c58d0fe50373ce96e8997e5d3936e6561c08c894ce05949bf182434399ba64bf45210a86cc0e6f892c378520767f1b535ac5d0f261ea27e9dcc86478e14fdcc82b86b68d8a7a9445ab6b77c3f2d10f90b08d972a59d6e96d42823df1f340e9d06f210c484247437810467bbf9d12c7cfea5ca65fd7c66627bb787678e8850e7c8e44a81243055e87ad2f31f7dd150e94e96c491fa591edceb9c34d5ec7d5dcecb94ea37a21cea873e5789c2fd09e08b960de3ab68703827bc1db8c365f675d248b1de861099e4d9523c6359c2b2445cb2f9bf530c097b410aa3fca8910b85b1402af05f57ce131fbf31475aa1dd2abd235801eba3424dad1dc0e2b8939d0af8bca68332bc48fdf6ae28bc128b8ee4ce4036e96fc3f68134c091a3e9d2fe2fc9090a7319a4f0d7a5a8dd4faefb92d22e9f94035c17360c04c09175cbe38122a52253c208303de6cd21f9511555443d7972df4b27dc629aadace8cf683cce29f65d0b94200f795f3ba6f35f53601025c915d105887ebe37ef10824d6a36fd00c81f1fb7d2cb268ccc46a8464f02c3301aa7293278c6e02381db211985b609eaf739bddbb1d5b5d3bbd1b7d8b98f27763acfa2d03e3bd4e080ad97215939023a43c390672e8e0070ba9bce40b10be857854e2177fbddad7e64a972bd2ff21429656e42a1c02db4920a41c6c73e348b061b98766fda9aa59d5bafb68270fb7d07d9073681d614039cf1f0eb180663f5ab3e9df844fa55b73c38659ef0df883a8ea7cab9e9029cd409ae4d4bd1d26a31b52de9d1de4843faf7638f4c9e13ca90da155fb3443dca6752437a58bce11d3409742120eeabb85e48a34ff9694f009ef9ff86da27a447678ae105c82aba11b97f84a917b4c949e01633d30470f4b28d2350499082effb3ae120b5b3fba9b34bf130d57e77ee7d2754b731162613e735e6dbd4f7f4ff103d4d7dbbf4ae5ebf05cc4bedaa59f1d5fa05fe214b824a7fddcab883470663d4e5566165229f914d83156f19083ab14e5280205c9c2bba5c2d5bd0acaed55270ea0ed122bb97f662a699750c2da5709bc94c9924c52fbcc97f4d2744e10d5104c574021a1a31f40d29d669c600f951f526bc99b3c47ddcf4f043b7b0ba7df40ec7325bccabf2a3a3a1f8400f0827687b4adcda623ae8098b22e5872f506d436ef0c3edaeded7328e9ab1a80347ec3338a1988a2daf3476969dce5fb5fb410e457a98b986a3f862250af86e6255f69007f6072e99cf3a132c5afa4cc6ed4d71f7da0f2c9b9d78fd66150401a2bccd9a8c57b7e1034d7272ebb63e5f1cbd9284e956cb3ff859c2c8f0fcb31d5561b6e9b89a1ccd4a840f5101f17fb94fcf6691244f2b50fb55ab1510f0bf99c9b6c78c18b1105bcbc2db4e6e3ce133400d035cf6cd23109fd1dfa9a00daf45b320f054363b6d710c722159aec7c9197c2be3596c75e64a7e5a365e7bbf4e6bdc37343bcb1437858da745913338671490f7a524a9140282bb97ed97b7373725e765d70caf3493fc75a0b15a6debc3969b9d5c1ed4a70055713d44dc4df9007039baa50f259766b21eeb527e3ac6842f83fedc99b8e358a0c4c0192941c2957db037f0d3d5d3fec83a90e0bfc782a24e083cac8ca95c7e66abfa54537f59ee308f0c1d5ef711652fc22ba9bb83686a49613b9c1e07208296e71fb18796ae276ca45941db2a80784deed47c1ab76e1f31618c71e6314129d35179c5bb87c466be16ce35c6db4c69dfa2bb23de0df6c76a4ded886f6142ac6a0f1e2251fc36d44950349985f885c25e1dd7c437f036afb9a020a8b12f1d9e844484b98f8866f6ae84b82a89b0cae732576c94ebfb67356cdbee381125d7b7d06be3251f92c10a4ac05e3779dc807e27615424bee27728713c99f82cfebc4e6f756d5cb6cee967aff9814a5c3d5f8fe0b211c5759656d4ef54eb4f8e4dad408d988735975f0aac3b561e9c4f6667d7e0898f1f4efc547d180f86fad928e0f723a4025766a7bd322dfa34377f4a9cbb62196e3c90b3716a4478353f1942aa387709f7afea3134c3af583fadab9e0aa93dced2ccc4c58b301356a629bba8739cb9d5a24fd782d97d02af9f27dc76460a9fa551e77f96b48a174287d7970b6c4a73e5fa8152764405b1e4755d8f25314f0898d875f72f2b79cf2c3fa9fd480ac43155e3b31fe97dc527128c5a40e3acba66a0fff5794c253d634b214a31e5d194e8a7f7d5fd792611f5f8a0b80a81461f0a221489f51518019c4e9742f37a97ad3703277e4fb45aff72154a486f63ee3b31f7a4b01bc1a114555a2edba56728a1f7c07d74494189a8af16a2204529386ccc5b4bf856682d8f3827db49c6ef750562b00e2d54567f9412c7f3ae976387deec5c6de3c53ee361f4bc84307a9468e6b9acbe842058ad9086ca7c8e1366ea1e3285a44fa2d814ecc5726cbe4ac3f6c9099c6e35cc559431c4b612888204d2f76b0efe0121e19c671e1980fa97f9931beb0b8f7c3a16f1760fd06b8049b29598c1e5071c5d3dfea8ee3165fa523027b57c1df078d3f9eeeea8b01f944a1c7f8158342fccfa1b2fad4f53a606fae08f9046ba1051e69c23c7ff1a1101315380ab7e19097feaa2e6524d07cfbee990d006777cac8a2a849889f6f48f09b44bab29d5d7d1f96effd715dc51fde51b7f052466c0913e74a0b0775dadd4e89d2bad6d07b99c0994b5ef08f7c4399fec964d25b669b10ab3240b95887310e063aa6aa354684e28d486b839b9bd385c3c4396dfce1254fc50daf4d43a2404c53a20d3f63a277bacd144b9a44e1bc775bdbab5bfe91899bb7a01d740c629b97f91cde105f1cca480d05eb0888047832229f5715fabd7f2f41a6c5e54f29694a9d4d690355cbb85b4970f27086735615ce6b2001506b0e4dfaac50edb8a4e86be57b9eb7a5d799f0ace8c89eb21894784eb5dbe00b332af9d26eb7a3fdd549fbacfc8fbfd9a91e11b58d00886798d19ca51789f4be54429d9bd585fe4a988e7a6dbaa3f9f5fc0da6889ee1cd824e066767f087075a89a6fd6608be2c784adb95c7ac8e6f96730f70a33c32e262472bda6d56dd693390ab7340161b48b42a00f25723bf49d6575585192a0cc47df576d747a0669305e9537501926f3dd40813636593db628f7cba2d4a188ba3b4b36f28aadf672d7148b266fb974854bd2f4452faed64df9f583b94a97f69afb5a8d61a079d4490f629d347cf3cee5155ade0d501cf7fe38fda0a3a37976cc1db8da72d3b6446ec4355e564ed07d88fd2f92ce44a1115fac972df2bb16e170c6b07c25159982a1fc8cd5bc70b84a3fa4abeb160bcd78d9b33debd18b55fdfa05973b071545d1cd1480276347373c08e976aace85eff077333468a1b6345680907a38d5ab489adabcaa120c2eab7e027fed840ff870819f9314e657ddaf997493faf86a4fbfcec02c99f6bda59b1616ad28820271ba654eb576e720ed9b019b5aba852e22d980eccee9f4133a01e6b1d0817c226cc3a7d73b58bb9c96e5b3a273c38cb85a3f85cea158ebd53d117e942c9a6c1daf93317b5a12f957bcadf67580c573aa7adf809c6db751e7aafe92b71d6c748112b09925c3ee78edb6547c62c06197454ed880ae29ca11e00636ce43303b8c42d48d5290fd910050649367c0e45865c28d142698b23ae7315ba2f112eb2c6619eba9176229fe016fde715281767deee8bd28c2f3d3038c8759c97165a0a235113695494a264ca44548984cf9c5a0520885be4ef3db9a6011a16ded11ad0e3c706bd6b6f38fc9990560f36d7162038732f69a53b73f96fcbf3c31ad4a1e9e2cd5ce18870a62b75dd1c5cbee164fa9863aa40828c0049f2fc58afbc8df828974725eda01c569d2bc40ed3f39085c3c8dc011049c9f534d29aaf6c0a113420f192317f87d01ebe8e9ae38aa68c585fec17da4859b40dafe6f01efcd44cc8d6a3ac162514d50ab3accca08d33c1d5ae939c3958dc48e8850b76294baf425fa77d53ec76aed409c9763c92481cb64717cf32dc9d19c3180fbcb164e09a80975d9d53599b3e558c88957eae59b432b50eae0a123f68750023ed227af389ced0a81f11ab0b0dd5f2b59e5a436125e6fb4f31c25868be083a7a2750e4894dafdfacbe916431fbcb72d7ceefa9e016eda50ed7c435b4318092020fee90ea453611354c0758fb0e3d330d52fb202f5b82dfde37df1167b87e554706bf4315347513bff9a3c8e88ad6788a5773dfbeb9194fe00a2f93fe7ea9c892a2ef0ccbd2ac5807a29b52036f644316d35351f75c97829d407787b775717e06330c5e94ad087c6ba2116d42bcdb2a507496961db1aa2042a6df5a2636857c98a2c3f67429c2127f0062a2acad871e33f7b594ca21a5dd95c1ecf9c8dbcb7ae50d8a5e9fe8eeba47bf247d75d5f88aa426d0e239363e9a7021b07f8f4d62a1a477173f6e221edc04d66d0ce8339254fc038504a244347917eb8a94cd92e744238af684126f87d2d0a26ed98ec18aace2b1d22ed25439ff07c51a701e25ad3dde72fa3e3a1f3920df86dc301a9832bf1329a76079bd00cd4bdcb233ed6d3e5b1031164ba265d1d17854b5fc628f5dc833cfe426f8b852546b6b22fae777f5bfb4c38a09d564be5a304727b1709059a74004b3dbf7f786e46af959f19f85b04610a1a27ab3addda0e8a884b9abb74a8c1685c91568bb382afadda0245471e14b080e4d8b646e1a2588db38366ba9032a3db4babbae4c4fe1b12aa4aada833cdcb816bf4198f45cca7e42d08d8004dc1f6bea2115b426a97ec2087bee294cd7401abbaacca6d0b9b81b04000bab80d06347856e217a521050d21a7f56c0a25eb26c85e41f6bf5223e18f491a155859c0d06cbc3ffedc5fea98a486511b30acc0ea3f56bdafe01a2123ecfb531b5e1e40657470af8e630ee8fdd79c2794a6af66a247e1489fa3ac29168b8af82cfe3742d599081e6aa131905abef25de030978a6f8d92b06c495a3f005558e6c812abff3c4d5985c0c8bbe0796649ab07f2bb0033f0810afadcd48bd00afae41e2133e06909447f73c9b22a4bba5a50a9a5f8e4bbf6f78d3a739213f6b621d8c5798c3ce4691154a050dbb8c9788d31c1d89637f36fd3fac54a27f4a813af78eabd5ec66ead4738010cc7978fb204cfb9cf65cbbaa13fd383d0f62a2502e1e91fcb2e6d194117fcd9b20982c7562933a2a94ae6d6487c96cc021debdea21ed5f926bf48b09567ac01a7578d711d7586a4049bf372eeff50e9ee4ac82f0f02fe9c74595bc28d20773d1b070cf605c7be4e399d1a56200ab7d9befe3708b542f8a3a793bf47bb0ae6dc32625ebb78648d6adc9f801e722be6c432a67af5cfaf9661a529892526a795352d8f1f8805d0e86060c38f63748616f6553fec05881d5744cad29ead80a979bc01c4fed90764c3c83f062d227f5a96ecd74255bcb361bc51eb2808892068ee9daf347691bdaaa4e4f2087f6772897b14a07f220c0290d0fbe161329ef23ece289adc471f3361fb5ddc0ec37a590178370c8763e88d9473fe1f272a02b76d75eee44fdef9c49424c71852909ab8f6a85606f24b807c8dd709e22a399218c016ff31785545a6a626b2efe6bb788e972d2f32d7547d558214fa2d01fe8e2a4d078215edd35a318d4fca3c35a81b80df1ddd9f48e67cd0e4e8cace3494803608d7d96745cca06e0c82e90bdc911a2dbdd6dbe9828b4f12a6386256728b42b6090f2c343840b212348c9a6d92d0eda5255bb8aa46ce4437e5330c93ff9ccd2e5512fad821274611554cea99247e0a0c72adc7160addd1abcd0f32e8d1eb812036755f87505f4ce1da4663f620f0dfaad93ce16dbb5f35ef7e39e5bb840e503e733740d40bfc6908e6c993b2083cfc6bb8094db88e302ae9f8d95495bec5f6272bb3c5ed8c70f28173d5df908f1746bb02bd261fb893b114c36327987e93ee17802775590929d0ac9bd579bad9f27ef67ef43010a660f63b1dc0ffc012d1b0804d70e4fc1d3924bfabacf0d57a11bdd93acc2c5e6ae59aa40e4973666938bdfd5e7b16c7b3eb1f4bed0f7d56d8d9d2e59b30c6dcffd238dc59bfd2d130b72525a3c86ec5e112940040f7d260ea31883ee04cbf6be7eb2623ae5e60eb02fdaf99266755e95ae314f08dd66d27507ce479e9c3565cab5761657029851fff088642fd45b4718009c92b69a98bf3065df334f725269c9b0217076a3bf2d09292d967da960c9252c92b4938d88fb7b6e22617270d9b2a00fa19f3e1b7617b6edf0433a29ba8e6f894e6d6f588068300ef0936c1bcb0b4b6f96c6f42b12e35fb311a9c9fd829efbcd413158dd4e4c744c94d55cf20c539aa664a6a8b3547658e8cf98bcd6754f00ce57cea3d212ea3114e379fc0475b4072ef589c0cb4c941dfd5c58f011d7401de13493116d299e72ccc0d3f81baff7a4e7fea2bcf23663903bd60b350f116dd00103ebf0a2ea6c6e4c6fb93ff9d850c34b522d1e842f3755364d04406e7eebe1980bfacf4c663c4e67249192e6d9fda5b15d274a28308815251359478cad6c7822c01c60dccd968b99f79fc39e96df4dfdd3bdfee0940db401f05fbacaae244539f9551d3ab31d24b367c37c8ced9ff1fbb8c6e4a3716ac409d1f42218a35dd17865420621417a5ca8db1f6f1d7586114dc560432901272aa851c80c038b76eca2ecf8542df5564e58c29879a1b5bb59415ea9c561c4635a1da3e108b19e387455e33d79fe4dfc4daa881f81a9422169b6920d952161ff40e64d17207d630074e6b1b7bdbce01f2fbfb2955445b5235aacaa3d106f0a7608e502fb57d3888e82780ae5590f94907ff0f9a3a8e4c7279668fad1fa0d4a7f808d2b4ac4fd3987432ace968eeee5259a2faca28de9402800a0a42d0be16cdbf41a89bf2ceb667ab7b182c9f049e7d154dad21269efb2ba8f7888a75575016a2ee2809cd3f1f75150deead4da8c894896b016ba163bacc0ca59a77768fdcfe2d69de034c6786759913b0dbd037c7da27469ed46d36803e970474fbd4b0a26bab3bb956009d8efecfc159e80c2d01330f6061ab5840a7ae063ec005b53f5f2f266337ecd50630c100b99e0c36953bab358a7f5065ca88c5af5248505bb2656f011da8dfe8e33ad347cae6258a2ea704a82d41748eee11aa9cf727a6855d8b8d4631170d0fb7eeb1b78f9515d3189851e327b59d2433940fbf15c60780a27da9db3582484a900333ac220d5e657493d34e5301ffb5326f65744624c2885abf5b5503500c49516783e80cd9f921a7d9b7f978c205f3ee95357357fbd0d46e0d20042a654921caaf6bff398565814420e4e8d047eaba5d47254d514383b294773961b011fdbef07797b5cf9dd06afecd37f4927c798ff13412f15099bcef1d44c90ce2684e2f0af81c38a55ec25ada3ec7fe64d778320a6774ff85acfa43f9db9e80a7b9615091b1d2f1dad382f92931f72b7486f3d66d5763ab83e874b95aa911e3a2fc33db1695829c1246b7367c6a68dbaeb5cfa1a2d249e5ed83518c01bcca1b0b13546a1f213d4f4a04818f99bf553b2719964719082991a5466b973e61352fbbcbd5eca2c6a4d96d4bf0c2d19077c02d324735942c73d50d490c9bdec497b6c9dbfd5570ffd78676e9b8ccf74766e8e0ae6af099184a2bf9f9776ceef5660e878d77e802ba6e153e744fb106f8b6585430c6fdbb1946e9bd91af98fcfd9b55d8c8dc68c42d8e5d70b3157723a0d2b47e27c6c993a20cfe027fcde7cfc50e41d3f34542f8861b3cf3d0c4b99385b0f05ea0b448c0809e0ac8be6c9e5bd88833e51aefcdc486a7d4a916a83bf8b69a7d87b9201df40af21eae4c47c389f89ba231f70b47769836821de253407134543be8b0479c8393625753fadd34235a7347c5cc4a129eab262cdef7a1421aa079911ab9ee1d3d890ddb6bc10d5d70f7d42cdae146cecc2b8aa8bb35c4148e25886bcae0c483dc54f869c19de6b8ee69db23cc1f71dc30b9b6552f3b1e997c790277054546d3f56e57c28bc1155949fa9fb7981e9ecafc2a54c87a002e5fa04d5131c27cd4d263da60df9fa518d5baeffc2f06fd3832477c0dc0603af5c866775ee3cc808bf9a390aae27ec0de050888c7f57d114a9e50ff99a24c951d69e6a05998cde1b91ddd20186dbdf026bb0e305c4acf82e8696f01cbe5bd13653ed948fd30f8cc8e787e131ad7eb03d663bd96fc494f363bee45e1bca805941dfc618dc8080b7c591e83e4ba70bdbccecc1129dab3259db08d34208c3a8b6a768f29a95f27e47e94daf7b702f5b42cd6d5f9e3528196af067a0098cb4b9ad84385314f2b7443b385991b350b5d528d3c05ba63556737a401064a9bd072de1f861afb080157e27652f1cb2bf193ff7b16ab8f7bee81c14296dca414eee34ef763bdd270a5a8078e5b79c53d334e84cea66ae02d3b5893443726c3ff0154d1145ffe0a5d45065611a880b69b1b1011df07cf0654f1633eeeaa1273ae46fddb28560e31a18340cbd3a1b1f015b05a1ebb1f4ca078cd1c9f53394604f181ad084e44a5ea0d8dacc45a93f1416001ab71df5db87cfe51ca677792cca1e1851765dc672d83af5e10f30604c2f16ef71cc7eb6083f1e3064072e47f0b62c62d1674d424c21f36c1e77af99b7735ad5b60a73c2c8e39a9574d43503c743cd15f842658bd4cad3b05bf62d880f610ac55ab4f272b1c13be4ceef1499844b76ba494824148fab469184a1d282a925c360a158044b8146609492b28813a3c38cca62d7684439c10c88a3468c210f6f953811acbd7aead0c0f32ee34ddac7dac75652b8e0a7142d2267f3fbb767610ce67307e0477f831dbb5a5cd78d5dc6fb3a79ffd5cc75b8b83d87f1293c1169a1a8f6912d0e26ba871b98ada7c3faceb6e401f7853f02e2a1694d6d1926d74d113c88776d4a9a93f9884ecc0a49914c34c7c02e0932ee888c526974eb79ca921ecd8ed18ebbc20e1e7196f3a658abafa9dc5bb96b7faef4ffdafb48ed32f2ace496d2d0be58897ee2a40522e23699d1ee8ea895483fe9cf2d574e864a911757d36217499248c98c27a57dc39f3f6d8796dd8beba129664126f5b1a793969b6ee8a79a494abec0630626b4ea6d3f68178903882abfa689601367dbf4ede34b211bcdf5b35555240c81d52625fdde0ce0781d2830ba945ed6c3b5ba5651a1bdde82dd6ee8eb3f93db219944caee66c5328e1031090958ecf7baf98f2bc96fe256bb6447391cebb5b6986ee87d74a96c772584a6b4214a55ab7267f5c6a790a4d084ac2b8092f22791342ab0cad299ea139383567206c22dae0c31489ca60799308d8288d5e1a39dc12ee7a5a3fc7a23db4835c6270d395b5207f70684d1170fa133b13a22340402378093280dc7a50e6f83ccf70a8a68c5489d64c871aed8bc594e2a240b78a3a524a5b59bdffc96e488a59643637e5734852599c4ba6fb5b185c6415858d15a831df687e5038827e4a24c7339f727c9f47a4452b449e3f422ccf97763828e6c1a84537d6970a022a51bef1c004e2f668787c3796404d011c1c525abe4b02dee5fab7890079f05addbfb193f847bc7498238699aa62b4916256174fd7361c61b0df3554097fd3cf086e6fb2249d92356215af5b011ca70bee09b56a6fcf50a9c5d3073e1f4a999f60938296f659c2e7c3d7b890f16cafafc9e99238a1a06d6176b2cdc97b1a2f91b1be62022b3756610e73fa0c9b29bddd9152e9f6fa6ccdf22dcfbe4a9cca39125c894cf29236e3308c09211f8eb230f6458aba075dd13118068b5419e80450ec77c077c77bef71aed46a3d8df74371cb5fb688ef0330e85cab1951356aad421b7ca0ba4687500aeffa882d15582960de647e4d3a47c70dca191c97c4200944a110e7df4f663fbe5c75bfdf52568678598f3a1279987944955863ad50fd0b39bfeff5e3d14a468639cb5da80535959f7225b090e82395ac874ad685c618a4adcbbd945c20b0b18387dc94fe605d4e2ac0497f6917b772b4e017e626479feaa7fd5cc26003d393a9ce2cbfc064f9bfdba64654da69fec961e7d7ae249f911474d3cb66edecb9052f52adef2dfff39fe36b3abc185dbfb235f25518a02ce8cf2bae81652d027bf7e2099eed5393848ec86f37b775516b1cf542a25fc54c787207a85a8a799a74472a3a21f958ac2420e287f0e283db8785b0ba184f9cf97384e47ffc48310c0d80603e4c0b6c8bc94560e4f464a0d54c1ce19a5b888984745aef6c7bcc6701c0d4fcb653a529a6e7cae1d6dcb7e304953ffce083b17a715b1d1d020db58e331b037230bfd4770198f9508810645207fd8df517ea20629f7f852bf4ed954c86ec0c93e96496196e7bfd95d2e0933e22fcb7b0844e58de8ed8e9eecfb10f511a4d8b3370805caf690af00ff257168352965b9b668f9594a464d26b80163d086aa4fc5bfd1fb14d1db3e38b3304d24c999601a40f322788808a1d7be5286ce4ce3eb414ed89256ca8788ead602d8e6dcf50340180bcfce07503888029a6d054ed763fb2bdbfb7df1397eb7822ced98b32bc633bbbcc312bcc5bb927e11bb4d3ec7695e6ff52a8c322798fb770773c5684880dc1742e8443ac75b32a226163338765a8efc67e2f9013c9dacfd4ed5bb426bbf45caa9e3906640341cca5802476eb18fffe3fe840b7b012c57499f62ac9e84b4495b2273b44b3591974ed72a0cce293e64860d80010ca58f185907a47761481b00cc3f97f5e95cac6e1b65abbdb4249028e4ae5fb3cdd4cebc569544b5eff54f05f760405e02b69509e9cee1eb334c66325f2489fb41aae95c2c6b6015b477c80901cb0c48f91e0315100fbf25f5e0265ce0503a356e492bf9363ba11e4dd9510efeed3163551475bbbee99e5a702eb90a3ca5b03af04c51dabd3cbf918ea298bc8393b538b9b244de92603e18958eb44a358ba9a384d4120e27788c72c2f290d3be9c89d3aa742860e83b0eb73e694b3465b740792e5bb65f63a16bdc80975a48fbe77423a139fb6b4a0c9d5286dc06edc38a9c4bc25e1af51006a44c70eb39453a2c72a7759150a6bdf358315aeff85c652e21340c0364b487d4184c7dcf2476edf252ebf2babcf6c8bb10c6e2d64f2cbe2fc4c027c18287f1539a0438cbc56af34a2349d719ebbb98d2577b6227f73b795ce03a166fdce6df4288d0f30f5ef5c24efc33522b3631158304b4da7a85e7e3d7246abd4811421ecef26dade880c1c04232188ee0838e3c344d7256c2ec18ffe53449e3ade9d5a19975156e175346af0068bae116f253717b12a743f8077e09fa8059064a47d6bd5c3b3856e304a94c292f69f29c38fe941891527e1c0db2ae7ab9fe49054d0d79efedabc6afb7d8c0b5969ad588f06c5bb371025506481d15841ca785c6b327ef7e6964abc3cd49e787c5f6a4218dd7aefdef4726ad4a5aaedd600b9e68fc49bfa80684c1cf774a594c02315e49a1c0d4490ebe43e9f241db0f4cd6e7c529ea2a8ba8228132fb2fa2e0a7fa4a2ea025af26dd23a4562747d945bf72e5543af207eb53b1519f2ddd68bd768d09ddf75bbe14049b4ad87ffa0a6244d4e1e0af5058c52fac9de3a912488f425563087123bb0fc1ca3c8a29e9db627284dce829ca77b95f485058b025c4c20c8170863c480bcd91d62e3ef4779135e37ca0b66d56ce3770d3ccc4f1d1c6af3d15e501cd86402d38b9dd6a3fba2d8eec859cc14510fe180eacb08a2667f5959152f271f84a1856f9a5dacafdeba1ca8f06a59c1ade897d1767b8b90013f4215365fdd5f432827f59a6a0667b4f1d72d0eccc9c1f9d71268288197950eb69cd5de235692988e499082b78d7cf11a605ad80f9d497310f25894b15cfd74789537c2a6d5a904d44c01ccacb74aca81516f6cdc8848b293ba0eb2b416b0980e7c54569a5b4c7a255abeca63a98d53f94ae56f98bb314cabc85c3c20e967e3df57215d7c6625a269039c2418109dfaec903ed77486b3d69331899edb7fd137b3d720c35d20178e4eeb2a7fd5ff18e31ec9a9008f489544accfe0522472a58867d8477c9b0a8c75bc92a0912d09902fde9f6353ffbeb12581f90dedc7377fd094948db20f96b064e18159785c00f612b2580c5c27dd1e3d9ba42b88fd2d2a9cbb3e98eedd8c8263984cfab4150b3c29d16e89ad864a7fd44756d93da6ec55efb5b503417332805ea19e61f2db1fff90d436094940cb694ffed8b70e9299110ac1efdb1260caef2f84b0ba27d64210a38a5660ca869214c8b374bd7c2656e2a4286f4f4486c0ccbf9c60ac8ddaf6620c638b924e933e8ca015cf8208a2a01c1ee8260c68b3d755e7bafa87b3910e64c7d61d148a82742dffa93646857c44eee6331ddb320f53104aa61d05b925bfd7b6586d87ed537550302ec15619092f21f836a0ef22af4021ff1d5376a1ddf511c0fa269d1cfb1c04ec90a916aced87a37197b5d789dfb33f690ffda6631c94b3320ff611d2d4966d89445342a8cf83d11674805f078bcc62171c028e64b2b00eccfecb9f9a2557ecbb2e0be497b0aba758142ceda53d13075ead724152cb00d3e5751c2fc1640572282ee2bc5d6c180e8b3061fe0606d9da930b520490f21164c4cdb99b5f73921fd28e6ae86afd6fe877f2e75311f9d7a44fe920f4ba1a7c27fa020853bb4f44226f4ce71ca0d9bffdbfc82bd3ade26c6cf75e9b368de55094e3765d36518c1bc25780b522f825ff21bbddfa4dcd2a31e0a4ec6a27b09b3dc2f96f7fc8ec5424038457fb0ada6531631faaedf588436a1fccb8c5a59e06aa4e1f8d4fa0de14dfd62079cdc735217edc832a39145b43c9fe3adb944d68f94fce29b67d2c1939037dde28137cfe0b94c62915f23fa7bb66acd731918eaf97205dc39e10526a1fdf898c63eaf5d656570a8e76a8b883ddbed801b6789bdc9688cc0bc0fe185f5280584f5c2fc7a3434f4928e52a6f5a2732161212bced965b77aa7f7b4d7905371e4de973f5f7bc7c2adcf4feb49529690e0953da40dfc348bf674a356365e1f7111557a71e9582eea0e6ec8cfad637c95168074e36f65078b7116c1d3d905e2d6237137777e7deff18fd18eb8539f2c9975cb854551965767cd9b6ca5d2bc2e5a5bc770c85bd786e59afab5be3d9874b5fac2efe033e8e4e6db77552a796ea786ed16ef6264ddbdaa21ae2a133043a17b75191d9b07db01824641e26a24317ed0062c77d1a88b97104c77c8fa712e52fecd79bac6d46da5a54078add3cebcc84fa4c2259c05f400fb48b6c635a5a61f23cf1b5b436a29cb11ee1c59f6bbcc8e3517d9ff0d9e9a1e5b65aceb5fb1b58fcef9634b0e27f04d4e15d25f2daea12b5ff3907f6a07ae849aba060d520ce32f8da1a54f1a398b6b988a9f96cbd4b3cf4fd7e2ac28f02a367226994de202daec0212c9900e9f7a9f97286c68d610ef039eed2cb199fb1d97bc28966e61d6e898fade22e80c95373abbe7c920c2b62a4ae377fcfc8179c8c525f9cadab5c9324184b219803f853ec5a1764d925f785748a6b1e47a8a144fee373977100a90c66166aff5df7a874d5a5b8491a9df8c5b355c661b6319fd21d593ff6b78c3a8ed08047ca40921aa866ce35b3a84c1a1d1c5b23356f14a7b6d49d57889c83c9d5c11fa819622675983a4de50fba6a69396648f500170244eedd65de51824a39838cf09644ed0a9fad66f6553bd7740bb97c6043b865dd409cd96e30a0217174928263be63d7118329020bca477b1b9798256a4c3c0793369c1ffe08c064a0e8bbd600417c1e7d55dce1a1f0145442c2dffdd20dabf2a940002853d1c5341ecd106c1084c4568c26c450c8704f777fd698a060a4f68f92ebb4e1a056462c055cdcfa23e92b9b475bc8c77ccc1eb8cbd266fae25152ed2aec44d3f6fe569b5d4c4ea726454d3fced886021c7e3e07e16ef8cbe356e92c4c2c0c9eb5eee243887a027cffef797f26f5c7d904a9ff59b68276082e6502dbd3648fcc42712cd89dbcc111949621284221589b5bdd16d1a5238fced7a85ea71cace751faffc45475f9d025aaa084910c1df6fbff461f0ec9e7142b35abc3f1082bd3a389b5a65d4367d3783d9bf9b35b459d4e289ab7213be8315f38d16e5a5d5c3f24f04efd12441b1f8a3e09ab50fce5af8e05bdd9b916302cdf8cbc3d3f82ee520872076151ace214657457ed6ddce6cd0f462ca2daa9b70ba5cbae8c5607753768b3d0ac1a2b4e4b73ddf3c8a714113c43c95118ee9dbe211f3c717b59c69618114536b4fb2edf48be78d0af54cff35f255219504c5c9061d82b69a155ac679d4e67760d273caa2d3f6a48220b62e07b59af2cea600e787edffa5b055d6853538fe95f388b02aa9796c6ebc02902583f213c9dc53a932401b8264eae373f99cdc24ce2265893e31e4de6ed6af748c0620444832f906cbbe2906cc942ea2b8f28a44d549a47eb743b99b866cfcf986b6b585484f298fbe1c11131e9c76e052ff4793ccfdaf4b1c811bcfce3e292a81faca428ceac385aaf748f980b3b9a1ab11b867cd76f09ab50595bb76afe0220a36eba38f96f129f3b2b581025d28c37152b99ae8f4b5a9fcaa4f67aa595faa59d1a6445e6113c34668dd97a2be334cf34ad1a698cf21122e68a9dd1d4965a807ca0700fcdcd7e047d8590bd42bbf0697231cd790db381f1b49f57a41be5aa63bad9e2c02f117184e47f2748b3b7405860e48e2b21d5f15aaba689c825bbe7ea4c1d4212f6840a228ade7d492acef4878cdd57ba3bcd63308460ab3b6261ddab244f9902cd422362f57cc87baf39a6db4a2242f518a31c04d92fec4b4a4a82afce8cbda461af547a6e0380a7dae46eb5df11b9950d6c00280eb2f1ea00adb55c004b64de5ac621126ac7831c667131bdecb392e516e0f742f1bc6a63bf0db1b200b3ddcacff9779a4c6771e9ec3bdd82b674e3b9dff7ecedd83d71f01e1bfa1968ad9721ca43ed9c1a6ef3bb83541ad810dffeae9f294840ae41a2f5449c810f2d395e541a7757f785b69d7414208bda9d398661293ff369f7bbc9ae23597ebf30a3c5e71ae3834659561dc15cc7cf2072723c51d0289ec1fcfe0dcf624db9be0ba0df8d391c4cb0b880584caf7915a3d4bd6f6bb569fb85f91e15fb8f846e2dc2ce11a9fd7fba8808945d4e45e2bdf954c92b67ac320e1f48c73d84e0ffc5812f8cd419aea1d82436d9eb1715a5354f8943b6fc8e447c6ce3cb28ce69b90fac59e0786fc87fbe687127f4f9e4e0368d17e146ffc6fc4591e261bcfb49068c90c8d99bf80ff4ddb08e3aef4aa96fe3736f562803af70e785b159a4bff033eb2e540c02dba67b60b2e787bcfbbe880683a4762528fa4ac4e0e229440935f0d025d7856a0a78f38323f6bdc56f9d98fb9da0a5f71bcca82213db3557e1f88816cfa4098e8f3f6bfeb401394281aa1cc702a198e117ac29bff5350c0a4218afc714035f6472cc9079a82b4782afe5370314445b88a7d0bc2cc0c30d160a5838ed107f33a01eb9871bfabfbaf4982f97e2cdb896a437f9ca5d5d383879999625c344a87856a10a64b02a1206d51729eb424cabeee0063e648ae0eb1dc682931b2e5dd40cb055312c3ff32d027e1da9f9f70f7b604deccfea0728d50aa92c147e4d23bf0c3a1634da620bdc2f45e3d911835b96dff99927f86074046f83408dc0c0edb8d9d726c6d38feff0e226ec2c482895a9216fec4bf0e47f1d57ec47019d06b134afe449a9eb444d4bf209ce171eb4179cc256c90ffb38f7005a370d7160582e2ada49616ee730ed74d37ff8c5f65290aa590755f672a2e54acf4922ca67f9d6f29edc34a861cf68ab28b57b28721df27eb2a84cf49c44d027463d834d3d956fe1d46951683d43d6972601fdb96f219e0e3e196a3b4ee8332285a17c98af7ad01da5aeabc4e7bfafff11aa41f71f40b19b27d95dab427f75259125d59e8583b9fc5f3f619b409be3f9d60381ac753e82eb406645570202392f99c8c266bb24aa7295fd4efa65f74ec47b4579ca19e39bd79287df78546a293e4b192362fbfc84b80bb262c2832f6c478d751f11454d94f779afe473dd596bdd5fd188c2985ec3b33e9261fbfd18f09690d9cbc258a13ad93fc8e022e4479852b4ba6556b7c418baf7356220ffbb866c48e5d390ef63204717593abfffc5aa0f5fc0ac41b29f1584bd330530bbd76d05f5cdea5e6515d3e96ce42ea859fa12a12948b9536875c2522253daec7573f67c67d954204e77543a7cf8bc11d9befa5304a16b1c9aa8200133b472423663caa2b811ccd17d12d67747e148b26ed8d48657e4222b8fc6e5e2367c813085964be823a64ac79251124581fe550aa52e36ca372a2e6c835fd18c916ec415101cf91c35c293d57b45198c59a4f1f8350eda4fda56f53b64c3694978e49b94261fb9a62e2939107e1f2b5152bed78aea4b5d47d40ae47e0d84bda64d0d829cdc7dc2dd3b8017b791600240fc28d665b5c7a3adbbb833125dddd6d299eb27f0c99e2fe9d764deee1ddb85b2dcc9a39001a3df95220bcb9114f3026f27cb5cdd09c685459c4618881123397feeb19bca972b9f41895b20950644c0093ddbf64084c21192d810a6acffa06883168cbba474ac91fa2bf21ed4de3038ac61bbe36ddeed3fb6572aa282615d4a747b0d114ca6adad518ab5d7328c7c709058d6d16416b936cb027db6972eecc4ad1fad08c9295cd4863a0a0d889af6afb7808e7c332e1a9b0184d6241a629dbea9445441d1d1c549955fd842a401aa3be64972c3a76df4f83b346de6a58d38015678ce1b062ed009715154bc1379951311203a4bea40f58f5f3c4e598e9054408aa04024b1105b0c45ac17b2295e88cee64fd853cc46075c3d8c3c53c89696d0236515a24d9c24b79e02a72ac88d2b28e958d52d12c9f408e99b363a8209e56b3c0d927026a9394407a7f2c3e79700103fb91744494aeb12b74e1d1b0c84389cebd6e7dbc7fbdb10ba393af4d202a999be8a6551215d30217d03b1b036d2da8de20de4eb7cb6e9a5dff4f194040ed4f2f1dd3d261e01b82b8cb7e7c27bb9684f88212c97dbadc3f2007c0de576aab40766563c7784d5a45fa70c15b580735cf3de1b7fac8204142752f74f8203ae6e8ab2361e15ce098e63e2af88d44304baea524aaaf9aed885b99f191693d1a2a80f1f89fc1b71a9598f3065f114093673daa8ab0dbdb7d84ea41a9505386d7859c59d4785cc43c5f9c7edc91e92c6211f867510376166299d67ab46f352aa1966d49456ffc047ae50ae8b9ef3940bbb93cda891ed5a7aebd3c8c3a23ef1a096dff9aad1fa42d59c0468ec95fba163e589b8282df0bd2cf7926123bb4bd69849721f76c170eeb3c3bac3671e6edb8eff11ca46938514c77b9882c095f83a948b457b036b61e71b07fa5d841a804ccb6b688111dda999af25c5691d4b0ae2074f0b47219a42ef84401ea7e1b2437035b8de944593253227d30a163d930875896531cbbaa071a6df017f2dd803288f413557fc76acd74ed11496196df44a3b27ef2f0081d8c38c2b347c8b13596bac0be3f142f038d51b10d168be0b98bcd79324a2cb64b8bdc707430959b69e5a3f242bf704c60f76836420f273134efe9d4fcf5fc171f29d2cacc7f263573a629837c6f4822557f35c8a06a0cd7590f81a1ab8340eb317988414caa94a088dae76fd87466fbf1fd0a864a2cfc83e66b02520d1e2a64c726a258e2b6bb40685d05e461b70bea241b77ebde5a4acada5994387419e240aeb70df8ffad67540b9f944536ef89459b7055d7a0d509aa201613772e9646e0ab0587e67d056e9edf99cc11320f4ca8041beba67273d5bc8dd669865ef94bef431503203f45d4855ec3ae7d9cf911690019abf660aa9e992aa8ab10c6be25359d4c14df08f5f84a80e48212f305fd56f19eedb3ab2ae3a7090d49139722a4ab58634bc8ab39b2ea0e06b6f13bb69e8a328bb4f6a7a67330fe0dc24fb3d95e67d520296f3e342ab8176d06912666e06ca0e0055cbfa2ef1dbe1c1afae82bcfc61ecc2ee356092d1fff2525b9363d1e792a221e1471a0c628cd8a200852041e8336b0bdde62ec85a14d2743bf843ac3bb207c457be380fc93f753385a8384eeac6cfc181b14120d135f908b8f4e6be39bd69ceae34d01c051f8c0b76cae381bda15b2a337f138869b66b032e4ec6c53e65990ae7e3f10a66499ff9adc7d9d1fadc473240d176bfdbc5db63550d9920dd4d8f74ce04b66c0b3a21fca0565f2b1b4aa6a24bb4733c2e14389fce6154d870f96dcdd97d0a328345aeae6c0e1f0100118e6dd5524a06c36e2928055db69f62c77a544dc0acf1d505a7b7633379c3aa0c59aca0add3c0bf7a8ca48e426e98df1a72f79c52a54aac209f21e50ee46f5d78e90dfdec3b5650de1207acc1e57469e1853c2539cab8d6b2d00dba0843f0e6820894b805d02ea351eab2527c2b722e0285f83e8879c15d4b0f68976a3fc4d0666c450157ebe99003680a58f7e903aac426b187fdb899513e03990e82a91169627db9c619b06663de6e8470054791fb8a083f6bdd189caebf5642d29b75dc20d344f0bef3ef2e412c6676ea5ea84a1bf8b4cccc5b2e69dd9a94afdfcad1acbddccb91ee1c00c29c77adc25e677ea253775c6e68fdb94daf73ea8eb8e994b0143db6be0316dbbf23052cd72e1e38c519362b4119cf6a6b82fc1a85833e3c52306cc0c019597279eeb1f492023b89bf92c17b777db004a56eefb670d3c5b10e117ba3f0a3e2fbec67e731d07369d722b0d83c2d545650d7e77bab9a1355167afe7ab178a0d32b4f7dba04f99114377a0188b09b88de8545ca215596cbb42d2c95ba3131fe257abc953e64971844980dea00597c3af1dc62bf25ba7a231c7e76652f82a672971a2946eb8bc439b1964809b7e19a9499bc7be916cae32893b9628ef71abfa82d66cef45689190f5da20a885162e4a94508ad58eba17d916dc5356eb140c01866cb3fd413091edcb7f70854cb2b9ed530668fe194205436fcf0c3a881d86ddb76c41794fc9af5797b3f0b69652bdb5c849eeef08c00474652a49e6e369a480b8dcc2eaeac89b68882d5783cd3e69ee0f2d8ffa75f40bbfa8a7c12bdb9653eb35eac28a8b434f707fd8acb8168c31a1dbaf9c32404817c48c2da04181ef2d2de4c34a9f46381e66475879b7a5ee5f80d1309fada8656b389f90339edb6fa228bad7fba1b2616f9f5e98fa5dcea7eb2e8de44acb456a8d47bd62dd3482d350705fcfa1b1b6427907df8a71ebf86dd31ce996394138a753c28fba2eacce6fc171cf3d02d87471605b62d078cffd345313616fcee2930abc2146c273d57ea5bfc30301a0116b56732b2891ad47e495271437a2092c81c2d3b2c956f61b7f13fcb0c77142929d55286bd0caa1b8f8c5aeb5cb401e8d3434a2f7bf4cbfb615555f619027a3c5a6c16e588824730d7179aacf588d40dec670bb3c88df053bed66509dd86d54c815d17bd03bded174258b0b11027a241340b65ebdc86c5d0add94f180615b8fd647e6b49c19bdcc97447899a18319df6dbf0073727c5af513ddb4d2e9951493583f92dbc4d8c18fc6f3c0f2d3e3f6bb94b08ab8bbaf65d5834ee45d1b0837de8c6af1a4b4c246cd2ef90a81a043c128e15aec9534f40b2779d6750a9755b4f271fb793ab10e76737fe92366a713b7185c4e76a1223659a78afb1680e6f710ca529320427bfb223eb8822d427c8b6ea16b3b2ea0d0dcc6e162f61bd3d71b650fec38f5da9b18ad309efd9e686ba888efb14e951d950345f6e92b170c33cb31354bf90e1cbcb6a065794b81285cd1a3af939067c923d146830060daac151ff0e769b6e6e9f2a4fc1b19e11a26768c5caeaaa8beb2be84353e99ea2b836a171d377b1bd53f2fafb8ebc285c55774197da5a3423fdf5fe5db61539a5ea5f90f362bf5af1686687b5871d04176eefd564827ac830783ea250ee4c06e04ae9b0e62eb6cf3fba392ce95487a6f6134bf46887a8c0cbae14a04e7c74c5ff2ca25db79eac29d2e187880d306808024b30a768a05ee929b77a44259be52f31646c067fb94c8b371c7f86b6286d3b29e56bf019191d55e1c2fb76d3873aeaa22b53a4ee9b4de66365f5c569ee13e01c315831ad96e3e163efc079f5b5ac8a38c00a1e3d8334783dba350e7ed3208d81d03e816cf5e1ea761f05d5bf1fc772793fe72cd13d63c021de5cae5500484283c4faa08945664f52cade1546036c6772230213575b8d3cf2cce5c6761383bf7eb1507388fba95b35e92a593900685db54d3cabc5f4616940984fe9437d57215729a29a681c1525961e0fa38bf7cb7ec83fbe05469a780e1f3643238f636d065a5415cdc6ab843821d37527006303f25b3089f0a3bd670587bc4801e9bd65014534af0f5f6ceb636a87431c9c3aded8db205f9e46b4845b2963e1f1f26b8e121bca53d30217ad80c882724020321a0bc7773838bc11fcc7d0fbd5b614f1d66873f4c9fd77a753465eb1619dfcb42960c08f494790a2ab6e55e3317a5960e9d420547e06e0b1715ec3dc464644e681da84b945457715c2b1178bb0ef08c5aea604b0c604a5d095318283ec656747c7ee84b5cb940f537810726383f612325434fb7497f706bbca747bc9dfcec3c77b231264d4c311f1126247b180983e1b4c8b64b9c9e4a08d56787f62a9d7cbad1cb5bb39b9be06cb40f5704c32cbc9b996414ed9def919934066598239e59ad95185b6fbb1098faf8b0806a9c691a7e53d5c5a696d28786f1eb34e60c5af64f583f47b2525d53ceb507668f250b4bc73bb9b8cd8cd035ed7d9324d0a0c4433a596b94c528cee24ee05fd17d95831fade7b77f72183660ed541dae70e72775694b864f5f78962597cbc6e255520af5818e0dec537ce5750ab42e7050a202450f9b15e071e3596a1a9336079784590d87b7060712000b4da8c70ea646fa3c5a7d4db1c9e009f5f0c9146bb2f00fd0cf5f5e349a2908c9d7192b0c9351d1daa46cff84d8a397840b05b3d30813e38ac067b7b595e94e23e6d4757cca39025fa22c265a536e27d0bc8518a28dfb8d5d506e1e69487677f0ec5be013ad864a2d73429e629e703718f170473abc3bc60c3c3ce52e1f6609a54f8eac222bbbfdfd563b43a1ba3b078eb16c6ed68518b8c3e51b97a27c68b340bee071fed9920b882d0b3b73e16c6d2b4897e2274d3bd6f8bfe5c860d7c5c123f2e2e99a8fdf63ba58b3ed3da784dcbad56b83c33e2c35fdbb9fba10965806a870604536cfa138c9244390639b8302aa4908150118ce696f91ba9124cdcb4bb167659a92667ca13689f293fd28a4804619916bf1d00bca3c3648f76147ccb2983c83a3a60d9c7e6bc0ab9781b177c80ea1ed7aba4ab9055263fd248b90e09d0e5dcc8065849ceceb1cf9fa0793bae88d67f0722b1aebf4f1f4a88339c7d2eb5771fd960b36d61a97db4b8fdb32a8af9494ab61409e927dbfeed662d77658d3e477bba436ec034c949caeca19eca2a79ea1594f9d5d86c2c8a93058cced0b060d642ca20f5a560841c0f5949848d46c9874e2f8e3986f48c97b23cc6b640488743c806dce45c0232cedcf71b827212ef87912d8cfe36818990a0b330d1aad9a5fc3d8c766528db562567a6f90b42c2b29e0ab7413bd77cfe88d677488266890cd0461d00189d9f2aced037f78265e583d8c9a5121e357860e1d72ce2c11f99b1a898236479673c3665fb11a24a160fc53f41acd4abb7785f47e0c2712dabc339d06819a66cd6c9bbb42f3c5cc6edbec092d48b762c0942bf3ccf76f55db23b062f687cac69b8eb4548a5a63ae3316510baf025f41e49dbbe3cec70d4076a41950187830e18183aced4ce745e21eb54dec94c643be4a2eef408f80e0156a2aca8853715beafb24c1b35d77a6b49869c631ec738699a855280e0253add691b4aedcf8b500de565c9c10842be7d6fe0bdc28958be96dc0380d63bdca8c2797c0df713c0c30e911b4e1f4230c6052b57b6b0e2ab160e78d7b99d26bc8d1efd854db0ff43e9972f07f94e7e65de4a96e14d34cda497e039e09aa2789b0ba8ce1b5770957a7dc77ed512b6304a04b49cae9bb70beb281c05aa14430ce260c0c1439d1aee37bf6168abb15253cc27e1a5daa28d0f0a18e521d41efde311df24fce74ee5a55fe53d2604c0541595e22d49c62ccf1ef2275e5eaa980bb896bc10d9643463a43009f3d790b62780d7b71b5b0f1f8d0dcfcf2463b6556095ee67c0b3586e0e0d0a00d98122ed1c090d874dd4916a02429a4df5ec9d4f6cfcfac98fb68465d2fad8c88331683d87d7e97273ae4de9c1898a4b636d0576262147b8a0779c957d5bb2cfa6c7d59a66e631d3aaabd8d9d18a1ca27eb226fc48a8ff6fffed2ada4fd46a930aa4346836abf2540ccb6e3226c0f2dcf2ad6d9d9f6cd7cb09e15ff0fce2c2d57a5e322e6e6e9c64317f0acf216ae6538631e388031451387bc649e6a1fd13a2220ebd95195ed57d8022d38edf82ef46003d6eee6ce0454cb6a2bcfbd32d82f037007de74b0036c0f4c0c8f97d8338902a94af5eb44881dae4459224356ffcd157860a6d7570f2242d986933ecc881c2bd520b879b6f8d476bd74785494c4847d8d439e4f79241f841f8e07f35a436ec8bb8215b927a27a02d33e5c23ac4af77c08de875cd372f2bf4c07a3171f47fe31bf76cf2fdb8cff2e4195be7c3699060eb1223c81d4e219840370573ad7bff2c5bf7d9c059c563f78278f2a270b7614acec1687f31b42a2575ca2a253823a84dcf74335a789726f010033156fb726bc089e9044fd880c4b6e2340a98a2de4030f41eff1e8df9a272d9f09b478cc19427f1418e8c09ea1dfe91b2edeaef9e2aef8314ae91bcfc92c031595cbe2f07c2b9946795c0f594efd8ad58c2e408b5f372e57a52ebf595e8e8dccf21a4054d2db9b060727b5ffc53e92817a66bc56501eae1c330a69b0e88a26b85966c334fc961cf9640b8a10e1d95f6ef90bdb5a67ccabce0f0e9a18f8fd3056d1793526baa824477ff1dc725c0c6301a3d9a8fa00df9db9e23b7d0fcab7e93dee4f122cf66598c5e70572116e1ea79fca7968e589a9ba7645db148ff4e59fbe076f147be93f69f9240f7b06b518f1d7e529e0a093bdcd624395fc6837fd746ef5670e4a19a8710ce8d4471293fb177998ed56cd37af17354d1f9a4ddea92364c7e972a837e209eb3a7ae9b75255865f5dd60a2f3c20b328fd3e16830b577b2f9366f0b9aab99062bac01986f4970c1a4cc47ff709c51cc567f891a38a9f6731a5446a3ea5202f7130965fa08653b803c58281b964339cfcdfbef81de41a60b1cdc880c0b62f91c29561b03fd875820089ee962d0b265f6a487356b1f7c60bd6aacdec9d62a6ef2fe68c6e2b42e90a83b2b1e0654e34566015053165f96042338cc70cd1788d19fd463538ad90da607696ab39ac7cd688ed8261f92689347b586e31902de15633f2af26a2f39484fdf361c181b514083bdf8d3698135cd2b83ab3541f27542a6eab3621522e98139172900f3addf2230a62db2d93219c7d65375e0d8096b430aa877ccdc5f91b1a08bb62f1fe51b5372da33fc65d5f58a2cb34f05edd9ec07d7a4c5e7570aebbc52915e52000a3cdb78cf63285b906784ed72ca79daaab319a96be2a87fe33cad8d2cb58b77a6cffdd32980576b685c2cce84073ab0c47ba84d7c6260346ada51492bd4d98cdec63e5194763c9796181b01c4a278d67b4bd037e416093532628b913f122763be48df91c8a3eb9874b91c742d5e6752207251d546a5cc3d2935d1692baf01076eec9774387dc39226f750b206e10d2825cc2532e1eec5968f182d8465bc65dad30a498e22e125c6960549912b6a836c29c4e8cf28ee1504db39a1f9ee138fc3f2183df6459237f37c14d2ee3f6bc07f43225f3029c9672e6c0cfffe4c8a7c5a89dc1bebe1c33f6b061ebc77269800170a96e825a5451413752efbeead36016f9d4ffdf6c64ae9af7d733d095b9ddbf1b760bf937e428706457a765c4201dfa1d7b4aaef7a8ef8653a12459e48f8c2f205db294553961c5f2c8f12bb73d2a80478e3407349334af8d789b3ac2f15c1f1a56182b3ac1045219a225798b086c5f774a7162aec875185fca0d3eb6780cab0e5bd656b1d065837db3ca4a0321d60ac74961d4c6ac60e1238971f200163f86c5cc548cf51de5cacd1a9a9788d6829dc75ebb8c78b1448d177745ce29c67b1009047a182326f06d48abff4298d8c0a2c34771f94d5d1bbbb5edcc4c01a1442d6665640812d06626b98de05fc4e11379c7681bc92b3d7cd38673b865db9c3810ba27bebfe624aa2f226002b3644a53898bfe7e9bd486ab819ab4adc53377c5a54de0c9e5713b12e7799840f9e9d41c8ca1c9b80181cc7002365e71a4ff8fa0a1624484a43816aaec9d75eff65f0f2855b94310c78df554663f18caa55730e9276d1cc6ca13cb5e7a6a1db31e246f399d9f98ccd761aaec447482fcfa5029e881b0081fc78c0786eb8089f9c9c223199f65e501d4ed228b27f05cf09b0fc47cf4ae6c5249e2ae1f7c900c08617d426eafeac8bf3affc76f54b1695a435678fec62d7d9fff9bafae440ba781d67e6b39a17d58b2e0c450d0a4df7bd4a486a903a91a04e3814a637f8188e050541db809d819017f3e34f2891485599e683105e8d33b104b1e626e7bd097394d56ff2214a28bb7dad41f56aef66b641d4758a2a99ce62cb07fdecdf703ebeb4ae3de07866488d247d56ccdd34d48ba349686707ed620060c494ffcc8e3579bcf312876c4e70ae6e26335f941c17554c6e13dd88870d977d7fc3ecc4c899d4787425d852662f81042c938a721059fa97077c77b4a694118f8a7f467346827c3a7ebb21dea32e8556e740953e890b01c7afe543b82e9abdfc04cf57d0d214cd742b9f8b0bf98e39297afbf8199f3ac7a85236c31c2bf695417c1cbbd66809b01313642e4037b0f431824c7ec2f98b771b2da3a22e6424637efafb5720a61f6e42a0294c5ce85936e985d98144202e18f7f997fe5f226b5eb3bd2126c517e4c548a2f07024f13f3624f66190741afa3be002f37d58e5ac3b45c6c24a2f604c3d7c564f6d54b91e3cd201a9263352516e2b02e24eafc2faee699ca85f395b74370e6ab4bc3e9d612e38b273dd8a3005d6f798e7ace5320f4c4aa5ea0042d1868e362ff99aadb5dfc13ebd3eb5a974fcea86aba16ea3be401baed0b7df3e8c223c3da98048ff702bd72164948b2e8b355be146aa1972f90ee97f0fbe28a33bbdbb6e16fe3a08f52b2357ad4887abcb7125eb320f1c49d70d2595cc55c88051a13d0b15a42e096b9aa5dbbafc26f367092f15efb02413b301a5dc79b6235c824d17477c6b0cbc9a333b94a4ce0ef7c18593a35a13a4eeef4c656b01a43315a85850da778f5963e75b888632f1bf33d389df1e4659c87a3e0e13880100393fc0800d589985f1bbfde7e2e9ed54940f96eb680216548827b03e513193bd9e5722596e909f6811af54f4d4eca459e4878d566db73b30d21f2764bc0f80bf83d57f0ba16d16af6e15629ae7ffd3520ad4563c4ccab6e3ac1d6c6fd0a2c065c1f39cf4bbc23dc838e762457892b83cfc372575135594e8429f68f55981a7289749431b60148021116a976fa4d0db128635741e7ccbbaebcff0147082d7ee62aadc4e35f0c00564077d15448b57ee9c1acf120df38ae8f6e2bb0e03970796348303862d9c2d5c24f9cab105511b09464d4dd70b9b12bcb78c91e9a47590a6bcfdaf7561ed3a44e26bb1b06b0cc8f13330250854172c298704f819121b8794bdcba70d226f68962ff2c7c4ae0d85f34db1d046058fc26f740a31147185fc1c1761fae9e71ef7f1dd073a92c46bf5c9f40cb718204f3abeeb9cf33f677abf8b549589dc97bc2c810e04c127cec0e509631518ac6259603be9016a2e8a09cb1d20f1ae8ce441d64707660e72eb6870b1abea947367a0fc19942a6ed92298c801d1bae4f44a09f1f280add89d2f30df25e9850624f30f1746d821d0c7dd8343120077b4a9fcf230856a05a1c9bdc76e8e22b2346bb75f0fd91a0cf45c9c98892df6376893a1581f8a86e180771a69d1c6deea6335036a1229454361e1af8bec6764a57a1264159f7946055d916bb99670f70e52a15950971da2a246d79e0289da24dbf801e896a999a0d24521b64ab22694d0ea992294b09f545c78f8299273db035e937b265abd49a074ecb97bb1246c938fd825bdf7a07aea411973731daeaa8b1d84ddfaf03444ce7f761a4a4d542bd1118035c5d7f40e19f42d3409cefa0c5245372a98438b46a6e8cc1d71d3e878404b61948f214820df2888c9a0387dcaece0059ab3dfd1a935606077ef672538afdd6e993d71bec63139c04ab2a97536e4111c64916f3b5844c30226793932b3714e16e3bd926a03430f5dbf8d469a98dce2bde4f2ebcdd7d4fadb78db5cd6621be354656c6b57b7a4ba3d18b2a9fd37ae56454157b5e33c25a9a6b0d5545d5ee4a810a88289dd14346ab0ba0111ad405c05f0195dbd8d441c1d6a141bd09385cbe938a0a27e0ed851f64bdb9fb19676233ae2ec999e0a74b7a4942f1ba1e04bff66d4cd8663a41a589473c9c2cc88f09a081af55db6d2f4c70d77e1a0d01193363820288a42a8d3ff6dc5abc49115ac7da3d96bb138ef1c7169613e5ca4e17d3b4e3195386d2bea6f669741862a124940a66902f66867f11bdc66fe152ad190735f803752afa1fb6afb7389343ca161b746082d7832ef10c8a86c68f2f2ef4f619a4e95b6108ddbeefdbc51c49a6636b3a85da355f277159b8ca85043ee54b2502aa5b79562bf7c7c5ec7b207b37892dab30c83a5ccfce99fe1d9816f827a39422a0e6f56a79869c690531f3da6f2501f618bde50194cdcbabad5f4794320bdaf3639c12b47c198995afa03f4f1be58648fa1564ddb25a8582c7dff9bef3117f8f422af747aa5797deeef0500ddf53300ab76c747862ea5ded00538b58dd8058cb0ea7f5597ff0303c9ac7729b1c11b4f48f758064974ffb6805957ed3a2de05e84de18d58bc2858f58cded337f581b621c8bed433eceda4e4f21c40bfb713d266a29c75a85d440a94170404519a875380688c138b401d62a8c1dc80ecbf46858b0f4d9677ec9b92bfe9c2d0568a6e4569c794e273371f07fa9dd36f887f7a63246ab68d112dc1210eafece8762e9d61f07fcd1ea57b6580d33ad4172a5e4c6bc7b51a347b6c1c09a57c7a236f8a5beee7f682bff55bb30b3a922195ab1dba2b173048a481f31114cb63c22583047f08c786650e5d953427c59179c6cb31ab946e6cfbce871f4ceb2f75ae08a35e9b3ec7157f9ef0f2327e2695f55e10189c2ef3e92530d3df81e08e12d3cf8f06ba8ee029758e0e5ade8fbd67adde0af17688c43e0c15ebf69e7f4300115d070937db63d85367f795362e09da87f5c01587b1aafe7dd09d50ad351413be53e0157142eb19468735b42304f93155c3e6b4a68dc73b18976b1ac0da4ddaf47af72d906a029323370a03a222b07c8b536a96c70b067bedada442c2fad70b595a883964a5e1b9193bae170a3a99d9305bc622b68d89a046dce7f3a582c10cd3566a68170f98f0b96d5895bc3235556a5e38b9a9545f72b64bfcbd5c6066f810cc573557f8bd36ba856339b95c0490ed7bb2b6bcc72979e950fa7ae543b27ffe14a6563c5963e7e6c6886a2c213479bb9d199b7e07dfa28e29e69ed413db45788be836eb265f9c408f0a4edbbc381bfd418ec8ea272174ce67ca1fbb40f7e87e2dc9397a7750a572504502846d033d9a30755fb3422fe08c8035238089343c26221abad936c215f76dc5924b8d0fbcf9c01f9271edd45bcf0681e9a0e1999d01d2fc6835bf705b650d902001e6616c73e07ca645af6ca038ec6aa8f932808104d52ecdb76f5ecfdf69f3dbf50ebcf335cb77394fdbd86135b5e69d8de5a8898b243a57e4af092884070cd750870f3ad7ca37669c46fb058f08c71d1900d3b9d8b1b5745e07ec08e2a38f2a1d9ad954300f90a4eaa9647bc0030a34480db7dffdaf77a7814e3edbecc0e569a27a2b304b9c42cf2291546c7943e36dc7a9b4bafc03ad34917888d0a2f43fae316db9232948b1fb9d21aacd2c1465663fdbc0e9ac691d48a88cddc0cede6f5268bfeb0ee50b7ca371e4f735b7e258522d88229d08087fa36dfc2feb4c0bf1c38bd557257cb7a388ebf3c4be2f202ade7e2431f8eadf55831ee9b6b9bb0870e5a2c85fcb4e3245468947829cf047a9c81aa2328f11cb16403361d3facb27dbcc5e2391a8fa1d974cef1320844008d3f4c9d49c43c5ea9b9c6f1d63cc436c80443f6cccdaf54e8bf935c63dc60dce1daf4ed11da7a4da75970e42cbd2b44d1d0ebccfc16b361f5e6d14e7d79c3892416e6dc3854b4a3fb671cfb8a77dbf2204ff2c9f9c4fb6e36921f8ae1dfba93af7d2f59d6c6cbc034695d4d3d5ef0b230a3d40bd027d76a61cee0d2f9c8f91ecdee5a20d3cefc95daecb41d3d3a29b50ebf692691366c6ed152a824e90c8bf98c51d0ecd9054bdfa380b824dc0caa2635ab102e4e9d724d47e715b88484ce6cea370ad094225b36585cafd6930c4a235562fcd6ec89e6e9f652352a8069321702552b5598f7c916084be147bb9f86a5ef061b50bbe2b0a73afc7f293c7d572fd44411bb5d0944dbf126e625b3de5df95b91236a59ce50e392c2a1bce7b1dcccba5d461a73bc4e596071e3bf99cfa2a1be2494e63410f774ddfef789b546c15c6482bcd5c0ef0395a4b7a034a41d8237a9a76db3560616b72fb8f4e2fc74eaab7295458c81b91de913a676d437e90b1854acfcf143f2e5072cf2d1f31fe305b235f8bde97859429b1952829289291bfc5467acda4b9fa746c3396cb80ae4666c2229239a6426633dba9e767f4e749da5ccc3a9d8ecc2b7e597c96f76582d473d1b76ec2d1126b02e3cc24ad928ab912bbd4de65437d8c8b929f148cf1edd52473b6d9868cb963d5e9679b1e3d0a03e5758f4833025cabc06f7fc03a5e67fcc395a7a40a2553298ddb5951f792733d792057474f93b89743795929d3e0e5a6239f9135815ac9b1bacdeee0ab05833b556a163bd2db1ee71869707b1ba81a428a9be520ab07a96e94735b0b23d342b671cfbd4720d3bb0962e1bfd3c2b1d718eabc7a17613fe80f38fc8a7818c6439906f2397586f4274bb78da861135c04fcec75882f33a1a44100beaa9e29fbd89492a91bc61907d939e983d54d190748b65dd4706d9ce601a37f0cba18aee0ea84994d44904e1bf6e6bf200e488bd4d92add341279874269aeada937320613acc7557d1d87f8a5637843c281ebe48136965c635366cf3207c9351237759476cc0583cae84cb62b2149f97c864e801b59502e295bc7e7dbdf5c5d76e78243c6a07fda373c0768c540a11d8fc77125404ef59846a0f3422a80129c0b0eed8cadb66b7e237fd19af0810487d24b04c782c04fc163ddd9aa43ab5108ad57a34622d30b29eb218ec3f584b9bf796c39fbf923bdd530a6a5abc92dcc5c273c56722dc33c37b70640c2902476337271c2efe1ca668f1887f0bc3909426ebc250108abeaa8c4c38693945c058a7dc5ccfe5ca7156cd991977a4bfe1c67ad175dd28111fea7f5e0c01d2e87da61ddf8b89b23ea4f9b0e43fed29d71e8dd815fdd2e4c293846dde8ce1331798f374bc5bd64ebf0b53d79611dfa4cd453e724b5bced194f615feaec983565caa3fe8dcb4a04519a0bebc2b7741b50ef84803f254de33296899245b2d58ef461b19b40e9ba738f9c1b943014f5016abca7ec21cb619d0c6982bd4ef06c50b79a29a2a4d90e9814b173e114da0ac37f66567e0025a0e01b1d521ff7daec1dbddf1ad063d86f8dde21b07336bb2716feb69db85e37d848e2cca684f8f4bd5675dc744b4ff1519f7ec74dcddbe6792d56373149e589ad64f2f8d82ea5c807e1a78ee59d66f7592e8ed256647a2f358e03a22908a01a789e514a065d94f12689e513af789a26ac0df856f364ebf7b10f0461b082e6f918277fe5c46c712fd130857d7b26583e84dbb8ae0be9e19a91f5bbc0790c33fa687a46abf05383b7249ef4729155ab95f431a804592c1fa3e0b6897651a9d884f6675e899838b50f2cdbaae60006c66d6d14ab7ee1ed14dfb1e2f7cb3de079800f9f7aaf19d65a555b3451154e54567569b13c3b9b64b912ec4627959f8c8b7b22ced1e65c6f16af8ed359def0aa54e6d68a31e8eb15d84cb31df75168f54fdfd520ddbdf706c27be9ca9a10e52219ec7207d595d52ec02c7b31917c61ae5e07d6814469d646d9cd72b10ad0c29f6bee13df1d59194d3f74eac5925ccdbacd7715e61d3abd474ed955744f6b52ccad1a6699ccccd6d7f01d5cb57c026c539e49f69cf0d4046cb6ae7582a2db1707cfddcfe0d78157fb8eecf50201bce6d8a3c76074f1801e0f2f6ca50c4582e19803308434c41c81207aee08a7431a75e41a073c50e964e7cd3760eb51fe7e29fcd1455469422a9f9150eff4e7a41ee538b91d34daf86243147aead6970cb2fc49596509b8fdb9aad5ae47edf06af254ec8f2030d5e42173cdf34927e6e73a51e6c0cde10ba91d8845c68dacca9508b0f43b244f4bb5e67304afb1145415d1da432d80493f86bd938a8273e9438a19c093a44ced9126bae86bfe16161bd8d87af4f4878549d763633b1ed4bc90041aabd548a794c9bf2175bb598a3f582626a85f3fefe76dae3c009a88792fe6442e1b24fa7914c5d5d728a28b8d3b21e3f80712e2990be38b83b14f8ee15ae8a522d83d01ff29ef982fb5cd83e3787746f1d0b3e02988094eac2b6100b9216d9bc6d030a209ac64e1523be6a7cf2509ebe63bbaaca0fa3b1fe851a950c0e640b5aa31db5456b26f1949cd996e5da5cbd2f7d60935fa4364535cb169fdf293db8b07c960aa89e9c41a8219f0045cd44ecb9e3920a5f0b9ffd7faf74e929ebb34add9aca3e9221e2bb86006bb6427949c09a39e2c505a5903eafcfd6c754d285fefa766dc49db8577ea570d0ff4f1bfb1ced07bf81b18ce8784fa7e0fd115c1ab1851d71538408686936062e20fd5adc6e9946f520e951a8cc991f0c42812bc2c39268683d665c31db4b2634f6b48a8bbd930c37ef7125ad520748c78141491066facc61ed952a3f4436d1e121ed488aae0e0d47f7d8a9dae6d6eac91019cc4b6a3901b685425ee1e07b85b1ee9cd6c3d7fd2fab61642bd9903a89d97c892f58a10302552f10320151fd6613a998242ef9083c37f5727db1e7a402e151d3dbf02660e9a9013056895cfa82c4909eecbabb1a53761f18aabceb273b002166cf9f4c46323f3b0ad3c03560e019cbdcc3fe6ca7e95ad0aadacb30b2a3dc42239984c809190440cd4a7b28302a460016c2e69ed1a726eb58a79961f43255196dc9bc79ca201e8f34952af24d74b98d1c141947bdce0ed624d3d638226ea556f4de113f98d7f8d91c7f5f692cbe0639e546584f3cafc2587b01bcf1477bb60d23676049f859086d6f79618d0bef27ef0f2a5b92666935c5f51cd00b2cb5da51685dd4b8868d587c976221fa5216970f5b18a8d65d2a49f8976b681d18013ae73bfab1c62da7b1dde6d06f3ccb8371c462ccb825c2245b9d21dc929978425147332153cc32c282a2910f4913b2f74f903ca15891dc415726cfb3953bef1bb382e125b12ed5b1fc84ab630d8cdbd7ddef8e50662ccf84ef1e2f4a1cf247c7c97d147586c8ac0cc14b57cbd3bbec8217ad5d2bc459b9ae44dfa56e87f1482d498dcb020b6f1588f48529b815aa1f3e7e04e789f90dd47c30c8e765b6c9a7bfe62ffc6583e3da2b7d05d622a681230ac31f08718e0631418bef3292c31e216afbc8be866486829e39b98bc99ce62d3e0c68f2c710148831a02e2449f31c09264d8ec6a475c2d3ad0b43774087d74fb76eca534a8ff0fa74d9533c31038b466fa243e5ce6130454c4c10ace96d7599eb0b74fcce294a61b335156de7844f3bf2e55894ddcaddd684801d4d8769bc537aba630f1c6ca7ebd1640c2cceb028d25a2d59d63b7746c8ce103f7bc22ebe0e653281f4b07396e7460175a6f26c42bb942aa69d9201edc8fd3f6b7341b2a4d145d0a290f1027249bdff686dadb963819b368bde386be8f685629753b1769a8138e6e828f9ab5154250c96eee0f289e89af5d4d9f278633df658eed0a61593493b52387c6ea7f98cb9050b4ed099268c7bcf0a9c0e3848eec3a472329d3836330fabdca41841da1fbfcc0c15689f5a3fab46af1a22b78e1137d58adc90f70c540f95ca0a0a07fb9a54cf9a38fdf403e6fa1bffa25553f9319e46145e5510ff6c3baceeb344934f8603d42c440a558296a8a0e5fc620d6a35eba2d67f6991aac10ad51b8a8984a98a98c75722ef67ab69f63714710b6e72f621cec82da41b28f08f25940bd025aa30af40c00c1d62418fdcc77557e70cbf9a7440ae012bd682683a6523d9b5c610906cdb81537472f40706ef55004ccf968fda9500366a7b3ae41303eac5f4007b82d27e1b6a654cc5d4e0fb1d5e9cc6b95208a829b189df0594929c70ac64a0c1f2aab96ab03c850c657482af72108f16f24c8620006c8d82c00ee57e33e21cc567af318a5cf1879d3d629c0a88241577546f32ac399d36d4fd7a232f2638a3b1c4b2be9cc9671cfaad91f7beb4fe33605f3af0333cec8054f98eee9ba6e5ac959decba44384508d3b99918a1eb3ae240a5a9a953b73eee997c03284199e79d3654d6942ec92a8d8df8b27e0d907a99cc02c4de2cfb830685e3d2f8fad7d0b77ab585152947a38c981d2fa39e9dc72509cd865bae4afd5a4b2bcacb82eff8d3c1a7a2fa55a609d82a6e669a3ae8da29a21fa84be511b9b6509e769f8bac9e0165f7d5aca465243ef140b3a121c9412d6c7e02c84764ae97ff5e796606f0f9d18ad63f07384d2168f5c457ffc0c65b63a7cfa975ab6e871a0827fa7a9bbc287713420e696d1397fdc23acac654994ea69fa0585ad2c17e411fa902ca90427e6f418f536044b3008adf05748fb1cfdf0aef0ee72ae1670a0d4ad23a8d1cb8ccc1fc67b0526f62f3a5a060289d3241166084933739afce288a1e1d055bb1d7868c952ea5985718c194763dbf1a76762ac86e2b25e8a1c9031b0cd36049acb5229caf9db4015efd5f8c2a29dd08fa331630c71c3a79f19f47c44ddb7bbc873f688e4723aeb0d5ed3154c6c252b2af306e93a5dce1a0567dd4ecba5c6ac8accb090601ddf8c2c450ada7c5fca09b6e2400939d7db0a933fe33c30a6bfd04afd246cfbafda74394cd53aced1b18a2b25348a5f5bbb01d45832e7aaaaa1d74934d1159c356b02bfa6029c796cefbf06b91743796075e057b9f91406a331365ffeff13a831393d4c58a0812b2cead1324afbf326573bee18ba7c545c6825ec4b2be448975d73833ef845047e36706f26acd956eb5a66601471cf99d3abcab4878e38d5b00a25505b43abfb3d1e5c9d65dad020482b5a528bd2b77baef9517677f188fdb9181994180766e0fc2780097cb9d49865de12828ef39622b586be4cfcff5e0678977b20ba56fe1514569efdf1796d49fb1cb80567d2e22b84bb3997dad5b6f297608927b1e8b905883f52999f21b5a4186ebdb8b753d8fdae773cfb96ff0df052906b621f98e70a40dc2f71550ca5845f58efb338527e97b954f314f4116636b02c97476db55e8d30b980c199d41f2f207d1573eb9b890bea61e931506846db9c6752f0533066e0cf1f47f5f1cf6bad702c239c8a303d048b24773705657ffc585d3b716abe1b7dba72f9d9f4844a943e7f28bf088103a306d6b6e2701901a764aefcfda1e44f7594f0a885680bc12b4a25a26229a1a72434ef82d455b28b8d31f9c3d59b83c7ddea48f5c8640001f5903a9f4d13f41989d7d7e0235d466b9c770b2c505e26206735bbd5a763d1cee3d6345c99f454beacd1e94b40106ed729f21876d977e29f04032834828762cead718b4852412d1db82f9edd0d9eb49b4e2ce5d0d1be121ee7633a3dc8f58dd62145a60ed3c67ce8e1742d57ea51d5c6d522c1ff9d30a92b24dbe0489bd045ca9972248d58fe85cba47d9157de9bd866d090d3207a7b63145b3a62dd32f16fa4fea9dd5b15757adbc5f6c4aafc1025d7d12ad43c90c59e0b9e323855884e41f91cd8e356801aecf717538acc8753907c41d876e7a56eefba3d9b43f9a4aba4f92ac05a7b08cf6eacc2e23bf2025dcd3938bfcd1364e957dbb4a533526e0b0f3144f468370ae933d861b0fcaa94d90b979c0db7b006c576c9e459b66fd62c08fe5e5d10c08b830dbfe97fc0b5d48df91e391e1459e605c54ace6f982215a03c3a645c4a1985a97cfa5ac4648b7a0f3b06f5daa84fb709ebcf0bbe5b3e8ec0cb6672747c29ae81ded7c2270d87e3a56c2068819c98ca0aaa6df84828b52a62757313209dfdb50f63af286448c607c83f85ce99b973c7a5de5e3428e7383fd594ae75462480aa1c42b2fc1fe01d8966c64710d43f79d94158d069fbd24ee661106bce646a60050ec551fabcdf443be24c1db2c0da9e4b8afa71c79d1f328937d1ed88755d2a2a697199c8d2da2ebe6edca75880e75d859d02035c28e414a518ba01dde25234a3a28c056d6b0fb26d91ab8d03f103f731776482cd7d01fd8e3df4b098579ac3aa511145e3815061f136c73c7214dcb2afcf56eb545f30c5dc1c9f948ed0e2c71aa124a6dd9a1c6704325eb1ac1906e8cde86167f94e50e757d80f9c90d475a70d5cae69e6c98737770ee9a94c4fcc252acc12ea5141b7db172e6ab37a15b04145caa30d3e262bbca82230d195ba5ea313640e49c627e6445e440cb5770f9dbdb54c83cb919d0463562755588ff02118d7e063efe36261741a8955c2c02ab1bf7f156861fd0229eb5fb02dd32b026eed887478895c415ad00e8274dbad130cf4d29e6fe6166cda228db00183fe9b53974b4acf77a62aa36c50ca9b4c8e0f916b319965a3091494a3b94820313c5d95a09b590617fdf60be96e4c5adc7db38b7acc59ca0b4c7696dd301ca4a473c1157031d390b8fb321bfddfbeb23785e48f6b7e8860e563c8619d5f5f04cadc1ae9b432b03b995195dddebb0464809ab49da0727263a5c3c82572103b66ca0bb7b69638ebf22ad406190f93734ce55f8c83b23806488d2b4e3f3d83f860c1bb6a17b0b6b8c957b778d5f3d3aebd08b1a514a0b3072db4458ec979a76a366cb015dffd97997eb2b82eb79a6dfef308955f9622b2fc10d5bd7a22ed11dc1e687976c491dc4be78244ea68bee041ca65fe4a833b1055c76d13e84b0cc0a12e30bb58efad05de62610130f43d6ae12d180672ff799f74a32dc2e64462b8c2cde99bebdf47c15b92d73e4b5f83e47d702f41e9c46a1cfdb2941193574c627322135c381318f83d517e7f0c2ab2a8429a448985df654c2f05bb951a452b15110ce79322942ac6f455f397c588a706c7a099e40bd0550d02dd4e8ffe265b81299ee2facdfae62ce98e93955d6525e01dbad371034266782110d1149e131e4a6353943a37072c7b2541070709416f9faee72516e8bc6133a5876bc1406b8699d2ff9a4cd114b51260e5c58f34f70186e9a2e81ffbe1032d03e26b391657022aa7f1af647dab0c4373cbb2ac89e2fb1f3f7505376eba612b3fba60d369c9f14ebbb222d10b96f172ebec5c82322aff3fed8a2c4602d3acdbe11e824d8434e6ef86a640862dbeda6d49695b3506d6d45e49ec0e164fb51dec732d010c94def75a5fb0d831d4110b49d0ebe9f442772709721804a16854ad9c1fde2d4e5d8b856d53ec9d37eeabb31fb0f98ad6633297a250ef2f56d802bf71248fab5ab55a7037e978efd2dab4ac76e5626e1577757984313692cc28c86e5e73294d802d1ea689c3dda2744d63280d0150b05d43a5a0cdb91bdc43f94a103ca6d7a2510271785a18d926a46c62010cacfc9496e637d9bb63c6d99836cb5722790f9d081cf0588774652c58b898d574be75238b80e5a4464d20db061680ce3fca9c6235488973a635744103c873e7d97aaa81ac5573b671ecadff6169a11c0322a9d96e0876f4204610a96ad43b07a690d278195f94bf9aef36a9bdf073efab9f99556858b40ba5c4874de738056ed83fb4d22c858fc257068694a8c4239376de17cbe20d4b0020e2148d7a03a58c30612a34ed1dc35687fcd66d5b49feaa9d9f6d055a39e5a3956b90da285d5b417e975b92a915078ad3ceec28aaf9453e44f873e230e01799428985ad881a0fea25bf31940b59a060a3d59f43282668e77754427243659f4fa4a90a0ad0babece184644d89c0bd2fda26f60f76922119b55b500950e521983d89e1d1a0b8bba9f06b1406198089dc096c7f8118090fb527b0f27576af9f8120f943f30b88b555bcf7e63ed1139c2237f2d98cca77bd76c919af8fbd091c35279731602a1cebfd5fd7fcfee989e220bf644c427c4585a871d968b1b7432eda76058409dc57f03b39e54f663a842f7f68af8725f80062dcff522fa6f699b4712603746137fc27539dfe79ad8c4cb3d320a24e9aca7ce0f751c5eaac0b45691dac96cc9395ddbe9837c9dced2b95da571701378570a70380ad1e67b0b36479e3e53b7e63e1a0d31d0261ee087d2630c571b06fce85c48a032229997102ab90b744e81ee0e2a80d53ebb7441a5966f77dd615de6e7b738e766b860d059b39cfc7242c018039d103c40ef104fc64c1e469919d341eee19f26fbd7b7d2a1f77e0700c854e179c58fc1603104863a7e7a8095270a503d344ef628dc856ccc663048f66abcad54fde3dcc1504986dd17b89e320cf4ef69471d361b569877fb6b53307a3f11b2cd2abb456208a6766bbe474ce46b680e1a48cc470aec57415b81465c30865e525b067957f27c6d2bf207dbfda82c723942a0523a32d46d594fa4ecf9b8e73e621bf10c538ee9bcae779da2582b14a31c46347253b5b6ba48dd8b2fe9ac99e5974912965e566126a0449c851a0233a0d0ef36233ff03050900bb50ca817d13cf11d6c3e1bdf2dc1d905e7376bd1dba42c2caad3450aac093317e5875662593f8fe860a0132ca6f32cdf661138d7c9f5ae6c2945fd5871c79d90e84c9a5d684186a5d6531731237a7a90412de47d51cefac9eba2d06e7999921cdd3c64cd4e17eda3ec3ecf01463aa562c7a2405aa9e7824c8086f4d669802427aa847a36ef2c594f8f5ead0d7a3d444f98f23132727b6d6d27c5a19aafdcd894806cb0babd5e561c3aa0a41dc0072167466a3a751012ce8cf1589bec9fcc69026db3802b6e5aad85d8c279f2347812ba558e754be095bb88d8524236b5e58b5fa699fb84d26d37338918a9ca486459e5ac541e1b61a9a8ecacf35106c70b5b14396059d86e71378ff41e263b0e48cde8ea6606972695b82edab119ffd77cb3d15ce7aa5d5d5c3ab630d476d1eca761a5ce7e6c52b755b425488a774facd21b5c91bf0bd36fc8a69704e876c79c0643aaa19f1a3a24444681a4cac93f545a1f13b64b3ff1029465e18cff04c7eda7c36d5e1955cdb6de131433081a694e8b9a53fcafe3896f53249100f831f1b0789d4cf247d371f411226ffd76ae2b78ffaa010c87369873addfa6a28c63579f7e0bca661955812ce146974b5c79</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">开始计算机操作系统学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机操作系统" scheme="http://chfychin.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法续与外挂标签</title>
    <link href="http://chfychin.cn/posts/2013454d.html"/>
    <id>http://chfychin.cn/posts/2013454d.html</id>
    <published>2024-05-02T04:45:27.000Z</published>
    <updated>2024-05-03T00:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7c0ef819decc7220a077e707aac3d4d6671060d811ac9eacbcb948d77ae52fa">1f18822188a49c67b2892b47855ee5d93f963692bb75493514e7b4d4753b898d17c22992f70ce237c987e379d2001c49685fe6443c44c5b87ff70d6e8484d601dfbb187350d94c923b0ba80cd0babf8153d578afbfb5d2aeda629cbd4e871180109cbc9f8abe2e65ba7824e763c679b88beda088555438b9d2a466098d1dc6d3477b870ed169bbb718006ee2c0e200f74d7dabb82706a9e76c3ac18185c56edd8e9c9fc840c75b5cf93ad4230023bdbc7283f58285e3beff9a3a23c83ab2cf9b2dc5e29953c975219dfbaffc3cf5cf44b55aa474a351ae9cada7df4f43e33fe9beeb8801c565fddd444c3e9634cb4fc48e94101a74562416512350601ce59c6ba562b7af0272e174047e7a565f63ec4c112531980dab97c91a8063a15b901b7993dc8d184f5fdf17ed93a0edf5eea774345f278c5e94f9956f8501a5f2b886bc8213f7ea5e3d610101eababf7144f06eea722b8d811242d9818c49443f6b97758ac687f4485653e34bc76a497f5bdfe004ab50e8da007c6ff0b5be054434869cd486f3d7529eb1c276d316b8a9202476c1ddce94a9ea948b66648c40320482b6e5de14dc49c1b4e946b730435cc64ec420007b1e46b368c78b79e1757322db326e8fe37bb3da25e2af593d1dd5cf18c4e6a37a57253bea28b545a31ea1cb25446800080ba3624ed815b7eb62be244ab9fca6fb191511bd0cf09028ba7f10547dc3c9e8518489c18b12277e4eb6fc9f7ea92768e0f029003aa1a9cb4382cb2e26f22392bbf953b07dbf32f571766eac5f013584b0fc624f86fd214773634012c6c51f741515ae49612d7965800797421f0b8fa6d5deb01145decd2f1a3fbc3cd19c499325614235763cf1b6b057e68f2a418726cadaa72a1b18a65f9c997877c5ae1c98e9f106700a16cc9017a6393629aa167ef8a5e65c2d3d4630c697e4dd5077b59479474b7ae8e54685b526d30e3f7ec75a83b4ec84bdcd043d88f759d66f4419daa1676b8e5f9caba4cf79184cf5b9141129475593882f6668c67adb6a03e75f774d9a5422c83181abe5201c3fe180febdc75179a2f15b13e768c99c770052082c45e8ae0ffeea8ea617b0edb09e3fa20f4f8ae3b64cf74f0bce18df60e5e4ba4393b8c226c1881016086df72c53a427bc8e238400f1ea486409173943e2634f066e2e76762a2e40ccb6fb3ab9fd61c4099863ab0396a27bcd4cf36ca2fc121fee4cb74549563fe222eb677a8d351d521fd6ef77b772534b127d684fac7909477ae67401893b6baa4e258bad9c45685647d72c1c34ff55bffae0fcc2f40322c96b2e9834d898dfcdf79d51c8de9e7a66cf6fb43edbbb90efea5fb49812b1ec45fb11f4d0e4b1bd390b794088dd80f463c0c4d4d62386e2df2a68e26f83031a297483963a8b88e53d6d8a172eb6e6492fbdf163459a8d44292f9ce3f18854c7ffb923d23e1a56021f0bf2928bbd9a33d82005443ecf01d06b4be227cdd4294a6ad122f982f63ba6ca9cd8275717ea15a841f364c05f3a03e36769246f7201134bfd9a79045c293a09e45d7cfed94b65415462b66448a5288566111c5e683a5099e5a6077131e40ffe3567b8defb5bb4171447d8fcc09e2066568b529d5d16d4e207b2a5ccf78e5f4af5e0e83f62a8038c37fdff9386f2c4bc945d2eb5041003a407d5d427c74f13b75484c768cc601626e84d6ffd4914af7fa580e7b7f1dd8ad4dfa576f1e6552b1a8a55e4340cadadcfd768bfdc59504ea365737b590f8600f4df172d5e0627e39e0214cec33cd08585641fbaaa59cb7fb336deb5b270990a0daded727af108ae349bd6fd6df0b489d236e68aa9744bf716db2bd71dc8772511a0f5194a69dcc5fd8247bd039ee39bc3e2573306ffecb0a280291873b19a00fa1058e9351a533b275f6fa933daf0b0b4a96327b5d0636491fbdebbd65916c6aedd70f2ab72b93b4c43557eee7de12f8b8fa359ade44f3cb5056f720e36235b5bc227cc1165d3be87e6eab8f6db74ada49200d967cfb46baa3a879170c42951b4153a9e9b186dbdbdc3d28d3a79f4c5180d6d84a3a5b9efe57458115cdd29a8746f45e409560caa7cd5152eb783bbefac37159156417021e61987263b24cf974d8ac85d846a2e528f0da07d53e828bf13af691f71e5d7ff0760f2e312917e3c90d89e03ef78fa4fa852c4ace2df1a0b1ba4dcefb1d61eae65fb7692aa072ea0fc987c718a7266e17cf97f8fc0b2c442466614e015289db1d4bfe469fa7b815e6b352512ee46870723a5bca6a82a08a3e04160f214ca08f61516c7a9d7a9d6687b3e1f57413f56b12bda0ae84dc3b4be45662f538f1416cef6d68c2d8587ff6ee3951b6a8272802bc46973ddffcdc8b2abe7b60d102ecc0386091b1d12e35472287a456333c457c4b95da1f5af5b93586a5b1848cc41f383838d16ceba0ccc582d674f65493ab5a34455bd319e52410525db8ba631897c2a2395d18411aa3cf0b149098e3cb0ff4e3711dd5a9e313eba6de7bd1fdf4000932ea3b5ac717ade2957368e9ce158811c3fd8df9b2fe6da3d1a330886e2702540492cb59fe69c17207553cdb3e7eaa20f43a87b88eb328a6f1c5a33b47df80e18b692587a659426a153d22031617dea91831b742fec1eac82c4959ff355a3ab2f17817233e71edb0b65c963a4558907159aa5a3f40680ed5ef7686e86a64eeb2753013ab1130562226a4b0f27ddf9f25a29036f6e0bed12847aabf40f3d94a58d388b0f5ab6d87b4a126722b75e6ac2b7fe27513077a11c7aa5609879f273a21a8ed349761d4ec84c628ccb0ca28ab6777c8fc81ca8c739050691d5918ec206f7e5e04f069aa6c26eb74491bb8c5c8ef302592a451b715b506f755df1e218595efacf716d714e234d4a040a36592b11946b3029967fba7b77b7efd1104304d854bc4f6447d4615f0a192ee761693b5e96fb24d1932db9ab8b7a2d1523ea167dd554ad28b1755e93a0991a52ea6d26f3ccc39ebfd477240a5b529d8190579c8cc4d0a50315d8604ba85eff7e7f952a99580ebc981981e135afd67685bc7e2901415a79b84f25da455ca1e0419498845f86695e2e359ec988252d37e7b26b410bcb1231323a13ceba02ecd976ed05421930c52e9b6ebe3e8f8b42503f4bb97c5723fb531289cbc06ee6e76fd4a8fbb31b4e9042eab468ecd9701fbf7d9fcf243897f17a3348da12b3af070ed22bd422eb2d9028a54aa8341e4ca3d42c10b03fe508f6185015994ee0b45cdc6596b3f0b0bcdcfab7fe42885d6a752a0a467b11021a48cd98a8570b2a4e7ec21299f3e6c685d466212682b2fd38b028c5b1e1dbf811727142c4dcfa8eba7257489ecf40c80906b6d50bcaa898de5531863c83d6354b90772bc6c3f58d35619c6b2dc4471d49f417249288a5bffa24d97ff515597bf5623c366900dbc1ec35ea3579504167732197ddd35a3819848c5363d02fc01686a02113e7f95b892e96add6ffda1d938b8250223ca8c962b882b71154176a6d42f4ac91f65d8be59b9f726a40d8875c81a5211d84a79120a360a3ae875f2cbf03ce6f376c2b66e36a382c8fdf154242fd0de5baee9088b93db1ed9ee9402c3dde9d70b03e67c84bc3360d8ede1d6d4dd0d39587b56ee455da7f8dcaed31619b17e0faf0d87d723b7cea263d000f51cf104ab694c6a4634d40b7e838dc51d4a6471c0edfea5a21a4f502a2416dfe7e5f84a98a84b941ed2cc47489094404b31a88fbd37b1b8f582ee483823e4b684287e8cbca54f4338387058e70bd7700e49778bb411706f128fca964e8eb4bad1a038e1352146b50dcb4ee9baf0d893e67a4369fdef9bb1d0754cfd61925c1b2d0fd5db928266c730ea925bfca8e925133f5c73db3468638ebe8ce4e6b8d22c1a7c2baaa8916899734c0361507ae7ec7dad09441683ffb3a191ff1811e391cbaca96f8e8800737981655ecec8e5e5e2e02c36098f00f8568c28e3526501ffe33b7b05c98d072570162ab38d53f97c958b5411bbd0fda13569e73126066c85f4624f1725ef528b59c2c6ca38b5118f4cb216bce5c0db4bbc06f5d25d6b77ba2302770144cf32e92ee00554d22aeb69d983103c58f7c15d7582a1e76bf313fcf36d9fde1a24d6292d2a91f9cec98754ceefa46d96d1f19c5d9d6256f88cff18c70e9e48409f07dd2a92075e1f824ad3f30f8798fab8cf9e0c0f43f4920b78951f09b3e25c71df047d2bdd77a775b3620bbc738fc837ae66d7b205b24a60a5005ae5ca2df374524dd68c9b001aee8b4774a33c6eafda1db0615719b637aea78795742d9440dfbe0e1d2fb8a087e1a0d3015fdde147bbf629f58b530632441ef42bf28b42118751e754073b56e7fdd6e674d2d1378241af3312eea886d9911a00982ea1f20d6175c8913a2deb84bb1c8495ed773af02c82ebc40b05fcd834ce3608c00acd904af13f8c696d37dd9e9bf09ef65f5c3765aa5a93630df420395c08d927e8cd7935f4da118555657846f813f6f708d8f720f4f9edcb119ca434d64a5e47b0a624313edfab0c2387b451bf09c6275597b8612dbfc6b548bbb9153cbbb17496889ff0fcff252701a155c0a5f460d9a8cde2c2e783cdfed2bcb552b6e8a12e5af129fd68047901a1710d2174d7611561396f92f4ee5c63508652ad998cd904dab33e2ed14fb37b4466690a497057c66d5a8c52e305c1a38483a0d957f6d9f1c24f36728d31ebabadef091d09360205f53c50da2c6adbf65dbbc18f0b5a56ad8084b0bb6f1c940cdfb8c79a198528bbdab3a75f877744bb624e2b97a565fde252ff430893b8dc382d208092e737e81cfc92d9df43f7601d634c9606ecc60f63790e1013432382f7dd6a8f1a64864c30617271a2c6bf5f2858f140f3309c1f39f2fac290cb120966f7865c693fb3413cb36bf31b6d25c5746d242f7be18de938d34d12c5cbf807844ef478439112e3f51c1674df1f89dea3cd3986d92b97ea2fafa8db58b3744bb933510e88a8a4c9431bc7e25b6b0b38e4fe4bb9d1ab5d1cd5a742c3134dbc82fe83e72e9730676903d4682bb31e4d159e6505e99a9f73231e8e0d19c4611439b89655e4521665eaf2321d903ece68788c7dcff3ebbc91d67c8d3cb675a891d4a6a5febf4eef9b2bc5572da9da37b49df8e3cc382f9a6b87023ab652f863257df0d4a190855e4cb35cb9f26ff5af50578e708b71ee9f0806fa62dfd62b37c88147bd11e2df41cea9e9bf785f8e42b353e6c1124a402848bbcf79f6d5b53a822a4443e86b243261ca97a75dcbc12e4a2ea44b61083f63de09b5d28707248429b4651594545e7ac38e029e4c905e416d30f700c3325da48a9bee66b1515f9341ebf0a3b132d440605504862e73c1ea8efa5a39003030aca048e80bd52413141e3b06b4d979ecc1a223572e2228ecceec0e5f993faa8cc70b26985aa58dc257801453c484a76db574a6ce05267eb4304c70a9da302dfb9db30fc8a828019ace4875a1fe667f8fafc0cf650195a5a0a38b8e22b01119a052f21be4fd33ea13cc3d1a656c59c38ae3481da611e01803d665dc3af913c80df912aaa86b03e5f242015aef989d62f77b7b4ec7df7299cafbfc85a8c6d73c062e9568793ff0129998a726c3708d0120f1b2238c3a8e5ce06e4128b418a240f973aa00f19a273efbfcf20e2a9decf0e1884668e4acb90bb91bbe03cc56589cd36a463e8ee23bea79195af2dcaa11db0ffab85fbe122d6e3cab5702ccaf071a781dffa03372935c79401f44123763c69fe42d9739aba07299e66a6adcf0287ecf8b07ce8d646717d446a18a1a522ce8afb8b0856bd517df67685dbc467c82d67aeb8fba41299a2b6fd4feed591ad63af05ae5b803ed3eee6dc2a9a74448057f048b610b111b3694921e986fcbcbb8faa57c41a23927bc792198c4984982f03a7fd7888789f4a80100fa76a48d1b18f916e0486cd5836ee4f7529ef7a94c0853cd30794ea39848f754125d5a904094b8d45a3e91b42ac14108b02f1df98396fe3dde34f0b77167f77110ec4ae5af7779ff3b82beeab92c0fc503f9300aebacefd36d0939fa07d471eee345e37640c9956dd6b4998104fd074146ddcfe43c9a2aa1cf46fd60728b451bdc5233abd5828077dccaa9e65bd2beb0de19537df06070786e2137eea9e915bb118c975f2f35e8d3b3b94a44185603fb5d9c3526bd990346d1324c605275f37fbbaa98deef0633790ff00fb0cf2a6ce25e43a951250a73a8b0c509cfaacf76a194d285ec9b87c8e6f273f6ccc8f77cb0476da7e2011d2c0865b5036008d36f0a45ac4b9300656284e353e0304be862a90bd1e7a39cee5827c97d7d8f244add6190fc07e7f2a14a0211081138045712ea1ea4fbb372e90f06464ee9c775a04c2ee4b83d19b8708b5a5d6c2486d99d416fe8a0c4e5ebc57440ea8c17074152e427510f465ae267b3e9f3a45cc22ada39e6d33094ef9f2b7e8b5352083427833d92e71418553c0c950c1072d4628d712bf7392a2016865a0373c32d6f0ac52a1aad3701a9b9b884d59942e272b4d2a7113e1e759a1a4d324d5796d7a1dcfa151f074380b9a9bc9bf4e7f642854b562f784abb4305dc33c212e4c95591b079a346c8abbe5b0467e17fb410c5a1dc069c9225286a88a92f85ae865c9493889c8bcc9d3a82535487a529a9b9355cf40c24d9610218ae8fee8c48c6ed771c66af8f012dce63568200ee27e91ccc984f5079142536caece604b21e9d3e4f4c8b1c7b821e6eb60e5e5425e46bc57f018ea5324de917e08b2689f5fc5a1e0d069d074d20c8fb09d1ffe7f45a5e2d34a45463cfe5cb8ee90dfb6ad2dd5a6c3666b3584ed2c97c0589837e59f3e21b98cb72e7eb5260c37e440386297c7dc3fe816e7640e3167ebd9af576d608bdaf0a72075a32955b071258f1cf333b9585db1419c8cff40f081c461b34e6f8f525fd7e26d50bc98356bd64b09292988b6d9da820ed2145c6b7fc590e8dbbd144ac1610e33de1b29387a66486f8356d26133c2110103186026b6ce0c790601598fc494dbf24b8f868f7b9c0f506b4c173b3629272ace1987a1c5cf486475fa3ba8dd40f63922b8fb4829c5b4f39098298560b087f89f329eaa47a1acf1a16507c1f20a96ef25e9c7e93b47fe17c5957d608abe41b842f3e1a8a2760ecc96af313debc0912c523bd928ed238f2f76cdd49c3c1ebd7171cd4741809b585d9206c13716bcefb37af82cc20837764b36bfcf13fc54961b0bc927dc58f65389f0c9d2d7f6d6e462008b685ed04c442fd1f266a9d23ec04c902c9bf64f8ca6214bf92f229977f0bd8502e38859b47f0587afa24de48b82b41382b4376904c68417fc2760ee5a24cb2df4eac044e17274795c5dd2fd6cf55ac7be0a979b26f15fdfddf876df75a981fada541e7ed2896c62d3ebace572be391ce43db4c1e7e2de7f960d11cb1184690d687c8cb14279292c3d28efae2c5d8655e91698e3ff09672b165f1b119e91de1e8290e2c17f23e468796a17e9861edcb5e15b95a7cbcf709f7d1bbf814933c273e3283454c549226a150855ff52e8200dd394ab01ae23336361b1c18fae5d3a3d0dde18fe9b3be165a0759897d7fc590b3623d97caa10eef01c38c50db36a2c66502aa23bfaf83548b6be0685ce7d0e4dbda8bb74486c3a54b94bc13d332af5458c2b3d55443e31f2f8a37d31479d42827392535e8a46fc029fc207c3bdb6b4b3f05bec82eb49c9f4e764e4c539e639eb5b2046a66908af2dba765e19725584a37622b060f3341c3045753a4b33f36e3bddced50d8b3c82b45117b1231e1cb0a606a8d0281a1a16febfd86b049944736ace24a0d80944c3dc44d96de9ae3581a8fb3d7c9090f53bffff397fb15091631f3bb389481f1a6ee04350a37c98a518f17d74f748772c67ad377a375c4d06f8bbb83e1673f9b7814a9fddfcedb2052155ac830e1bf7274483701c93e1b5900d92935e65f112c63f1c59c52896aa558e5cdcfd4a78f625cd1243c303ffc1c692a91e3655ff91d629e68fdb362036b22d0f5d905d72f406f5ead7397caac4205fc3d2f6e5ceeeac9b7b913ca554410b8bc8b926caa86554c762ece9f776155dfeb87ad4d0a009966797b04d05dc758c25c0bd74a1f275e3809fcc6c5e4fa2369f45fb9636324472a6feab97d3cd0e6f458bce56ad06cbdcd9e8580a194c3756883891d9b0bb3780cfee00ea50f60cb5d8bbd724fc110fce03040577deb59d931a85b7576da09f74ce529577d67c684f5a138cb678af1fc592f57041647cbc90ae0ec03962ea98a753a39353344ec19fbe51df03cbd9610c349645088134863883a52a882baaa610ed088820d1c02ef2b505d819b132b032829d3ed1d10c1d9ecd26b80d14002564548f65e1ce7e7ea9851fde07ded82352facdeadeb9e635661d1c1f98d8eb2c1a2cef5bb93425f9fc3d20a8d6517c62f3b7155e168bc81a2f82b2274d6a251b0d758c22a3dfd36e9af75260480e213a6d5cc6807510e73f693870604a95d3923ee39a09f3b1031a1aaf11c38d40cb424d5b010a21908378cdcc4e24098e35bce6f8db253ffd34d54f22c4bc8d8d500167de0b72a81fd9471534555d0103bef081be3e97a609c42df8151241351134c4c073701fb67f1528b029bcf83821d05d460aafa76bc88efcab4d2d3c5f8a2bd848ad693a6e34318e255e233ec94796e1e1345e48644809f31ca27f28adbc44fc05f81f9e775260edc6d574b29b0d2271de891256de68907cc4a9919e6763ae019c091e4b3a99ffecfa7026e0b35d33d57a81c2048cb64526b48b7f279e34320ff43d726a6ce1488e15e9e09f1f478049098728807f8e6bfa9be37ad3f846de4d743569d47633e2f048c3dd814940da9ac3d327fbe451c10e2e0928e9af58b2a704047d490164fff4e0e4fe0e89ce3bd9849ff8d39a46e71771d8bcd40950f5ba4573f97181f1293543c7f627af4812e2434cf3b1de9f9b2a722d3121816fa2f3e322c1b038f02eb368c2cb501573ea1fc2664c2f09eff9d4d15b4fbe3f65b1ff555a2c2056ce23824b95ac03cd3ae535a0d77ad2703fe0e033b810842e9d0c78cada2d1d4d3e0a66112175fabe670a87bcbeada1c62f94bc451a7b73b7b4d77202f7d90b309cddec92aeb8ef3f4aa1c1fd326b0b881a329678ad238fbe3f57ab96081e6a93a5bb1dc39e4398975dd28ddd15ff09dded7179a85b06fdece6773ead70c9df14ff04e947da51571395bd8bcda71fa8681790394e530a3101b89a0266e1c9e7b0c66c59ece241b5555c6af6380dd37c82e189ee60a955915cedc220e6b83599c27c4466d9d14d74b914481c8f4ed56f3048a0a82d83b0348498a8cc90b4e09dd38c2d6c924a1da8461f793886b38501ac93bb5be534e484b258d4a891075543bbfba9fa192701830c49516d505884c80cdb2cad5dd41ef40fa11422ea633b70d48881993451c604edaadf3469fa1da090a3fa9b8a087f46bebdf5085850173843dc2f31b0d959f2825b443a3689a06447926012253e58c2b048011464ac9cc9895f3831569bfd8a20cf8967563c287fec4a06773739f563d95fa4ea02fb2ee308f63def2976bccf461f4c4c5e846a5dab9fd8e7a476e24a5901256f38304eb578c06711e6780d70be79b99bf36508dba4a5d38ed712394ba5422e9dd5c571d065ed5b32723e11f46926ff532589ee08260e33854447f1a294f8f47173358e04596542e48acf47e4a6891deefefd3ceee365d348f3f760751dacd911a1f7f15f36a5955aae84248fd94c8ebe054ef66620a23d18d4cd20a8a248f8ce3c29154882f9368a06a8eb4298c095effb8c3338a749d98f9cae9d53bb72baf91b284939dad9ea93623286d7e52bb6ac042623721e8bf88d1c8b0be773198a39f555b79a1e415b4eff8db854d05e3260dc1af889bcafa69d514d8784ac5e16f1c4d9cd923388c44f52602b953a3cc91f52658537cde745b51edeaddacf23132d670b75b6d2db3ae26258d92d5a29ff07172624c47d81ece4d05fe647ebdeebfa5b0308b27fe97560fe80efaf128b4f1fa11043c43a3e7bb43a3d6c5381e8d04b663bd1e4b4bd34a5c7186a0712fa6086ac2b9e351a1bbbd73852cce403c9ccf164457f8547fc1a06ffa0587ea22a27ccdcca7902800db4aba560bfa9e3d0623ba47b4a37fff6f9ad0e7a0cf46d83c8ccc35c5c9d79ffb993714dd8444db726f9eab45576993f014159dc6569fa80463428693dcd6781a856ffd37bae4f79d6d27b0424c86af566675f9601390af9633623cd9a5ed4210b08a8d0a920d7523f65a6435c21371a5097bc989e671515dda6561f206ee279983cbacc0b179888de8ff31af2a4c027a742e65cbb8282395932d3b339daf1bb8983bb18f768ff5587a5addf9827150d1d96a09bbd257c0ffd3f10c341dd5c34cb1cd3bca7e3213f2165ef9a2c15ccf4e93530a1442dcd01927948232a7ebf127288e81a12278e20c55fbe37004617a66b70df7e2a9adefac5fece4cce0133d657e58ed22d364eb9c975346ffb5e8b2ce6c70a8908f172e75d7ed16457430a656f64d9eac2ef027ff70cd0230036655bf514c4c0531b0e96cf5f0d32de8360cf9025f1454e28495e90380ef23d430e8314031cee519fb0225b2cab5b9bbaa58608625987126c5be6c33bac0947997bb64b7841f07748e0e4199e8d6e1bfb7200737c79de07c133c4f527973ed45451244001fdb5c61ee1390081fc6aa22f1e6e39bc5e8615d4bce0d8cbb5539cf58a8ecef45a8157972e53acb055f59084231f36c6c3234c65b353de93ff2a884fb167de6cb3e559b01aa1148d87abe61e235dabab2625e14720261c034e3981041ef0046e291f00e6bc907b72ace6e698f49b0040dccb0c1106545c3430452a247c06356c7fbb3a732396305240df7244c669115d2f2f6fa9b3d50d937eeca165105f28b9d2881a27862da68f4976c8b91fccfae8422ffc2bc3261207afd262ad5c451a440deb3f21bb739434a9ea3da58a2c1a42129ba84444378fdac0c6fcc9445437f4fbde6a5d486b2710dd3d0e8a6fd99758074e7d09aaf5635217e5df6332e620566fa6a18fd8ea9370e5883245ff4c24b7e65e732cd5580ad129a83b505dc6ee90dee0d8d5adaaca42361798816c88708006d1b64e1013650484426f02d4a080502ef961af43146c3866d778187b11247837ba7e274112893fcaf9969ee6042bb8f1d29d76748eb1297cc0d6192026c936696a21fa6e6e544f616817bdc0f1dcc11965d9e39d71d491593f17aea1f58bd6384ae0f4700b9bd93f1d06452f872bf4c81f16819840a15f24bbc3d32a50c42916b6691346cd101a6b2f4a07596df0f9b2a351e73a1ebb4388f0d577c49868554f8f0a12a21fd7667f4938614891ca79aedbbef7d707926ea926b5e128e08985c620758549805cc09c9900ed79f8c30eb3c19f4473cebb2ebbe3b72bd2d58c531a732b38831e88dfb9b5964d1d014effd1ea8121240b24fb3d3d617a84b18c486e2e0a720779092cd26a96409258f9a9857d4d9176dfd52ee692b35462c543bcbb9c26da4641030df44b11eb3b579ed4a16f65ccda10e609f7b34f8b913f267d28d104f86c6b5814c9c78607cdc2a0b6fd3eea8f33c570a5e0b9a63c1cb7b4945dbb5ccd2a449f46d6ebb7d23e8b96d6c4158f0ff8d83a09a893b1040c1825c5832b804001054b4ffe5ebad25e88da9f076339c4fe9f993828409809f7b8aa930b27348dd984b1dbe59c40eea77bef9612782ab2e22df8327d852b49522d6e67b7298a11eb09110cd8347e15d4becadcc624f0b1633ff650ce894bc8e196d1a81b17a930d1c621991cfcbb652bde6b37a3e33952fc854f194871faef0706d6a0ccd7756cd47a348f8bfc39dad8a0967f95c0cae55bcab0195046a9eb47fa0ae322f04840ba9db8816b56570f998b000ad883b1a2e16e8d4d3644f8b596f4d9f8ebf2f76de0d553017876dea3bfe6f3664fd94969f748167fffe12a7b07a32166ba0064e0efdc6db78f4e39e22002f2b63651fa1bb6b3996bbd4a3a305f59b07bc3a09d2d725aa2615c39e616f45f109dcde10ff4c3e51db6fc32f5551643f0c59268f805fbb0107d3b8c4f2acdff35db4b67c0a803ec4700f36bcde1404e1d06f16b26de4de03f1aaf4c2f886ffff12c02186acd70fae161e8bbcecbac39ce4fa6ae8b5179fd495b49620a8a380178d512252eef8998fabf4af5c9832b4929540ce8daee8aa8a2336acf95ff909901e256f12146c3489b5bda829dd32f287ee7bc0489460a8c791c78e3568d09fbcb3dfc86f46c451b49c7858794399a1c4779ca4838f3ae2d618c2fcef52f4e54abb4f585287433e0c7739b43b35e3f75b1e62b999836d20d555d6eb16ec3e0a46ecb8ff9ee3cd4e10f86e631b8e6b4df67b8c62af6bfca55e541feb5c75b77ae921fcbedecf9417a181f1bb17b75ee2f6fdf826bdbfd737a3a1fc9a0ee402feb390dbdcc894072878028d9d2360bb070c09edb9da761f49812ec9752d9dbe5b0458bc69f23b4a0556cdc66c8abff4aeab58a1a8e1d23a1f952f5e952c6b0a4b61c7fd0563bfd5c47f52df91bef86a8cc31b673eec53d7e30af06769446254a47e8b8fa2a7278cb076de6ca786fca227a836c6edd4b69ac042d475920c0896a83c7bda10f8de1702f510bd4e308f760fe1be7ace00d7cc0839da86792516ca7004e9cafdc5154030d8049c6f32a512e1af54e71383bbeb95d8c8302f9180d700095a69f9356458dfc1249edd3e82ed02223a42bc84a975ee9414b87010fc07d279fd61adcf0e9e56870d0ab85e5afb345a72d39e616c221283c21cf8b4e580a47b78929795d77bb159473e444302ae4bc483329cca7e7bd98138ecb55626b726fa8d74aa53f038220e72ee36ed81760394c8930ed5d96c54e0fe65e869388c48411eedc90d02aa0a8df95302340e358d645bc933feb5ad453fd6b4f979de421de57efd930b409107755682114988230dfeb914bfd4c6fda3da36fce16b8f529d2f8435dc9accfa2e40ab6da72dc051950296ae9a987b766124fce4b24bf7d3ec75f3fde202584c16ac6acc73936922b49ba17e2c09b8b6b5d01a67e967a482a85125fd3b6a513bf4d8c0bf06584edf61a1306c812b7c0d1acb46afcabe8de26b908600a670134b4e07d3357a805f96edb2bb52579728fcf2d2c85ff1c914e5d77b704d3c40a638cd262c368165f75f2a5f4cd221e52725b726d8e093a153ee254351ace4b932dc54cf6ef2124df8d757ba45bc28b389c1a990ef3602b42ce42ad24ca730b977589522a3646f71bf8925b2a0051a68fcff1446088e99a51c7bac9461b3958c59612b9daef62d3e30138a12aa5a56a418d74c1cd973a54c743cb335d948363c576dc10e2a4ea8493641377377c14fa5c117c6719db9d5bc89efe127ca726d0cd62c3a0dbb6c126bd1cafc4d392605e7c89a8f7406aaa7e108e6e3d875b4b998ce360366280b3b8f1c68222c1869114285dbe5a77c9c934c53de497828381d0125c0c0581fee9d410de17917ed17735d17100c5eed01efb53c9e555e78601b732742f52be495c7c9d817028054c5a6822e0b13067e3d70ba9799d1877ce0bc09fcfb1663c2489353cfd8fcb490c6f1b6fd8cd5201564994682066fb6cbee6f64005e2470e0f42d7e138d191659a409d5bf94f6882730e2150251b7ebcfb383acb1fed424fb61ceb903c3083e7fab2f3835672c8e2a2b458a4fc8ec2108b1a9bb9baa7a5c781f4841ef9c9c1945ba6a9bb167d1092c0a8926834b8ef64b17fe2f9abfa9a677ec35b26a2f29515efe9327353b0f11b805176d816baf6f2c08d6e8da2161b76f8a84d028c365228e147a7a156cfddf86ed9a5192342e7490ebee9d5f5c62489c2ee9f10f3bccc7e34a3897f56546d14b5d69b20e64722b0b42b27439a713203e86e78b9ec3ab7b24b01e0cb170c30d5e94a878d6766f63a2b0e2f9f401d687819e8cbc0fff6206456bba16f006c34855fcc6cfbd4a9a7dc57ab09d7683a03a5e01d5449f5c45d0d1baea9adbe2aa5eff118b64c628de59a9230a1e52675bb50e06884146f28b9005ad8825b1371ae77ca88780a93f9b28aecb1e7a71bf8cedcc65a96b4c765e12a2d6638073b61d1c64853c49aa2ffb35c05f28b78ecbea87f17ade3fcb652b641c999160409757313ac835b54825ba010a78c5097f228adacbbf3883f5e7d244ac2dc3de3e879ae4215ab28b8c92cb3fd9ba2b46f39729a4988880d5526616e9243a4d1cf6e09bb8e7d35c453068872e113c073a9d203ecce09d753f087a1d45ccaa568ca99ddb031c3d074a03941bb8e4bc6dec85113c37340a6869a07ee03e65fe11bf3448238a0e9f23ab1c093cbd6a10db17d4ae410a52663a552f84fa43debcb374484c7f6cc9c6b8a2303e54719151e37e302c12dacd4609b4b27fc0cfa10db13bb512b9d3b202c97e20cb5052b6d6d7f428113179128b44969f59c7c8a808d10876d5150133a37f1202e1f18f94139a2cfac8baef6ce88a490571a032875a57fa7a91620199ed3d8664b14f9ad6b49a544cafe6a53e5a96efbfe4004fe890e411a64038bbe82c757fe5581060685d05c7ee46cc13272ccdb413db36f6508d160ce75d74e5cf143efe02e312ccb326ee5de443d876498c0838598ce1e7a6e036d9c01c9ab29bc59160e4f064fed182eb1185376d317349119f27617ae0b9e2e3cb46702610d130f8efde41932b6677010894348c76fa16893fe45321681ca25ea4aecb52e8e6fae56df3a9a857e5360cbe54d4bcaa40c2e9959aa8983b93377a1ca90ef2574c16a52a8805166a93a74d115cff9772ceba4c9689d0e6ad5f3633da10f424345c7e2767a6d9287cc03b33c8d36b6c1e41e66b7d56f93025a30f536a190fb4a7b944a1df892929a46c41d5a45df3250c70025c7a1bcf7d855681614cc3e2808adda38a4aadc242b71c1c9ec43e967572ce9312cfec1581252dd5a93b90c99c7da5d244510b980d691c7654ddcea4f94ebf54e20e88335524a54a456d786c8a649daf5731e9b485838db930e8618332dbbbb016103b0eba136ccd91eae2e61713d3dede6df0afd66c06ca82498e75c0e2f3ccd8f10766f17548f38fc58ceda1933d0138480a9e60c9c3db6818534e19c5d90d98f4bb64011c492ab9c64e8375c239556ebd171349a9d1821a3ca7fb0f704ceed2cf48c129c414007e625d90e1cc0254e91804953617307b3b002d85ef79a7c1f62864700268f86d665a85acd647dab4922c85466776887bc5c38c283fe8242671191f3c6f1178bd8893e93d0f993004fa9093df692d664c1c575f12561047368d8e69ace90baae65ec812c75e4f33b96ac7e011f4c774c8f87223c070b24ce48e57750801a2e9a161dfd39562d33545a667b5ca0a6102d57ec68d5f9aaf6b1b0ff1412140da618c7ca3e43515c6bd8e42ca911a71e286b31f678eeb8f384dfd1e88cd895062079ab75aa2d0bf9e6225bee15e5784504eec9363c0e4444dda64de55e26243b9fcf1d4d0d26f94102900580c80ee0d5af752a7ac27d7aec9d6506bf4da11105ba1848d32adebdb555209950709ac465674c122b2f6d1a41c76d50a001b0b37fdf64e65fbe9959d35cc5f45f380ab5152c9d578eb7cbe77ef6d4612d55cae19e95de42cf81fbc98c20d3a47ba7b7472b28e1bebb3d14a1c3d8a2e9c0297762fd36634ca9214d24360623a85551ef73315642c75aa72a79d92f14e899dff8d07a9cff9e19961450dc6f48b4b4d6605a1e20845594f45499b9361fd4c1509a7ea7aac9527c214deafe7b2c0e9e3a3da3976444ec7abd2d8cf5ecfc53b9d78b5847eac9adb15a2fe363032d74edea55d8290433935e18446059c24f04463783d9300ef7142f61c13e2dde57344c7a6d665b7f2d478be8181405598190ade6b44a411fef79ac94058243b0f50e5a42ecc469712d0eb4f4a6d3b51c828e1d3f7d2e8c8864f4fd449e75087e78e9868b3bf7dcbf9ea8e8f12ea83cbe7b73a6218d9b4f8ecb031fef5d1476dd998206315d458d32bfd7d03f37609501c6124fbc55e154333008fb186d2f52f0a871ed7b1551fcd39c560d65af5c52c24472c37cb8852c94c7a21bb65c32d399c7aabd222d6426aeffdf7724a59d5f405421c9d3ae0d467a2558036791772c01b04e354f389cceda63cb3ae1946617a5bc5319c5eb412571c42f5834eb40f4cf300a8f593286c069f1ccaf356cdf7ad9c47e314a60298c1169d3fba95ab3b63f10978334e9d334316448c5c01dab15c244c1be65b7ba8e7c6fd555c83af4d7509836fef65c93ece916439efd58487d38bbaecfb1081ab7c5dc64f006d34a8e1be0e9f1bd0aaeae506bcebb2bf202c0bf2ae26ad856cc77bb924df99e603f62889c44524ef92dec44ab8227ff170118adef650a6186d3e1bb00695023f87af59919058f6eb7ef36e0d3f27e8f6ef6e919c54938d1d802a6e32c053ceace4d001c327c9fb53d69db5921dbcc16ff5f39ee3d0abb3822141525dc54fb2d53072f9e6b3f582c2cc5baaac1a22004386d51b937e41fe1c3ca3320304804e70e4ffa65fb21ea540fdbb33b436a90e0af00d3a7b24693b07036ca6667d47d02155c9f9860a9ead75e2425ecdb2b83e7281965d83084d0dbff566235f72ca21ac56223a754f9d2fc1aad65f1a74a96b8e2841b31c63c16b6425b41d23b834ddff3b21df2f7d714524e4ead00ad9bbb4b7c59d153291153a46705931343ef195c2a8cdce6ede2072606c9485c627572a8ebc772ae9f6fd27eff906b522b0e6d39cc6c58500541a35ed8bd5fdebea2799310e4c3ba4b5017f0ecae7c3a891d91912afa118f90264b8f4a7f191d7539a984aaac872e0002a5be8c2beb9eb91e3f72110747c43e1f7a7ab59b38763f11f5357454355c0d18b5dc91debf2fb2631859256340bcc293eb1df32198906d2b865e1d03d0c73e9d2ef5d54ddcb34a1348b619cba0271b30d6a65f25ab909c590f03fcd94fe0d56a20e2f5b450994795825b77dafdbf1cbb590bdc41b058eb58eda2be86eebf85fe9039f6639de54099e16a11a3c218c908070dc7543f0b83693a36bdf99c190c16f0ea110383bc6a100eae4476fb3919383618df85511abc85d3edbaed8b77657f154f8ba9a86028ee6710ee5de245a4e9dc3e0654a7a65208981d27f268e9f0905875abd0f9e9915884ebfaa64e743585b9971c365fa4b4f8d92a308503602002401cfbc100e344222b0a5cf5e3c87b619c294b14079f4e76ac899ca5757fc44be9cfe7616ad28a8eb4edefe4dd7ed3fbc6137b6b0a3e93a8151b806327de47ba0da562722ade534650fc7820b8fae66f9d284107d9e878d6977a2ec79f5e4faf051809256b096681d76d514352867571a5265761d719f969f1111d7a85e5b861e575301a1ed8f5a6250ec399394862f69bed355410c0f4abddbe901a89fe6999cb3520d6e1fc16898e2ce47392732a6117bef406d925a7898dba3a74509cce2466c48c046cfc70199cd8e0b895efeb2f2a221aebba26ec9ddbb2eef7300beee26f02a16625989aa90e93fde16681111ee09425537ea58c0275258f25b612114b4daf6378e355d09a4e8556b326f903763cd45b8a4a84c0bce7f03ce1bd3ba156b564e1416e4aca501943f15b8ca6c6cd94a3d33a19eac6f87edf5a52376f9cf497023c75dcfa811dde55840a0b02e6676daf360d7e7728833bbcc72a46cecddf00deb12f131486a4c47c645ce3013fd97e74fdfa5711194e2c438b12c43b78dbeacfae152db9fdb1ee572a29857a83adce8f03480c7976389e1c8a3458539dbe94030751f50df35e85c7e48a02d6db969a6931a69e958bc77ed276a3b14d3982306bcc79954c7350e60258a23d3973bc0d54dd60c0f706038de2605cab1bf2b7e49f8aa339f6d73dbc0781fb55a98467fafe67b8620fbd76d6124bea72be6f53192734838979c71ebe74ce9c3148ca27c5f3ea80af03a3c37a6b8a09f3dbd63f812f2b8635480945a3fc4c2a31f333e3c3c8526e01feb0fab3d4d1283071844387ff5aeb74cdf5d62021e58ad4e0af13eb913724fc493d67acb5deb9b10825dcfc8849f1ba2753626ccffca85980a4143d75a730dfb49ca75283c1bdc952eb552a2a66870440bfae62cca7e86e150bca1a7424846afb4eaa9400d0c0b7733ffb89896527b147728d00233d94245eef6911cbe2b16e0d96409b50f759abdf30253e73d3be623e227e2293673ee0d7810a11f00af75ff717286194c9d514ab516018bd246103ecb5d5ce20d589b118387b7e6c63f08757f172237207c6b642f7bf6a2069300825d89d7c20dd8cf5c640347b9214e1cb545adf0cfcbdef598e9222d2364a1735adfa674326bccae2c342f7c77742eb64bfbdb4b1df478b446bcf8be03db316b73e2b66c7f5bc83a49689135839613e3a24ac7afa583f7c0d8f4122f44ae2c4a6e5bbae4a88aa64bebaa007cc2581f84935e4531f2f00037ab459d8c013dec73aa366e4d6c6a32a884d1584b84b493e5f3ca93e543b3774f921654ecd0b5bd7a37c857fa6020617fb570ac10888e96b7c193aa10fcd11f8abe669fc3bf2eabbe1f1ae023c7e2ebc3d6c93c2d3e1bb96910dab98ced2162d7eba8d62af93652ed9b1cee3668fab9878868cdbc5bae526affd35090074da0fcff8e70de112ca11cf4e451cb410f7015f3c7ff5a0b1224ee3300f76d21f0b9693bc3fbb566c2cd3ef2f2cbd59f3dd5b0413a3eee69c9da8a3373b98962cee5b62539291717920bef309bf788de174743a83ccbebf32c9d82786ca4d743901804bf0cff8a5da465e5696ab52a852f2b1a1de84df5ce6062696393b311457e1455e2e9e7123256fad6e57c2cbb9b50b5258bea2c226ad4ad0cb4f8fc758163eb8580f1ac1d1d103f33cb18ed1ead10a852c72fe2f90c8e4ac686e1640657dace0730c3e8248c50bd40485c4fc0ae3e4920c5bc78cfbd70e3dc29b56396b52e7f455e02fcd02a2942c8a7765f170bfe3c0af7b1004fee775afb6cf2d02175d91fa3fb7103be475056e563f2ce7bbf8a3f8422d01697532f36a44dab27c3984f42014852e6dc311f8c226fe62decb56054dc5d67ff9607f37142366a220a9e44b980d33489228d3e4ea80bdea1cdf012b75bbcc7f73e77264f78fbe507659476047286b3fd83daf7e02cba8001df7a9e87e46ff0d6ca0b39948093bafbd808740a230b03cd9bef855592ffb8adc1f1f0b7898d2e2c7a7dc3e454236e139fd054a932283a1258c1ad7d5f6da9cade84e42b197ee2720b75e488ab1c6a6fafb4ee28bb876be0b1364d810cdf8b864603342142bfe0aebf5733b677b27ddf847bcfafc9aa21e7460d274eae4954f119483d1aa31e40327a7eb22fd0de252de8a50c8051a792e3987bfee14c1e3a8f86a52bbdece9ddc687c9e29fb36785632c04b77528a5b320f1bf7bd37773a9f6347dd4510891fc95ff403e2144117a4ca8c7f0b3419201a4ceb143a9ba954617e84e3e17d72ac148bb77bc40c4cd02fdd06bc9eea8dc05f5646257cc2892a9ccd0ecfdb921bd73b398aab44f9ef2adccd58bbd4c974ff0260772ab828c737661e68d255201b8a630ca2475bd1fc40127227d045dc7aab5e8271240ac5c99f923cdbdf3573c6f41f32eb00dda59d13548f2627ab5246b43b9c06ff473ccd7c306de89fe59e7930131a81bf957e460c7ab484afaffcd78cd2c91ae28a63c899ff4d39884f36fb1ae72ec58583f647bfdfd601b55db912710efb2779a28bb210b0ca1f5bb6e2b990f174c8d15f43385af9d4f9a300d42a3f42c52597a7cedc65843db70c8e26002a1c43bb51e9b7461061ae91d06918e8592ff7e0becda6fa26d5f8bff62d7c8cf553d02d8f01c7953932971e65f315036634b9b8be8629fdf55224ba3463dae388805e84d34be372e343bfab3814aafe7c0f37e4e4f66e689e6e1ccf3e2c450812a7f8905c7cba4bad4e3f4ecb493cb5b4bd0237b93063fec1bccda73d761f309fce92c38c7e7f927d2e649fdf27e1bab634d76c75e692006842943d6d0147c98de7c4eaac73c4e981a7a3273e6363844fc1c0edacb6050b90ed9f0a3d8cb65ed9d31495cb09b66db37eb0b7f87387f304768944008219f58f59ff25003fcbe2faab36811c36f33ef9efa06dfacd9f95092d741e9f1ce09e0bb7e61cd1f4a16f05e7827736cb15c21707e81290f814101276e96b60a39d658b5607f98abb49e6bf7b682086a3c62818d851382bc89bc21b256c364ac287796f26e58a8d402fa8d4584fee4d3c7049ca2b074b2ede66c300960649a4865dbd7de9706519049cf2c931f8a86dae28178932cc16819480ddedbf98ae37f13ee14f8aa7b31ea97ac22f0d25f9a2331e64c10281001334ab4714c3da24652448b315cdef0d03e75d2b367c8d788eb740ae00c40a89a3458280f199b376892ea062017132afe298f9b96018138dd49d7ec1fdd761bd902fe2aaee0f64d434a5a719d83a37762a8b8c5fefaf8192f6e21eef1cd64c414f8781eae2035cd356bcb9a3508789b4f7e0a8430a8aa902181efd977be5669c055f4922b6ce0906c89a1a3022d908bfcef536fac2f1393b673a2801361866bcb87828395b4dd21916836dfd109d25b7b375c18fae19adbf5afd0a004753398c41de46e13512feb6a4f8fbc8ef14cf2b6b67d2be63c8f3682c30c2b3feb3a046f844595fe3d1e972f286a9df03bbcaae323f08d3334bcf75fe94fd044d22587f9666815d5a36aa2548270e22b2d62fb6d5a441a75df8797a926f68df021dbb1aa1d2b0fc53a340414a43c3780f5353de625aab280fe61d30e47f1c2ae77367e39bac5227bc83aa93b9535e091943c500cf73c6cf0e3caf38c2b3b04bb150252da47bd1914445045bf291c04d17930027dd17bb79945787f57d09a9271306d32e7ee94d5c0b8153bb809ba68ba2086397c5444e305ae846ac8faebebab27900c74014b2be202033e1e3c5e2d8063cbb590f70a7fde568bb123b2591b4eff2b502f4c9c985a65f8a74cb6af4d43a0573185ce8b98bdcb8981374c9c3437b4505bd05ae4283564bebbfe619f338772f78ac44d0365f87ccf745893f66b19b75518f144e00b824c718262ca8b2ca77f2a6d96f7a792e31c7e83b9565e11c8a69f1c2e5c2f35a0994a3b6c7d9d1d89a2115576c390ebce331c5d1559733a9f236898bedf1a9137ce41cb9fd74a14aa973109928e480307c26e95c97988add0483bac872a8a975108e298657423cba02139f235072c898e116a3e63aa7d7b5b3f0f0f3ecac071aaa59ed878140df04c0f390c6d49098c296511da917120ecd638829d3a239c6ff30ad68ab2f5d31c7d6adb52ee9173c2fe4a07b099c560c39e181a8ab2c7afa458ef8f5e0c05288a01dd8eaba99d5ea0cbb85924c015af52673054d7e953aee4caa941d48631647befd8989ca8126deed34756fa48a1bc07fa0654d96d7f3a6258049fe2f20690ef8db71a6c2475a0335cf816f65554a698c3d2b9b500bd05d441f773f7d633b58865c893bb6b74822a24d24200d4b96a9c2b61ed6f2fbb7d8183e6293b147e885b42028b80bca4f1c815dbef59b3dbe528cfe25597291ff3ac2a354bd26ff7990f1b2a63eeab1d679ce88a7d7354a01b2ceb5fea7932b9d12972465354c744c58184e6a2dc8b81fbcf7d7c6ee46e32915dc0f0d63e4f52b6dad04fca4d002cc27f8bfc78babe2ee4f3c1d9e41d5b161af1bcd07ee1e810c765a6d44eb691508b2f4750ad2916c78e3aacf32e32d4ec382be28df7dc83474a1b627ee1ca639306a489ad4091d6e69b7e36641caa3008cefcf4bcbfbc2b6d7fe4d29b86cb8f29f3352577927573b45203eafa64e3eb9edf918985f72769af96a9a637f6cad6198ab2216654908c51fa69f3509281f8f753538f53b8fa1a228676d5d43b6d8f3b9bec35716ef23d409229ba29f3abc3ae64d78f42e83007fef085b035e0e7d81de781c544f7827dc42362ebee26024f2da0dba8a0909308a8313c1e97aa8e71074c579cea41462652f57b060187ecc45c40722e586259686ec36c8d40b28ddce6129b384ae4adc121171270645c3828d9945b1d671f7e526cce033ba47952f9562f4c27e69fe431206cf4b2d16c5e265fa5d46904cbc89d72449def0d4c729460ddfed19fc949b3aea7fb6bf21bda247c882aa15d381aabb05fe663446383b2024730fc5f1f78c9b485e9348c179d7c94620973c2948209187b30755b083b56b773baecaadc904002b9505e32d549a52feb38abdf8a5e16c3d3ce091dcc1ee581af175a5c5c068cd55bed798ecddd028a6faaff1f4c45d2805c1616b71a6c65fd2922f1ac36a38993d025dba6f5713012c68e917a7c561c38f85b512ce7e5eead4e0bc9ad1db31bc2361fb7cd52ea31a6a6b20427cf888e88e2ed4ab432a2c96275ecb19839b33c0fe73eca26783ca401e6a1d1d106c1db69e8c732c19b94661e4959c27786b2c9e5ffe4a412dce6f05774561b0d7a67137a39d5a457905a6635ea24f052bd64047573997ff22c7e70d134b7ef63a5fea5ed6393782e77415f0b747fcc8ce7efaa847d1a6a8aec5cb23c3f56c997f33f0410ba9d19556b654511328050df6a601db81e0b3031321c29129fc88c7593c16460d5c7e1bb2c9dacfdada7669552b711dd7f30418b99fe85d2fdb197110d1a1581806fdd2f0d0da7d78a7ae22936bb60cce7d73367e9a2deb14fe677c1599f714ddbc8c601dea8a781aff4b301be3659d872d9caed79aa74388284d264c438d3c6434a6999c462cf8e2685b67650ba8ca605ba359fc55ec31c710cfebe126afc54e006484161918f2ba9eb5c41d957722898aea164b851d07c7a2c7c2330f27119feabba39b567c983ec53408a35c7028ce2a13b9ba1d9978d2ee74769ef824d2cd506834c5193486959b82b969401d369642d3ab106a3e266e44a7dda9a21005ab9b582dbd35018aa32707d784d3540c76461143b975329129b8d99eb0770da4f01a13049734cf3f0212f99dc34c309a4219b9e12ddad159971740ce284416349d7c8f37f2261a1cfa1cdafadbd71f0fbbdcd2d404261d44e5e47c28fbf9b6818ffb1b9726985923e9a886b33983e52073f446d5da0b7dfd13ac5124a04ca58560002817feab2c012cae0541241e86a9286a4619001eec6d179055e808a1fa37c8be97726282f7dd10bd7629fa347ff27986cb263f57d3f922a1a9f6ce826b996222ed47eec4c3373d3dcd9e66adb84e7c86e87376f34b2d2c711a3182fa7214dee6225cb3492356fee37abe5b4a06585d8dd8a2f44035389ccd38749ac5db7e7e600ff523da5b99fafd7669014beaf38aaf335488a5e0afe1c1fd905758db3b42bdb7e3bc2f0727eb6ee669b9c1965fd3f38a2d8feabe84cc97c05f53345ee062e817279d6a83242db164f5c8f3599b2aa799a6a46cb94b0e8dfa9c057689bf628c83c123b3663dd0785fe47cce4a8a5eef3f379fc02d7d6c82575e52659301cb4369710a88f0fe42e13e7211a4735c36a0c1e6f5eb06cf1e529492f8e2d3206c068f56d3ebe8da0508397fb8a15deb192acc666419e4cc8cf771be05b9da3e8b687d698952eba24b6fec0d787907e7ea6eff774aa885f95a18754a8b76e83765d6c1581d97e75f1ae1e98208a20bd7142d515dd1cb767248f77b0b0e5f144c26d76b81a14c00c7514ac94df61512cfe77a8196337c3ac54d742bd0582681fa0cf3afd3fc50f5cc4ff2478068695c9a98345baa4729c9d388ee4bde6a5cd8f701553b7b1253f7fbbe1f4c0b37e923c2809c29cac064b0b69cea79ef53e77d9ebe825b15055879a97177fbf6b8e892d8189c7246bb47a70d579416f2ddca2bdd76bef9ea4f5b41aac6681fd6c21251538e6fb1ac4ffe77ba3b095ff58027eed0f9a968e38f259fe603eeb9a2a3a64447ab1827a3417a5bc1dd9107a1c161b35972c0d8c7d57d3441998cbe71eb266e753b114be9140347d9b8aff89c5b9be0658b56e304a9255522be40b9bdc7da641be3c8005efbd0ccacc7ed5b12324b31d9d0e1ccaf2677905e35afae71d37912f49af580a2ed4dc52d4e62d669a29616fdd495bdb8383bf5edb66463fc507e435addbe9cd65e44b32805dc22c460f44ae8c4b6ad5743de5ebcc3615c476f13ad1d577c33e3c6be1dd9fbb4a4d0bb5142922a0420727c4a9bac1d41e860ea82dd53e610250d7b6916c69549da400cdf7e35ba080909108c97adcf010a2ee5d31451cb00e238fcccb0979506e66d9794e6abfc3733ce351e8eb669473b3a93ba0f1ab4331a607b686920563e71eb47b215e5c72314c3376ab9f80bf91d855ea241d479d0a5a511fce20b6e62afcaff9dce209e364afa19c22ae0d34112a3a3a6c690a43cfde2080c02daecec7235129820009fefffa575e037a7ca7621c70819e7b5d3e328aab6579b85c943ee9b0fdf0958ee61cdfddbc73e3b9ebefbfa53a6046687503043c08cf1f1e3ca447afe329fb82625149767e23c2f4a926a3c5d890ae9b311410fce9b21e3913e49be51210e7758962c93005a3f16dac6924708fdadf1be23ed8d600a3ba9a48dfac046486a0c35cd49dd6501a40d88397bf15db13aa3ebcf9ee54a357824f2bf029d572f053dda7279287bbd27897007b81614b67e6856a67dde8d99f09d152b25a5dce5af682d8fae21bee9bc0bf1b1c1f365f973fac4145632bad521ac4d4389895d9d5991467fccabbd88cf5177100ce64280b1230da2e584c77dd9909e16d85d0903efe8432bc206ce7e7fc426c825097e194ee2cea66451dc2b7761ab128bfa11c580863c4d6906c1286efd4d1d1bbb26ea5bbd2d80d0583b09322d2e1dc01c672be99a06691f9569e49551111af161fc9a3d32985b8bedd5aaf74ca0ede679f257562407a10ddad649bbb4c24d8127cba0c860101d60c3a3576907fc61d9e7b110643fe331adae301813546034178932d07dbbc47d4aebc9a8d8291932b6af273317aa3a0cf6fac87aeb803072adb92af36ce983b7614bb4b3884e75ca5b60e55bf3768c741cab34e900e80c12076fa3ca4bfbb6c374b2a3b3c78cf1c3abf9b7b6d1474b2905f59157bd57e761b37e02646d8c2603010fbe7cf55de688dcf883c931b239042fbe90a695b88fe2f628006b408968eacf765c8738b2cd5ee3fef32242507a60f725c05bd6bebbe1156b23cbfc28a7f05ddb7593db9a38a861c8e9eeab0c7673de6e5935d81b2670f53eba4019a59d15bd9b0411dbb3550c7f4af27de892242eca77524f2bb88534b8f853afb9483af0b815caa0d377335624fb7839180e8b13c23138781f9deb5459d47898259406c6016e576501a0afee9bb27ea3b190fd437a88fd0425396ffce82c875425848b7ff4a9401bb5bf6a98b1df0597579d8030793338618db83ed3a3fd27fa8289de851104898362ab121bb9c4619c92f14c08b8790c583a536bc3eee8f3fa334f31f9dfa343233e57db1dc0b19d0b0c8fb22282f1b6f67a3f9f9290f2f5958e1f83070e5b9017e2f4ec19a4fc935bbdd2ce8ac3bfe305749f4e5bc38e2fc3fef2f27e481f1ce1be57b96273b893a492193096bb9744fe256ef37c127f1cd7bc3eadd86df9114acc9f976b2269151d7798b6c50838f2d4a2c82ca15e589933b7411dbb8bad70ec377da1a0a756490e859f35e2b2e5209fd26234aa23c23eb3ed440e42e68dbf752289a508876e5c2a2dbd5940c426e64646fb10e6013635d28bc7c2a05c8f59ba6e8cc71790a91aed9d14c61b6a5841d05fa24ee8424a94009dc0929fb210217850e662bb022dcd4541082bd69d996e38152a753bec11a1eb674ecaaaa1a30c5b8978a6346645d98eb82d3cbfefb13790a8b9dfaed546b829fe785474d0ce033a8176a21af55bc7820f0dd1541646597d3107acbc08a40bb4a514c6b394937485fe96056edfcbbf0814f6ae9aa8f38d5f65caf1bc6160b339ea8a6a6574ea35cb76923e02d2e57ad6e46885ccc9ab6d538ad0c83c1edf9a14fd1b977e82fc8f972d9b30c0fdba12f5d18f67dffc26009ac7c25d53320a7bc9a3f2ccbf262cf15929fd6a1c7346fe181e46116d921d37bfaa45e2caec62427721f9a1808d73575840e046008b9f59e437d1d3cf63afef188c70741cbfcadc3cd1a3159edf6dea8ea0f41de0b6daeff6e438354678207ea49fb1c4a471928e8ca3f45fea2ef122b67d1bb8a377274b47e9b60e04fce3e007b5c3ab960c69b7483b96c6fb3e1f85f824aa35a74742454e6585ea9676d7821cb48d0fa7a496ce63ac7f83437a5f42064e2e945351402c3713e2de24f12c3d292d33e5913346f58a1f53d18d7e9e902002bff63bbca73a37dc13de55b3955a15d809101a87cc18a3aed59a19f1968cb1bd3b47d08829673a7571d49efbcddceb8c190f6c9e68d5cef60317368a8e1ef7b706a9875e667b14a1ba6c9bbc5842e89132a031bd4ec265fea1a0ccd4a76305fdd8c768e6e4c0e430555abd6dc4c2a9abe3d3c20871a1362f531dd93ccd9317b12c0e81c135ad09970f5f7f74b929c98c93f87827c6ff974df81c525c1fb5e76c10a825638e14167134f9fd8142c10cfd335a25ce83316550db11d2e3e24b4db87c87baff1abadbc2e936a135c39becc997528ded8dc0c6781354faa6ad45639729ebd55e77b3f9ddc03e40b4677895024e8211a3a45284d45881a7279c3f54f659f30af641babea3f2d9182734393cf5634adc145d2424a803bb1ffea08149c903be49314e01812b3714a1b1a0ab78d20f2f54b7098ec7862063b4254e719af19a8adc1225803e0612bea156862e55935a3a53ba166227e6b3c38421e737840a891bc36579c3fd963d66cc4f398d35c3be1b9159197cdddf7979a5127ccc22feb69f4c956d02300185b2a5d22bd264c991e780515673187e73128252b4e8c0056fe0e89271337ece2c15bedb42d8c445b49a77c37c4646ddde80afbe999baf9f2a5f4ac13d019011c536754c00b6e620cfd78b04fbba5daba184fb6c41dc56c0279ca5eecbf1ccc91ec509cb4e004c39a996e61e36a7bedeb525de654c55adf8e4392e8018250e7e9516fd1db3f83b28c07c2b51c1a886eb77b8c9c98b54f19a61a3a4c75b6750976e541decb286f4f9fca672292858659b67fde777a682c5af257f9a6ea652b9f81a888233d8b2ff534025e74b754e23f1c7a13147087879a4e90be2b9ededceee378831e42969410ceab6aa8a68f2fa20db6c85faa42f5f9cef2f11143a58f65e1852a1c161c5c87d235d968ddc926b93f27457d0716d9fbb9d70abccc6234201bfa1360f3ff480b05b86011b4413655040eda37648383384d396979b0c36943d8fac0a472786a42aa539cc6c5dd27cb03621a64ba56e23a921fdb76766a52eb821d08c30259886dee6dd82f5f7b6fb8b9a0571d98cf2e8ec14961ac5e4cac3dcb3867e4745250ef3472b7128bc2b16f959f6f00bf3fe3ed0ae1a0991800b9c280ce124c8a5468aed97da6ca543d382d200d0ced7cf485f04fa3a26fec6e992159a47db590e1b1f8ebb5339c405e07f4edee0d2a1574fe83d069717ef12f6aa96acef70091a81c4c587d0391df9274a98836bc871c2cb577e9bf7a57f2647b78929b13403593f12a7100b150eb7eb67fb40d82f697a8ce093a10db2864db8e768fde5c9ac0f58342f74bb51a878129ad1b48231ca9d70bdc5d4c5bcad1611b0a04f1332b1bf5b5b55deee8dca205d014e6a5d071f9972dcd4c02b0861eec56fba303ad2547e56dbb2032a568dbeb7c5d1852e706b9bf802c7d05462426bd907e25e48bf39a850bcbaf7f057ea0ee7ca9ca4851bc7f7a866d148df86bc948c7e68d846390475a8024edb261bbacee851b71b7999f608a09d04a565146f6e2b7465546e8f393fcf68a42ec868197bb010f1d88624e1257fc1a649ca5d0097c2ad934352669de5bbdddf3bb134ff0e9a5e745b27d548316e0eb0bda9af83ec76b62189ba8fb87c6f0cfcf59c40277bcb5437f460736ca4755470e1a7c18454ba7aaef7b9057062bb81b061443f55baee290f0c2e4deae51c709773ecf6c9c08ddb423c94f6865f765bbd85454fc2d4902eba14b4e31a11dc4314f7ab4cf2e59040e2dae08a9ee71c7d11dc4cd63556583f165c5c6d8a57668af1acc116dd8c2debd8dab020cde637a1d1f6fbc5ac08a2586841701ec80b8fa1466f1815e7e6d80b68f37a2bf87a853e05844c84db4d516280ec5c6343cb8253acf0f39505a8c3a0902316defd2e261b012f2b4c880770cdde9121718c9f3469547fd1246063cdef633848638ff98a84a473684ab15a84e5e5f016cbd752b34547ecf3e5a47bf45830d7d9cea3b9cc3c7938c3fb4d5f8e219cac3fec99e173ae3f5cad06f8506cac8ad09ca791d285c95c6928ee59417cc60bd8ca4c76853f003e4bb49ac8c66e3a2499aa9ae4fa031727859ede2096a3a28dbc7f9a60aa417b994c22b668b20bca23eff3440042ccf3f7aef0bd9ffdfaa1b15f10351d988a74c9905d52fc58747a0fd864aa51c899a20d892e2e4afe31d4b6d49b9bb1954376cc69974c208179303803ef716c2a86dba31a944aa78cec0868e97b496d5f593b459be29774e3c1b24fa23f8df43e8365efc3eea455fae1868598e528b2a7f0ead6e55ccc738f21539e8d145f79b0a7a2c34f70aae00ef8b3fcd0a01a36569e375ead85df12032868444a7ab1a34144a16652a730b18a520e40f7bbdee45f3febae0197852e325c91671b6e3790a0de9076d78b8364e37984ba1403ad8d0a29886526a98d5089e451c4040c632168890d7050029afc9031240fe54543f7fbacc81039e13254dd8ff48e628501aa4ccbbdbf26fd7e338bedf035b6b791dc44964ab52edb0178938b5b34c5efeec65808ef88708fc76bc36bc4bf0e4a8b0f712e5626277f7b143d90cda0a24e9ae40b05c89d7ce6ec5f0fee752fadfe8c65d42fc5cd2fa916e2f8082386182b6689fa5449a6d498f23dac97ec08112f0dc1883085f0aee53002f28e4d1169927f115e0791e11fd9ce8da7105c4942cbbd18ae2bd802e1bae9f2638bae42bc24171dc2e79e1d930a28cde4d66af305dc532e68d47685c20d017c947f20d67daf65ef1085458c6d40e01694384ec5dd4ad7150d59b889a927f9d7ca889603b2256c4dff5b06e2a9abaf05a7731c351d9d49052b64b454207b85e98f1143b4c4b28f1d1ee68b06ee06988b734b6bb609b65d28c43456481da6aa90e1fb0e671ecb7b1847439d4a1c62c369f8e5be9d720087af337da0deace0fd00b447a41bca29104fd9127e42a04647e7179fcd044ba9bf9027550e41811a164aadfe64a141907997550f53bd64e87ad69342304f2d111b32f6f284b5dcebf48553d73186bf111d232e24fdf727b125050725fcd598480aa803e7f2c9fede3ca49c9f613ab31e9d43e3b06e7d345103d5e545e8bd46ba36d1c157e6f38ed4c2fa738b3666b1eb8aeba1c6ac35b4a1f61ff80948c7d3c7903c9d9004d1fc10ff0e3908739477d4864b5bcd87d9c799bb068449ce4973c529b1b98bf4ec65c54b0a53179d33bb5197ce9fc3d80e5fd3efc79b6cd7f6801bb00ce954177c295360f156cada2f76394e22c362cd8b685ed79ba9f912adf5ccdeac6b4c098ac649d3a9a991773d6c57af741abdea628d75df7ccde500ebe6f831b69e49c9d4c63823163caca0d1223e16eb23a4d2abe0a311dae9459584a42501b0b7078682f32d160cb6ca5a25a312aea3f7dff4ec9959408f3bb0c0d1496b00da0e98a0b394d86c857bfd92835b76a395d8bfc2005437974327fab0392cbfec2b0bbc0a455459a93829defef6522f74e7e87b8d7c7d5ce943c26b0a4c4d3a90e6c1f5e79cf24bd0785326aeb74186887384c02566a6148e771c22a3600f4dcc679bf2d55fb57f580ecc7260432fb30046237575fdc951aa479b0b38d6d499f30b973f81a67f96a701eacefabb45ccb9f204b6fbcb9286edfb258eda0ab05af25d1dadae43202b758625d204dbdbe171dcf2756d305fc68d86a2dc94416c182e602d465578d6bf6a14ef7bb7c131b65c1ccc2aa6a83c73c0208058aad29dc8503ce0c50aef11bfc0bfe0feec90917213636480f6e8c6931b86a4c36e4788a7b88ca6a8e9470370b1d3fccd478dda2333d8eb4408e2f4b3cc1430ee460edae990836fb9a82cc2924d523dfbf382b358d125f1c7c1030144b4cd2090cee58b1205c4264a0a9dd50726f0b839d0ebb0c70de33486e78e65fe3e3c9fe683dca86c405792107f7083dd50a21f118e96274d57f7b9adc5887cf14094cc83ac9614c7c6385872bdd1bd6f13dc9a42e4dcaab91a77261478bc842f6a711eedb2df9a5b2292d9036b254e479763dd504741f15a21cc675782ad277ca197838b6cae2d463a56cbb42bdd8038b0455f8d34ad709225318fda342562bd7150da70d365ee62d15e61de91e4830321707eeffc40ef37695431c8997c4c2758a16d3143f1765a4d19c48cd87851f4b25e4f20ba463e992baca6d0f79bd4f72733c6fdf50fe9ad199dae8789aedb0ec836bd6737914220cc1f09c7507df05a30a6d94a14eb2a663cb4e63724673764c932fdf2f176e7567e8771b5393b07278ff7709391d05fa50487d07436f4ab155784160e4f849b1dc3869f78eec74c4f15bc0c42cc6d5e94aca6fb43a29d1c64484e9a8549adb07d11d7c07db03dccafb4073d7b29822387d73c1c1aebb9b1206ac7ab597707cd4615ebff1ec50e6eb283380333bee16dd90940758554c361f46acc01100ad1181c6d373f48ef5adb062c802e82479cfac204f585f370bdbbc84fd20e2017fe3b358a0de644209d26df6f05fa513f9a7a7d0ccb259866ea03baa6e37f9c154584f66eed84b34e7f3a7f52ad277d3d21758fe5ca638ec41783c266539fd3ec8c7aafed7390261f04710b82d30bb2b5ebe03fec8df87581eda6ef9fba118cb777ae0356288895140a217d1dfc7e3f4c892c1edc493f89112f2a7322dc165cfc82223d2d3577b47c9478f32daa19b2da1b3492f268507901e2816f4b29d4d5e11db7a4de9225f3f0c9f98ef8c245c1094a8f16efcc7fe8a34fb1658ece2bb598b14a4290c27d425b08481865aaf83c91a167c6c9432085f499131f8ffd59935ac261641c02561f8bcb505976cd7eb4a7cd8c68b694d8ae1ef53d508c5fb1307b41ab858d94c0ba9c3dd564e7b5a015d6b649ffeccd1dd5d4284cfe0637f74527d29d8d1652741d005b700a98b1257e693e66e7e729f3e3b92779b698b94ea37f6d3f365b4ecf0bcf3021b710b998396a4a4bd689b43c8b0255992891cfc73f0a827a8feace965f8bb672d88fc3954073cb4cece85d1ec3ad3a908d53a6083e64d6d730c5cbff9621ebcbe69296fdbd03a4677bf50c57d1fd89ee9e79641f1d6da8098da893225837fa24197938383b66353d048ba3478600245afcefe0376eea1065fc4c15489336b4c6f6f0a56d05c367da2e042097a378f75bcbe47bdbe65f8d59bfaad258c06e4cbd238373e761a387fc3e6ad6cd5e0937581e3da641b0844106292dd62b16af88386dc08d535b55c26fc96ad06039103da236de7567d04e0f6e9cc760c31989efa6c26c9c1edbec075f7a2e525f4392dfd5d16146accc3d59de620373b16963f3c3cbeb2aa1c303f6d45083060007fea7fceb3e6e780dece0699521bb851715e6d250ff94e861d56b7c263a2319e5f1e5f83ce54e2e8f4ca7765adf3ec6fb8d496acde1389370ed07b2cd342bb31a8aaf8f3faab19ec26a3af87784311c658d1a80c4a44a0d5cc0076a462f5f57e246ea1558fe04ea0174fca0ebbb5d561a5278cde33c2d0f5e69ef83a933e4bb4d270e17b2960a5020873c0f2c843ceb76a65157e54342d339b896734619481116d6b9fc291b406d457cebe0e062ddb797b24511a750aa3e8f78a28e5d6ecc5129d7d9cf598a5c1e9a7210664ec807b055f513cac104a70e111f22dd5e94b19c60106a4c3be422d947bd2215ee15dedbb5aea17198c819f4eb66d1cacc129200837c922af51b951fca8546f78c2acc092f0dd4220bfd3361f9ac70d491d75d0ee5ef53f8bc960508eb3f8e41f178aff8bc7fe2bf9822d5278c71faffd6b083f3b9fc5f2974d323a260e16b6fa781828b8fa79ae01ac8d86779eb8535a5b0280e8258621bef8ad6889ff53c09bc65fce997dc17b73ee7beb29b17074177ad175def5cc18cdc391acea2f807da7bc41bef84ff76b099abcdb7d303c5d7d5dacc0b3e994f41cfa56e415b3dd00a4e24582bee892434ddc301a08fbf75c351ed076539f6e68a4968646406bbf9fef085c87b1162322c99741e7a465c9f610fe7bda2c4d2823015b0acd31450f954e309b0423c0782531bca099357c90babf74065a492714f8e6dea7fbb06f520d366642256e5943e7f191a5e2233387c043b627c52dcf6b731a0eade08521a97ca714dd64030627cd778355a408b7de313773ed5ade338da1d196d99ddfa63db3f3e9b04e4db220d3d9350f3d965fb134034cd1ae74d69b7e2070f9e49c0c25a49c73c1b17dfe9ee59dfb8a9921974e739905eff4ab94cdec9987817b981251db52a031096c93401ad00299a0a6585842392bcb13b09f30f8bfb5b3e8567a15696c150326b872717141a2eb479dd2234b2a220420c86077844756e02bcb3421d9c6dd0665c332a3407fb719a496c66f74c41a57d328b31ee4a66f6cb20d1d75d9fcddbb4aeba2e4184f9a94ffc85d157064fa7b0c371093bb262ce765cadd11877aba93d6fe8fbe00d0a927ec9f2ee6964c818307aa6679e1219d843c2af48b1ebeb9332e514221a26341cbcd423fc311c0597f3b9e64f3ca7d89bb169115412900b17af0846a584040dfbdaeb9e78c1ff7dcd8cf52d31229f002f5ceb75687ab962445938775c29d4f705333713e48461d61a0b4d757dcd2cb970b0188bc317ebcb0791316e8ff972194ff551ccaba11ec2d351cefe91d850fea2b5a3638f89eeeb064384d05cd459583bc679abeb3f34ddc557320d235f26db7d3ad597725e61dd88ed62a6631cd6cac9926f4923a58f601fb2bbd41c4e4e80145b7d3dab037abe8d1eaac3b658e1874d657f288fd7f5258c2208a687c18a6967149e2baff58133cfdccc4bb772b3541b9607590cb228aa6209d37a0f55a9d6d573fca6491640023d82f801aca08a059891415c5615a384decc8ec5ccb97f8971bdf6b5f254fd10a7ec8a228e947511085f59a9001763148bf51d63dac9f1bbcf45ce1fc86b0cb13ca7f9e0c6cc41b222cd771bd4d502faa91a115c47353dabe7087050cc18d0255bb8f3a6b826f032632317379764baed8a4fa11c511de82afffc687acc8af234f28c4150bb79974c882c461b6a7d879482b5d83d9851facf088c0323e958925dc0c06465b03a44e0d9c0a28d9f27aea51589db7a3ba02a009080dbd9a530db1111608983d9df8bf85b0cb77a23763e0838279c7d9816e70386459fc81065e9fe14e545c4acd12252966968f4a00941271632184650e6c4d462c42c9018e74fcf2081cec62d37f612221ac34f9b703b88bc48c19ab7eef0c376654a927598d38942c003eaf028216f400ece3c968fa455522e40713a49884b8b8d3958998dcdf6fae46a5eb2c0d7808cf10ca3cf90e0cabf3e4a504a763c71282a3e3e91962af5a27d39b4ba92685dcca9141a5aaeda487c8f0b9f6c37b1a772647c1d664d1eeb9623f68b11f529c3ad5f35f4eecc0590c626e9d88c1346347f33cfbdab9be3428d10feb2a691a2740d737b6d548f05e2aef46c52b916620ba182123dfe45b34d096b073f2f3a873d02b9e906fe20c7e697ea85e005c502ddfd136de1bd40657990224f029f702f6e27dab4ecdb2d1ed16667227fca383e7e2f4d71ad6843eef92ab9d107ce71967c0e57cb327736e3128247333474598fd47d79ac25fab0134abffc58f4fcb6fc584f0077b525380b558fb446fa64c91ca52af8d41d348d6b337c90f967b6387ad3edc244186a74a2d55afa7b2a816d9a8739a4932952b1b4feac0f8afe2b03e0440a9c5ea63130b329e99fc2f3c02c7fbce9736ab89525714577264ac80699d69a976964935afeb060ecb5b000d112b1db2bbd190c8e4713a70a6e79deb1c6f83de06025e359d31027c4bdca93059535b97d892275c901ff24bfb15438af6f235b11b7c89956d1b35fa103f8f52232c19aaa349756268a0b45d9ac326c81277081961021995129cac53cb07df0771502d81e169963d28699426388ed9314bd57fe585582eddb72cad79a92cb64365f812b853497b90a9434d54943f57f38acafbf6f4db15d5e235200ccfac361d6ef9528c011107b964163e59df91d2b987a88000687196c1617e151ae556fe042e20a8f03362a0a0e9577a1a38f13ee7895eb23fec3eaeedd452e6e68f41c630bdf422f29bd9fe27247364bb47a077039a94aa01ffecaef34e400f53bbbe07b450e55c5fa8e7d1452b2f2b8d7e9d89a10da9d8c9c7c36280ba17de6539444d3ef0c363c00ba7804d3b383bd9cb87a530421592476168c260e611f686f5d6f80a3cf8a85e26a875eb097f8ec4265f4d036f46420ad083029a255bcfd771b200cb3619e3aa55d772d06618417142a41c9d18023403512a8330f4154aa3c0d075e1165813dc67f9c2c2622b09748b0c0590fbc54306b6edb12da5282f0de4153e796022626e9b318ed4baa08fe04629b2af06a221a31b042d5ec5ef58b3094dc26d936a102430ca6be92021bf88c7ef04a4211568ae0bc306b40b65ab68c98eff926369e266e7cbb38764a7cd9c215b402761146e614a7194dcf60e3ae0f80e0bfd877da789dd5510aa15af318238583211774435b11a2ee1ca1a33b9ffb454494b1f43f950980215905dc166974f0be10d76d8d537869b567be87587b589aa332fe559a408553ef522d5be105bea403f6a19f352f6334e6aacf903947bbcd9461363504781b53726b992600fc8ebf9de8eb32676c18eb74048c0a3a67659e01f39a2996b57ad3f8aaf86c57c2a4a0ac4c704a0b87ec5ff384eab64a36968a1e6b48a3656a70e7ec3ef605d9cba64174d94908356bf142e7a0519a48a10224909a13b246d1c14d8ae106796f28c7da2591ac9331b5cc1028da81b9cca344543d121975aae5a8e61a42073bdda04ce16652532d0ea45d8d8063d559929392ebc9c8ac2c783fece69965a5517b4dfda46b1cef4ece27a821e7070f37e1b19e3c8f1c3ee5413bf3f5a5da39544a26e571b7328b09cec2099fdf5e2becb4af24c42098d26c52281d1aa66bb971f400b5a973c5623e8f0cf060ee7d52471077d65e53054dc6965efad1bdf6a469e691bff7505b4babd6b4891ae753c0bda1caf42ecd4664cf3c441a0fcc07a177d63015cccfce5b9ad18dbb8c0ae94e6310f1e89daddf37d5dbf40755003156f794ec8ec830f95403bfa7a7980afdfb4d4e0843b04c78270634c993b7f734dcc16f5fe53fdf5a66274083df3c550f1f311eea367ed0839945e6a27ce354bf3f6df9d867f35d00eef966815db8b67514df226dfb7e0b0df55c25b49dd47789375361ba222ca1089d6be53bce417c4ed78051ff944a7cd0272d50b758c681ecab6cafb917c570b815412d601c763a6cbb04346e51849b9733afee60b53a23e65e750b66bbd8b7dae2d8ec889774e9528b022d1938af4633d9fd7badfef3a5d0d4d0237d88ad55ec9b8f980832b3c12f2ee15eea4962028897961d710dd8e0c55c1f678a58a6590034f5992757bcb689c93ccdeca44bf3193afc7056cfe6a470a545de38ae4c1ea8dac726c3ffe0a4736fab00b2f7a2d9c8247cc0fc9086611fa048428fdf731cfeafc6da9f5372df6707e81f8241809ac8cae8cda552bcac1f75f45769f7af6c8babd69571bf6757fe4cab2bf2d099c8f1584cbf12290d574f307287717492852530c0be406e32fce64f0adc7e86f99000ea6bcb8eeac8984ad36d43b7c48c9c0fc392596fff4cb071779618508486f8a3fca5673415d14d4db53c672f5fd4ee501530fdc94e381dff70a174413297d1d16159dcdd8064f8203a3b70e36b3da6fb9052072e3ade44cae972a7c2d01a8ae1b7e9956e05bd77c7e43c169aef3794cb85f0713dab5fb7f8a76d7f9ec479d1d9a241756dbcc16f8edfa3f1218d4e9567ac131647de9ab243720e190b29f7349b1c4772e782ebe5cfe965c27e9c3b7465c918fbf67f61f8270ae4d41e15493d8086a68181aa58e4b7d34fef01ca4ac40ecf8e84d4226d2470eeacb6eb808ebfeabe6f6b731d8bc899a1577a6feddde94591a89d00d725b4a84289f6bad74460494142731c241ebfe181e8d47f5bbcf818b6a0f6b247bf79e95152fbbee8c28c56b121b2db2505ac804809fbe03969880d896dc787ebb5e310ebc1af1062070b0b112c618e5525703f12a993684bfef8c154f974600505c1e206cd23df492f1868ec1ef31fdfa6ab35a65f35d210d5d6252c4fd823972fe1bcb08266879ae5458f91c0b942d9461ca673406a732e09b728e37dfcd18fe59ef530407a3cce92fa5f39db6d3a8d54221d753e68f7d54a12b45cd4ea44843b36120fce2357612841d19feee62187232ede054dea8ab052ddaab7046cb836257a8ea7c0a106e91cefaed7f32f8730ffcfd8880343a9a8aa0a707e3fa764d0d29bee4215f5c7e24a3e000f360ad2bb667f90af837375669f11c975ec0b5a0de4dd159192ef51e0c915d45077637b7efc74f2ffdd5ad6e4d0644d01091a05d08bd8dfc9acc7377c01d4b461bb0187e0a843375ce2e901ab71b6dfe79667bc167ac1a14269c7d6233314e27aed7915488bf043cc83250fd23da0d9f79739245d9e08311e216e4878b7e68b9150547e9100d8d79ab1f986f48f4bfaed6e84103d9507eb973e94bf6d53f8e05fc8c36813b4e5a0ba771b904e7107f6ffd50ff57a3519d6e2061c765718945300f685a95fd7b8bedbf88121b202b9583019c2cf6f94c6173279222490018b8bc6e4b5aa299b62ce1d611c98dcb020108f42ce6662a79e76df834b4476b436207c530020b296d723f65079e9ad4788399e13cc36e339d3d1f824e758b6187c053acdb17b9fb2d7b0e90f18b08d6e5d6a552b4cab0f83dd5320e494f3f45f7914bb85552756243cf00f9e9d3e56a4603adfc79200e9b2f01935d7217986669dc113311254af5dc52bfbc51362ab1fcc3672b13185b783469cccf599e1a3e83d6b36bc5c4ede2f0f992092de77cdd6774b613115e99f47b5ddca8aba55aca4474c32d081eaaaa59da7e3b37a4578802aeb8f7dd9e114f3ad916a3466b29536fc7d983499f5adc4c4897b0377bd679b125d373025f0f63c7ff8e0c6611143f35af2ceda138ea289b5db29aa0cb03e1abb3b55ebd031ff13f2456984c2ccef89279866d25309d5672a9e6f49018b4aed2cd8c41cbbacdb17a9ab4fcd0fdacc7f7ff53851ec79cd15777d33de860d2c312acb137cec08b4b2c04cf3680a5a74fddaf6d002c460e7c465dc929b9fcf59a7aa3156ae09105984c7028a3129a5c15a9f47f2f1cea09e468edb7aa42cdf962a4b4d09199bd886b9744550b5cd5ad4e9ada2a645de95dc2f1a4b280e752ee84ba2cc94afc69b4a031fb7c17a2bd2324f39f3d3a3c1136e93cfe0c5f3627180e84cd122af78e73f11cbe1a2460c04bff42e1fadf6b260dafc6a950e629d775b171c67bb6c40eb3f840c8c2fd1fea716f5904d7e1bd32c07013d228b7fbb0068c27aa53b27c559479a55809259a013adef2275a9b9294165f09ba422ba4828235697ac546a058fd2b1cba8fd53d7b43d1ada785e35a582515dc12d1bf27957aa4f47c95784de5ef0e13852d61101e38a69eb0b3b8e0d0c96ce079f102c33518b162ef34c8b8cf7a0857cdd8b558c574a9dd40b38f326b27c1676330a5870b27ecb9b38ed35182334d8865d4174c8c2d97321adba6c3813278cb23d7ec648c479e154f246b85553a6a97d6bfbe134b9fbbbafd54fa13f1487c3b043c61fea77d1db18a479876b1920aff307badaa759f3a10958437327fe53fb5526e6a8fd6888e6d7ed40ba0631638e35f6767688523bfa66160cb1651ee77e62f8f8bb6c5bb4dda332859e11c0ba66554eb88812ae4b3287ec03dae0f64b3beb16c03762af1fd8bca2cb9515ea5c83c35e10a0bc28ff86ce63b1e7b39f36f914b2a5226f8222d1d6c62491ce39d70c38fd9b7a9d5728a22730761b5802e93841923a10b7d9d3c772aaf5e085e9012ddf1b3c7d079f137a2c299ed40a05456ff93c6d932f01a6beb29e0d30a3896e42e1a5db5514e4009b1f4ce062c285f063d1237c508d7d0f538c06b4a287d50af98d16aa969d766d1034006593327a2ba7d94b7e7ee601f26c0aeb85a62d046e2a00e775abb0eec17c9981f1185585404709b50c437dc1e62c26741fb9f369af2222b42c43a1bac62a0d239a2859b59b92f92108f44abe5b13ca843c0b7c9b5ccb8d3a991047bcdd3efc5da63297f3cecb2569b09c62fa8761a6e67f006df30c4adfbbb3ba5951c174926912d9648227cd883bf7e6c77dc051540f47bc2a78bf4b6792e6535fba96d18fab9cccfddc0c9afb20548bed9527a1bcfc80d1a014fef733b63fa6bfe0c53ea450d43c2c64118053ac66623305619987fc59f1aca816b80f2eb775d4b50ab642b95fd8ff99499f9f35b9fbc85fff4ca989ef6c7009c5a8052391ed92cbda8c625f669bc42c962a6c5056971f511e278fb76d5532e834a64cb7331639af16218d505dc4661a5f0eb1d03ddd05cb493f392699a197210c08a3e9c72ce2d7d3f418b5719404c11d5103de0cd458d05d2e82c89e09e700135138dd664244d0136a316a75dfa9b2e4f1e1204d4de69288383d0789f4e3e19ad9e6d62eade9a2e35c9cc857e7553bcd51dc5929def4e78db77bb3b013d889b37229e50c8f102d01bf76346db544879b8fba0143850c1cbe5b71da511e4c6ed85e09f017376e728168c16513876758d6aaad5baf085d284f96724bf057c5528804560a425ffd07e31cea11f363dff215c4e1d42d5f5f8cd4a49359c38fc057f0d6396a7e34570338b9e35cac11a06a268baf96f8fb4efc4b4aa23b2af4f6b65affbd1efc9bacf19cad11ed72dd1f141ffdbe8e639ffe6f0b430b062526ba3839c79b8559e5d7acce8246b70759579882df5232df68cc6c3e6fe7cc1bb41b04d51109760676800793725cf3d5ab4c945fa2edda9486db2a24800b2b446ffec470eda213d7d23fdfd9e4548564950293d429c1156180bb9f774929a14bc38e26b17ad0ac3c9d2fe746a14e9e76a9ec92c5d61348b7072195b6fd4a0b71dad529a748ebe9a6770fa19126c5d14909bfe4a45a3a985b21dcc96e9b0d77c556d7d908271873b0468c1aed4afa47431cae3e708b6f1a3b38cbef3dcebcfc66c2193a628b1e5c1dc4814a62211d1c23de74f952bba6b95bdddc19eaa1de58b38b536fe44d1c938ad71ab05f84e6c2c0359af144dd8736712f0515d91ba6c0cd86085a9c709a0e2c2cb7b99c9d4ba79dcbb2e5fe5b781a46116ecbc4ea472c8ade31f2fb577d64c56b1f7d630a44fb5aff93d1d7e48322a7a149c43fe40026486a10ed90fb8fdf22503d1e5dca81c32eea5be1ac29caad30473ae6c9f511b593a622b941c8694a6d87d87ed70712712d58e2d58ea4d6cce0920f48340f9f9a4b9d6474197d8ac9d3dbbeadf32c0b072039a2c00b8ccf24a0166e25fa85dc8d5834a1dc00f7eb6fceb4fb515de9ce12c31e60f3f2cd7fed1410c61124526a3c807b2afbb9482c6277be646daf4165b1fd7a713a90f21badc67f0f1b73d5726da245be3f1e419a83e46718e84567d75c448c97f242380c9739f292d618cdf6a530977fd2224464bbbcf8adfda3abcced5042fbcfef0f20f6073cc03e349cbc7a64837d025371f6edb6d38e0c12332e32dfd0ff223bdf6766ae85750ad8f85b5ade469d8c8ca17e1e91ea0e9b33c64cc8ef0141f596f5cb7d5921ed9da9a1d5f629893e3519e38a1d6a6eeb463f75c77be183c9882d23ea511995f9f09b0322c4240228ef509738ae17692eb0bde85406ee521003f8840ba91ec15aee6cc24afe618b0186aa905ea4d75a35bd14840f42bf9a6361beff6518b92e6cb3937ae78fa20045c2490bfe56cf44e29baf2db891924a1705fd112f6a21a2abaac43bbdf889e5125239c764cd6c127e9d770b6cc0d608a897992f66220d6ae3d0db6bdeb826d2d37f36abeef8b1f0d5722b7183e82a3871b63474472376e17f8a9077c82cdaaecf7c2bb32a6ccd432e49b60ea28dd685b1583753fa017e66832ea384efc3a9595986191eeae71351a03e3e66b839ccd51bba022bf021368e7141b2b3ef7c14cae943aa3f32a70bb5edea4a8875704a8e8b5aeb39fac085cb2bca74bf8ba5cbec7b04187eb72df882f06b295e3dca89bea80b88c66187095f76205361e6f666f18feb7d708e871b5f2a0b3dc05c2ac52bd5a5341354d2d8d8ecb08c0eac959352814a0846493c610c188f4a3d6bd265a0b010724e70f7437f89aa5f7ee3b611f2f286f5b4621a22836ee9a73966edc1d05f5a94bd66b384cd5674f511ccc8318f5b975c7948bbfe12ab4247ffc82c7d9c735460e5ce890bc34273cd6d27168bdd4d4a9177cb5829d270cadd5bc721a9008bbbdaf5a455ca316d1e6ad1eb40b3d68ebb6a633cff2bf5d8d8f7754ed2ac53ef06b439b916a85fafdf6d3da1090c041bf61cf51cbb54155a23c34acd1e947a6bbeab8c9c850983f798c0f29ecc03d20d9f58029de98d4e18bdf01987fdbbc55ddf710a74ea3a8528442b0e38383adc43fe3a3d4c87e438b09759e326637ee8670d631c7f445323d0b1fcfdf3395ccfa219380d9ba0056250a9b75180526f0a7da7892e55407e56a9fc7d6cc2aaddd078dcd26acad9821327113084c75316ae6a009028342ac385f0c3949243583f1337ddf74a54bda844daa2cb9dac99d17d897e73c6e2d4f7859579a8cb7611010d1ed1a2048a5cdc561d5ca3c40d47aad17e9a3ec63a38fdfa9e348ca8a5ef332f496aa293e335e2c4a016b99e0264461142d6942a58d40aeeaf56001ee56bf47051d3234c90b6d93055f502b8de95b074d807ba3817aa86140fc07a7c65c4b13b380307246dfc99bb4f80e835b1d3e9c5f14b425a3c8ddf5a32aa024e47621963b5a33ad299e5664f2a29ea2080427413b6e3d8d648c3bc9b5e080a18dcb314ce5a5d0a05b32d1d9b7fe1807e7e709cc92a7620f2a89a007b74208fdcf483f2b48d4ec76270b2628c10e3a587daa998b5d0ea9d53f295299ff21247eb2666c7c26cb0e5851ae6864256dc69b3f8035c88d87125773602f8a51aaadb63a206ea62ae28e3fa08a593c35d20eff48e3fd97c2eda0f2b7da4eb041d6c9e516b094f266a0f87397d76d7f4d0e43d53d38749d8485971dffdf51a4727b5a52d63c72fcadfe41bfc941379b4edb2cf5052fbc2f27e4a38834298d6d79f8cd4b34a186295ffa1fe3f120dc0b0012a94513823b47979a22cf3b7e5d575292a7bf47efa0c9fee7cd9f7d0523d3e24f91255c957931ab6ec9b45e9fcf562ce7432cb3e2689a3b62c572a9c7ba3142abf98f14b269d70d6ba3ed76aeb519b555f8ce418dc88ec85560b0273e7884aceda40baa5ea7ba8ad571823d6f16d31cd1edd7d2ffa3bf0864eec0074d7011732be674d28dc7d4c6a706786b20250ea931401199b9760a061d949bb9b1ac9075d7674178373b8f8ad090435899cfad2b7270d7cc307047b3f5bdc313925b7cf14b366d1b809ac05193e6bc1ce1fcedabc726080f40de1cf887fc229c796c420a5d3458b05113996aa3f96d2fbb63a0a4c994e4bbfd50b44976ffeed8388cb632e9614aaee9195f4008edd622e96a57411325bef81023e540b85ab4c305af1969af90a14745666dd82941d728d2631c5bb7b2bc21356d14a51875ac97cc343aa487eb5bb727dbb3c369ea07e8adc89f7923bc95a7b44fe9493b6927ca65703609203fac6d4211e7cfb221e417c3360a1766aac755ed16fd0c1b194b57803510128dd7c98bc02892593b617961985ccd11c9fbb4fecdcc978d79d50a4d5e013d25e81bb834bf5b6765f8e634885ec970353fd6f9cbc4cffd3a9c6ab1ab316eaee9f9a625e84de834f1ac96e82f5a956aedd9912e927a1dbdbe318750353f1247af7387bfd280811a52ccbdb54b0a4d065d767ff3b7beb65f2c79cd7fef1d44e5de56de8708cd30f750e5a5041d2207f2163b82a323ef374877beb76f1ad5de95470890a8fb5522689ab5e93394ff9d252a217f276f57a43ca69905b583e8cc60f386b5afdc140a781627dcbabfb11bbfb3ab619b61211a53e9216e90d48db7caa41b61aab7443405dc2d9137963a41c642f8e06104d15a46491bc9ba89d6dfb21e01c82a4dbbb54a94a54b88e2a8eda161aec60806d1bc96d19ce0c4f87133567e31139672c621337a36941256712b62c6cb0edeb4f8a3c13b7f2882974079c7bf2447dcad14db9159f147655fc53a3fa85e66d3abc1ef2b3b4fe46b7beacb5cf1af847a73d9d020955ada9c444c489e7aa1a93017dae0b602465ba80e11880881d9fde22e8b1d9a94c01c6bf048700e0db43d624f93d1307f10f108ddad2f514170c385fa109e7615ff47506cb4bb224a3b8d863c12b546c60fd62ef65d344cb06751adf5e5ee0097f2ad77072dac183154e1b33b982f5c0fe404044eb4c3c0c8b6dc288a6e23f0b469f23ae6964e66fecc009c4ee9c50301f8791384a4b18a50830da38ff12db472c381eca430f8f36ca4057c0f46571b1716d2e454b8ae1fe7f4c5548f24e24e9a7f764a976f6e7d37eb60f00e34ac4df64a50ebdd521b7d8a0299f6a8c4f857ca67128adbbdad4517556f7d6c00b55d81aa779b9d37ca411c7144257256414913c4a6e23316e9b1cbedc69c277fe616d0fe3cbe32dab73ca6820a736e910fe561b29ba4b98a6f1a228b36fbc2910033e0a364d6c9addf7f93d933702694ae307feb4b5d7bfcea4140e56688d46bcb614e88055e7547a83b2364ba4ceafe46ce723a5324f7bb0bcd3104230e645a3a34d0ed587eb63cf6f87ef852db8ad38483d7c12d5023aedd9af81c28dfde8f3934e8c9b3b5e207fd966e544d4a1a97612c6fdd46a09a524dd29c8568aeb5e84a6a8f3e270252263c043a3ff02746551952e8696a208c40ac1169376048a0fa8715c396afc30c1ed4b5cbf6fa387191cd5bb1bb55b10cfed0d43716b25af2ba77d9de3fcae5d86aaa25d6cfff974d58f9912083797976c4788b43e2f4a56ede5cb6b90294ab4804868baf692ed08066876de32d3506b70fc7f3eb351a12fbaed308bf10516a7d553c4cc970dae1697d355311066cbec965c6ea1954a004d78c56b9fe7e695386f304fb6821b367e0f3e0c7082c3d8e3fd14c06a23c6c1049f52e7a4098d3ff804f097df819e22197a6067d4abb93644ee980bd8245ef03dedb431bbe3ce68507f339ba9b709ec187d5876a9d942ca10192057b994f580ad1b6a06c913a812686d48ccc0c6f261ea34a942899671376a191d2a67272882162fcb9194632e9531ea5d8ea1152ce501e351fab21f9e0a2d5f7e9adf07382792019f63508c09e6e88b4367932e4fcbcadab4982f582304a60f45824005e13289fbe0b604887de366eeb4d177b441bb32ad662777f277f0c41d943368b0dc0ef967a59d8e79d393f3f82b71dcb5aea70e66361ffc7cd36cd3927eccea4854c3d1ee252f8b21dbc3821d1066cee1f62e7d5312c0f12389065db733874c8eee9db74fecf0852248ac9bc050b06adba485ee7de431871fe75139cdb62c91ec5934a66ab7e62d73af77c0713e11a32cca9033b606fa54ecc7ea25bda6af4867fc9770e113e96d4b997a496e9e8e6fcbb458285e7a2ebc5bfa7f8f6dd0b98160e660f192e3c0e538af275c795c36a352507d9d70e0ffc0309b678bd5f9563963385fd20d859cd7b6b90208428944755c2a6af1669f88332d2437af252572fe15f751ef86cd24a5290fe33bb22cc068aca32825330a26516e4e5a590a59524462ce60842216aa7d355f9cf61ee470fa3b0ab063dbb5a57fe9c777409c96abf97d09e831d05a7e23c0afaa0d249ea1f656b609df6e7ea3f3142140602a604e4a72841e341d0b29f6e3a153150ffb0858f23d732a56c05f17e3bae2d594db45e812857774332e94eda1291297e462ae34ba45656fef604e63321aa220bf90ae33f452a03afa60d78cc34bcf44d75f9081a302f8196ba45079890351f0a6b0f44aa77bd162b4fbe5a29dba36e172ef4f2b14e53fd884d284680dba41cfa0207883f5740356fe37ac695436b68a4b9882da9024335e2e4f1dfc30fe2c76d7ae7d2c35bfe9d9d8b6c47342cd3f92e6eeba0a86e602cce3c45ef184600a66f24be249bcb7226b733517d2b42b5e6556f3edd031c3632066650d727947a60cd6fc1d33666209b3715024351ce97e7344058fa3ccad02576cb94495d96607a06a5c84ce2bbcc0c91ce7f5bbe30f27434267a3e9f98d0e402e2be849fc5146e2442ff72de96b1e471a5ec66a47c94ea760bb51d0662c6a60e764a64d2657f6b229ae38d6bceb383204cdb4a4dcf64354938983d10f789184e464178f6a08c1b723923d5eecea4bfbf30abcdbe9c63701429b9138cdf6264899e534be7f505b056f049b1bdf4ed53885e164eae270d1e80f31c13e6b8cbc9dca81b05faf4cabfb09aa0faf6b6402f13b5705741064fe012c796fedf1d406742e2d55a2409a19e84e5f467480cd967cd87e59a221a8886f164ef913ed732b4a48a3e3d825beff282da13d0ec5da0609b2087b4301e9bc0243f1ca0e435e8e211f2e16e6afc2bb27015e6d0ef1cc4eb032cce1fea504561a78b8fd143bd807aca0f43dfa7ed45fc8514191c2e8dcc17675559531f01e91ed68e1b8db5d2aa993f1f070b130fb3317418909ac301211c357f7e505f1b9206f8a449665d61aa84038d6bb034a16f42d34819f7ae12a83d7c9da9b2a01d640af91539ba97f7c020369e4ef9633f562639a0fc461c8216f1986bfbcd820cda822b848a744d273773d2cfc0a89db3062ced1c8008ef2dc1b28a782c0e41518417b89cdd19d031dc86ff5b0bb0b239b08ada25ded4e3764e9c7362b459aa49e19cde0d34a39b85e2bf9178e24d507eb3eb2cdddad1cedea3b3debec9036bb8e2b612d67d6c38f5d6aca11d928cb3966fa34e52c262d7c06390c20f185071f17517c3f1663d9f0ecff4d68129f96492c2dd122dddc97fcdc8f302bb5b8057963e3e06c6cf2c86c9ebf007d923c7a7d6500b513ce9f63fda03f74bc19621adefe33d632719caffa7029f9bfc8852470d7c4ec8c7c710f9d5724bbc8bf1605a6827ee4fa8cb95857f596fab6c140299d67bc89261c1fd429e1c1eafab2be81b0390d03aab15c8744385f61b72490a88703e55b5c40986e68fbd3be1ec520da7a60bf24211799f4850b8be168eacc110aa55b2ed1f96fb2101f954afb373149e81476d461ac76de57bc022cb660f011a0986b713bd2d391dcb179d1351d217a490323fc330001c5eb77a08ddca81ed7e68e600e8cef4ea2ea1aff1c53cb8dbc6da624b5322c16d19c37505deb15b08294e4792694d4f60c62d86469a710e9c744f503aad77bea5299e02d64b4f74b5cffe1a9c2f667a8ccea2dc2527406312092e6398abbffa69ec1e485d98dcc0ee64b28159c96396e036890e931e4e169587928907c64cd31b75943e52e2e1853858ed293390258dd1148ded03ca3efe973cc425cbd7a1c0fb1250bba6c592cbf28611cd4279506979d3b99bfc7a487dea5875121e5064e755bb3418a6db5bb49624e816c0bd3dc6a53b0360f7b9a8c2ea5cb8b5d4791fb579c8b15eb70c5a8aa604c6ac38365a0661809d33c72d955d6c11e66763bda29cfdc0826bdf66c13ae3bd3b3cea17da3ce829c52c87e79b2a0d58218323ac5e2a740a9719b07f07111d93e19f2052bb55cc29cd9969c89550366e50b05f8ccefbe96e36f88af1665b440bf1dfe7cb72f4773030895d67098bc3d476c6468d658c0c167f101826a17c9c223c680061e9ca2a62df7b1c558ec1a5c7e45ff6aa5ae4ca9efbb44cf0e3939566f7f80624fb3ebb19b0f3694add9a4667f3f2f57f9520935c95f4fc43346fd76de68bbeb5cf92ba80397a90d74cfa53ff7662688e46b65419815c5b0e1a2db6a9a1242ac4e7f3912d88f32325ca4ee721d81bd63f09a265256ea606bc701899c36aae1a7700bea46ff607d5b258ad277e9e15d4e0f101fb2570679bfdd64be04995ec745f1ef9bda2544feef9f1431cf7a5d292816b1b73f1cff6676d090ba14b3c2a40468baffcb6c691288e471edfd2f874ff4ac69d834bda7c9b5e35d8ac5962d1bc28827096307fa8259656b8d6230ef2b3be1c24ea1b634463d8a0347bdddbc608e834ca3d86e9b69cf299bfee8e43171f9f3d8fbd23afba296f6ddf486ac34859c5490e7b61329c8fac329712273d4c3f344e039c19a549f164acf7dc30004dc2bc5942ce6bd96b7d7ab5ae323e35046cb7fa8e978d22a9639d8ddf6ccb3ecb5939c0f42b91cb5706b3f5d0121e74dba1aa25851f0824d4f4cf633cb0e60767ae6f1c9a01dee97955471dec41a55c691ea412cd5a3b31b669dbb2fb15d8a3ecefeddce2c2f3476c68d3c5d9bb7b853cf03dc3cea4ab154332b91d65784a4d87a8d7c4df8319ec26c23c03f91b3a9e412a950dd7f1b6ea042549fb1f346d839cf9348f3a9d470913955785ea4548e0897da8e21e071585a74d8ccd7f8716a0a33c4f961757966cc0ddae7f6f72d5912de9b645240d68948d62ef1765ecc1069398e74351b047949cfceab405218c52db696516b63b7232957d5e0df0342ef75ae8eaf7d0fb3246fd9d26fc6b5f22d6c22ec8f29c9f917ab1d81b045669874b452d93c346cd99ffef8cbea5a590735b8180f99f814bbec8378053c7797c4f58e058467417f9a2cdd9486d67017ffe7fa16515257b77bc3be6fc519966ec1c7345a64f789d8cee87a06adec28af365de7c552bda4d5955c79b0d18ec270b435086f064b1d7870f241f4bcff422b7c4ee2345c76720b6111570ccaf13cf5c97ebf3601c8989125f2e38224db68597ca5ae9692fcf270163445af39902475301acf0ecb45a915ec8b0b95c477c292e48921b573515865dcbb7d697ec542106053fcf5390fdbcfbbedcc9d116bdce0832a17c6a2609ba930335784c1c4a7fb4ab50c79b07a5a63203855f9af2b73fe9ac62531252652885e0bf9060db9b41b14f98a5952693f631b28e1648af2e9a57741dfc38823d29fe55bf91fee51dc46254548ea6efd31f207591676c1f389264eb1a2020eba9cb3a59b50110a6062ad94316101ddac7fe4610e5078847a4ae8829e3dc4e0466d98d4b13a9b5cd5539004a7befef1aaf5ed56b614dee87a3f949fe0b098e66d7326e6194a14b489d8ed340614917103a6dc6dcab47db991de8a3fedee58757b068a13f34e7e4042b370835357eec6eac750d8da3dab6b847582face5fba7d38a8da26574873a51dd5294fc34b6064706f078ba7c888635186649f6f23965228a98dcf71ee598d997cc75bd1caa57d35ae0e360e82b837778f7b63ecde95394e4753d678365df4dd0c2503d7cc6d349ddd42347d843b122e7124222f8a33a7628b445d55b2e6963ea4cb18dbda3218b1b25ac2eb682d11c5525a6437d34cec60062228d9b728551c1e4bc13a049fa63a1fbccc03d22395c27cb922096e51d887d0af62a34647f2544d761a040f29952a77001d706a257bfaa46affad260fe91659abd480074d2f69a89ba4068c02c3e99c9e311df45981c69ea3a032db8b8aac0e5b348b699a3adf731a884223cda3d7cb679583d5815812b52768549b84907f798f85b633361cc0d55715a3236e53ea5c28d77e89ac9d165882cbc40391fbf8652f871e703c91ae48283a49e2034890db9ccd4e2898a3414239c7efaa73d9d76bc7c2d9a3cea471dda90e8dcc9b18a1d518084b744852af0bdc743cddde87539887b1ded19a257e46179e45998a5ae458346e90141fd8f6e25abf53e56b5e6bb7584368722b16129b8961164b492a905aae4601612f133d3c06563d2ab5f9976f25972b22d37d008faa41cf849bb713ea06e017ea596721367fa19bbba479397c26ba015f3a041b829303d8cee8f2fff7e7cb40392b29d6f17df9e0b5a424c0a147a97c535adcbc22b105107a128a3ff5642627825fcfa10cc4e30cd96703b1650d75a4e125ac10d038625350d5be8edfeb0113e943579cc577ed4d03bb9985216d812b3fd38c6e428c70249d8c5ff16c68050d3124fc8d3b129c67be8dc3d35e71d49585fcd5762f5332c3b431d13fdfeccfca337dbb97a7e21ec20bc573ae7990156c7ed3e5ecca7dab9a02c935389450211b3324366bd002d1b4806cef865a4e3068a95cca38490f9f98d45c562c1a4671a49415d0dd931d27d9ef417edc0d8a6f7f90883cabc8997416fd1d2981103f130011e882cc54ed98ba374703e83aa0dc392bcdb2aab9a44316764f0abf718ac4a551f929d0e622bc7664bdd60575735a3d781f030c5795f9b66b7e48e475d633818cd85fafb70cc319400672665fffacd29a2bbc016ace439cd761f0f6553661922da28ff1aa3f847bf81e218ea4bbfd90e24c8dd094246bfaf536cccfd520142e3b07eae522ca5b00ecd31b0a0f58b29161fecdb830e1546e23bbc77563c458c7204b36b0840bf68fee8f9fd0189edda149ab44b077cff89067012ddd20a8b957dc4c5fc23d1de47b153673e7b69e6956fc0ff17135bf68322b40e2ae771337a4dff588f9d8629c5709e025ba5d04be56fdc4fbffc282b8bb79ef4520321c4ae1e0aab89a71f849cabf79b779f9a134f7f2aa3d884e295dc3960c727c6ee47aa6c96456c970a9b80dc6b8aa18e8492bf1610e21a09f7edf6881300f26ac0b94bec37d88564be7696cd0b6acb52eb04f0cee7c8bbf8c59e3b6062ad70c64b569ae163581d2a5ba98b5f710fe2ec89df6842a7f4371a8d2bcb1a9b9c0cb18113a5d10300b01388c452fd0fe61d2158f4d711f7761362e4bf810f576cffdd70bc63c89cf1ff1f4a5a589dec3078945f5dedaf6a156047fb2559bb9dbfa08e9c8f6c46b44a708a85b625199fd5d5211f5a8617632d8ef479b1d4f6f5aa5cdcd26d0f12b37d1ec8106dfa88652d96c65db1a3110956c015fa84e351d97ef64906ccc9c3e6eb037fe9b4f674725ef0d05c056d77d0c53abe4dc0bc531e24d870366c5d1c9d41b06e2742bf49c8f895c80d8f10ce655cc6a6824335a7d17a32db6efc6924d0350bd1b7fe0b009ff5c714d35b98b6ea45f3d31cfb9cf861d655e43e544874ef24378209f2490474570e7c21c2595b9c66f4173c8a10066ba0d1660d320e27f15ee8621819660f0dbe9787c71298b653f733828c6805dc869964728b6fb3717d3429e61c53a21b293bdf137532dba6fd295730146691f3e356037e751b2f3ac7f9e6ab08f6a96d2771e91392c235bd5b23f6e8db072f0445a50bf171180119e104734725f6a924b40395ffcbe301e6814e1e1ac14be48c9c799cd7d91ff51c564bf857db01e30dcc66dfd696e0ada0e7edf338c11ed35275128033669cae2cd2459c0183d0be4d0e7b58eefc9b80a06bc171c466ecf34cac05cc74f82cc21f469d046be1e383604a93c0c7e9fe08e231ed1d0ef69c217188026f7296741f7f8d93395024b22b583533ee3b5ba07d230920dab1dd947c66e6ed7d6cb6ea9178d816abf50f38cf0ce678b1fb56192447e30be9a79c9c65f060030e314582e66963255a3e1a02887ceb240ec852b2e413f339fee426bf34f801d1e62cc3658bde7d6c75ca2194b9ff9f6dd43c3dcf15718186c012f7f20406ae8b3a5afa6c97a2b340f4c346371f9eb0bb3c4549741af73bd51582fc78a671a426e18625fc9ed7f7ab522bef4360c465c295ad9313fe3f9bb5c7734af4aaa628f314c894dd986e4405526c43b2b9a135f7892b958f541c35d702c3f0aaf437ee4e3a9201433af4de7791e2f0bb09a42d70afc37946a9e1f84f620a8ad59ce1f16e3721766ce71244b3d21a90a04116fc88818ceed243273f217acf6bc4e2eeb3e7ff39993ad169ed9042ffd1dd04bb66ad4a240b9f9e9b997aabe464146f067165da97142776c3b9b7c5b93375f9243d092d380b59217bfe1073491b6318c3a124f2b2e18f065ddc6827d7216e3ac853e7733ea412a6ef7c7956f4a8e640c6fafb8a73b138c19c88063fa0118667230a6e9c2ccefd82fc9c06d869e2e6cdca208e142d1419630685bf1faefbcd77656af7842924d981ffc70777ecd24a5493cbab3873fc368a9b0524d0267423a31bb0e8ad444ebfc363321f34701425e48ba1e05f7616478021fd167286733fe13b522d09e017daf4974c6d7dcb3b5aa2e9d19d41175b5ff50b70de3d93a1b0df249525e907bc501b47d8dd267994f2fd0ec94b2f4b9376d4beecf9d656e26956040c663520f2221083e22de4ca2cdf3f09454973334df2fb1241ad9f33fd02ee03344253a63eeaf6a0b16b8e3a201c88681b3cb9c40d686f334d0cccf036065eb6492bc706726a87f02b7327b4225b45550e0e2540b8567b7f09de143c3bf97a6223fd63737073d4ab936edb7f69e7f5f5ef17c81671e86e77a8076a3f206b9a7a4005a997e556984c3e8d769f0edc7cd768d909c58288fa3e7daab3823ad2ae6ac506f8f861f12178f78b5a2318fbed0d45276799e31cba593176d0faf50b03953c67f24b78fcfde8057fcb827b0f57e016fa0d0874b956d564452b17ef10c565bd2d32a6b67e4829cfe00421dd3274d47ec8031e7c2a97a7625b457adc58acdc45b43b3dcf7a7a3da5de7a1dcd14ae8c5c712ead9a65cdac308fee70a751187da6c90b13b458db400a17b2823865a6984d5d7a712c2ff06c6f43a2a388f6973372ae12edef272407130bd0309f71a0db204dbb2abe238f2310b0aaf912df6baf1d3ad5f32a2f4a39bfb7a29d4305b275eeb7783b99f52eb3912c07d08d531f59f758e2ebbe30232011c7990e796a0b8f07c54fe53e697419330f720401e5dee5084b8f09310931e3d26ff818627c8542d3afe311a217167b0daed7e21bb9da627b0ebc9c0cfcc068604268f177de6c3d8a5daf1fca766b86cf0ce1c227883cf85ed4b5c16690cdd7cdbb928496b45ce0a0949a83d5156b0a27606da83a0c67d4e1617c8ceb590882c0e647b4edfa1b7fe931334c89aa098eb293f14e21f26cf4c49f0412623019795a354d250801c325cab40bff5523c969fecefd2e95b0c60fb6c7bd382f0222d7f4df1fd50d523fefaece8c16094455c6faae8ded0f6950dac8e176f0b577719801b65093c97e20bb6cbd4d00b5fd36737ab4ba59a405febaef32b170afe90c81df697b1d6a7ce389a7fcf08ee9324c24b49666a0a61c98126a5dea8d8a39dc06449b464f2de511454a3ec6fe8618fd9b914b25c0714fdbe3382cc2929a77654c1b86ff0e33469e032195830e2dfff4b8da0ddd7f14a9a8060d8d22f8675665532c80d6bdf4c021304b50eab20f741b53db6fea639adde4f51034e092844e0e94cbe59c581f6f762d516cc7f06d684619cd216fac7f3ebdacac1773786ad91a272b60374ee16df8469fdd5d1832cf878e54694e17c949a39f2b97a49379a696bb1c706a72d6373152157612bef7779a2ed1c419592669ffedf496c68306d59634511ea34296cfe18cec9a6d160ac11c88e5aa3d8ef4a8ab7f4dd8edd5079528605982d744871a4b7092505ff593d70d8ac38e57737fc7b6999e12d563e73c23552f92956cb1781d0655cd92bd904325d431d7b1f2d0e852776f38c94646abe5949c610243b2400c6bbe8bc10a80c011503f35dddbe635b4f02b1e535644ae5178722db874cae35fde2ba991918cf2eb40268e0290a0d7e94b1dc9504ed5082c1381b8d399ec099ab3d3b5340dbd3386810d0d913ff4ab3529c9273f4cf07f854c1e32199f399e5977be3c733164d50e47bb6568491ad4dde63d21bf2cca204f2b9beb6faa22c2e54997f593b8544e36c89da3361a8b19dda9d18998db2d3aab28174aeb1e250862ed608fe879bbf2dfda53efbe9a7c2a85e764c80bce337ed12bb00a2a74401ea797f73b88877c786215e81e899a520a5e49f787ca88800f14950be1867f2b159e2e21c604f0e2eda649fb1261322b9587169914deddf909579695a99796adc9fb9cb9903b010b9558d8bd30f03b36f17d418d72980689d449005d3ee33c301e53b7c050bac1473cefddb15c5e15f6d214998db1906a0d60df9fd6c0b5d476aa2f171cc1481c771eb2ceaafe497ac392cc3f146a8120b9add3677fbecf8438e70584dd60117f03fe9fff628914e61312d9346aeae364f50f289f51354133baeb4e3184333e84d388bd38c90d7af0c3da9b9b126f2a4b75fa87613cc21d5e93e008e5049394e4ffa47f98c8d24e169c829c36ec38d6cdd878907cda07571dc2fe6103c2a4d80a09a5b056292c8a06aaa991b0f082a0a08607babc057a91e3d5649826e6368f5220cd898b6bdd0f89ca07aacd150cfd0b7bc2cd3cc80514ac79aa9e5f5efe497f8f7947eaac55841a32e513f048dd9b3adac06882963790af7aac13acf91c564197b4f42ed5e18a8abcfd91838149a8bb1760aad4aa3b661ffe1e89fe7de9f20a5c21e02bf37c162f1dc1c905b13ceed151f26285f9edc8476797de79ef5617de05f7d59010f459e106df6edd3bb8ccb3cf10dba415e0ff2ff7fb33a77bb4eb65255739785f2246efc46f387ec8fff8c8b60b3d58454874440190ab3f98c464ac628f45a4554a160773ed885c3f94d5a766e47ccb702cea1baba8ebcb5a8ef33d1886ba52fc92922e0a61c49a9af50190592eacd2d88a7f8f86be03237a61aa5ed1f75c8b5c28c8a672317e68aca98fa6b35bc9d84f7a2b32cb81a4f2dc248170b1e42e0b6d42c75d87eae0edc1be9600ff1c65e8936e2d9169ee6a4687d1b91d7867a177670e71e8e17bd852190d6ba0307ed37be0ba831e39131f4d68e057ac4089b84c0959397a85aacc792e6ef6b9a87d29b62b56989e81655560487bcaf3c02abe006675873adb8d141bea1310a7060a1637cbcf9f23709a161e2a69df4f32af6ab06d1b325e3aa1b76f633202b805442a71462fb89cd1fc19932293f8981a9a04b06769f13bf1e8c5ded8cfd80d099648fb3cdefdb676f7a4e4151b14c8c054949190ead13fe0713d2c7b5392dd8db93f02eda47ff9a4727de3d1a114fccf35ede95a9f862fc22120463af48900b91e4d17dc9a959109c9c6b843ae966bdc49c7ddffaa360e6cd8a070ca6294772871f3ed92edf7c8a4276641a4de7d6f4ac24b212aad1b216f2504bde4daa7b2f6dbb902af9cb3d892ea2b875a9a43b23a137ef525b12d90e70d7dffe063cd919645ebe6f815feb9fd3cd83a195c88a08c8f005af35b0e92d0ecd2a0ceeed7e939d810326645b36197c27c0dd2ed10c9f13ef1c19be4b3e70a5e3d39b88b2e5fde60cd252bc8ea11d7d598c922530764c5915ccff0a7b05783bec38be9e028475e4121f167a437c7b608325cc9fe12aa7d565f924eed243bc4398196831a0bc4c544aa448b28d89eff329fb576105cbce49a1eeca8bb967625f56739e70df03291a41a533d6a136ca96e60342c3261c2c68d61576b2f53b7ea408198cec1c3a3cd9ca345d1e89523b97556e1ca860a7849fc688a976df3b96ce57dbf9a06dbb2f77e6b6a41cd61152ae0019d6c1f511d09bab8989aaa8c3e38dac0a73113dbf40e208c91ffcafc9785a46ac0b0eeab9a81a426e80e5c82f99d21b2b3b3e681467054f6a11c8e8ff99c9d78b4b28c2545acde2489492b3bf10834f77c4c834ab9a729844378d544fa0c6820c56bd8998e509370c4073c3356ec9e81d9ce6993646d48bec726848acff0e32f4c485193e58198e233e58871b91c9174ea04d6bb5ac31f694ebb422bc94ff62489dd6be721e56d94887fea6392e60900bd3257af33cb65dd7580fc1ac484d8ebbea9483fb1a5b4287740879f31d44e18195189b8b9285e4e66b097e4beffa1371d0b634b66f96bdb68e2a8c5e5a5db2b633b129c1ac41029b020381911ab2beb2842ce9dd1e2ecae5f52dce58ba02053a8cb7d94f46cbb3d7a3ad7491977354b1d25f39128c877c8574bd9875e3ecb1fb17c2b53045cc610a62efdd16ef42b9a56ce66409b13e2dd5bf9ef4acf33263b452c154f30b15eeb5e76921a4a04e51c70f1b01b49701260673af5eda958e06ce3d51eb73d102e8b6c1a30f7824c4e8d4352b8138129552650f39425615caa374d41dff34d68ba4f02fd39d2e51f7e9cb331713d42f8762e8fe0c15003ba4411f9ff17abf631d298a4c8953ed3878f4e831b892379b2830a46a8a4ce6c99c48c28b3064fa74f4f87cefede69a13d75a5c97bcd5c329bc4533a733aeab9b53ae97af3724422480fbd09d7407c81644741de4abfe6d1255e82413fd73f7c3554a86b5d94e53e523836ec8e5c2c80ed89741ef1e21ca08389609dac6fb18811c86a3adb00ea90ec9b7e75e7523ec6d5e2177d9b71e74404defb90e25d248a24cee925eeee6e657dd7a99cf117278320c5b4415bb8c8be39de382e5aeca7701751483921e98b511e80f781b2208e0b7aac49580c33d7a3af7457a8cf2472cce21068b2fde83048a8e34a0e7113aca723d2df0391055bc9d06846b589adfbde4a4b30f5ae26fe2d55459e0298199bbf1c80094f58eff654f83f3b7a64e0791a69fad612220e34a5d44fa80306f86194414265dc1939c8d162427f071266c6874fa8728739749d6ca5b14d3ca97269ac49b62b2fc8d9215358ffeb2ef938dc9e7e4ca77d2f9d7bf1c2d657ba69c364f80aa367855d0019151aa37667a2b2dcc8366e812a7caa1b12b04ee450bbd34ad87806ac464db85de6ce325fe65239a6ac45a988e977143cf683a97275f2832f5ba91ec91d3f71ad13ba8fe841a8a2313ca9ec45f4a18b4d32401adfac27b0609eb21e0787196c8f49d6327f8ab3e596595a7d09c3dc0f372e3f888f3968e6b11b49f84ce2e299c9524d79b5affdc46cc0e1c7073908aee415fc825ebba6ced3a53c48d10ae3a20ffbe7a5796df7fc54268a72e2a9b02e3d6e0672d6e85c5d32952a186e21acbbae6be6b24d3bf15fcc187125f5e23195859cfd628d68edcec927396576b240a91f8ceb7d669c8bcfbf8138b8212574c2581b6e886df69327c199939d4bcc2be3b4de16892c87c6651857d428f1950d55d85ac65166ae04809f3576f17f32d40131ab984ae82f2792a0534758dc145e2f73216dc40b4b8d6e783c425fc6330f9b856f6227e314f7b2599b1f1b10b711193e003e78a5a0d9f86e03290fc2efdd30ce3bd8ce7162d1a9f6571a1370aefeb41321b59d4e455df09b8c04ac272a5c66f6ce44eb549b5b827a3ee03e14404accb782bc51428bc97b8105dea20f2fe5e0e491a496940f2b9c1767e811a41196c158ddd3e1550ef10c20ec5483d0c19f82045f0342ca209bcc8c796be4df164f685b7db6af82be902c6bc413ce042fb6d8c242a20e664d4692088bd3edc4e646a9b4b9d51927907efcd8ef1ca85716cdf6f19031255463dc9e6e94a88894f4c8506b562661cc2221a6953d3c8b1d7331df554321864a3d90d7cdb67853b07a85a21c2d33f98e2cd672ab03baa13f940e82e961a912012f73bb852fa4aff3a65e07a52879c696d2be4a90f40553ab7d19da583b669a019bd2892ddcf828229eda76104fb42051c5977fe2e7fac2d46c74e10e9b5099d8851b4712f9767977fdf39a1ed3c655d7ecbcb92d6f3596b6fc6ab4557f716994a494c0d9c9c33c34280a1670acdad9b72a0cacbef3416ea0887599ef1ed3250d42f9b3dc3430ce20fca9652e0046bbab9b3f349f1238e93560d832fd548db4a6b1ec3b979efc26f22d6e08a660019c00ded66a93785a238a2cbf6c388ac8151902ba908ed46c035c8baa8b5c4064b46c204756cd83c6813abd7f7876a6dfb4dc382f0f63622e9d48820884b90e77d52e7e87e211e9959ba04861ec78ab08d49ffda41b8c1e85a62d19f1c02d6f3204970c5c900e074bed5010f5bafd7cbc00d46c5379750217ee3e218302a3d3cf452af7843d7acee1cb906982930547bba78fce98b8e30cf186526cea5bee153526a6659c4c6c81a51d792b15c30815f9cfde641372c3283e3287062156cb0fd45174d25a9cbfee35f06e1ed9c8ec303395030cd82a28fa26009e5a65cef938b2f971f71f024bc9549f7f872758386f33eb332d1fe80b7bc57aba943c3dbc307daeb6cea2650051737e0b3f6b972bafa93ff0d4c95c35bf1a752fc0e06e85b48c9035719b7568fa40bd7abf6904ae9d3d40cf3066112bdd931c7381d32947d6d673f3a63a2b5e292beefdb3f6cad0c0fb7f2c65b03716715188a4986c29b59c880d3881e59b41441bf5d48b8f932a6c5dd5f76bed7b071b0773b3e22f37c82d31a9b698f7fbe80b1a842cf6e872ab0a94dbe2bbee2d6e729d0d6a4acd3f917ef2d7d28006d7d94304264167ab9434a48e709618e0470046d607c19678028a9ddf0b6c64e542dfa7c789c86b94736f3207b497d129204b11595248a6569cfd40a7038b63d14115754d80c15f7fd1b59d03f5c968a884b41f3c77da21ff313ccb9d39c04f69cdee4ac0ff4a7aa8e09193b07f30cbb44187b5728721d3f280695b9f83bbc8d18dd07a98a46f5ced893fb94edd54e0be3d2ee1c8428a5f572d06ec0cdfaacc0648a7ce444794c19072ed664f96f282a6f8a781828304a9f2217fba02113d17b3150bbcb4118ddb47ce1f1633012d6e55d0af27a5bcd0afe31ee93b5f91ab8d6621a6b1b6449fcc1cb5c6adc8d8e6cc173e4215ab419cb680c74f2225a275cb81c73474aa1d7bed7cbef1aa25dbb41c7510b5868e3d251ff5e3c4f64cfc9b802d04e141f49615a60054aff3e818c91028d9a04e8baf1b77b7d6270d7d01455ed10caa7b216ab8b221f00e03275ed6a5791dba56368917bab34f43bb83389e80bcf6e563f791b81644b7bdc168d6977cf68947aa80fc5daa3a81814d8700b2a0f988e5fe90a92cb5aa0e987842ac2bb1637bac9915319d96fddaaf49d4e216b27a42931afa12436b0d513f3ec03493943653c7b78ab054fe162b3265ec7df2cdfd6b5889b889c231424a80e48bad4214ee91eac3b6599a053b81cf45e6e1920107dd5a0909f47486a5a12123b38c678284b8fe284302cad58c25cd40b7f360eb05259df1b276ed6b0c794b112615b4639c3db3599f155b6eecc184d18715bd35859b2a588b9723acdb8fd8142cb8c708743c9c3765ccb5af229284e4257df7efcf74b9e561abeab4d28442eb9340f49f2bb9f3033be5f351d0d80402e9fb281701eb9bae25eb2075840e378b645c9edf1ae72dbbd420f33feb4affb70d6e3421eddefc7c3e0447fa66d80cf89ffcf895afc869fe3ca21bf4040442d42b0bd235ccc3ecf478b9cbbb25519c35dce5eb8cc8e4a012781233af30f3d7dd6c3ca05044384bc074da388285b81e298e5f10778fa6e4ac1fe427ccca2bf6009fc3df5496e7e151ef56ae886d77574f2bff5dd431c6737873fbe72b1ed83aa61c4cb182fefb92363e9871726602e8d0e257e8fa246312aefb5c354f2ecf7618f8f5060054917f095f6e07fb5c2fd8e3c1d38a05e958adfad68f8d9bdc805236b4e17144124760e550b265c598e473501b6282dbed56a39063a3ac905ccdcfef347bdaf7ad8d34b102fc17177b90eb6d1e3f4257ac3075a17ef19e356e56682bd70745886a61a69ca4b25e33dc7f333979e1dfb70196e780323190f419a88a53f85bc794db5b73e934e3ba17e0127e2fee304874253643adaa2d49eb2fb461457a3f9e42dbd79dc203077719d4396daa236fa810124579690b8da21e8d802a1607e5361fe8f90eb3df55d2463f05d885ca28ac962e2fcd83cb9d5897b26064ebe99479aedb24f90b425870c17789c1bcd767ad6a38187fb3e5c4ec054badcea2081d65cc73f709d6db8bf1205a2f35f721eb8718b0726cbea11c21be82b1dac6a2786e833fdd9ce90355a9447cf6d736873d995b7ea589b75d58d9bdd09cae2d1f49a99bd15d2aaa90c16c78d883f9156edc17369f12ef9462b6af93bd9366ee1fee341f77e25086099c0f775a7bb31a1710cc9a5a941f6128e03c09269dd40074cc90b4d0bacc1d15772b039c1d19ac86fe91943ec02b17739e982a1cf2db1e20439f3818a2328b2e5ad6e89d47f4e764910d8b767ebe44266ffd6961c0534110fdb54395e827aa1a4a1a1a8dad3de8df3b46a05767fa535a62333d9d4194ea9c93eb70a42185a6352527568c1aa9f7ca4ba668340e3c3dbf5c8aa9bb715d8587e25fa8081cb08ea60957ac27a137db09bfae5b7f58ce77927e5cc77568c62760ee61c4334647e01ceed9b2ee0ad33dacd19074f71dca60c71e9c73d10f7632dda09ffc512f83ae111be94a1cd446cf7ff4f3d0a24d4ed7ca856b22f2304ed7ff1be7200d3c1bc9119d8332ccd987d72d810595595ba43bcca75a3c6dd77587e0f870b3a225bc5f6779c543573760e410cc65b2a19690de90d4a4b43b5ee1a3997a1a7884f9ccceef713c324f0ca044da2e94d35e5aaf8ef9b02f28ce5723011dcca2d9fb00c9ba4396c25b955af188ab3066c01783828086a005fb4e32fab5d82bf845ab2500fb383ec6c77ef396ff4bf153f068e43813d9c45bc582ecf9eceb8cf517dd9048a956719469850ca42c6aabcd5f742828d9ce2395447d068c0ba8d6690a8c79f3984cd3473089990541a51f0fa6936cbf21d9076b78ef8f8e8cba97778dc9bced95ebeb102ee4c99e570c283d2547e9a5173c8b964f6796504a6dd30547b0ea47b8857816200dbb704c13147c7fa1825e2d178829a77b0f5371196f6c88ae6f8f7425aabab562a9d969882b806e42798151268e6bea87a79ec60efc5a5e681bcccd79c000c73ccde8730f343b8a8ea3e3dbdbb03ca3f3a331378742965adbec468dcfb088424574cc482fcfceaa4835976d9e0e96133856b0081882e59eb50968625941b304ce4e3f2cd4b88bab295f7e6748f05d81e8dce8560e7a1406181367509680a60d97ce62bcc0e1fbebd1999348d5a706f65cd47ba73cc5f333b63b420c520bfbc6e09b40d6b7987370ae0037fa64d2f92015ce1c4215748e966db5b22ad7cd51cbeab01e21c9d33c5d11dafa1f6621050a3c5329c6932900ed5e4ab1c7be4631125f89854fb4fc5ae8fbeddcca7f46fedf298d9e94a524fc8676dd48e68206b56e9b6b47c17eef79e12c2f529e3ef73f1e08489b484bc9afd291aacdcf6e9cdf77ca1cf35c4840038ced8848c78a2b77027d9286e461b2601b3b7518ed91c23eb07312ff03c6803675cd8d4aa0ee7e81ad3db4d632f386d9bfc24308d9e360ff6a7f8fd1e45175b656af082cfaa8fb8ead25dffa5d9ef9c1d40b1243e1b7fcf671b2bb81d0064d91ac3f3f6a9c7c01a929c9bbd3b464487369a836b396be1d345249506c029b9045570dedeb3f96d9359d44031efe55fe1e50789c3a695b674ce777e0a8c81ce11d8353d220b91ab4c3163ddfaa7c6a7dc558c883c7fcb70ee96f6a97efcb95500a070896008a867d418118ac24552da540e009b42304d3648d39697b39a043008179b99f1a0ae0352df27c536c5832ae78eb185f7aa7e7380db6d9e1e141dd9ac7c5b24a8e7e4add8b2e666ecdbbed707944592af0b3de77138197a1b861e188666f7606eda0666715d48fffed2c75d6ad0b2a4adabea00e7fef8033be860ccd93db6afbd6c986bfead2ff3a2c10df7f81c0138990823f1dadb0a2153cc10cdb35a2c4978ade8baf3a1cf897943aca0ddc48e39916534665ad44012de45d9a47c2dadefc98777308463de14daf2a3ab0c113b46e405f85f9ec7678e648de9b5e57d8c1844b6648f10b6a4ff9f3648833ba55af96031ee68400450b8f544ac86b3d927fd0be37a3a43579e15c213dd8fceb9e202bcba9a4fd03371784552febaff922dce28a6fb985d9fc45910ec75e06e3245c748d25c2d4ec815f2047f2fdcc5969ee77fa1b44357f4e4ee44480c6db1df4e809843c3dbfdbb7f58088640b0c8a4900eefcdb75b6d90bcaf373ee30c397502c5eaa886be0ffb6b6ce80080608b8bf960a849e30792bf83cc5a82efced751abd3561fc20f37924698d1c723b84b1fe6982555336a972f9198672680e14eecb7a405c9f2315740766bc7374c6aa88c9bcefb9a77a0bb1056b23d089624dd1db4d326ca91830d1c8593ae64464a3df692360e10437dca78506ce0f06fa2f9557ad38686a75b2e854e1fc6d8a3f1c996de8a9a091e415cc6f8e5c9f8557c932134e460af717d18f4386f4048e27758fe5cad4cae9f32e0179ecab9baee9e1485dddde08c8f124d17c73f5c5331b7d38668a8f723d5c2cb8dae692a6a892cdb541cbfc61625579c030a798d7e8fb6cbdaccbcc3d22a0860da89daaa7f2f1438a8ef560541ac79e4f1f7251c67bcc7e4ec500929e02099803aa3c75e4b3e3f961289970195bc94e0f97d113a88ac516914f77c786b6c2f9aad87fae6997826c9acdd741f3acb77ea4db5e736302b4d79c39d28c4e5dfb636d2b0b6e2b86ae0ff6178aa7f5bed4ccd3cf7acfa2c846731bbb6b466130c3a724ae8b0f0b2e41a986964a1f3a08fcb6b817ffbb2182c44f8aea05d7aa368ca8e98f0b8a8b1b2e155b228a6a8d1b56ee438628bad13ac77ee5830fca1ca6e9628b6463c2529e799a71a2a9e8e1783524db84525cfbcecec969a6916a54c1d5dfb25737771cf80ac64ee1feaf0d75f91e8aa6b2fb50bfc6e13fe5b358f74be1c4ba5b0014612ef5f51b3f84a4580adbf83ba5451d56015e9687f5a973feaaff738e5dbb1300eeddf606be14ccd40bb18a8a9e810afe8a4992b26a6206b00a4250051ba44dfea522f57c47b97ef05dc4cf87ac073f3c6e02d0a419756307cdf39d749aa660a9699c411f000e583d64a748c148af3b73af72de6475ef2a565d1bd4fc1802091c8bba45f0e7ed24ce7c7bc854bf5baf188d5f661fd3f6963bc72ea343b42252f5926bf0d779df27b16e9e3dfe57a0e8dec411d8213386ce5c0a70761ab15016cc7865df4ae076829710978b4aeb22cdadf1b08ed962a54b557370fd311928c44cc9e4f517d9d8f6c91a376a9043e7311fed6f4685cf25255ad496dfd3328d3335409c8cdcb970d9c02897817d6eaf78e6b7fd4760601a4a91f1ea0fde25e9ae90fae9ff71df815ea2537606c4862bcb433aba40b8755de2e3097f149ea2fc49d6be86d9b9ca15e7dea46e2591ebfd40b1950e734983945ee6b7406109a08a7bbae463c382eea5da9f6c6f111368203cdb7511e386904439a3758abb4f145041142d549e2443ffdf8ce5256b9b38580b2f05aafec58c9700ecca4648b1150d967c499550b0d4eee0c394e8029adf7ee7a435124f112839509ad2b28c0ecabb5e24f88f3d7862877590820d75aaf64c3728c8372aa75c1df147627d7bbb707e6522a87c1afa7475ba43cca7094122baefc881a3a6070027ca7c5582a57fe4018935c7d610cd648d94552569273f9dc80c7d2fdea1bcf0fb15842fbbf6f6da40e82951b3b363b1fa3f75b488fff753fe3738342b3ae566c63a6f28f8ca69a0cac2f2a86b437baaaf74d34618d9cc9b2f6016e922b5ffc9a849f5c92bdb48408fb87f5d91fc8a26f3c1422a8908e82d166be7528a4e8d3ffc8d5eb245d3f3f43ef059bd36b8721aeda52aba2446a12082325331ef4be975c2e6d46bf122c2efe519b269e060f1215908310ef3c41b6a4a6828d5c146cf0c555c5194f869343818ce952896ebe1305b931f99f027a79ad652a38d71da2a4b6d1511bcfa630f096a0500f9d9c50d6b7eea13f74d5bfb31eb91a31b0e2d08adba573f7e449d8bc61cf6bed237642eac32dad55860fc1b8dbeded097a5ee868d968330c80573287cbffb0d9347aa64877046f8e82f6cdbd1e7946644f52fe1ee4462f14772a3bb448b9695699ae490f312c240c07e0660722a1f71cdde45dd11563559b571a47d3cc01dee2953b9c68ccc71a7253fed8bb695dab7226073bf2f0d702ed53312e25c4cdf87291f053bd8c90bd4489a9f3498b35d57ba84651196ff15bd854ca35f8137df88c08918fb7d234719404282d6542717b66b805ca74a4adb1a61411b857276942cd6272b87c4335ee5add1cb5fbbb30663aee689f39534ed96959530261cb1d7c52c9b872e58d30d730557c28dcc24ef7d8f6d626280ce2dff7280229db91d3859083e36072400bcb3b08acdccb211b29ee2d998df5d1af26c6916df5afb5b6faea71b053c91289eb61864aa78a3dc37f3a9b2f98308288606fd7ad1f9694624f1690edb84c92105bd7c55022833c1546e0dd9013064b94565224c7cb2c9fff7e5bebc6f75a67996c4c285105dfdb6daab2d0236e5a0d6dd990548334f3dfce04970c6e00afdd7a758d6b6cebc4e328c631e1264a971d82f219ce7021ee325f599c42964087839da37fc58334787f580776fde70c448dcd60d176440d9ac736e8680e5c3f9e49b6ffddb2b67971cd423354bb7ab1162dd123e29dffbbec81d36d65ab7675002d01294757b8127e2cbba053b6989cf116646eb2f2f78ee48e29514c8c06b56b50e4ab2f075f7b689fba39e8643e1264e7c9cc3fdea8d2e8e0442647f0c23fcef802f2fab405930543c44a54e1bcd62f836e31c6888ea25f24c46e2dd6673716a840d83d72eb40d5739849de2edb23c9b65bc0b6d435a5c0a2b3b41b87b531e58defc23aeaca6818f1969de2c3e9f70fa506cd7dfe0db5b03ae0e679a7be49c3714c59e29afcf5959ef86aaf96e168f1f1da0af92a9d19815abe5a149043fe9042bf3f065bc9e63334ab825cba21e551ff163adeba9598679f192c3c41214ca7a4f947ee32ca739a69d97451de704f4fb91aff71db68a2c69d738a83b3fecb46c25aca47793ff910742187874d9ac30c9dcedb03226b87dd77bb1b679220e222ec57ef5be5fbea0a21f8d9106166d17f6eefc7b943b7069ff2390d831c5d03b9ea8d78e41dc770f2bc5cc6092880aea7aba849564702d54c4fb75d185082477b94a4a845422c02690b13e04512a2bd3f49cf4ef38a0e65c787b8baa8160a798dc6d29a6ac1896ceb33e0928ca7bf169ed27e0660d54c31452f723c4e2b855111087256eaa9837a79f50dc31b06b68757e7ab1fb931c145eebb04d1dac8785a5c46130868af1d4ee7bac206d59e34e4a782d304abcb15c985ec20a0efb3cdeb1d10257228c60b06d4e44334b8b0b5577ded5f85fd6ea0c134e49c9fd3333c3f3d6e19dc3fcfea454e7f0d0eca1b7dbc273c352c54e511f0ed5f5a9cefd9f91c90476d910c1bff4bee5637de8a7fd0bf9fd8ad37b3c5149cfb1058201e31d1ede21d709e1a918595891315e4a9f1ed6dda17aec37eae23bf6be37a4e988d4526cab84406376bb6abf3f1732edf9a7ca753937d9c29de73aab2fb37f8318e95a2a87ae44e2546448a343fd946b02b33fab9aeb0631e557467b5efb08814aebbb46f48482db9aca9e0940a79950b6c0a086b98e44542af351d3deaf76465317d54d302b59f724fc4ac97f84e92f1fca8d89690b147dc3ce9a7aee1e98dad57e6463e73696888d5ab1dee1b7d533f5bb278eeabbe17f8921db4fd415ce46ef802ef83b3995737993621840842a1f214836dc6b89d45f66f054f9ae7aedd4f0de9328545fd41b22992d36332df3a76431035b1a8972e09e054cef100b2a1882a213ef14a4b788de6bcf2d31bb9eeef4d45ebda3eae9724fdbbbb6fbe454b9d47d91430f3b9a8ff878c0f039b2fa1b407df7822ba0e8f4755502d69b5e55c814d52d5cc07104029e2f9ccec32282821cf3e0fe3fa10a4cb5765d1bacdbcc50bef137ef13f9fec56c3888365d9c483544b2dbacbe42461c859dc9cde6bd5c3cb057781adbeb6efe4db5f7bcb5161852b615770cc5ef37a4c3ac87b3fcd60f5a4f16550be5c094cc2f374e4e5a132e3082d5f368f4fc9410d1cebfbfe068a14b2fd35f55ef5cbe33710eb3315973df52b04f8ed0414b6984b3866d3234870d23fa79c747b399356476b93993b077911ccec8b11032ecf0af876f18fbc3dc79a42780870aae7a4e1029cf256a5bd4c898def65e6e065ce87ac23ddb773f4bf7e2f9f1f312b25929707efaec076e8c95fc5c611b4b235625d43351c9308b71398e41248ada265b4580a8461a49ff29cc294ee0f37e55ed2dba3e70a56d3e44a0ab40c991d291240ee5353e53e797e5e2585a22df9b077b6efb88b1e980c89bd64ba4b390710f5cee7711d939a76ce857568328596306a13219288cbee9d6afa922f3c907ba9a9f6439f4c45e3e863b6a29560cdf7c4dede2e1964ddceb72e9f317457276db51a3ed86a83e727ed725d550e256759cfe65d55fa84b404a9e077da2714d922d8a079cc846e7c554da507430811ec24038922cd2ff0a18d633c134be39357ed1a3de28a3cf1dfd991c88f5148173105ace2ed7b68e7764c1f15d822d7f9d5e45f88e3e11552890dfc4e0f285bab09788730568d0ba02fe4a23c6728dd1d9046f58495371eb54080a85f858097493e24d672512b957dc8a3cae275f1f1d90a1e6d4b62cf9bd051e34d0264a940d25addf5026d4db0cdb29c0152dcaf09449d8c9ff091cc91a92b7726b786ab445ca5449a1080b4a82b9ed8715b3f400851a2a4bac2c68a68572683f8c233e97f6a27bb62f9b37c6afd86f09b32b25c701dabaf18f441f751acc6493274409b7b9ebf4759cb662cc43857ea0c0c36ba06ca5fba968f0bfc872b1919b644c9b9814749c596c48db56fc0a8750f85e46866ce8fb7080bb3bdb058fac61bc68beb0f36f2b3b359025de4fff71dee17b7c136f2739b24039d553fbaef493792ec35e419267d0b9f415ccced9445e699dd4ad232ceedccfdf15a87b6bccfc89f2f820674ecff650b612da94d46c2f5447e2c486b921e866437f3a66eaf700d0f17c3ffaf21832331f52d63ac2cec4d061910392127ac379c78dcc2d09c8bd0fc02a881f61f6eb3ad623332b4e63844dbb4a00befe3e0a69ccdcf402db8bba4f4a073b85fb992991893b932925cee3d73df1b46f92b49326d36ee8217a3789726ab173867932915b275e220af4eb2ff8642fd8aa0f3e404c4219a89180ddd8559b0cae69806ad957dfd2d9373bfcb3b0ffc44813beef885cc75c4dd589c80a5e08657e9c49532d76dbd5d9432125a0a3af08a85ed56130ef5bfad974eb862014857ca20bc402e8f0cc29750385b2439da21e02988feb6124143e33812b83327a5b69895f639b254fe12d1b706dce44d868d64a4f7afdf03dfdce2f162b6b2329db9a8751c2993c1408f418217114d639ff1254ec7f456227ffdfbd6c0a3e25e594a202ceb6957e32c242eb781a5257ed3c32775d9f0c10d977086952586bb2c3be951eccec4fc290ff894267c18519b5941f57746a9dc3764a34a210709b4361c22e5dc963b1f6882156339db04279678e72bc777a3a94a31e071c1236ee93561dc907d5078eb69458fae0115b416660828d787a04d61ca8328407515638d7d6a1d637df69b8629497e2284d1e787eca133ea6a9c79428f04588800b246f352869d6acf2cbb4754b3d106b89fc29e11a9763a86efab16c99c074e062e437082b50184562fd8ab8849fe7892ab6e0ad1e2a9a253d97353cbe4c771fd9accacf3731756033e6220f77a43432e37eb00ebc1baf3f5270a81093dc2876d27e8b13c12031953ce8bccb9fe184edb4491f0479f412223d832eba9a3112895c6fc60e9f100ea65a2f445cedb6091871e20ecffb686cbb6d2975960c3982c877c778dd4d07d4ff9b0063e2d36eed7970f6a861af119a60284809d8003ca21489bed4e17365841698e8764ecc354b27d24c191e9d8724b6cb1f1a1878e4e6a27f97146717586e03b5f72ac26cd8a8ccefc58bacac3699f5a654d4feaf545509121bcfd6bc61acf2094e34103359a0da056246f492a277c52582c3031333f961b35d3aa0c06152678ecc5240aea51668582f2e00fc7cf272f9f84176c7c6d9940e7977b1ef45df96029c4d7836f0f2c94d15c70eb311f9aaa3b069ef50522ff2b6ee0d2b4cea3a99d502300649dc2f37184e2f49b487b3295c776d88b344fd85ff9f8c9bc733f419bcad385278a0f04c6d0840f87f3fdd9e3668eb66f503ed826c46a26bca2b6093e5c4a4da21dec164447dfadb89663fd94312bcc63ba937f00628be943241135ea8dd7bc5b1cbdf8866f4e84601d6459902139c4f3ade50cbac5feaac427043d4f7864c1226d9f954c0b1473b5bb5958e680b5cbf76df121fa67600a55f737da90ea944e2e226f95ecbcae071ec51e9b0b5602dc60fa5297b457d9fc76791cb7de1b8ae2454334cf2640f044c22dcf50927725f320f7925035b23098c52447ee7f8dd966f210e290d126cc92efb629d84b2f03cb807e8a7cdbcd5bd19729eedf380bffb71321b100594ac0c444c4f31b498b79795243944819617b728c4c8e97881a94f466db9ffbf215b2c2e1d619acae5c5f14d988734ff17250d4c49b453b17a175de6a8ddaef57a50aaee69f7d7b64af164f1e14f4fd8023efa8c1c482df0507e6e18374b990b8fc677c4d10ea723cfaaebef970b421915d51a4acbbd508997975d608347b9d2d3610d61630e7060fa9d21b1fbaf95bbea06132882639b4dff73a9a54a1777afd0546d6d187090972422b455cfa86bd8240702779a7fdd04090f56b2ea63d716081d82a3380ad6c0ab45f4d2c2aff40a1998097538da9e5ea578c84a4f8bfffb61512e51254be56646ad19dcb28356998ceb59f5f5136df10cde8ee60bc86c19a25a686ff8993609f9a4eb1c786499c7b23b2dccfc55cd0aaeb9c4125527dbbf2c5dd0b1fa25b8d4fbaf0eed44becf8f4efaa81efc0e5b4656fbf482e3410a635757cabb31a978ffa4f8f3f9ed316079809e5f3c4b8493ff4ae597e4556ef5db07b2371beff3f2aedabf56c1df6a559cb5a808b46901c17efe71bd6bbaf07b3241941c75bfe62bd05776ffad072934fcf0340bf03a74366e9dc7be2aa41e49a69aef5416a552c7455eda75243a92c8c68e8b5d7a885ceb06d8d7a4150f3fdce2195068702f2ed51243208d1f7d85c9b459ec0155650ea60e63266abf9a1e6e7826716cdd8a5b61a4c2641e85b1745559916d486cd837ef0b86d7bbdfc067f270c07ecc83d3eb8cd73d69c50c2794028e82a891effa89b46e9aba8dffdc9e4a835212b9b8a612e3bf629dc1c4a1d39635d57da645e8a03897a1f3f3429279927a7fbace0449fb3af83fa514b429efb845b0f85983ac42f4e300217a0d4c12be70f193526e00b794df17901466c14456e6549e6c59ba4377861cea35bd3a5fd5da24a60ef32a5d706f88c77c49fc5c30ae7a2154ce1db044aeef9ba84199448acc644591d92b549c17435772a4a741a8ba1fd81e96951e8d4576c460db2cae93db52e175d3255b3b758eb0e1f59ce34cd43f006dbfcfcffc1e20684cc3310109412d1d974cd48d97ebaecc6d65bea5d0fdc96dbf915ae20ffe08b559065203404df17ddbf20c5bcdbe74837f53f294a54f98991c590c981bdc7fb7852e9af8db850f2da53831327ccb4a74c9307eba3d71f158bbf4d0163515216a7f673fe53614229efc7098f3708019313d13307a48a0eb3191818d8af4c4210394cc62239784a2afce9a478215681429c84996f63ba72feb305d1aa979fff847107ac252c45d31f10c919ccc5952a2dd4bcbf5323046c205ecb5666b59708d16c07541946c9c8d3f2d56762d70bb36f5679336453bc268b7bf6f05dec26d692373936b33c88f476bdceb32fc1beff5dbd184c89f3ae4e76998647565e11a63d7971d4570b89b192ffa0c396692ac456c9c052c3fdb31b490aee393fdae1417941f9a376e076afe10f373e6930bc19d923e93d40f1b6478e5aee78557f4dc50e982e9d8fb42d39e5184fdf87e241a00c3c964325947706833c6b61965bb8e068a758d39e47cb60d85f984f3f503d5edda071c76825ad7f060cb5e8d66fac74f83e92e93a0967280830155a124179a36244f391277262c249abf937a7de920b29c8a2b5b1a2e3119d195f868e791c59516fde844138a032764546e7b251520219701306ac0588436d9835d7680dabb7be10917318070a7a70f6c325b7de68654a8dbbfc986feee25750871bc953ea12723e1ee1e8e7b536b5e9d8231b36d40cb49eaf31a42ecacf3bc1e86ed4d5b189073aa780d117921201a387f534d79559b8cb21352f477f2c86c9e9b10af5a586ab652f689b1306a531b18160df8f0a3596b4c97d5f8bb19739332b783031ba93f42cc61a5a2c5afbec771c10ea9835dfa84f41392c4f5245d7ace06be36608d3aa088208b1fe57fa361c8895c2381dfe159c8d3426eeded63fa64742c4274523fbd409350fcf00961a7c0887533a826f50f2fdbb051e3cc3b750951e8ff63bc038fd63cd9a3645a16a96d2d652f47b53772b881f22a985a09beffc4e53b24d868085f6cbbc75e97092547a3ce862b59b2a797f5b780de52a6323e13b6257d299b4d55c3a1a17fb75b273863edc206be3064ebe23172ffa71ba766d0631ff18230c2c0a26de2a5247ce25d83f8267a013ead251a96c6613c57bbb2e64dfba35e722312bd6f10f14aba36f41ed73200ce14954295b43168f84e17f3dd269565d641653ea4b3f22d56aeec55c056e81ce275c4a4d7275acfe93947b567a51ac6e68f93e113c8124bbee47764ede5a20001ae8b0cf0bb80e222cf3869c1a78f016849280538d6b617b823cf8b0c3a4d074aa3132594ae42bef050832d7d670256006a0ff7d2622f4dcb7b74c10cec36fafff5c800aeacb8c5c29af9a98294e9da4aa2c344ae78635a13cfadf32d1f4164c975c273263af6b727f55e22a47db730f29a571d37bb32c17648ed48d27b590c47e1289f8172a3b592b5d0b29760b45e69cec004c8585559ab680e67ab4dd1572560da68fb8274fc09b3edfa6a54092afa2e558521eff5a76a57ebdeea0d85c0519daa1364dd89d7d8a39823df912ebc3fac5cd78aac6e7f84a4ee2b1686d2f56cc2bbd66c37c52acae36e9fdfdd1512acdc6eb34f1f2b0926fdc9189268291fd608a055223d8f8fad5cf60ad662123c3b2ff6f69cca01cb73e663282f7999a7661ca8f2f1ee70753f63926fd4b7a54572b9b0def10787f01592847504ca6fe36393ce35814bec3c4c313a882226626bff881b1eefbe3b2f684fc7cbe58da952eb7ab36a2f88d5404ef2cee06fdc3cd25a0482d33ed7c6d1d878dac956e14d022a46e87a8156b9b1a090cbe5c326bea989b2ce36bd033f1bbbfdf38b73e9f81a37b9739e8d98a887f1a22740395cf4f28c4d459a137c75bd5293679db871f20d212cc8515e0c9299318a2a4be758282acebf9a0b1276d5a3da0e10fb8c97805eed99d36327c0e97284315d608daa18211c00de337a310c667c877ddebf26078234d8589ca46337fdcb989f4ea9c20a48c202e4745d3cf550cbb504e48ce401af1b7919ccf0c2d23a3d35d5b203cd2346f608eea7cc3f12a37777c34e4527fc08eed497403ef02657a8a3272e291c5f896493ef4e0ff83af2289555da8552fc0219d2030c0728beb5012a9153362b200d5b149b0620e43205af3751354bad2f3b8c9f14a19b97901a48166bf76a3f2ab8f5a361d1f68d110bb1719caac9cf88f0876c9d6eb4be617b8836f29dcf5b357d1e1e23025bce0250b362e914a1bbaeeef1b68e2001adaccc9781914e64580468cf72a7a31b15dd69303b882fa6bc413d3c43aa562f1b067bc4fd8fa5f3925abbdae21497deb68fe650b0732ce2bffc3ec425a57bfe9734a67e86769420a7e0c9222138e4f86790f6ef66edd82e27eaad253f22efced80ebfdb20824de1cb2633e6b4ffa52ae3731e623002a724d6efb64b5e6395a27bb878d0be617cc28d6b4430d30d0348bc2a8b7abbfd36858b98b3eb9b1a6f51e43a91bb1fbe4ef55a85baeceb18ce12780e82c5f271b2796394df33eedc427db6ee7eff14c16a94279596a992c7fbb7c8db2137f696be35f20c8376a77e75b2cc883f5388df47ba057c30e25cef9d6bed20d080836e38b79b4daae0d08c7a757c35083bdc018c8d12f3de82beaca5ac300218d7098d24ea954e0a05cdd0ee68a3d32361dc4edf6fae6078d0845f0cbbb3c56a2541e81e577a48d1c2a9ab4d9d90e96356f52dfdbe6caf0d96a702ffc55989985d6abb0d78bb3a74631e34c28f44a82465f8befedcd04afadd2f8ca76fcb488e04a6f833057386f0d9dac2dc552819695af894d91d744a01f0f39cd2afeabf7e4383e481f6e0640239b6512afea6fb635e7bd1e8babfffcbe03dac310fd0ddbab3ff5f2dadbd2e61f3127cc7e2c7e010b627584a42227ad9cbe62ce544cc568ae7e2f354e81a7f2c0b53883bf75696c97a8daf4b8e8f64a6624cae1392dd049ea9ef1ae2adc14565583ff0999abf0947c85cf859c06d77762edeccf1ad667512b6a5c063291991d06cb758e19825b99a51d8009d33eff7d1f174ec680454563d072db486c3a213fe6b969c502d7d390e13d79d8777d892a02ea4d4eeacbdddb3dfa6053e69c2ecc1b2c1fdfb28cef12a398c50c66b30a050c1c6124abb23e0ecfec8647b02aa45f2a0b5db13712c672766b535ffb4019abfc1c9f7b30fd6b1cc92dbf578069fe2c38df7ca153ee1e8e24bfae56ba05c04ad9a45414828b59f297977bbe4892c07e87618408752b3d9c4368595b996bd6766acc81b55be7918a3a66e606effea49952e095cacf77531c173e347f7e3489dcb404cdeb4635489652af673a3e01d2384571c6807440279d7f38b34656c56b077a0ee0f4dc572836a298b1ab31f84c62e034d31a8d05223e26aba42419c466eb866fc3dd8f61ed946015bfa2ee64d56c2fe370465502490151042a2cb673494e1aaf988a328a8f9e51e137a66fc95a4696800907195b8b49f1b483d70c6f83017676240c73980eaf57083498137bf25f5f989d8e0c48de247578712d4321c291cb3971e3c1be12971b791e402da799ddd1305d8405b986ff8b186f3bd8ccfc2bada88aeb6a775860c612a9a6b2a6030eb95b4574cce68b87b95a3364402ef3d15fff81d78919ff48e8cfb44e5b5dac422c88ca91f668a08ba6a16f0a68f5c201f14c31b41e5bb3405b9e2845b95c5576f0d6e4f6ce2f00dd4e1ee51e2b1d1b6358f80b9ec00c71894da327fdbdeadd3d4400c11a7685f4a0d3c67ae17c49da1d0d8b12173ae923feb7c6645ada35cac46703c3dc31a64dd52afa4f3b1b0c85c93d8e3f6158506f5c9edb0d5978c7ab7dcdf335483e1b909ee0cfd394158f97707cd5e123e8e3363d1eb3fd54796dd476242ee2647246e598f8e60e621ffb047fc0ef7e24f48e9667d1d08792f8200b98d36555607a12f2edd13b9e20388738d37dfd51df7b858f999b8f5c107b65c4edebb03a53e4f27dd00a24325d14f8206683885b7179eab1596d215c44b388084335b00ed24d8dd72075cfd75bb2ae13eaae12ac32a4433ab656ae44f944dc54940d0b4806f22d16285862eb61e082a25c5c47d04879c94490a59f0672e8c49241194ee4af1ef4b64ca071d9248a86cdcdea35125d9f652ad1c3747e1a1fb07ab6ab890635ab5881d4636baa2bc326ffdc51a0ccc4ecaa90b124094217773f634f0143afc3717ab3e066ccb90ce8a37a911edc0f07f150c84b1a02c350e2e7979e1634b87dad6b7e29bba1d3df424529df05073ad0154d424f4aad2333ca2fb8db1c00354bcda362faec599342ddb45be66f3964b1e0d0549623d73b73adaf301af0ffdce3cf453aedaaa3d6e04d71c0332d982b8d8d1463d6f89ba42d8f25ac5e0f23581e7eed477763c4e4c461432d7aa1633eba4f4fd77809eb25f668d0283c70bbf30efc69aaa0c101f635485bdfb202999b3b24ba6dc3e6e7da6829d7c70995e0269a1e2745571e9f08605484cd704e216d8259c7727f99e87549576f8981592735f0254ff1f3d088679a0f708a2eb48b0d81b4534451ce1a18fabb839633dd263c309b396339efbe1ffd217e759d6b02f39a8936c8cf2cebe54c26a885c3c1eb2f34959da9efb120adaada224a5929bda7db63066a08c531d41008629bbff44cb86861bc549687d9c913a19c9be95960ca959bc3b8a1721aee9079176494321c84fd3a3111a7652c1b180197ed3cedb26a0b8e9c2596466c24e0ed88933bc5c2b066389abe259c51e2bc1dd827e91146d5ecbb66a1497060baad4d74e2f51e662bd5a460f2a1890dc7de11da18d793f8762ef1cb6fb29fce94cdfe6fb68a25fae14a45333a0cf075953b37fbd2af285a96a4398051904052bbe954f6d2e478d4cf7d17242e9247ec8bde51720b965015934326ccd4ad0c62ef17edfaf91d6c8f42b4bdda31de3c8e0fa67c7ebf7df251f2b6de52741d771393186c44a2fbfd9496f1b1a7c2d5e0aca1d91ffa8daf4d8e6a3da33f707e96c9f5c084301fbb44c61dd3a6c5ba542c682df0d63cf53fb33f2a16b80da3de3bf8d0facf17f27094432c06def93cb483c50d7e71711ff20911db0581259c6dfaa1e6ddf3b3b27f6922fb3128bdca6b1bbee057f7e7e7b56166c3b53e410d6fe7aedcbc8f1cd2d4d0f9ebbcf462ae1d811004bb2ce6706db93ffa85a50f04e206b2e2c242e94a1d7a91c5adcb907e6c95402e6a1dfc5833162084427134cf04917492409895a18d6b965d1bd6b4221d1778505a9c7d15f4dbb8a813bbb122e56934bf0e11c501d323147c8dc16bf611d3b7dcb620bed8098d30db16c89487e7809bab9763ac6004a00161e383df038078e03addaf710a4559265cc0ca122cf95d8331a6cb7329f213295ecd153ab9804e1c5ff1ccae11665817bf247d1735909560ae1bbf017cae7f0bb0907b4b8c1d8d7460b1492ca734ca4c60f068a168fad64cfc75941cc39c36fb7a905bdb9ee944750e536db5fc60299c0689e59eb59758d0457d92a48db17d7e1679c8622cb7007d8e6f32bc2936298e1038bc118ecd3964253ae2a5ecc2f5517c923a62aa68f1fa6909ca1aefb3003d84826541b6c50e99d0368ac165969a898d9951f87d37275e64cb08dc46b8a855de8e87dafd0a0299dee249b7c35fc5e0b25e04dade155ba51265877fb92b51451db625c733d760d48c5ae87e9eb60ea25d00965652f3ea24ce3c6c4619db2ea7c37c5a69f707c618d611914def3793039c9e6318e10598cabacf220b64904b3872235931336099d817df420a85dd752928fab8dc0d594951d325fdca67e7fd1e8564d63303fc1985865b2c5cc41c239309c3da3d39ac5e18842a3d080e6829674aa6aec2766b4e112a76c09284db3a59c7783326062b96769b3cf635007ef28ab68ab2f47cf29435c5bdea70e17b5e1594527f99b6fce8d996f9c743e41259d663ac42510eb2fdfff62479bacadef9b51a4734212d1eec0eb40a7ffb1d0f12313b8b5ef43712494f740737164fd392edb242a87a5d18f9d2bab16542c36d08e853a46731f4865070aaf892f7298b5ca535f5f6d37817d3f8b7462b9a5241324d4af4114c32532662d74aa0cb447ddaf5d90af9df2e550e787e3a1ef320235dfcfe68c675c88ac6de7bc6a3a2d36b1855c58e4a9b856337e5eb81333f0a8d6281f79b32994bfa00576e1691bc69a0f43fb91dba6fd36ee6ba3117af52c738e49cca154c18da6821c4fb1ae46ddc09898748d57e22078dcf22bb021a8c6fd374da780a4853443e0009db884adbd3e6234435ad7210f68b63224aea2387583adc6043b2d70d9c29e6181627a4c64a78c7fdc5acc0cd91c7851d32357250e6e963947b5fc2e7f93da8dddb0141e832da23267ab01cc0dd03e25f6446f7a0f72c0882a778410753bc53bcae81f5b04226e2d8cf285ff3c3cb7ab7771489df1115a8f623c8c192d176dd3e3bd22d0b8a5f56763f096e87a3f27ad720668619e1f63ba57f07f9636bfc26c2a0977c84e161dabe9979ac845f90a95777b3e3b253fee04be8f04a4152c325e3f7cdfa2b66bcbf350c742eeaadf16e9493ac6519245ab335416ae3b67dda755d49db7bd65f80f1ecf4eef09652170e90ce4ec1d455c26774d9c6e2211b1cf20e77da73469bda804e85a633736cb2b51818d8ae6288150aea1a0aa47f36a0296ae489ac98f348e3001305a706245f644642dd3617535eb8c8baa0ed8b92aa12706a035a988f35b4fd08b36b599972332b329c05a3eb9e8a9aedb0cf911328f2b22ec0b37cf87878a06d7e87aa3f34affa2bd8c0e43e1fdb1b6c0ad54a7d63e6685cd43b5cb03abf583eaa83a2874ac16db765b61a11ed42448533d7c8fbdb21abe6bf67fda08b6e5181565d16475c3d51487cbf5eabda0725dcb10e4c97982f78c52be8f5a2c270d77f63354c194e7a79c4a9903b2793e52d14b04a93f99e8b46e77e84e4da9943a58adc54b401239da7f565de19cec9330676140c71ff64f95c3a7194a37fd3b99ab2770e3ec56f1f0d3a28b0cc0ce589021b20e23661ff1e36a9dd2b4563f4a708af2f24e7e151948b232841b1c7bca20faaa7c852417e05112c808f87887ebd533e373dba2c39cd32f2fdca8ce134f0840ba406634aafa9b06e42c8424e8c9d11216a6996990a8186a24358de99de0e5037ee61961abab4b9a73a1ee61c48cf3dd3213724d31a3ee7dad7953a52909496d3a74e4bc4cd84ae121345a53c80dfe58b7c4d322659d57285ae3fe215f198dc51427940eabd0cdafb72389548491aea769f7ac96615309392f73d1a5fa2af2df69038808754d699bc9616be18184641d8d10caa808994d4142ecf07bf54966dbcb8184ab7c917044449ec23ad29d9c097cc059911ea6f34870402cd2aaecc4738068023fda277094db8c496773ae367fd451abe83435a920683a70aa27880f5e7da0a8281341240c8fb61f9bae1951b6f39e7e7160fd9b29d9cbcac91b9accc6e5df89864b0c1504b461c3778fe075c7b95a310a0b2d8a1f96882e61a82f51d909788651d427f9b04ffd136ad60ed58e670df6c4766ed909d8504fc446c87da2a9b242d02374438ecb021f1e04ef6484ac30fd57045bc922c5a7abd395456155afde7d351084ea0c93fcdeba47f0448b7d1991ad8f4682a2b3dfc05c8ba6ce25c47930d27f4dce6f0c7bac6198eec8ed5b66af23cd4f792c3ee7537e6ca1e7453412f851b2474d83abba6d0f4a5be35d5b227144ae4cc8e0ce707797c87d8bf45f86e9befb7cdd07153de11181fe168ba3f88dfd61235149a976d370c905ec7e0ef4514c62072338fc943b3fe78248a15e1c0143ce3c3df0f5a71b98e21dce4cf7946ff31605a27f439217be7fc8d77709c6e4e9e224dda88b101bd6c94c7e0680122ebf1eb6464893f2a91a11717fd0b4c0e27dd006c865862a645397359bc194e7bd12ab3add7cc01c72783765d7779b8e53a77888304efe16f787c071cd98b5bcce4d9e77957abe44ee43e453820a254bbe6594b29ce8521c126328a699cefb0be5e44bae66040df169d86e3934366c18bcf55e96dcba03dd108495e4fbe9839eb7196ab8542db834b9285fb17f40bc5e9b3977c4628b67e257c3e2a23a060fd6fdf04acb0f3abc03a182d7d3e92b5fa256d4407be47038ea1f91f0ce4cac9d3b629dbfe056e97bf54adaa42f022700693d9383f135e1e1123b2b9cbd57dd3a837e6cb7769610e1a5e8bb0a59b416de904d6919c01a7d25e3fe2ec85563bd4ff0c59aae6927be08db822a916daf56f43cff6596477980085f1204dbd93f142c0a5e0923a4f3e7bf82d883b36bb56b890d73a555a6381c6d22dd4ee1099646a422897da0c4b4550b82d44b1e5b9ef7d890bcc60f771b5fa18bd09ef8adc48d5b6db0b821eefea6ef19eb7ce6185b0db9d379a527227836ce62444f481a6dd5b55595a3b76bdcbcbd605d0fb45684ae61e13c77642c653155e3f015671db0f6df2764379d11bfa97e7ef4845f1de8a706303cfb44adb57299023ed8b797efde112616e324263237d41203b0608ad93c0d040d50c433b3fe1a509a780a9e4bc6ff48ea61a36abb26546e040a8ee152ccda3337332af4bbf554a423f44719fb1ce0947da95f1293e4c992b4595e7f677c2dcdcf791434e676237c40d8a0609675b05604525c479cb782199a5ec67916966b8d035771795c75cdd4d533c82efbc9c2898574544466e0c86ea43e8d6f713a2bb78beabdbe3946370086d0c6323635d4fe33e23155b1369d724b6ede5d3151b9c276c3d42b28992037554f2c21b81e5d20bc2fbe927a28723cb59b13fb4071c051f7a19da24e574a979d526ebde80fbfe68463a249dd54dff70c127a1219d3ae09f6cf55aa907da5cbb75e67657b4d8fa71ceed15f0c500311339923aa6a2394e8d244898a839cc6c957a460ab5dc6e92e96d22c6c4c3a5df17f94afd67a9d6f94b672adf5495b4b5adb861ffb1f805542b43d1e1f332ff3a8a024e1f1ca647f81d98726515bd9798acce69ff7d227beeb788abf676488759968a9811001b4e9889793335135a8bcdcb09b82b32fbbe7a59691721a253c27b94caf9185ace8b882905488c2ad8181f3891edeb07a647027ce6bef6f1cd34e6621e5a3b18807bd384346dd78fafc5e5b0a1d809cf8c12715c7927c22c029a4a55d6ab84891eb30d20c0249b26cad27bf035e513070255fca58db9e669b9f2e70cd838b34697f0df7daa5de5c74b5e11a207bfedccabe88c2c27ee4af5a6c186eb81da2922aeca808f77cbb3a27d5681eaf0ee330f0a1bcc9753464ccda1fb478864ac2b1558691e8a37531ffbc433c5fb69508d228af8505f06e87fb686cba511da7bcac88902e85052c944533976228afde5e5993218eb3bcda0dd3454da9127d2c3aaa6673f55cd013344686f7472a682a415061b7b9d48dc8ac4c0292a1a1c27822b0d80b42045d972ed979d86359b77d10c4e703800343a1968742e1dbfb2f2b516dca2c58af075bed1e74dd1dd1b9f117fe2c5af655bde826876228f1cfe5fea6bf9aff06281793aee6871772f75e1a010d95164d982e1079b0bb51b32b8ab27f1b90c21bdd21c3bcf4a27d40a8ca4d93a62baf804a5d3703b61fc225bbba585f1a14f6260fc12796fd8de6fee15683e8b13251f4163392dd16b265e90804d375f7e93868f42fa0c282e723b3609ea8434e768183ebe8e0858eade93d93dc444a6a278d13109c9f0373b4abd7482c1ab0574c5d11dbe2aed9fa166d5d27851337124cd6c6c67c1376ef227164fd8d7083f9b889fd3dc33ac9309088d60f91bfe40a2eadd825b6ee3a93bb004d2a37c1bdd362e93392bc6112dacee7dfa3a2ae92b2d9b1aec1b25ca0ea7f063482d46e2547e65edce18a671a6a0abe66090f09196b5ff24d672b5166dae3e177656fcfc2d60af5efdbd249cb9fd236b33144b70b11b0b56216820cd51f57160394be84f697faa36bcecb134592ff0bb4abbfecbcb8d7a97a9f2156efb8f79b11b886e12407b41db8a9bdc1876f7e5a5c0cbb23facb61805c1460cb5d1226aae2bf8195f09a82ba0aec69b0d655422bbb8339b47495bcae189cd20c9d1254f65d627538fc516a1d155cbe5a46e159146b8d5e661b0486ca75de72cb351c4a2ac96dcd93a51fec4e6cb1627ccec0ba6f9e2aebc7b65de2b2906c80e597c0d147bfd0a38037f7b460bbec8a47e22c474822976e0817b5ee5e7f28b5d58d6d93cadd31363dfb5a33c38bf2a6f309e46538a5f1b1c215142ac678498de9c3443015a052a45d979e34bc4a0e1bd0f0365e52fd2a7ae80b6f4095d00e8960a185569d026e64eb06c823b7f89d165b34586c43512990e8af434f867b667c52ce9f35fa61823311f3d64d83b05bc594183b2182cc58b05431e05b00e04d78b2e17fd6e01ccbc88e6d31adc6784327aa55ceb72b11e5885ba588313fa60603bd7ecb8f3b02241c2a5617b0e8e9350d6ce625c0f5cba4bb2982ee69059e7091a92e7b80fdac832ec9cd03575a79a0ec4d608120d151e62a3c571294b600997a33d8610012a75d3acefc5ffa857c4ce664dba0daa8fdd1f6226c263c2b6eff28185d6141663ef9572f848813a4b39edfb828d6eb8d5e4dab13818b8e294fa18c9add31df15def863d12468ddadc15e9234a9ce03848bc8a27aabf4f138140d1e4ce9dd574a2fa36c402b092529a0fd7e741f58512c28fcf4b47d1254627ccc0283e1503aa12b6b8a51a5e63ed919c932de5671697cb03a6dd1d539101b8d9111cbcf63c0d91ae27d0b1817e8d4aa4cdaa6788b5f8be4e1ef793ad4ccff04b21d08b128c8f92fede7fd20c5852155e368180ecc844a32c8d7c008f7cf641c6501bd53e8ea0d63bc5d7770a85de685fe60cc0a7b20d823d20f427b1353ca990f0bf5085d0b1036c8e0c83dfefc77faa0ebf82384739892ec4e4f550a6d9d2fb06aec63bee3b127cf868d8a7b16ea4bb89658595a46dd07bc1357de3409753ea53aff67f6f217e24ad73b174321778d2340f2e92e7d809da68ee83c0d4faf9b8d66b58c7ec1a58cfed59b5b4120f43582ac154cd822fc97befc8dd60ba50e0176183fd05f581e606faccbf5112f5f82550c814a51005c20621a9abb95b1beb7538d694e4e78f818b95aad4de7cede6e0b5a72d1730c2d1acff83a12b53d81a08bc83839b55ae58d476e0fc624bd3b777c108974f88c0cf5d762973f87e00bf0821b99001b715115077f41fbc7f3259294d8e8f85c418ab00b1f32700b2d71eb89c505c56dab0706c510fcab90bfa270c1b9928c553d8fbaaa5aadd8ebab9d600e95072119bcae56dc11e2dfb7ca5cb9d4bd4b28823a3b6c8f5118a0c0636186ec2ebab0a6e7b3d60160ab7b3a6b2d7ec7bf64b767862cd2384c585af957af2ec0c96bedb5f84f34abf35160f0d610ea3984264b6c97ae29839b124e09098d2a44e3309c71d720c03943724f7ab2ef3adb746a8f91c572d41df2fd2b570c551639170376379b184aac68efeb4ffda07f5e134cf06443db7a78e323c6a1b5ede18f26cd0d3dda45a402a27f76f1cac4d55d581e267710d34c9b32295ba26699d3034a7fa73adb28604a2cef294dbead38933047e1b7ac92a3cb54241c3a79d79291800cfd45387497a6ce6dc8dcbc77b1bac0dfc3afa00285eefb99e5e51b44c65520a5774cb4b6fe0faa93f46f83d30d75eae063d8d70e6c5d6d070568e0b6d0c9773fa1c32fc54eacc80bf36ed54b3a14b14d7776081a0bee08fe4790555beda92fb2127131099902a8cd5df0d8bac857b7021d58779cbd78a7f5de0048efa6a76bde6ff98f07f69f038c0af95b7413e2be753f298865f982d280676a0382cbdfe69be11c1413f200f6d84d200c5bdeee3e0d852412443b9d4b1f867e953a7aab86c0b0ce514ea4ccb3ef3756763a5108e3eeafa5862175238577b7c2c1607508473512cc8f725a8e16810ac6888ce9ff7229222548b7e1331c682dca1299431b36d9dba5776a6f4df21ff517d857f49c6c56a9b416400093423ff2a3d125526286ce1a7d2af4342274990131680a6674f1ddc3056266e60d90eae8ddcaf856adf3b4dce352fea38669e5e1c7a650991ef94397f9faf1f400c2ddbf888bb1d0ad3825feff7273067fbf950a5f76bebc68687d8ebee2018a8827d34399bdf547a3b53f9420bd6ab2fe19865c5eff80ea7e18d13bd08e853654b2421b66844611e3a798e51d7d1fbab3e71634f4f8d5b49cd67b0b00445f7e2a4d21ba41d00da959f0656285dd8f57ea46c777e7ed5e868e032dc6be24b0b15469dab2d554648c1fcd08ea29e9f8a0363ca7e3ba901fee23a89f23ecc7bbec6a265bced9c23796ae96516fa151c906904bd4220f9cd77d69dd9719daf9df625ce8df0e6a55ae30c63871d66d1018b896545d8dff709b7ba7f5c862c225277991706ec046b355acd246a3b8fd29d273e3774f06be30ecbbbb5b7c895b2091fed8937c2559cdf78fce91156d98b983ff118ac0ca3fda48a1d55858adb261b2708b916e987554c4eb8460acb573c0713c9b51691c242b49d85ec83c533c8cb2bef257c9021ab731a7e8279d38d42f690e3da02fa4d85c26f59896dab165e7e0f2756f9764c818cb335decb3700ccb79ed84953374e04f1a999f77460dd0932902464d8865eda40c33668cd51b73223e0d046c2a1fcd291d9e523fb06c1888640e5be95ca112abce03c0c4c041fc36c75b95308346394909ba684a3218232899cd501aec0e7bd4ed3d214363120109ef83703845ee04801e59cbd584a7e6d33d3f456877b6954a96f4683ee518ce3c0caf21eded1c8a891950d87940fb05acfdbddaf8e0d75c4527f0f3ffb38ea85e9ddd717d18628156033c0c0400ad2bcd16240810a347c75953ba643a07d4f30dfd78eb55d06535e9c548ff2e3fc62f000161ce6e5a531ffc35192585ba3380f23f600b33c71c9052756ab019c914f1c61fa403d03b147a9aab3164ba372089187868578da6044e66194033308f48b720b53b9cea509e0e3d34507723d5db35d6bd7617f6b752a802a362069e2d7bc388bd8e68bb49f7a29d7fa7afa08715e8c7c64238c473d99b6551e78992fbd9415913dd2aeb2b70b6a8ab80bb820e5ca6fc79efc293aac44fdb5ead057ee95d52462fe5ee11775d16a2d3b9485925f033acb209a26c7d1be3dbf576e90122f5138dc5c9ae80a4991f0a3fe1f564f4dd43967f03df4f36e81ce629335662edb8c168bfaaedaf2b4011eb5132e6d046944443aaa5789777475d0eeffab05011cbe654a36a7d7b1789f7151b1bf00d3e4c1c12f25d72fb39ced2b205d2c6f9d129a1cc98b61e0144dff74f2d8c5e7a9b1b2ab2509cc0dd7db01289f6d4ddda862d6696c1e3d4ffc4390834fbf6d04736936bb35e855f3bbe203145e5ffa0fa72f588546d09f339c3c908829936743523317e6bea51794ee28f0ce0ea6661adc895d535c25ac57abf1a0084e13dbd425966231239f1822de52d6065ffe2635a6a53dc9d48efe890b8206a33f24756fd476dede9c96f87191ae06ca44f02d4e115b2f729ae00784466fd2fcc1a0fac91676eac124eb7b6fea227345ec9deaa72fbe68e2ba512d66d3bbc7c1d5332ccc0d3d332247615bc40538e2ace67aaec173a34b9b5d3bd2114ea410bd797e6738ea4ab82ad6b47725f2e01a91b20aabaf7751cc58697d56d34782baca1bd0ee582ad6e68e54a069a2438239fae2c9eac1a4caa27b661446effd22b3b3103e73d7fde1a58193a38de6a7a4695b4abf58558ec51c6428581c1bca5ed28a67469da3470688b623fd4835388a89883dc8384e51c592226488ed734c847f07f026e909bad3d6001f0e0b7a177472051e6c47ba26b0ebf064491525b9f9152194dfd4c4cd1f39dc8dadc49d99ce528a0c37e9272b4bf67362073ea49f94861295c9cef9a287a5225c5388542b6b93ad565bc287f6fa88dc95a62bc1bdc6b1b898d049bc89b221ba515a7695f29280cdc591bd3cfe514c3a7b7decf59e77607ef2cb6f5d74acd1530fada4c3dc20d647177e37df6723cd3208ec2147eab667f391520cf2ceeae9619ca7842a8bba67a1a357b30a6976caabc8d4979d36075a563187c4700149310314e997a10e2c04eff2a570e183ffcb3869a9b7f983f7dfdcccb2ad937024b690670f378935c8298b051e3ede1f5b6d38e7158ec119e92ee4c505ec6b7461fd0de90bc9a5621884faf7282bd534287ce0b19031980366aebe8a81acdb0776d275cd1b365beb567c5e20af0546a621ce8584684c5078cedef4149a8b6453c5aa1a419ca9427d90f3ee33af3c9e5737e37e61678ce68bdd4031534038ee9cac69a9f3792e81e7fb5d70f288ea3c4a67c2e54d629ccd79b35bc8c42ab59a0bdcb576b52cbe38a925c8dde5dd2bd76c6a044fef9c71c9c8c319035f0d7aa659b4d5faf794c15990d7da4330405c16b0488ff7674fabce3e3306a8e5df9f4feca4b1b8fd4257becde690e46263946f2cf083ab51cfd950ea7d3c8c828948c72be0ce34a0808906f89e5db4b1ba675e3209dd3d537e02bd5cf05dba76bc626179a19304f58643aee9d321adcbd768bc0856cc0f211077f268512d8746980d24e141f0a355622586632ebcbbdc8d222cb2dd16d1368ec2355c02aabaab05c061cd247d69b2ba295f02173fb74d6db832c92a740b5d4cdf9c8b031457dcaf91959ada602f637f73be610ff6c91dee05a31025eb71f167c099dcafc2449845b5207cd87814939c18157fb23ae6eb2e6d03420d8bdc24fd173c9652ffd38992ba561072146c2b71ce7fd14a00585fc27e6dddc9715c0dfe349cd5692876f762659588e21e34911897a5f8fcfa3b5006af01fc18c2ceb8fdc91e772ca8e1755f9df68eecf5782047f6bcdd76da85fd0a54957ebec704da37cc09ff81e616aa80acffed650587aea875e90b9eba3562f39d2b9827c8a7b24a4df858e6f518956ebe6cf035d843cef8a45d1d5570a66c4ab00e6fbb5aa03aca31be8db5eacd07f167f7e23dab50e9904d3cbc273d65b27b3c085878c666bf2d612ff0ee7185719980c0c45c305077ac82f2ee705f9f831bc98fd4fb053bcb467b83f5106b2257d00962f4b021d66cd75bf9aa9c3fb0caf6088513f8740f1226d841862e19c7871bea99b0c361d31965f513ab9a48c00b485a5897668184607c9fb82a4940e1642a14f6b0708f67d0218c3568931e91940fd18cfe8dd4b763d7c753b75014ea4137fe4dbe1eb01db91024810ab6abce65c14b40a600c22be74661e3bc8540b30dcb181fe766ebeacb0b284b5cfe03959996d64cfed60491a0575c34f6df6d76a91cb9aefccab7290a562c6e163922f263a1c2d081f7827c766cfd0b58747eb7886623a583e96f7c63934a270aab7817762b8e691353477821300659d577e4b4a91e52330f758542adbad079bae96c8bf6d6f64b319e8ba3e58da6691a70e2c9cb926ed1843a8d454cc3cd25996a0f8d34b3f8a796ae9ec4f07823d7279ce99f70abcb1de19e03e8ddfa02b78a02f29db2c08bd8c2fa1259e09f404caf78cb2cea0a80ad76909c64e8f96d6e464209bd354ca1c40bfde199a7a43660b39c52ec215f16a995ced00fcf2f2e4af035299dc2304cfea282a6e1715fcd8b3036ce43d9ce165718f255e02494bf948bf74f9b1ffbc75b9ea505f0270409200b617b399c8b697ee897f38201be78deb39d4fb7a1cfd0c57689e2011831d4d1e513b9c01d8b229fd61b19aeaa1fcbbdb8e544ced5324518c9ca481ddf3f3b1c44aa5cc12ec630dbd6f0f9e3ba1620d6034488a359df70ff08dffb1133bea0957d3ef82e41f2246af7b2a99dc5760d112ac8c434abe6bb9999fc3629f2756e877f8f0597513db1ab285e87bfc371d03a0c7a3f672552bfef581e5a9e082364d36bb43df463d9880438d320dc338ca314941c32c9aa604ca08c13ce774903493d56dd1f42e15037b0c1aadf2db9afb4d2a607565ffa4416031827684e9c0f59d9e72c01b3c566a85cc09e2be1aa1047d4bae27ad8f89559d7dc83a9095e3f6ed083e34c4a8a6529326f3cf2e3f7aaed878be7a6738e75e1e0c20c3dee2f019a18c817e13886dcaa127a2b4fbba4865cded71799275bfb3d2866c30bd5b174f41fed77a7bbcf12592b3ceaaf886937bb2a9631183184ca1e1d5c2dc10c20b18f4f99fe33d8e5fbc86cfac2109657413ac32dacd0f1673c794f2daa6479e94b94cfb7b06cf51c453288548c6d8c24039fb5e5c401c6ab500975b99baef8640679ee9b693cc64a0e836d822c1196a8e59ee83f1cb131b2228197822257843a2ba14fb1e9e89a7e1161b2ba78f5f029b9f83d3acc72b25f9ad1323056e1dce38d8bb7ed2d47cd6f08f5d4708daa720031fb9eb71e3f66e6cd1801311105ce55f6f29437335034135b7f96b7dd799f355f070ac8d2cf37bc9fca7b5237845561e18b1b62bf4b061e0d8b42e094a0bc90490a9e313c24906d5ce247dbe6dbf3f07b341ac7a3eb22a974811b6a477d5088cf1d84df46ccab0f6bafb0c5a2a4286197fd3950c7c71e2d616962df7086ebd268b6c7d21121e6a518ef2890692294609e9410d1797f39992b837ca8f5617871bf730208eab1d8a3968d0a172eab9ac2f83682667111b1430e1858cea13b1f0e1ac60ef54f05e2ed9426167f712c289a61b3c8ed1518cf8379654b9335dfe8c0d6c2f0efe6b423de0e9425a3cb7d57086d6de9e823cf46ac1508d8fe4866639aefa46f961d556bcedecb67473e29cc8064991fd3034f263d393257b1a1b2f23c174bae25bed2601e853f1dd2441427b67b38b1f576635d8be67821032f452d8b4a3d2e4f21c6e5e31bd29c8d4a70fe110019265a8a5440f30b907c9213c1ba9e583ac3237c4b27a5cdd700f036b965c6a59aa65afd32fd2ebc85e466e3dcc02b2f7bc9c153212c6c5a1b4b0ea3523a88e25806d82e2b8bfbfc3a3f5814023d0ec490575b9753e03677d956c069dca2a393a7e9eb050a0fdb88ac17d0121a65e47af6a9daaa5a929aeb94e8cfbf5ef5d617ba965a1ae6cb8c70cc78a5dc9482f5a672c6306bdb780c976a874ec6394830fb98e97efef81311d07cf9f9156ada5169050296f2655f29c617cb79ded7cc46f4787f628d5f4fab5dae3f9be03772a78ce0592f0b8f25620c15b0b80c691bc0e8df7a8b78f2b7d068c8e8cfb0b7e97e7ba8253e9ca82f05a7f20a5bcce65190bc9d07e4a3a2eab202158f700c3c1712dde4b32a9a6e8b6684447218fa873474f68adf600cb4c34ffebd93566462daacb3aa68ceebc6f1c19eb0b3c590a8d51ed84a9d98958c3e8864a6d5b496ea58cac9c89a1e8711b34385361c6bb8f6bde7e73a1b15833300070c1c9b4da485dfa070cce8791c738940410be50fe2372f2d0a64f28d7a24d995b357ee3ce6c4c7e3fd3f57652a64a31383bc127b8caa461b368c6056c97542ada035a55c17dfa06492b9613b92bae0be3ececa69d64888f5a80b3124fd14e8af2ebc1c0b85b81920de179cf6846c7753d6f2d8cd3cc6480e2334db160afe0e69bfb09c70f6dbd431caf639d8fe3614a7a53bbfdb4a19de48da6141cbd93916dc0d1133d467281fa3b9f1609b48727249ecbaf276c05beb1918987d2dec465885dffa471c2379a20156a8d8d3dc73fd999116b36e7207d2b86d1c7b0f556531e75c0643f317aaf32b8c7b8a3d07591333ded639586699b3f75e2e14f2497ba364e3e3af4eda687034e8569e97f16282f8570b5b866e10172a2f15eb9c90b610c8c639cfc6a2f6a1ca88302c8d383231d3d32296a7ae04addea54036432c0688db2ee42eeab26b6101e22f6731977e5815f719f50fc0333fca62392faa0e25db97871906d3df0db29e3b148cd4359b9d23f26962b91b6daffa7446f15c16f7a67f662ad6575f58797e5f4e1f1695a37f9dac43539de6b934d97f1c23a0fedd064171a9ef931ea972e945a0629a18c230f874e1bd9e181783a3929895b0c3af1529db10f7f35d3f5106846a6810a141d1f79287b2981408eee647678589c1d317a9a5d8de4a27e844d38e8bfc25fc940e410a8159ba85dcd67d1a8dc114f74c8b4b832df96c7fbe2c0e0debd942f444f8f02a118352b4b37709db8369bdeef4d00192009abeb81d56a231be2975ba042cd621ddc9ec8ff43d056bafcb617003fb4041a929899a28757cfbce51b0e95ac2fc00603eeab7eb2a72aa9f12f056f759d8caa34948d30474dda0f36812908dc5b36575e0431b9deb9c600a981c41f1c2fb997bc0ba42af1939cad33b0d4a8bf5508f9700fe2ffb16e54b4436dd735d30648f64ab83a22c063848c129488905aa5fc3043216277f70af4982ce8582125ddde61b0a2afac17581129b56c4115c5a78add0024a7c343ca683b26cf7228b4efa4d6656502a56d117be4dbfdc9c09252809f8261693f3273d9757ef5c15ea42277fbcb0c4e3c605839441e973088eafb964c7dd1201936c29ab13b8bf60c98539159b847cf98a5b97e57b5f16b644c0cadd63da14dea7a6ec81c1f5f7e6156286dd40fbc773d0a417a3e357387e6ed6b2e4ba889e1d3ecbc6e7609525ca4355626c623f5e90ee68e078cb87863641c8d608307f98609a98c00784778e96ba01952fc87f4e4a01e23b1411191faec1565e1a153000620c82367bd3afc610ad929ff1d9d4f871c9b5ea103bcea987e37e7c533a01e3bd7f937b4336ae750edfa065bd493d75406d18dceac63928211b4677e41a6cb42a63b150f616e7f04b416d6c3115a64f848282a0fff385b0c64c65c6c0768efada2440b50c89a8bb293c97057cb9d8724cef338665ece9cebcb0862807287a873eb9a6505e25cc50de68a13769e3effce30e9493d7e5bd51e26267b3366ecf3c007cf987c95db3d08d0d0f9423439ddc997fcf072f11a93a310efb9841b1dc790ce0ef10e83fef7c2cd7e86c706bc6c1659451e0266bba44d750c1646f99db94780b8192d3d17e6e3350e7a830c8ad59c3e7ddeba88530f79918fc73be768983ae219a39715c562405deffe3c9cbbdb50705bd454484e7e361da1d615681a2560484a3bea45404f6d8ccf136705ac322f2437e33b1f9fd7dd001a2423219b7af908094153402d0aa618759f868e6d7341480548aae7f77f5311108ee32cb82356187fdce4965764c1c854b80a7b205ee76655ee15e3cbb5dc2b69c2038e5df44d1ed72bcc75632d18c3f4673a8d515808ea566e288599e778e9ea3bdc940dabbf9de6238e889cafd49c298a79ee48ccff6651c6137f2e309f405e5bcd0f4a8b391510d3b58a80bd55328278b899f62779c9a99e9e1d9df1db664dfbfbc4c6bdb940d318d4c044be635b474625d33efa354b27cbe322730c8e716809d94e6bb5ab4b671290e2e4d65d8cfa149d362ebcbf55d14c6717b6c9f731ee86c957b95e51bb9dbbe6f42a767598988d5f9e69833d033cc7cfc1029e46fd158b5945a7920da550fcaf24da792daf77ec283c37a8b50ffa08f5a9b5db18c58162b5b30ad81276bd739084820b9c3182a768edfa4cf9506ded1cc41a3174cc0b710d628a272aa63b32798f225e0a00d5a566356324e54920cb65e08809c1241909ce3c156d43d3351c24ab86f37ec7d667e44919b464514c45fcc0a1d09930806eaa4a506ae787b7b64db3c79e69e087f90ae025c95805edf63acabcba444a2e97165ccbd918c4329610116688909d1ce8ed339453c453d72c829fd4cbc4758f24ba598eeaafbc65271e41166f42b5591eaefae48f65e13ea654efab38778fad98bbf545593916b2fd60886ca67ad12b2711445ca826952c60922f3852d8c61f43c5979252613ab80797bc1cf98e06127aa424678076c52abe234bb0f059a9f1a43f407dc9e4298755ee81671446fc1788b5c844a89f510b591b4c82571e64912e99b1e4b76688b4c42474d36c7f65931c691c5d21391a8d0ee4ecf65271e90b251e0183e259f19622c83bb99deb196367c33b45a381c700eb168bb8dfffead06529e101657ac9c237746b35b1e8848067946bd80d2c1514750de6a85ccbf1581e3ddd3c6510a4c43c30f7fd62b1a7c37c05fe82f28e00cc21314b5f3219f885ef0da497411311bc311b5f0e7ab657696a84664a44fd013316977a791f4efd0545d1b872069da0cb45ad4589172f38cb60e7daf061f1887a7c2a24a56f7a15dc219afb79fcf6f041a547c39aa3a93cc5d9cbba727ed37ea4ec8a9d5fab567c06f334ac1ad9a0e8de99e955b46bf6dde7a3cd31cf958c1aa28cd615874c090e4af33f2ca1e3fd5178592bb49afa813aefa77dc808b8df1805be5447559af130822a0f597607410f434f255962afabdb6c2f8309721ee037d7d94684fff880f37e4cc0e9bed340aeae9c79e01d9fa2edf18f0e5b7f0dbe1fb8f4eb2873f3e01492f15824ecc88cecb1c2fa007c07073e61dcab8e3a5803b3603aaf0a63ca7b293272c96585fc48258b4c679b183d52dddfe11e350bbffd48becc0ee6f6250ca7af28cc13753d0802f7222fa2a1025fce533360d2c4f806820ef2d074b2a3114a5c43d061cf60e66da3e46512bfada885130413df84c08cfb85ab974b300fc4650071cd970b6eab8261cfa5fe328e357e5f04012c669bb130d85b8be79048c5d574fd88f9f6e3c1e2d9718ac06a3d325912b4e8fbff52bedb2905c88de4b3c04cd9af42e6c4d5b109d5345340965d684550296864bfcf20dbd34646f6447a5eb5d72ed2ade835bb0eff74ca8ab5c6e20d563805c870b5dad7952bb6734e92f6423a0d1a6d29b9d07e95ac46c5eaf9245aeb5311d8853e5acba6b9729434c1640a6e811bf502201c159173a46c1bfb6d014971c8c8a6015032100e85f66781aa7ad93ac99d13e156d469d11774952fa06009705207e8a6121deb266af9449c470318f4cf0575aad5a6a22a4aa2844a912d181910f64f68a663f7afc95445ec0f5f7cd1ab61a92e2d7a74141694fc64270b6dadd80e44ba951960d155706ba8175cd073bc7b46fa7dd4bf71593971d16930f43a7757dc98becc15b8ccd446a58b59c9a9f1b0817d1267703a85e436deecc068f8811657c52a3581455687795c342150c2b5cef88d59efeadd49c6da69da5fa09993ae8990c1b703817e0fd1d6f1a36ea1bdd5b07f9b2b926d304173b7a42c60eabe9ad2fb4e31d1fbe438f785d72e3cfde97fe243ec81bd1c16a380a4a52faf0a1a78ddabb5eab06730dfb11ad1ea3eed18741d2a6f3964481a3d5feb7a53fa1e76547d0b7e688403bdf40b73ddbb52faf12faab993a0d1380677c13f5945cc3ed0bee318b44758dbb50525a8f2d2f47352154470ee5248a5c01300623beb803b381e5575ae2cb35e00ee14faf24877b3e8e221ab8f13b7e27438ec2c9449f63632d4d4eb0f438badbf233fbab0a4c88601e5896e8edfefe4c44f1d4ff86a078e4e2f99039ce0f9471f3ef6d1ce27f2172e147c2ccea00229e01ff07ee0c64256d4b6420dfbf4794da82f9cb81de6d4c5011e1a43f36bf80061ff4ff55de7de0c11e1f7757c5d7f72647eb8357d2b53b26837ef2aaab0cc1292ccc2a27b4c4cea7818f4e7f2421f40b7cab6970eaa0ac3ba71d7803bdd06ed9a3d123d49bf0d872fa57425958bc03745896d96e401c00afc05baba8b3ae807419d0f72d21594df78b722c840c658cdbb0b5473da0590eaac7e9404abcb297cfaed1637b1250ef585282327fd592eac0768a9ebe8f5f37929fe9de43fc6007cabadc10fcf32288782a86936e6935d8e441a2738b26679969fe473db14fe411403be46101e96d117a7a6c19229803637953eebb58d030cb2dd8ead4737674e5d8c2a8b9947d6f2f2d7100d562cec187d584d2e4c42c6f8d5de98d916af4c174980e2e5b183a2b8474878cd183e410888a06301c1a9a97e6c3da2732132e423d432121bfb41737ced285d752ea11829feeb4c3d8f220cc7fe5c0bab74698b2264352ada194998962dba8b64f39ce7b94eff3cb58af7b10c95b0f0be24edccb1a9b98a3c4e170e99f9d6f33e236938c72b75a41abc0e25a78d41b7cce336a96b661cb5535c5d60f84db668af777461ceddb789afe735d867c08ba79379a3f88c93be415bad8a9f8800d172124b4bc2170e57366d672b97356107415754fb78ff26f14fdba9c1f6e5de32b20a559a811b55adbc3db8609e732066bca91d48b6dfbd0ddfd1739e0561d8328047b605a99c478af49f25db478dec2e287a090e523252e7ea9ea1e7c3f76b5f7aa998f89daf4196d70c203aa9701dc9efe4c9bf822b4586ed9aeb4110881bfcde9e6e2c06a08b17034a2c2272e435d5b318e31e55a2d50870405b87cb1bddff63c68e53c5d1e28acd4f02d7f8ad8694b216837b67a271abbf20805c1684d6ceb47b5753a0e5f233a753d72b3e82f3c6909661f29a738c5fa3139a3c31c17883cd955f68336f1555327d9fd06ebf2b3e5dd67b3357fd3a10a4de2ff5c0ec156290530386ba2bb23703995d71c44ab65116fa63e98d7c33819d4a50bcf4c69802a1d5a9f2b6277d7d55ac6d120357f21b3007c45459b200d004d7455d4969c289b76c3248be658565da79c77fba7d852a96649da602df8b748e8708651a555d8d103c4a342b0af4145bd91b297e618373cb408a6328946aede82309886c76dfa806e1e4f30b54fa15b31d4d329044a97942a8b93aa74048baa5c6e826b18e541a7f90b063cff5f07ee71c0c24a9c64c0da173bd5db92fd97d85a7b95af9160bc4ff7b6916b1756ad91c1eae5873f69f447a852372c683ea467c9f0a80f1b8195abd10a30cf4bec0b4ace535a4094821cdae8b25182064aee6a911c055f7824a6e1b8a5d1a4ffd1ca32b3c20c9bb9b80710e8c61d3e43428d8446de7ca0b805691ab36afb25c4767cfa81515229b608b1e170a9499696e6f7a0ed27774e453a69889634f496b0cee8857ce09cb48c03cfeecd80e09a07159f4f729af08aca910783ecbddc4ce56471fe08663421f02afc80ed0d95cb22ec6434bbcb4c68e3f23dccb1d90792563eaad497339f8390223fefbbb1ecbf177c3df6eb37991a8760d7d4e5dfd2ced643892ad370fb0333da4909a64424d74a167212ab9070143bf6ded13e001567958ba9d5628376bb5798c11ba2fbf684453ba9f52b1ae4a7afc940c7f44bb822184e58adb6709b34159642b1b53f4c08c28ace02f4d5ada971ca396206e1892760420f04c61c5cd860d3e1e4ce2ee2ac95804f24c49813ca1e8104e1c69c8a51b566380d2ea638717fe9c2c4000e45f397015ccf435ffe2019dbd794f30965b8c1481fa74efac432706b5ba856fb2b9ef35cc7387d37042652f19b49b8c87fc99bc120f0c7a17918938766f3678acd943f891febfc6c7aa64f80a2a548b79e7c999c538f9a52f5aac37514872a8599b5a63d58ea78a11d65f7148d11c800593153add040fe4433387c3d84c8d481fde2b44d221126d24abe5c3cc89717a36c3f384ee324683991e998c13c1fcbf8a77290aae7c25dd9e08d405e9b0b44d314e7face18f569896a9aae9cad5041a11e1c21e9a7805f964cda532ffe7ad380b06e96b61440b4052bbe42d756e0dccedb56abf4c711c26cc3ad75f35cadf497c2c012601cb0799dd03727149b85ee40a1bb54f9f908390b650434509ce7957724bbec44cfb97685e14621ab5c1184f82cfe8334d05a198d33d8f99aeea2d399feb41e50a68926d42dc48980136b98051964a209188ec3d5feb0aaca66cf972f83d3e498db298d4589754750b96b694e01cc17a9ad93f76026bf8ed09c0f5d040ff7508e1a05e6f1520b935190305d3afde65c5369ae6ffcaf7f5ffcf279a3849276a399dd91ce693f87ff6cd35114962c7b4effa11de5c35413c4fdee3ea633f7aef5438903eed77f574192d83a03b9a40f6683ed6d47649d7f05cfb089f6b7f2df886e6990c6e0e8e5c43cb5dfb38ac58466024d520a340dfd182ace86ae9adc482ba876c3ee11b124c5ea1e1533c513cb09d0c33d7a7e5d602d3f7705281e3ede8811b01bc522436c2105feb9f9176bc49b3fe7a92146a93de6f4174ef6c38489e2aea41d1c0aa0e6309d1c58c9286e16a5cc16dbc2226eb3f0ac9904a32f9a75669c5bef06d061603a27f8f727dcb86652a480fc480f0b90a2dc903823df1e3359265ace758fcc6e803b9a72a01cd8ff2a7c9c1ce6392ad1b8dd5e9ad8b25ae63abf3f84bb4f34d1e4ff5478df7c70eab11f42762c9af34e38f584ef852554f887fcc93d6d499f054cedb6c6c82e0b4166b1ef3df2bc6b3ba0e903eabb8f028f13fa0d8fbfdc0bb08b98e6b4cebb446fc36b68cb5c0d4639fd8cceed41acb5aed376e1df34c861baf5fb0ce43f398f2cb0ce9b861af5f15940f6ab3a52c2fb8f1bc32a6510cb31e945f3e25a8404babbc066f70036ae23ef4634b05020f63e695c19338118ebbe3656cc6ae46a880762d8dd51c7f7248cdd516411bee90cc8b9dfe9c1432956efd69cde4c7030a7acc02ff9203849555790e413074c3185cecfcc466265eefbc389b32f252755d6c02a829c3954c70337de61a977266cda6dcc8508e085f8e24ff8a67952c6e962b077e9555f3bb88fcbf490e6f92580884db9510db78d85ae36c2a0b0af735750a86af5ce2979e5d24eacd377aafee788df6ead47ac55ceebb958db62e211e67ffccfa8a91634398859ee72b8c9d8052dbaa538c7a93f9ab1a4ccb37082e48c7ccad6a5189d93a66dce9e36c056da7c2312df0df14f43779ea53ee743c0a6927d9f8db81fc10c7c5e0979b7f1e3673ae1c9e5f2235d82f8eb48a31eb3d30123fa008b360b6fdaf737b353e7656056f655ba0dfc0a94de395de80639d831833743f70b12bd6daf811cff172fd81c7e99018484710f08133a91c2992d58d60733a4bf28cde0cdd47682fd75b5354474640fb239a9a8fde14f57b2be7b4298dde86f449db038699cc6df697d97f87e1eef2849fdaee8722b5e0d9b9b39218721655af9a6385c823c8fa3eded4bb2aa1e389fe1e106909ea1cc3954730e672d7a34405ee524460d5e1465d24065837032e662e46a709f5c8ecad6789e1dcd5688a5229b498f56629696476c706d743a5198a45ce87566d6776b40cf03acea463dbc0a2140f6366283619abd51ce327b5740286f15ac2e68c845d18d62f233325a260a48680f133ff9cc4837d4067895c17d68f128bd4a3e3f1d63cf816a1804bafbdd5a9ac79fcbfe9f28b3ba3cce4ab3d7c78ea4d108d1f8374969bc979651df554b9f1d612e2be3da51717362f97fbd89f4bf88d2ac78507012f1a7de35a8dfe4d87c3744dcb71864f7f019116396065476d4c2a967a7891a2dd3ed6f2c7abf2148bf7b1c864bb28fc5ab9d88ceacf28bf210af03dee6bd1feb92fd5dd804198ddab796aff166050e3e49ce2357d94d352553a7f6430c87974204c9edaafed9de46e1bbd432c530b7eabac1c81e171a77bd74d947ebd627ad8aee0240470805ec75726780e5e1a32f5ab654c9447023b30e39600b4884fa6d4c420ccb859ea70e256509739f9748a3808e27f0893b510c05581f0cad4ef35c8a655cb188699f26872e3f6215f367a7df2aa466fc7634a99e28cba3e158d637917d39bb0f866629cca5bdb74e17526ec181fa12ced4ab48d4dbf08b2e48d60e986e8951edaf5cb203814cc2d432272f6e6be4ec63ac33dfcd8d0647b2795c7f07279c72655ec5b1ba976349a7513b71a3472079fce7523e4c624217c07ab7a2159b83a1d03d109192664accc5bcd1a40a9e324c6ae4acc6c7686422dc8f784a12f463fff0245050544f4815307b25201826cd1dfa8719dc716dc2a43ff3fbf2b9e2fdc7e49985f309c1d83ed7f289744cdf003769119fcd212988c29ef6df5e807f59b85a653fb6a6b20bc2fd74512067dd74c10c0f29ccd1cdd6c49a71d6d96ad6a89ed4101f85180c62a1a9ea08fd7214f5df63fe7cade46381213f44189815cca9ae18a50db4c812598d55aa2de3cc5117e59e6a00fa7793e9a487d2d332ba840ea76bcdd45282d17ac3d7655bf8727819c8749a56427aab4ca9525d0614edcde52395c0cfc86ae56e943b892aa8e599c8e4d84ff67c91a1b7de9abdc47644f0783daea10aa7dd235a0a35ad226ece1112de7b5b67f64fe5c6d40111cf9bf907fdc4d6f6d5b7c9194b74206d60de234b1645e3a5923f321e383e67b5297f552b31beb6f8e0e52c5782ddc63fcdef0cd11be62b6a353dc84e85001a4c0251454cc1cc1307075b7e512ef75b3a3104f121907fc94fca373019911ac29781b3fdfed5cf0681030a0061f05cebf0b75f515b302b76ada85921771a6be76f71cc92455f930904b1ffe8f246055b6f83e21d66f0e64470b8ad6d35cf8415a9a370669425123a11ab4cb3961b73f0be1b2a1f353c7122f65fa0ded5b6a60ea4665979ce066a05881915a3445ddad015906bd0409e871cc0f08e0a623a4c112697568e866e1b37a14495b3d008e0d4cf8d7fa7d48add3b63fd5a1f211badd2f776fd6f978ee2b7e6541ca77d74fed63fe759a010235c2e378391bff3aee2b81709473211fcb6693b3c264d897f44e7fe68b853c51a433d06e7dc0dd7930e5d1705a81ab10d8788abc683919e094583ec92f60e1c57fccb58042b6faf848872c074708c2a06cee1638ea78f47cc41b5e198a764ec1294c63181c884ffd37c55d5a9e465dc901c07f365c5ce602440fdc7292320407a66778079cbb2f2fcf053d6c7b89399da2954a63a4503f0af457772b4ab57e82bdd0d11daecd63296f0f27e2685a8d11d4df7cb60bb56f74a6f96a65f89a361a6256f20febc748b825c4f6e9f942d8ca4e6ea8080be0f25aa0b4931ef1d7b1db928e9b8e7be0256425ed38876d5d4bc1e9a654ea904fd13612a3fd9e56c91569a5137139f75ccd7506e23e654ea9e8dbec9df5fad6921afe076ec92ff2b16138d91e46472a074aa93a9c97b4b6f80c4197ebb53fa2cb6c6442305f2b3b78f73b8352f91c4431bc3d626316a8b457d54bd09a83f0b187a6b239ee57b3124c11f7b88f48339afff43488cedbc97b89bdcde675defe4a0f4835cba2796b62431912fc53c2e1980e1a3213d865bd8b00c52b519a01b94b1dde218d0d445f187e2f46325fbd8e8dfdbdf24fe87322836f7d0b202fa0514fed6411682c59b0c3eb0d9c6b27a127f144919820342d137c231ceb919f0608b95b816bcf93854ab420ac874ec584aa37200f8c68dd078ded1e50f0f968319bc63016f3503ac3d242b290677fe3e280ee533227c552d888ca0c9d9c69905b960a8cb6a0e6ec22ec8d0e7fb17548081744398374002f9fa7fff5ea27d59c52b22f74b3c96377789da0c6c271a306ceaf9c00ea31fe4c3e59ec63a21eb8d53ab9164876924ac972a6cceb36a937a152e3ac42671cb174c77cc86606e290515c9a74944527c067583fb911b0cd750ea1dd756f0218fa050f6fd08a90addcbc29bacf919183532f2b574e5886a9b590b1124e05e9dce0409c846ca3ffb8f4ad9113f7e51d3dbea41bb8dff645d1a17d1570161938ee709b9fc98dee87d10b2a38f2baf039e47464df876bac7134102000fceab7a47777781ce90f9f7fccf5d6c389114c2d0dc788030d39f76086f077ec71a10bee1a56873b8fe48adf440687b444a88499c111334b1a932621734e061cda571a361a22c12b9c025beb9cad02e986e2f6307e5d831fbceb0a05b4455a15c7659095460065db4f7290da3eb00d4ecb5a44abc7eb864f4dc47709131b5a6a1cb97ed754226b71a74be25519ccf88a8cbe7cbc3bf9f42fa713ab20a41e04ce110e606a2de1e2b8773342293d650d82dfe5aee29d8aba8fae00a06af306b74ae63ecb17a199fc2feb709abbc8925e9af04f126735623d70674dd04441f5f59671d98f057f76dd1ac3ba40afb6ddfe2829fa98a95d021f5e88703980631e520e664ad7e47ec99484a5ce467784c3c9b12b8c3d042913240c99dc58809d837e627b21c223cf666023c8c4f538a0dabb68677378a5cfa186907c14fbec793e35d94e071889c963f499419f601991aefaae7d9f84548f137d3864ec66e559a99708ae8abf19a218098731234572ff6ba432d17c8915db91fff62f6590da797913c016c96b121c00dc68d4fba986d2b3938e588a6d2daf23ea744dddf62d00ad82936c91f4cadfb7942fd45c407139db39cf660bd9cb4f3cd347da97812f35e14012cebdb9c8de1195af43efe90a8e7f2f7bca93487a85ae123b3315e6b56f1f134109db44e403f7e0db22590f539b3e47e2938ae2bd53605cb78b307ef64ea9a9c97e3884d9308d7a227f4e860a1f50ea3b997edc70bfe2ab26decf2ae4f952f12b5c96878d120b94ee24e5e01ef2c9c5d92667e33bb4a774f346b0a6d48d02f55afb58c4ca0b0b706cf83c95d2ed9ce3fb6a01f4233c5818f89de4dd908eef326beae8e3d81adb89e378a05df20b47dc3f0d860d2b1d4893c8bb528509886c912be3d8848aa8c4cbd10825804336d8051f84b660e3efb8351adee931dac778be2846eeead9e1475252540819846c5d3de7f689cab7911e253b51bea2fb3aa0c0a28b08555927c5e28c42296f4c2cb36043a4787128942ac5cbdfdcdabb1f12e4ce466100d6ce2c0c61fb0d12b0eadeb5289c46f0533334c54ca940352edabf9c68315ff90e1ff59bc451e35fec95b78c18020661abb9309ea4a18d95e783e8a7cb3d687a7744666320e65357f3fb0778f87f0ff8578d7a8e5277ad4398eb291bf4c275f5c94784c6503df034dd7344671d7183534a745d97457c355d1022a6002fd537de9e06cc8c24132d9f9681ea400d2cc341ecd5ea4d56a98ba2f9c5abc954144572a742d75c104f1c3eb55153bcdc781c445bbaab4aea0fbcf16f18792b237f30e1f33abaebb057a14cc46ad10977ff76e29b7bea334c4ba4ea59c94b254cc3661cbe05841acaf9fdf2793e2d3ec47ee5b641d5dd9056f3c788fbc482e6d6ed70b8aed1c66f6cec9df792cd11715cdf087e5d4b0c9d561a91a518b5d329abe1496fa5d6c4f419e1389b36f9fde276f2fe0981caacd5059116d35b84b90074d4b72d7913319c8e9fce2626b38a024426e4261aad96fa1397a1f421da27c8eae28d3517ec1f32528c2c33d5fa8f2ff482d6db6bf7adb9f2bbbb4384e7e635246af584b39646677a9aa0dfb207abff16ee3f26f979e4d58cb9c2b3132050494a0b8c06ef693a1514727d1841d6965b12646090895276786323ee6c4e4bf903a9d93b896596c07130ab16b676dc9ed1257435c036c384df524fefd75b357e915e2cbd9b8cd5b5c1583f2db03a8e542a7e0d89c00c6bfbc791bab3d95518b7ee0ddac16a0abf6eecc1cc8eef2b40480855dbe0cc82c20511c39ee99c0b86ed6ec67e6271b1d1a9f9eeaaf0c551442342444a75f5edc022eeb1d2ec356ffd75d58186144eac63ad198dd0f3ecb7c63c2a57b1a00379c1526be87b152ab383f005969b951005b39f60c3aa280da542f152e4845cc2c545b17b40d29eac93eb6804d9db02b003d02f92527687d6eebbdad9ecbdc75d7e793c0f9b5a972fba1966d9238c5fc5491891a028a0160c71e00ff3ccbd08301da0c752e31ed7f0c8f041e06033b941b1b08de838a84f7276d9fe6ec0868db30e125ec0975e7f5da950bae1403da8ca09faddc4c6ebf80ca4f5b8cb170d81999fe939985557f8f22808b7b678639858497e62cc6fd8e063c844b0f24deb7db27fe4a98dc06c6d6e4d8c09e76b510bdad81088cb9cbc8fc2e9ab0c70db43b6346f73c440b69b5100b401869fe1495c41dd34d6a8ed0761901a3e8da2117cfd9bdb9936d27050fc835edfeaeb3b1b69e336bbec70b27f7429f66a5679866c2be836db88a68a26f297e53ba38a112e932357159e3e771bea4a45f8fa51adb00d98ea45d9714285fde3882d8653e21a55332415975dbd1e01923e83a051186d1a4543816b636c3321270d97ff39a9e58c75adb9056732e5d4c8c444e91b0027fe7ce158bfcf9f39dcc2ecbeca1428c867502418080662261b9a694ebe3d1b377a98129410e00609862fdc55a2182ac39a26a224cb7a2379f01743da42715194292a4c4b7f6793c60b83152d5e723dbc8b67b0b39bee12e4cef7ecb1ce24c9c77158436f150288306e3c4893aa47b5ff9ca1d5961f457be46b4ba2f801223e00f78dd8a92bac865cdbc9477d3e2d95fdc52a0b9b27f3def49c801ebe00f3f63edea25eb2771388b621afe86d070cf5d5a3d86b19269d130b9f950f67b64246ed16649e322dd5cba61ce76e9bdbe2701d172b603680f3ea8beda3f14ee668797b3c7460b1aad4301c5a480de4a8229e0549908e9b1af2bee449f1e8f0b8c085c14f6ea2852091695c9067b9acada03dee3c477d27072f1cbff2ac13c24fd867c47a9ae014226f3a7a7ad0726593d59865e1e025c8787232656a4e37a5c0d71a3090984a7f49e1edcaca1af27b18f84fc278a2af803ff1fb4ffd15e5ca781f820a3dd6350b0ad6cbfec260e462c47364e41a66bd457aab62a74d9c24e2bd3b859253ed10aa0d695bf965ec6d0e89c18f5692f17b3d791a57c6922c78e243ba6753e6455cddbe897f5d2e5a2b2369a41c4695e75d32e2318153904d2957a5935dce261a80004c8395dd67fd916077abb245b51cc1736ea0e69c0a175236e745bff7753e7c5600570d13c946bc26db3e5c18495ee45ba28781b2f969c72f54467805aba38a764a965f273050ea3ec1b511eae8057139b7e32e0917c0b98163531dd889063d5813300bb10f96a91851cdc1243b6591d54d430725eaf787dd9f4a7fb99d11133e3f95bfb58d8dde5e8e2423f4ca380d30fe1ed1dc5b55adc13b156ff6de3da0a331981544a40d384b81434bf6cb26755b5baa2ffd731c63757721b17d61b1de2d02464829926d3b173a4d3ba6c1bcf5b9b0efb09e2e517c45fc86eaa3ae21f2e1b26aa840d27c4a9603d3cdef8e956f759537e83d456e4eac37749aa0802178458662cc4b1d3749cb8fbefc532a7b3fb89dbfb838e45a13e6c2a2046e2a9799cccbaadcf2805f3df56d09eb9e345ccd7f10d0c0c6169195e71bf667e0ec527b5a57f781242d592952a72df4d97505255e386ec388a6b94e77386d3b8d7200482543de45d09204fce9c2c3df8d27dec3a0b110228cd9cdcb0cb2b762417a6972655cbf2ae00cf3f8dd14af37ee93ddf3f055d37c3de114da59e0e9feb9d0c9f88c905a4e8368b30a3586d3afbda6698bdd77b1660a829738e6f1058d2873e62463c3d04731da6ce6b2a29a75c6817e7500ba83dfe3ccddf94f23d5b0268d61c87a632fd2f5627ae098750e29efb087100368323899aaaf102fbe5c51d54266616eb1ea9ffc86c415256fcb27ed82dab94d6c389925c8cac9ed3fb624baa469552f87576c590bf254a3b461460cd1857baa81b785f995f2dd8e34bf5e679896866ec559d618a3d597db67fe169ecaaf1cccc6e6b9325805c4ed8806b05673926699b6dc3c1d28893be7563689643100e53a04bedb51c1ea88e3c11625a8cb2940f0060b6b83d3142cc62f710597e645aa8cf7ad126e3551dbb53171fe7ab2ae06405b91679f678a683c28dc66338077fd837daa12efda1bcef56511bab4c012cd44eda0ab18c12a86de48a30d3d1742d4bd76279b3571aa1a2aedeef619054c91c9ae11df3e2a64b70b45a3b41534bc412144c1b263e05355c2242b8a1ea7ab95bbaceea6084f156b79d0e1589b9b49793e08c45f053a79462ce678ae504eb90125a4d7ab474f6d90e21966df4f6ea30947ef67e46cea27d9f3a403eb581a45a6caae7f6093951cfc9b8852488bd223c14328a470079939953b98247645d160c7caa94272c2f43fb4fbc4c7cb83e159aaae28f45bd49c4986766abcd531bb260b41b1a3508cf83cb33394ac4d2b05be67bdde4873fe81d6a59ff79367c3d9e6b340d2f50344c5d2fafece626535deaea0b5175e7306117b518db99f4876b6009a585a8a5b2bd1db4fa82c23f5c45e062843936091ae10f2f6dcad99d1b168ee054bbe0bb28c2b9d6f8ad0adf38ba2cb5860b8769fa6abca8e53ea6af907d607828b56f11aa3e95bf287c595665acabcc6df2046cce4d7bd2fc7b3d8d2130523205573617081bc0a09336a34e35808a474bd4307d077edb434344be20baddb8587d4ebd19cd9bba60d0cc9c380d1c2f764eca324a9b6a43fd5c4815dbd32919f09f0a0eeb74b19fd5c7956da744244ca72a8552c32ba06a3534f565008e05abfaca86d6d1f8110473689bf50b78e5a370d78e1d238fd2861b7b2fc3c4ebcf255c0c18f0474eaa75dcb6a48842affd68f0aa443a5990b6c4f9c267935ef19551350731f2b92a90f646a60f36b761bbfe8e1405b66d6ebd23dd18282e6308e191ca9caa08d858bebe219a196ca790ccad72abc97ff1f6f0e35e492e85524d4f3f464f2a6a2313fb4449b90ba88d8f3daaea21a67bcaec3588232b9d9abfa9cbf6a54c5de3223f2ddebc2c3efde99a861b8303d6d81099679bd42c7c63e978db3635e08eb66b93b6b5be4ebc9ed95a1b126519852353a92ac054701547b4ee9cb8df7bbb50e76d050830c6de9d85bf485ade2d6fe35aad96115723e3291d1ac0ffa6dd269c2928c603f7ff6fc0d47aea77e43618130d6d0559d0d56d8d7c712c399fa4fcdc6d0415c6af92ade45b2832576c430a3c6947dd90957bd48b442a450f3cffcf970b8c75760b76cf3389132fbba2709e4add3bec4d9d2e59647b67f492705f94e3c0195036363d54fd63d8c2ce3143e574b951d49fe2293074987334c7d914aec75358bc36fc45a175bf1599976847eaf3ccbecc89129414274604d9238eec61164da6b1fe5cd872843e410ab2d2767a8edcde63fdda5fcaf2fd7573baf176cffc1a61cbd3d11949c249ee4af36491b3bd2c4122241683d24d667f0d166196a80faf3374977ec167fdc6ab48e9e240daea012470d1bd38b3f942cf4e0413b118040a5b3169aac64a3b27fd43dd659922962ff0236b6bff88f9b7e0025fd4fd997e5feef4366f5ec466a3c4bfc2c0a0a2100413bb2fb24afc657bc2b6b8745a085fa39501e4461f432117e1460b3e5e334ffbfb3653ff5ff4d62fa807c4afeb8a3ea2d938aeb1643b77ed03fcb98883c6d9548f03f707b902ab2cf799e849ec0e2c898a554435b240c268c23e01ced7d4b09f7c5d8b089a3aa68061b59c3c34cde9a24cc972a245bcb7a0641019afd31e71d3be19b6c4d506d6b0ba3047d7f73f1c1299a2e89351bbe0f5a5d284c7f0a811f9ae59dfc270948ca4ac1c3cbf547ecc29678750fc21cccffdfb1142d60307690707dba3dbe96bcd8dbdb61e7a4c45289b613e24fd7e55067c29d37f30cca2230454db5f91bbf4ffc8177361b4edfbf8250edc8d0783897f191f07cdf4e971ec87964cbade6a184b4c09c214cc70773f4065904374b15a38eb6727f16408fbb3d2cc475ad29c87094b0304f84520dc18211f6d0ee02b3635f6b80370076ee921a0bc8991e989efb399dcf4149fad99f373d401ab7c1c557887bd3adf6f9600e6eaf37b469443fc268cf6cfa0a0c42cc628b88bad8847ebdd8b0c8a3b52a5b04e5c0e56b3c11a7365c8dc37ea09f846d1619c52929b6a5c17acebed65eaaae0e1f3fbcb1590bb4708a477f20044fe89d6db7f578df4da9ae96a439b27ee69d8d230201fb478a866aecd9a5b4d70b9d6787498fa7f514921bf2d01385cdc976942a0ada53ca189ed852a5574386f7f2d8470af9d6a9e4f1142f925d2a1bb1b4d7f4d3b130f02573666cc2091ce4e808e48f13c3fa9c2f0aaf5dc4cd6e26e27cec138e44f129e2a7e0d3846deab3216dda3f627c29eef5466c774292ceb52c80628c326a73dbfa85b603fbf84cbd4dfecb0e50bdfc6dfbee73ca897b43fad35f14a3affcc19f823bd7202ea00b4e82b4ea97e56dfe0ef70ae8c885c496d0911c13330f6693ad57d833904da84cbdabb896828e085e8bc468e9782159642c5d3331f1ff739a620abf09ab128a3ce468d2b8cba3b2dbb25378f97c6a43bb18bcce0e3abb50341b2d15ccb7a944b1c248c7dcaf383a20f8980b57807cbd1986d66bddee2c917ddf62db8c17f336a1de4c7545a758eb4c23c62a55dff5660d0c0c9598fd6a83a8a732b898b0b04a08536d41801c9f92df7ecf2288f47244663c18b3d4c6e69831d38ce51f62c43b936cbab77d76b445dabf758c73e73c89e4e4f7adcfd7f2ec9314d0763cd4439ca1ab9f2937e5d26ded887ddc13e37e78feaa365c147492a7fbb8f9baf5b3dea1da3a1055d1e2414d3a3f9bdf05240aac084aadc99c51a0b60923a959d213f987df92e59e7deec808db7ce5ad2c082e80dde8e1cb0ee4bddd4feaee8b2e8f7ce6f710ed1d7bbb6034fbe1251354ba1454db8f50c629779b49723dfdb529c10a4514afa1bc6eaaa80319fcf55a9cb9d76e148621aa5e80203e9e116723c189c72f0e040a94afe1581ff86915f2cf9cb69b9e3241069f3b663c20e675bad8d82182818a313c17fa73805dba56a23f1f41fa81a1dee063f1b02541e6cbc70317cfe1f516ad58e4eb4b04a2b3dbf37dcad47f4e47fcb527ccc51019e152647082722c8ecfff91d43369ebc7bb53154d8e39dddad77581bcbf20159ea3b3d009d95b74d0b1288f73acedc3a5e7e29a7e969a67188909d660faf133e3a418b06c884a788e0bb3ad097ca06644ec5ce7d6750f5fc0a8dc5e3de5825348e1035b609877640a7481fed78082e5b2d12e06dba151a4e892f1d122c13d8863cef4138e6c517aa7a75e34a56871295d132faa378f3331d1f9130205f29ad021bb2fbac0805c1466c2949b88da069ccaf1ba7a3f5e4edbf1405172ff80d0857475f8f93ca58edbe571576d377d4a71f72f0c3676e36ee82786ce82a9266fda32873d29dc6a8dab68894f1a226baa79f78cc5df195df62880e461b6ea23a231b53776e48b7fe9a2b086dec3dbab390f13ba5ab94e471272e23809fa076931a4e73f040de862a8eaf009483abbf54027341fbbdb282f3cc14a690511c8746120c824f13ab548fd425aedaa33826cfd029ca3ced7a38856d3b57f40f6415c89fcd4d11601904f9ca2cfb3805d3d8ae55eb9d086ed632668fcc0929cafd377c73bfd94401773a72167da3ea846c2ff0ff7808d7a86c21f7d64175025fed30642d0beea2ddf7f7d8952bc3adb3c778d66eeca05c0ff62733adf72759d73cdb311e303925310a2a3a806ef9b8887901db502bf9c1c2c95712f26ef5cba2521925480975d6f5283c2233619db0ed422cdb71ed8e1f46b04b2eb01b7c05a83203a140fba269dafbe607aacc9bedfe90985a10d192b1b314f34c4c442881be7bd5c27d60cb4aef019d96b4b622002b5d1246ca78d847df0dac30193e8c610c3247d9612e3ed5716bf7f777ef05cdc247912211f9e9fb7294a0fc15de261a86c8204957be242450386c91bbdfa23b12d1109808fc8f075f48ced9f4928c1244cd50eb6f75772665e3bd7e94d309c61091bf0e5cf596b38ae331659b04ad08e4b93030c01e202be5a97d1631b841dace4210c8743a2b859822a042be50bbf90d5616a2d86c66529d6e98f1401cff429e612904f07361a422734b4b13aea2c7e94e8eea648ba25bb382f7e17ccd927eeef339cb05d86799ed1a4b06606ac89f9735ff907e8dde4c6d248d1aa7ee333db939fc82d71d080b055f4c589972f6b87a1d1df5793a5718568fe464fe09ff7625be02eefb9d7de7eb4d9145e04630fa5707b4c67c3987f3d5d8688247dcf367d48d8b6220c234eaa1cd0bd830ffebde6fe6ba5a5e7405b3c98ffca8300a523a4d5a8a82603e3dc6a103f90e58c07cfbe537e06eb750455d38e918b8c10bf0d33d255a5cc3cb27bc8ce821134b5f04e31a36dd6b56d5b3be7d157e345db1242f3613b22fb05b96162f589c3224ffcd0ec2206fb284a043a68772b7fb43923b8dac06b2b98ccdc017770ce67b760c57cd291cc29562db123a24a24b2de67a2691032a7643ff8f1dda715f81ef4595b5216750571cd487fc97d7b918c7dd5a4e4dcfe2762aab5e77b24c9595940f3add464b6e05727781c9e78ff5681b48d2173cf2fd51ceeb925e006e0ba2428ae896e2d1ee03a86afc70eb4cb0fa573f2d4eb9054f4ea4402cd21be6a7fc5a3c5e5f508e738a79c4128b8ffb60b79ab2643243b53ea2dfda8f33dacee9629251fa5717395c7da014dcff7379e89838289a7666081ba54efac43c835cfea0feb43f311e99fe49de67f46027028a219747237169f71b713452df39395f67eef1be1e014f491371cd24866c769150ea01846ab878fce9ce52766a3d50f4477031179848404409b565dc06aac7bd8f64460f3b9cd504c2d1dc2ee8810ee0c20fa0d58516b9d18b64345ead750e156962f664ca02ea8935ca2be950dffdfab12959123d6641edf42ac233ce1080580b44a3f37b67894a66f9884abd8d551a59f7dbfb320de0865f3ff8d8c299f00d7f09c06dad7cd105809a7718299762ac4e17df92f05a461d3243014346e159cdba5f7521bbc36e0bdd791df7b7581d981bfa82ad0591e1a1807fb6626902cd25173d8fe18a2c2ce3f0e5ac271463553075f4bd0c6b88e3f799248edd9c495005a4899fb46cac5395172f57546cba11cabd6f0815e9dc1b5242b949e211015c7fdc62b81eec3fae33defe0e15978ed6dd4ef8a94e967f68b0c3e679b05d94d83eda2ee28ac68b272ac177ea126de1cd837a4d5268ac92d69e521bae619c5998b61dff59e13b327aa1b6d896caea6c560ebeda94b0ff53bae8a54b8eef8b80302909c11f2c0a6e3716b58bd181f310ba754f6048771133dc9b0b683df56879061afa42bf742e75999e5a4f0e87b1435dec71a961e1d5a9fcde40a257bcba83efac8a180903ad0d446d300489959ca594403fa4dfdee5be52a2a95c262335e6e72b97a6a46e57ef5e857ebf71e2d8f6113d24971e4bc3c809bce04c58a027882ff644693585c9f8c4eb82eb94a582b43d1fb1da826770a105860ccbeb905249b0fab44347edcb928bfdd5b84b9f9872859316d84ecafe1127478f53f9d2c1258265f621113d556f71633d3846fe2aed08a5bf95e2719d571d21af428a9e8bd3c9467d94f26cf2b0e7f16d4a0652acd63e082255a49980fc69b99fd3a6ac0b864218df05ee6c7371a33d7bb6366041c940e7de4140943da9539852584e9cfb8b70ffee9f9cfd46ebb3c20ecc2d864c0401b501b7f8792eda7508acab4e0b6c464cb495a9d86d114a7ec9fd198eae46933b286292d50ea7ccb25cee5c07406f7b804704c75dd86d5ca5e4b4a78714cd05c75a5abf604fc0e816268af8b394a58ec5869eeaa6a2ba8225ad90eb2bdaa9713202b4f791834f7b5e0810f7e55182a3bf1a12d4954202b097595ab7c26861088a449bc8331a0a65fb0047f57ba32a10343a3bcc9ff0204ebf4f1dc6d49f3e89e3e88ff7fa5943f40c1ad90ded64baaef000c6df71e8a5d6996d83a128ddc2d0e57b97ef7f3ac3f92d7c232197f14843e2120c04a6d3c5822b08d573e9a64d96b292559eebd5476fecab35af7c7a6617a30f759bc2705a3823b64b0e0ae4b6904ab282607511ccd56788ca4f3c00f9a3c56082cf56b5469d6be6985cce0de087bee0deabda2c99584fff2d339691b77a547cb6b790562ec6a7b97d49551cecba809bf31bbf0307cbd8e3bfe796a3dd3f682c048be48d0503438954f82e86343f10c963dcafaa8f14471c3cc5f5188500c71132b3bfe0e100bc366330c000583c24083c1752d60976120d9b5b7f4dac28cb56369b7dd15ca868488d4783723c5d308f9480e02dfe81e23601572ec3a3f22f4348d94481176ac34f407406a9cd8d41b973375a6063b59c87b913caa72bf172df361a719403433f08a034267d43cdba5c40ab4bf0c2c6e9ad46a86049784b0013830b0a5f93f15af07748693a3097ed2f23c603a31957c9c0adf79d3a9d3e3a0bb9f5dabed39f2e36280d6338351871fb3027aacd92955dba7a453146fa0a63bfc9ad0de82c4fa922db3ad7b3d1056b57efe3eb949d909f0e9e6cf6eef700db8448ca6e286fe2b510c4987f83e0bf446ae482244bb9bfb314872f7ebbc6f4a0af5f13bf8f53840994b4141eb78d1aebbe48d2330f643931944f3617b1c1ac54db38d89adbf35d4a74d4abe7724f4d515f2017add586cf937203ca90f7dfe0a9a122ae2136021f45a2cae504b8629a5a1214cf9211706e4beaabb75291dcaac5a1164a90de77ca41b294b363dbb4fde8c0091ec7426326b1cbf1294583d494a693bd64069fb779d3e4044bbb85143af955f273ae2a85c2fed7f6b69677f45f9a139842099d430cadf89c6e039efaeb325b7f2f4750ba0eab3e97f842a598c76fededf48cbecbc296269afda6a183f4bfabdee20328041d0093dd04e61662c95c2604d91499bec64d401aa7819d932160af018f5a9af91521e112caa620f1e54c80e53f45c438f9fc52c024e07e9e3c0a9a6cd03e84f59b7a3b994b55b8404558df92b9788ec6700399bce9f6bc8e88031bc811778a77b6a0bf067cf517316ebfb9738d7b32472d54801ccd1dcbfc16c1427aa6781b25dfbc22d4e7b08f55636a4f6ecff6bc12fede5db179995c4aa1e0aeffdbfbd0e21dbfb859d887c1833e9795dc422e92dba2606f334b244bfb127d09ccc9635bc58920e58a37416a1cbb0880e0696b0f31186f581f136e36f3d8b48c27376a0cd829fa1a4aa779da01a157c01a07d44861414abfa0dd6b7319a1c560cc0e1f87cba1caef3e7e235010aa68c714e04ba7cab61c70d83d97177dc48d0929730f7d0447fc690b8a3575f5dc0530e44aa78432383c4912770fe4abc8a657b6a2356ca565950cd3c61c2b9d0536a0ea881daf8b71eb06554d6174edd99a11619cd2002bbf24e038f2b59e3fc029cc3918ee12bcfcd2d9f4006fd309fb47dde64a3a353f7153043cf64e88cc065b5a7cbc045d3b92f546b751da6e008443a30af2d58237a9fe1fdbd7331eab4081a1c5fe4120c51cedd5e09968d66324ef4044b9468c3e9fa88d266f326bf8385d900bfb03d0f9c8bab090e1d5a0f316629fc1dc345392f7ecd14b0148382b6de5cdf8c2f212e1fc8c070fbae9432c1b5bebfe0ca63f937682a3e271ed61b3eb605cf52edbab128be949c5d32703a59dffb1ec74c03075dba6ae0e0cced28f3cfd42bc0abf9ef26351c26a393c4b25d233074063366b6cc494906f56b883f799aae6bef553c598ec4d6439a19dbdfa0be9a415d1f1f552d2bf862740083e0fcb29185bdd16e4acddfbe6ab2d734d4ca0c5f93398e9bbe7ff7c2834ee48e25bb2ed5e36caaf12775332e2658d93113c18e95f83fb99132c809a6732a9c61cd84e1c6caf2df00b540e2452d863f5bbf453c45e5cd6d4756c18dfe40c1587b1a14a78fa7040fe43a9e6bf04e624e0e137b1dfb52600c1871d269454ee9cb2c11f000827d33668e3b2ae3e594001030cd6d1b467da1b95be249b922972206da68d247db36565ce8b0fce327b3fcc62477e378487ce511473b238e35eac99640184b5a8f0a990bce80a912975a07607536e21bff10a4a8f2f54108c962d52e9186dfccabe284ae33752cc26d0a5826881ceef37e83ec182c73db52b87234225b0c447f9f71a70d3fb96b1f4143f5cfb91890d9e980bc6079482414ccba82a141cfac7dcc93546b121175d46ca83ee21d4ab5de321b09a95ff45699824ca2eda2e117c3b389cd7978ba65c3eeb6b1d93cfd39aa28e4dc6c873fdb41737445cc2b987ebb3cd2c37d0207dad63ab65f3a6ee641932c67fc130534ab737ab0dee4e5619b15a0c8d6546e05438d816ee9621275e2e275e95be6784f9e75ff3d43e025edfe4954530a1418ad6c5cba6b618d8d29721fc6e1deac3e2ff694d9399c39af68979e21bfee5aadfb3fd7d0c689ae9df1495ecebdfcbf7959dea8af2885572017ba01d8f42430190c92f203fe7a55b833b70282b3f01c490c019adf1b2ddadbcc9766b67be9fa3257b8493b041e24ad674a0c5be49d0f8362cfbfbcc9d4c582bae1f59df27c8bd49bfb21f687271a6be14e7900e9d2b3cc7efa3ad5a6a7a233982d7afda542bed59f75303e54092f9bc943a98cb1601daeb427716242aaa13d051938b4c93a3e29c1a94af4708236459ea01a0b510ac11e92fd5e264c786d08c9d795a82dc34c60e125055c772bd9c474ce2c380ffbfc2fc34484ab174928873a720633a98f76117dc3d76a298e9da44c0df1157b4335fd7ad45f752bfa6691c406d303cd4df7df7e358a967f8d115053e2d66f307e7c08ede41d48eb36bacb478fbbf8c47eebe611bcba6aeff07370a1377f973f6f3706504daf4be384360025406198f1be1f70111ecb9f4d6ce431621d8247c790f348069f94114a6d78a713cfe20df4c4d3adf4ce72cb4b9868004f716f0d81912a307bcb78c2ff6702b7d0874af6907c67679d3bc6c35d86414000b17b6efe6a85c8c9cb821baf59834ef05fde6115ccc04b8b555a38a857e630b68888604586e4f56794109c2765f582ddb7ed29bc3b366ecd1fb2460f8350e6fb4243d9027ddeb99d3f2b77a41fe89ac464cfa9311c773ddfad16fc774530edc865a97f40c1c4a7f51d2e270730ec75b0a2fa4db7586b3075e48bfb8d12464da374b8c7b142c617c7ee017d704c2f9d197d28efc95e770dbc0df766604bfcfa8db8246562cf1fa26bdf983c09e970f4adface249ce333e4245bd35ec7fc8bd0206f1943c1c0704c3bdde3ea7811793fd6675d75c5f29ced9742486a4c4c6cc488cd494e299276c48674f7ecdef17d1a65e92999b35871e7505c81a72a17e3829f42d4c37385c411973125a9002c549848d83ce2d5f96f6562c37f2bff3a6580c4940aff86065ce386009112b622a6b84f3939922285207cf7eb905ca1e3f317241ceb67846d2cfc34e2ed1e8bdc4efa02833132207fabae92072f382539a2a8d47216cbed15b31862be46428caf4e2923a1232fea46488e402de8deb6faf50d57ef642a0f36c368d3bc9cabc12e84a9d92ae1a0ee896716b625eb193386c5fde20f0b585aaef1d0fca7480cba01b33c04fd60eb0812b746d24235a3232e52910a450c9e267dc39cb45737d745c66f2accf9b594026afa27a6932692e2155137a724773fb8f3ccca5791da430dea06cb3203cdf61dcd256204b21cb46c3b233ba313b8a405573d6b7ffc5e1b0a1389cf88ca7fe8b43c21b22428d491822e30d397ffb99a99dc04877fd6203c1750e1e2a45cfab2373bb5b4c75fda8e72352027d1fab97eb05d6fc82ffca278b574aa40d26a0746efd24e70cfa92684a44fbe9879875d70a8ab1fcd8b1d9effca783d786098c57213d0fc9e24612b045ca56219ffde15aea7022c2d2adf2c8744566d5a1afafc3db1818ec683a66418cc0fa8a243c5a8e1c118ec54cdd574e2870d3f1f2c631cc39dc666af6f6a3d2b8c7ef037ab80d29ff904231a41ab09fa63364521f3f3d3a0843553ceab5ce495750bf0307a9e51c87b9cbb3579fe0e0d1778f9491eb43fa3f7b27d90a515a4f74da9f3ae95391f6dd54f5e82e7453ff6571a3e97e484891432cb346e73978cb4d75c2388a4ccfc8f2e6cb587b56991920fd974370a8b1e94393d6bcc69e30aa7efc6b363d84d3689e3e87ab694fc9360474babe138da272d399c5613ff599e3219ccce33870e56dc3bb33c5e3a27fa5818f02830d8cbd11626c268fe29288b0cc86117b530d8f3aefa0712e6cb276f88f9243ffdd346e73d5c96bebc9306aca94ee987b5818fae85246cc9c1de367791a132343ccc3054cb1bf33e60f110e202152970ac1471a57dab93755d87b83bdb09f640c49f2f4be2444faab43a06fcaf9de1df3b975af2c497f71359f728186eba7bf2b6107232fa5708f2b1f866754e482d5cd5f6a65c34703ebd1883e248625e12616546467e6692a2d724fb5b7cf00963937a84d99811ae505ee9f12dc5db67ac6865afca5564ad34a5c218016606f4c933391dcd356109bdbf1c769564ad8b4aeb18bb693269cdd6fb26c1de09c120fab3008f51233e05fabfba5f2e27ab7b77ae80e216630c1397b55992411781704f985ac4e5513fdf58a5f6ec19e933d4c059e63286d2480512fb4c3f351314af8ed83957e75f77a2fba0ecb62dbc99a3b85643130a882b2fba95d6cea64e697a6401f1a2f589975f8c3059f715592a7e0d27dc7eeacad0db93c44e74c94750f62dc8676768b01622136947e3452556f7babcbe43e08ddc2cb1358bdbadfed3baa45c2f15e4226d64ff0f09caf8c640801dd23c7e43b2f238f223f3dbb29deaedc00ca733370e66d0ae82926b69ea670210e9d0d3f0ebf1839aa0fa25f87f665a722ef9cfcfead578bd1e383b47239ada42a3d438b94f047a6b09926b595cea425d03a98d980702162d7d546842c4c1ec216a5a75472dbc661e149768e97b51904ffc21609741438b178ab970dc3481d124e19585c3740699cc6e1a154836fcc6dbe44eac73c0a4c0a022bc7e2eaf9cd28ebe8f004ace20e74f5de15deb57e5864cf5cd56ab5770fb207715d122907990b4010383ea3e1b02d87361cad44166023b54feef9c77896b3ee495ae26fa95735e615db0705f525f049ca1b0c594f15bdd7c3f3aa78bee8bdf3a66284780e15d51e8b65b420306642fdf61c623f7d880b644ebeb64f1bbbfe6001ef48b64022d6c3767035e86685ecf374c9a861099c5b57570a27b18671b5804058d7616b81ab7b48ff1487d6cf05dcfa56c913ac6cd166cca3bb19443dea9532461c626b075feed11ea248eab3548321faa58dd658948581c6776bbc9a243b2e5a308f421660726877b2753a4eab3da4c8036d7677d9b4fa5b281af413b5d3f4c68333076793fcab12f6f3c2f0731bbd1f6715f51c141a5cc67d2b4a4b3ff8c81e4f2af9d43bee5885440f4676a07045817cb32d1a3980a8d38d151087a2eecc6854416cfa1c3565abed9c0e183d2bf61246b6f1c63e64af8104836f5f70b44757085b4fb474aaecc2f4876308a000908cd5792421212778ce11798d09409f0bda39fdb4fd657b2e4efb94a9112d922c93faf90d6a10e2f83e2359d70caefab92acb2886627b250e3e89dd97a51faf1a0c866ec09b6799615b6babd7d5fdcc03e97e0f795f62ba2e02888f52ea361ebae224e2ba129c8d164c60562fdaa59b9572856046b456f0763e4eb109b0418420b2cfab9c520d13dacc453f9efbc453f5fd2fc2545a0cedc3ccdc9b37753c481914a9c17a67187853258b86458bcfd4f01fbe2737f5fc0271fb97394329b4a9bc8add8566dcf48744aed46e3e3cd141b83577f6f2c429eb4f225ff651320a0d6fc6b91fc725831f0740bb9bee3a7dbfdbb853ba249653a471d79b8bf00ba75f3a05a38d4bb840e743ba566e4745fc4ae3d1dd70bab241d36274fef23232398d8506e60ceecac7c76540716b41fb190cb3c1202411ec8ad0b61a99256d09295fd801389c49ed2b928b02b3e0fb45a5d9b73cba77446d33a63c50feb1f0658e5ac67d67b24995a5e3086c47dcc15b94f5a1d7878fb834da43ba995730540da473097fbfec90f55c7c963ce8ccdebb0aca1b6b286ee75f248f9c3482cc5d0b595e8fd748de35af614464ecb8cec26e6df4c334df8d51dc96442c89fb7544bdd590779c8cc63e06f8ea49b4ac93ef6b5b3150cb834879971ccdc4affc6c8e8ec76f7d6c00697dfc4eeb86be2c63a717be4408a422a76e4a4f487397e309f4d2852b12cdb1e5e2f70f6f26dc6fd36280fa8694233a0df617ede876f22761556d1874b630e7065106644f4fb7c747f70126100a6606e3ea31e9a807ccb41c280736317a8236a7e170ceb26d145b4122faeabf7dff8ae94105875bc732ec744afe99cac14a98c25ca21fee2a66d5db4dc924deb58204591816b7c741ae1a05355c1df5af93796b5fb977cca66e0ff677d0b42423013e052d06f501fd084d4fe5c7ed607124f2f24172e140292a4cac8723862694252196dbade1ff9a33c205cdc6f3fca7827a361ea33b18d982bf41cfb7a57590c0f38a2dc2a5e471e2d7dff3ece0523d820abe363374a775864005a2bbb1ba3e373513a1f5cab95dca4315e437a0a148c60a033404228e173d7886485b54a69ee18d7110913e9827a61f1ca27088bce747c27713da3519c8a14d729e1db088245bd994f0874c76c6a7a88afec547280b04d4dd4a6e2c2000affd0e7098a1d617f9bd3895518513fb78ca95e351120c4cacbb46ae0dea43ee4d500de98745e728e2011220ec6002878db5181e891ae93db3c4b2c5f66585b7bf4c910d0921f251256020ae98d8bcf9674c981af10bf285e2b9af50f1fc6172579201b30d77baf87894ff6def602a72653bf8567880cede05e9454e87563f048b179db87f01ab1924d3bc7900865b2aed58095f1d83876616c58f855d5461c4aac7ea993aeeacbb1aae5360e916344e7792473c3f0cf493ba2e5d9128428139bcfb51918877f18770bb067d0cfb0d7a83e4f601fbd73ce6ff0b01d3fc3d0db8b7094248ad75f538c45eaaf3ee4ed9b1673fd14c471a451a7a79d5c91b1de268483728b2054bc5677098a65006b6282a33df88b25d2f0fc77ab8e4c9d7acf681ef7416861cf588f0f939365128e3d13b62b368bfe1b35f5c4540b0412fb266faa867814793aeb177fe5a1bf5d6c956113e53a761a2c41823dc665e2316d24306213492caae9cd6b0c9d891d4510878c07e01a0bfce79b4811a0b962041b7f3f838b6b94f188e2e21d563bcb22b9786e18149fb1fbe8b20801e64ebf0106c0738f4bd3b7bed523192513bc7fe952a86d24181476f3f53d4e5a12c3789187cae8663c658a418764f2d15866182231e58dc56ef38197764ea664b33fd844471e028ffd9801aa77c09db2b7593b8508ff1ac3d16bd05fb4ec1a2d4086a50d0bb94fb5c05d9a09957e33dd6176c8b7e38a016d1ea4f4511ddbd3505b0105ca00fe428dd15f74c97be9b708cd897b30e24d90ddcf8c2b72542d08ad490120627261cbbd754c2848e6cf911400e56f423aa431f54248c4d7b53764adc3c6c546b09aa0cc5821ec9387c53457c7493b0ed6460fbec2649eb776b435b00a28d79ee47b8f0ad50abb1d360c596f6876c234423a242eca7641fae09e6dbb1c1d67db9bbd38ff67f6562a81013428dc70868564172f6c018f2b60c4212e0fb183aa28246c8eecb8d90afa9beae5751ccffc1b0809137368e082654d5e028df6fbf22e5e14e4afcfaaacc5bef5f2934286fedbb598185842bf9c9f625fc6eadeb4057fbb7fa6121f7f228bddfc961ddc0412b3f5c75d7d53887893326825aaf5b82dc8203bc78c1cbf5db608c95bd8e22d7962dcd59c4909df5bb9b24b15dea4307f1fd8021189c57d15494b3ea45a00833632544f4d2de4ce9afb9fccafb164909cc9c7fb308c583cd9e8020c58a562cbddc83099d1eb993b40f4ac9aa131ac84a5b3769184b57dcc9d98213ad436a32be356af7cde8263b9e2055edaae26a3eff333ab33c8e3dc11fb7b3bf8b7897b19c491808ec5a59063c8e3eb4ec470557d1aa372c6d24293865ffbf187ce6313f1f8cccc7b8b493148de8d6715b7b71fc0b058058297415b9f97c8d79e519dd3fc3752dfe2d2adc332c4980343244fd5f02e8a5279d87afab5b04529ddfccefd7cfc1354a23af0e8c844139fad0b327ce35fd58a67b89dcc7f558950265db89d79d50182eb2e739a41b442216f94d3e20ec9dcb9fcdf80b0cca87305f1d11fef670e5c8c7cfdeed59ae93fecbdeb9696a15e1caf37e7d2895fb63a7cbf48818515a2a2b7522d9ad53f2ba6c033caa03a79cd64c23f3842edaa8c40e1c67562ca5bd5ea2e9532a2fa339f67bc208e4c1959fe280cfb4c0c57529be65c0e6a8b2674b3acf66b64a3b645ff89154e4e317353f6e2de3b5adc8bdb15fc88792858c87d690139994503ac0345de0460420b1465c09cbc75db5c085fb2fd8fb476db48d437a5bb60e442067202f8399545035a7dbfd7b1e2d70754f9166d49de9a5ab37c76fff2e6a3ff1c77163ddccd1a1da54cfb4c10cd13828eb1cb1b5d0e151dc91dd4cb4fc11fbc6ba6ea2cb35836e689a312d48568db38deb708b39c53fbefe2e1da0408a4788fabfa29e777e822e9c3e92e1a67b37069a95e0b56fbdd39ef319f19209da4190a23f3c507727bb0273965b191ed1b7b7e092ff908347bb5fd2d8360031d05a8b8a08bdff8a5c6a63c1363f2d75b40f0162f7d5b9b34231695b28d3b6648e18beb15ba6e4d0cd745727b71ac0f311d33ecbab9a86f0179988c96d4d6c4793d18fba71811277034868c72eb79f51295b0d888ea1d56bd3cdc006756824a4338699e32a5d76e2ec23324256a0d9916238035650395725afce2cd85a8271be8ccd4fd0099ca0cc6e193fee549639a406e9d6db38cad3481eaa28a856c98db9fbca35f651752250f9f0d5c1441ddb87b1e5f29d182cd43d64f8cdb9e1187abd4fdaafd04f6e0ed6744c1f699afe36871d74cef6bfe77abfd457689af7b77ddf6c05bce60f7e60c9da862a7d2f88801c067907711e871b6dc4a5ddf10a63771c17b7b2b79458470333aefc11b0149139b725fc59fc5da14edb476ab177cdc27c87600a94775b0cb92b9300c009f127d15dcce37377c24ceed9dd0956ffa80d3831774b169ecff502c77b3b7e7e964832dbb14d60d599204e0df8a1140f5a78dbe53af052547f0883da78cd1d90dd5d9be6eecbe89a93372832a3358882293e9ccfa0026060be28fc82c46ac7fa8cf869d2181a08b4ff7812f3272fe460c5a150a13bb36115a9b28fb4a9aec6436bd4632b22b909d474bd3dc74dfb21a8be0242a5513a4b9ad5087dc63e3f61d421b7d9b57070c39ec7e9d02284bd42604399141ab1e33f342a6234fdc90cf3532af46461753f8bffeeb31699a452d84f449eb92f8d0959dd20653218284e5379a60a1bc0ec4f1bb339757965a54df47baa4a96a9b8f38ced33b58b80fc9114d82e0d6e83883d178ac09fa0e4a9fba3df28da5d41bcd29176d986a01ea048737f3513fec29b66a847f600f198a21f22b20a85d8753728596d89bec6bf3c6e0a1c24257475fe8c6bddd996e67e00774506703ee9431a5ca5fa22db597648f4e79204cdce9139983002931bace4f0c50fadaffa4658022cfcb54813bd2812bf2b6a9729ddfe8c2bcf23d7a51b91ff93d972482a4547864374feaeb17f7f0ab2c6c3b1e5d8b6b87deb0e954704f3d2fe265ebd308902f547dc580d9ae71c7462481227f3932708d564091fedfd3687aa1e4c71f56b1db536c82e26b93988335db51eee55881500dca5622d972702fdc5e9da994e093eace95027bca721172246aec9032d86000d74ea4968806d95fd589bd0e45866cbfefe61facca84ff87540ce7e9fd06d14c48a7eba48873e4df0fa4797fdb01828c109628810e4bc1092adc416645589150bb3aa882bffe8622430de5269feadbfc27c5666189f4d8656fecfb266dc84050c8d9cc9132e94256c10f6aba290cc0aa9a80a67e86fdab3dcbc9b4e3751ea092b55fd1d9bafa019c4838be9e4fdba110f4373c166c8dadeb4b70d150ae1df69bb94ebde6a18ad4fe2df5977cc09fc37b477d1d63b23c5f2972fb2edb6eed930312f3b35a12d5ab853912f16cb30e128289ce9e7c0225d221eddc4b7d158a7cf34e50ac614a17e328d6f57bdc489fd67f6c3a450762038911b9035bf0890de56ef69621e91ce85a60815c543b03ed5d7fcd75c2511e0702354c77c5386e25e52d6efd0ca9f964605aa70720cf4af9674275a059773a7f5fbdf9a424f509bc9ef7935e3d154ee8cff71c560996337720ab9952314407edee52113155473af6ca0e18684c96e358d8386270e5e50c4ab35b95ec9258f24cc021bb141b046d5a3c46baeb4a18ef93e2a4871d6851e70341b1a8931c7b26e8a0a793ec0df5e0a2c2d9874753e77a2b89da2d344156b0651e771b581c5432e33cf14865c69f3c11070e174af892c011baf8dda6ce1434ab89e8efa03a479e7ee0c6ff39e77c5e444190980a3b2cb3bfbcf9c40c14e719efe3a35ad88a72a9880239b61fa1988cbac3e785fdef8854af819e317c37ba5e4620cceba13ad389996917fc26892bdc78772cf91f6408489d69f602cf2dfd4f99f4e0116923797b4f4fdeca8a7af6241cb6f11d73f96175af966702bdfe97cb14eaec6916adbdeb37bccfa1480a6bd0d51c3d2b2d2b021b083f805d61994da4808d1ff5b81d1b7f30f952c760cfc7cb67ec479844bb63f0315f0d4332a6b2563fe1e8e4a0a1b6a0b33a4da40a04cb25d1fe3a49ded401286a86feefaed363d51e611069007f1e9377fefbedfc24dfd541ee5df10ad27e9138fce0cca8ddcb43024c9b8d767c4f52d47ea51ef68f86da688b45a3672c3fed54bd7571c59237db5ad5ffb664c1aba4c8acf2e2bcccdc7498865abc9ee50561a1bc42e02c13f3f9f6e89de0485eb1307656e42547d30762e1e863ab859100cdc72f5e0d9a1654ff1a564b9bf68f483eb1fba1c1164792637fc81c27ab20893709a2647a7c81379ce54124b5d39d29196095dc955f6e648b4d65816265bc8da7afb54ee77f227c3472787c8ca679abdf40a2d687a5cbb6b38f7879b196ea83a23822b0b0cefa775bb7ee6789d1ae2a3ee2d0d9f5b66bc78e443a487864e01e94dbc1aea4498e4edf47a23bfbb76a9b8a7e3eb24242f4c7b931f3bd7fdad2314af5df883b887f5a6b1456923eebd4ef8720cde3e9fce455da20464f9dce324340c1cad843c4e1038265475290c38011cc504821b37c018b66635c71c3e1f24c0bfb4d155f17f8fb579d92c6e800575aad945c2d90b92c8fa69409f19882efc466953161a46a0d8ea586dd6fec592f5e27f5855247ceabfaa9de7132dff90240dd0c1e40274a92a9d0c6b05f21b323c5ca2928632afb27279e47daf39f9879f57483282e9d93e3528c54f56324a9a4add31d42f7225f8d2071de29187b247a809aa455a8150342abe071a67f0c1e2a1a2672880d02de2a0298a87ffdf45531079274d435f4d3039e8b7ad569d9aa6b7b0e2c4be4ce6a9392cc2d3c0ab46b746eb43afbbe746deb2e8d2985db9acae5e7517b205b7c12d2b7fff7be826dbae91e646656c6a10551e999d38c5d3e92ece5a6329846934c9b79db2aa4d0248cfcced65b051e455fe5263a727ea6dc29724dd0c9c9b43882542cf4a7269e5379f83f3356ec62992b0489dac77150760efc753a9e5cb8381aea31716fc808c8e5516f5e406c99d1781d4616ff1c510de09469a7c5ac452cfa930eaa3681ce422ad2d9aac3fad606c5a57eeae3f815fb784281301c36d093aa0e57621da62f361821468a8e08873d21a80b3722996e2fd72bc584de28e1304cc451ec5180dbc954999477f590fa2c5ce17c7332d9e65826011f4f02f345adf1a6da69c68aaadf656dc06220e13b8846cab8695ddf4b520b9498ea3f8164f257bd58c9b78c8b0422383e6a3f64f3d6e7eaf8d3942f22eeab3dc30fd6d6f37a60479d89092d595cbfc942e129c7e504a3fb0da1dd7b20914f9f6c402f430a82960825040f3212b70aaa3821dc059d1120de7c41369e5ae8f09e890d77bea5ba29edc72bb630efa7f082b26abb751cc418ad44fd227532eb1e7e445f9e5f77126c2c0bea9caf9d3d97695d80f831071d62da983b17c0ba67bae16a3addf740503e2db4190159f2dcde260964fad7071472269207d7aa54f6df07bfbefc8c2d3bc186d22d6614e0a9353e55527bfaad197db98a02e7dc77012ed39c1555941624f559c55a39f2e4ee024723faa6d0b9c538e149ff0d65e7628aaf695f18e87366f65c10ebdf2795db45c6bcb64092e869b0cc103f392ea820324044b085519dad9ee281f086d0a5dcd21ed54cc33dd55e6c6bbe3712746a0d9012107312ac8acf0dee541a8f96bbc91fe0fef246747d055094832e745a84f3d201dfc3b1506670b0047e8d815e94aa2f963da51e8273d8804eb4c436644b7087c6035c79b13315e2af16a6b115938978afa1ee988ca5c8ecffad0099b247c78ad307e941a04f9d7d38992cfeef1c662037dedab0bcd3aef029837d624cfe35f19c0004376aa33ea5387ac654291db9972ada1d56cea0ebacbcc87e4b030c2959c26c7388b08e511a666639e2d26a831945d8c7dc26b92de115f28c6f802e36f0d5fe011c6690c48c197cb979e2bc6970461923342815a8aa9e3a69074bfaae151889ebbdcd0a6037b76401c0d7983547ced9f918d959a85feac6f4a0b8d0e3b3f315ed31e1fe8c8b6fb5d6a55f2cd25c955a9afd07ef3b28585447c2aa392fa07046ad7285e4b2a373c88e95f82bd3b948645e6c6da50b8c17c070e95b78c728e31f3d2d7d96c8bd60ac2279789c7a70291b4fd56cb242ce338894444f6fd193a11141fffa3c0894da4663fe5468968142c8899ae9b2646995ddf73986bcd291359ddde9d6d1e4c10efe5af439abe9879f400c1d79226fb333441abe8a921fb0b6396a5cd8763e5316c70425498f5be06877c32ab679109ca1b7269f39bb410fca62a3cbe6f0e6db261e29706e4cf3eb669923daf9577486dcbfdb0aa4a55717374bc1fb2bb498a4da33499e15a2aea0b1e2751f7e0a61934e90234151681593e2881d7921afc9749266fa30304ef110006fba92b3d542cda5605a2ee9fc81425e904217efbae7d9ac4255091f23f0562848796adde71cd5044e33388eb0376bd5d8d717271260856a249cc8066c061eedf64eb71fe682de00014ad9846b4e598cb7755272a08d7eb0b76973e552e8ec6294923967d49c901b150a1bf9bd9a45f42ed3278a92790fb774de9c6bac0d6d238422309cfda3a83eda038efa325975b53f9e1a5b4c188a1280fb95ba94f0eefe0a1248dc5ed5d2f43ffa25057ab036ff6e4855bd3430745df1a7be92c8014b1971ca169fffd2e3de92b6688f0819d0418a4fd3262426257c28090dea3cdad3ed02834c4bd538dcf21c841bc599d0970976689f2c8629d68516ffd369a92210f37726832dd7f95ba08ff4a8337ae5b8207f367c626614361c9518af34f64b6276c5aaee359f261cd56eae67c334854141105ffcd484014afeba7b33571c549e99fe431cfefcd970c2b8d340a879298003758a55741ecf8d921b89a09a13e8030f0085d5a4c82e122e289aa7436a8d2b0d359cd69963a13fe398979cb97300251dd6c7d797992818d0775b3c209e2fa23a84da3d6d6218452c591a5c4ed7f7368713d9d849be1f40d2e0b0643ce7d5dccd6108dee818d84cfbeb1a304acf3449a2f30f0198af4b9ad9f8dc48d2cb33b4e71b612429a9e62998e43d5be366d125af6e0022cc9b706afa1ac982cd3945406c0214dde97d314cb23b44f225e066cdc943b54fe332c0ba026144bf182d6bf806b88106ec63e2c568f94e6e7f01983a82fc131763d7a6cc9fd3253c284ae6ab1feebfa9ef3ed498e88e87d2155a0ef05f658fb24ed239b891a51dffb39cbd2679d20036d40b051267294ab622bc87b5053b1ffb089f7d3b68fd020de249568e319e6bdde6974c13df284ecce1365a52bf04f113aae4b156a1f70977ce6529591674073d396fa5ff63eaedfb656bea57d34324d62475be0eba66a217553356c29334449a381f3344d340375c15189428cf8c06c0b08c2824b43111d4ffcadaacea3ed8dc1a256f347db7eff5a3888d09207a2ef53c3e1cc5b33389a784ca63dae1973608658dab6ec3cea1554eb3b8666f6c1cacad679daa0758571c62b3b361d9e2bad7dd51e191681fbb244422dfd031b93a0fc5d35d141185a17ff01cf8b245167a66ba2039f9805d3a62967a936abb6174b0950b26fae3aa2e93db72d8c10b497e539eefd6abb4ea614423c97523aa8677945c338729c930bcc34d5433732a4dd3e9474276296db000a6ddedd6fc3fca9537151bda348a763b3c1ff374cb252126d0683f5fea9570e18b867e24bb820830afeb647e7bdf5fa615d863b60d1b89ba7f8bcc8f5c5c77881b55d5961921470621a430799b4d672177cd5d56ac22a078d1bdfea3e0e2fce00e5b7d740acc75f14b20ce5c45cfe739be81675574b32e73030bc7542e8b1489544c16dc45d3bccf8de5e3f2b65d8dc8d37c4b7fc4019dfccbed07d5f02ac66df513bd335aff09586b4831478ac2e0e26ac15fcb4ccaa67d4b3c5ac62224f6d9ab2236f8b5522dd7b9025b7bfcb4044e7ee4dc5234aaa4069072f39355b1d14a6deaa9914d74208615e984322d04d0d16378a333c9e993cd34afb2a53a54c00bb3912a74328e2e82884111e46afd0fb0f96624c702b15a94ba6e277ed6c1adcd29680105cdd2d5f886a3fb1cb68a00193df4f95bdbd55b082dea88745f6858eee892a0f03618f02a2c6a5c7ae9237d75012d72c4c7458a16d30b53bc6da8ca46b6c1414f414bcefc964fa026b0a3298ac591213612b420ecc21d4ff63d45eb6286417b9d3a18e473297667f652fcdcacd22582ce13215f9b058e561f2bde5ff055dd8d7dad5d175c1d872b26001f2930c6cdd482a80d4c3409ef1733037911e3b998ba19c5672649d9ef816c8aed723b0c11a9f4052137efe13a34ab713a0aab9bad11ec89018e2c1a6223b0801111e32b30f304096d48868c90a41f381f377c8fef5f4df0935bc7e566558642d430beb84e31f31b1f486136704f27ea1f3d9bdaf2516c1e61006a05b90b00d943e3971279ac95a5caf047d6fe1d75407e58ac57fb4db2ebfc988f6820e1b2efa4c3707346ae567d69fc6f5dd949e588e3e7b9f559a09ccf8784b9bba7907db1fb0ed2b31132d58d20af33d0b0e2f0a8c121195cc8a47c9d0e584c6a04f9038e2d99dbaa39103fa16c64c280a55bf4d356451acf4913cc9354506a5044d62160b48602eb0dc58d8dcf9bb28716f93fbe553e7280a89a2e521bc37fc3bc1f1c23882dcbb2da9e38d4639e616a9969897742a7eecd27f545f5821c1b4b4bf66dc7ca508bf8b364c2790202dae9557d67dc40874279ceadeb30a36b06377e5ec379d09e1fedf057cfc079474eaedbf53810c220bc57fd29467a38bf8a59ff2a05f2200d7cbde1cdb8ac396300ef1a2db4e2adea768e0733c11056d99b1e3fad47f1bedbec6584b2cd59ff1c31cda821dac7a4f94b1fce2ecd3d752d01817e2b3972113bf2907abd64f62495a6966945fa2b86ef9588fb217013235c17f0cf1421b7616871f7fe569639beba3b3d37350742361dd22dffb1ab03de112aa55b2cf15721ed459147210456be5aa5ea0c75390b1d4de17204da34c5f23c62b12003525efa88567dd783c70d767570acdf84ab1024907472a9508d845a506cd3541a11a11737ac5b8b127653702b36507e3886a48e1f2455da56fec8b7453b77a447a03195419308f7ce4162ce8b03c6bc1561505d4578c7a8ceaf2e844f0c443566d59d950f548a0ec54b15726494d475bb3ba55f2f207538d8811d3ae68ef2c69ebf13fe2e460db1993805109f0abf5491990f5358a220221cc986956d811d63bae11173fcd69eb03a074e78028476b1875e35fc09526eb018cfc2ee68c4a137ec94734e942580d72459be4d14eb652ad27c1011aa56f3f991c7547156102c1dd0c7d1939adb3c8f97477044807d2b72d63958b867de7fd10b94eea8d7115bd750f5a1198accb6ceb75f57db349a06cb25b7540a3083dfb0cd632878ade91bd7155627e1c6c9648ccf1310e49b0dbaf6417fc86a2ab9d7f69167276c52c8b5bc33f6b21908c72a2295dda58484fb5b6c3ca23ee556ae8b25b60670f39173a68093c3a2a4079ed176a326dcfb7615f216e61012d46aa2eeda89fd6e8acc2e17eed35801170f123d02d1e322a29e74b43c231a29c248fdcf25186a2ab3e38f8b3ededb950fb7a1273e3f2a456d5599a8681b9f1217385da0de38645ec9bbe84a6d6a8e5e75d3fbe011806f36590db34aa840a62b30af0dca002b0419a2efdd7c53057719d71de3cb2bc952aa9df30a9d57585343491f3d304866bc96758feacfa4c3c0e08451c36a91bcd9b32bcf6ae835bd2694df2e05d56353ff4c51e33e22591ce15f2535e7afca3884a81a383dafc9e02e6eb3940545f67d7555cab5d104d9ba6daa5bc56568baf39ca4cf1a2c77933a56830111d07afd675cd5b615ea022fa2feaa1c6f613a3ea191524aa3fb4edeec46c11a8e007de5e44f3e0c4834a64d9d1fbc77a060bf6902219e12020c19488356343df3fa900e372d4eac32eaec5a7bda83566a3d165dd6ca76a75717e6ec091a0a435b53e5aa1c4c3189e8999c5ded9e94eecc4973dbc93a6c3c3d1120cfc7bf2307dc737f45f7b3e5ad1a9cb10e1a852d0d3a311ef579b161e634a378caa49f96071832713339666c077f9ba9cf7dde697733dbb249001f329baddddfd52e60e769a98ab7c533e9e12a2c72328654484d78d519a3babc22983707c7908da4f6a5e8620f3a9a29e41a48b288515dcd58c2fa2ba85909cfacfb4b1a644877ac3064a2c40aa08b2e08c98aae7875bfd986721d7779d438c8f07e53e7ae6c1f75e36d0417a03a3079f5757ec4f7bee6540ab7099e7290ac7a9b189abd4e5458f5e478eaf893915dc09754e6618e1fa00263dde10079a900332efa722b6cec759bd3ca9c224cc5d2361969fe17c3d82b163c65a0d0760dd4ae271f3e7b3c511d7e027c0c651920a9825b401b2f7b0496f93a6f54aeac418669f0955db4d1778a66fa1edd25359e6826098b2b9b438fa559975a6bc06ac54d709d62724abbe40a036b9065dea389284af8c26f69e05fc34f179188dd3641a0c54a20022e1776adfff9357f283a26c5fb4fbe33646dd12e0af82d2ac66af63b463ffc69da3dd0d4ce790bbd84ada5b6b75c242d06c765436fa881336d4da6a53d394c0ca3d6bf5b856fe1229ddb81f1066e0b598b4550fac4d9212ab97fd36f75d5ef6ccadc0688c8353a69864384484dc60f40aecfa6e221e9e7ba59fc9a5098287042eaef41a579c00102c69cd5f958faae811b76f81c75b69c3db55b3d782562ec6c6434381027234d9f0b533746e07f114b048129f5872545ac985ecd38d6a2eca24305559fcca632aacb7de5e5f9368fc6f4e0aa52c6b026b3b65edb52e58557656770bd3d933d961a652c130cd9cb3d01304f88476a3958f1948f3b9092145e0f612f5d6f178b9459898c7496df9ab2abfd9cb1723aea2787d5637a5643d2557f633b1c9215a14c3111443d855c4c9399d350230568f10016883fbd52483d682602afd95f5d97308f67afc129d124d5b0bf0a7ce2223e1778ebd88a90e33fea01fe08074e21eec19cdae3f1053be422204f5438f96bade1110d07ce678bf92a0ad37b322ea7b4b5c98b225c7f3074a45a07d981776cad25d604ed2e4f13cfbae38e341b010332073e7ede371b95f625b2e8c21ca6b59a1c105065babde3c582ae59fc07543c8d2fa1a2365e05dbe82ef90878758d1dcdba9b02de2ee3b4ef3ac8fb1efcf50c7c4391dd43d01986ca03dfebc8f2169ab011ac3fc750e03a661278ef1ae14c65257cdf4008306dc4554aa05e5edc04d36aeb2566dd3a65153d4cc8a53ec22b647d07e5578c7a88e185230cc45d1619ec29e58106528cc4ba8a1ca1a0b70e1300ae34055a624dbe89c78309f1977247619e8b7dc58bc65897e1d0db533212ce51c078b75ada154a556fbf2bea4569b8b40e3f4216c8e91363e161a15e8f520c166e81315513db24d6afde85ebcc24bc80ee6e1aa7abdda0e65a26f4d5450ba7a15d96180239738925f7f464f5ac690b9b3bb55382875efbcd8ab895f903610a5119458a97f6ef7f565095fa7f90574f72b1936cccf8096cda814960de31d7a5aaa50176670def0fa3bd7424e5688076a3742b9f2260d62e14a6e98534dd3b2a28919a95936f48235cda21d75d072aa6e086e3b813149c3aaa1f5743d574f1fe4262ef74352cba94a9d936f70f64b9fd31d296b45cde80e77639d487d22f73cc535e9c02c2a1a80b64e9e2aceb126fa9f95634a4f3b94e53b0ff35b67e88be3f040c1ce5bc9aa7c8c12da5e2ce45fd52549dc20b13a957bb77a5ec5a01157ed5e96ecd618b3279ccb08bbbb84ea59a36df5c1be3bb8c6d97c8122a540a3e243100dd5ec8b280a1fcea70240e9a9d99e71a2785306c2619825f8f9cc3461e930a1b4e15e4235cd0cc08b92828c348abbe150fb529f8c277a36d80d45c5966b99d8d9b5506bff855ae4341eb60264606696352d0ebec28a6901d7c05eab4eb8919cc42933aa6c7244fbd1843c19b7efcba7cccc1f40691555c8063f78a40990c23e86eab7d90dee0f61ba33822bf725a329aa6c1f742f1115b0aea89ae0f4bffc20e8421df012cab87dad0cacad879c84dfae492fe0322bbcd2509a5a5c95a866f557edd6d6616a1570ab898aababd97dbd51fc7dad41ea4a0920471d3f2c891c9d59aaa0d1bdc36115817d261440a96d38568f4fa3ed065db51f0a3811fa64c62173c139153814a63341172a5035c3be73fafe2cd8d4674fbd91797404106f3a245d341aceee906eb8574e97bf163a8c8bfcf9405035e7c136d430a51495b27d91e5b12f4098a374a162b8cf1330f2780f02ffe84e11dc01cfa43360731a6eb6179d6b75d443430ea82aa6d82a5a87bbe5196375a65657cecb05c2351db033db391d6333131dfdbfe7cd719c60a663966ecada425f7a45d75f66b1a91d46af1737f221fcb9005203ef9c841cab05b8d293ef525333ae8f0b1e3d73a9e3c208516bb753062f817f3caa5fe5d61599dee45555bfb52065ecc398155e88c10558e128e0585b5202d7f2b645aef0c3d1f69c4425b87fc1d4a2ec37dca2dc20ba1a96c856aa3ad59cd3dd1c6370d5d770eebbfb3825052e0cc4dd3090ef2029c704ca53e34b93540093060ab782c20cef4b7e4b10b748057215e4eaca27e038d726e4c2de0c0fd169fed8c20c226936bab99794d4bc9151b7dcbb09f49feea8df9c969f44fc10518c57c6d2370cd51263de8f5579fb80c23e167011d45c625527d8a57f131b5b3b4f7f92d21a243b58232f81084396052af4f768cafa98abc83884c76ed720152018eb133a4e73aa205a6a74488372c62d9f7e8429afe895e550fa59606c2e6769cc94d72d57f944c12c5c0b03dff761f7dc2332bec73558dac29ae114f3a9edbfaacb7857db67456c3565e10c76ca66133bfa8392fd477a2b0ab1dc99a73aaea73148742307d46a83ced0e64d1bcf0973a1c32e7d042985b6acccdf98dff7323b88f45bcf737946447d3a37f49a47e13680ab25291f5ab5f195f35496999290220b8749b1152e20590045ee483592bb4fa657cde4c96c77b87cf4a775ca3a59199377954799a90edc7218d22ddad19b305220f8a8f62ad8f24a75b4fd90576868df54f9a944938c5ff2924d0e8a5e4316eec3b4148c7586d3c5b7377dca594743f5482f509b422f75f409f15022c30abc94849b77a15c4cea0b6681decb61a9ef20a1c5738d5db19ba78b5fe4ec3d31cf8ddca14dd8cf130257eaf86dc6e77256fe4ac29414737a4c62ed7e13f34e3c9df2216110cc56c9640a3a02ef27b2ecf01615d9326e51f413d807b2e47dee1e07e5d0c19a41ba3f0bff77e4b58166bb28b70bf55a5a939c1e95ea7da47a3761496fb8699f1ca29fb91cf3c623688988bb68d01a4619123fa88fdaf38779f40f58137c83f607c772f8aa68605e027485c904b28d682acee5fe29b723adbf7f9d79861b201710741694674488dab0c615460e3c27bf57ba93f1fdea1d0981aae8dba3c3fa2728844c45d000d97a6337a1c6e8622504ce285421cddab01238305f3d0dea361e1d82a881fe80a95fd207c6fe5dd656aafdad38c8c20921d085216d3296f09e592e5e5284011324d060a29bf06b7ff2b3ed553a7b4c4556ec9b7a734c592c05363aa6f592e85d846495b9a864ba998c8941ef8881d3d5240d828c55f0e0cb6df964498311bec4ec8d9dd99f8405d9acac8b1315f1d54716a5452a39fc759f59263db260a55c63bcfa88ac5512bf7c7b72e72c3e7f02e26b6e0bcea1dcaffa17361e393b8ab567126f077877011d9c1819e38a0f9b87bd8b9b67ccee022ac8904952612c48bbbf5feff961fa1fabbbfec0765dd29b86f649e4ed6c44cf5ef7521584d4d3a93187428b20f425ab52fa60036b656637ca41fea45dc2b832b1f118c1b3fc365dacedf6abb65c4df3fdeadb2d16a72f7c4aedb3b5e061c6d4d88df1c2ee0ab512bffb8068eb627bd1b75be51b2d78a00fb13afdf438e833edd863267659c466511b30389bb97611ea45a2a029cd2a00c2805b78f7e11542e633b5ab6cd18fe7bb1ef09327ef63b80583d225c0a3ad09d9ce8836f4a64f2e9b2818bf27c787c8a746b1e3b4aeb3215940100a2d7784060f14bea5245a82c0f1c73e72953fbe02c2dbcecbade3eac8f57f0b6fdc86a2df0f6f50f417dce29960f84b78a74210eb7137c56a41a7a97a4f3f6699cecc2eba34379f79337ab3bf9d1dfe55be79555295030d6ac3cbe108e99ce782a2bcf9e715a9a70eba03dc73d3dfef389f9623178b00b650df566163ef41d75f2e3f12ec2dac63019f179d825bbd72a123694ddb6d89485661e03bfc1fa04b53a4aa2d293e3014a18b40400b01063751df41d3fa924a7282c8ed5f39000cb527b206107da3d2be376090936375ebb1dac1dbfc77d4ff625d9533bf91b89404cac98c71eb1cae68d53dd0372a554d72f5eef2a7bc3b8cfe976aa8af41b1e9d4921852ccc6b96ce269da7048f96412a1f4c11fbcdcc8a519ca465ec8e15900088473020a459700373a92a374631a7893e91b3f1a712012ceeed3de5bf57d77872e78f68d140886c184943a3dfa86f62b4071bb1bc7f279f23c0b370b3eb63703e7918394e57436fd8e3b9e4936867ab6d8f08bb816880a76758ff5fa9531a4080ab9a3736ff04d910190f2215b2e36bb450d2f28dc1977d51a6ad1f85ac3f3b004bafbc15f1be3741be7e54c0dbb7a8540a745d2ed3349631945039e0ba5bdf9627684033be7a3d54be0fc839ddb33e4a21917d809a0390ed7d94d2ec2e223de0713469a82725cecf4d0e0e34c2b3b3de572228423440dcff5d8fe00d8166e32aaede6b31ab05cabacb12d338accc8f778a254846093ec5ace310e6ebf4c575af50045d94877b9606afad0d0c63599f35a977673c5a6881fec5e2e069edf4535ddbf6b95a19cb66a5228c22288b514104dadb67507e5a62b8950c532662a3abd92e2f0893ac6d5acdbcabbf1b4d81aa48da8465c69a2e9353d4f9aa796ef715284c7fe7c58d41472578a3412779eb40f029d094a32b7970e6d10ce1a6e42d141ea1c1efce68b46b8dff9943f3003b755ae539691c70a6bda6e61bef098a07d053e967f2322d757bb60d6e6989557bc5fef3159b31cb2199c3466769acf710e4357ef5cdf05261d0ca0bbbbf75dd84ebd93151b22fa64af3e6aeeb193049da3bf467ea08ef87b83dc48b3c8301bfb4baddffdc3408e846d03d42364210946146646cd8a7176362c1e9aa0413ba73ebdfb20a036257abeca36e8d6565f1ae2a8ec64a1754e712ade4b9c017be61d86a9a956c75da8c7a6c48cb0b61d91d48725fbdbbf37c59b0ae0fcdd2500d060fcc1db1d7bebe8eaf0aec512c70c84272d33f6b053f39a34845a27a543c83ce56136acc122fe36a8724c49746bc2e6c04bbbfca9ac6032e32cd36e1579643d959a6bd0c03950c141723eef877eea6e98c70176e65db2a27fac03ad7904d45a7f726516b04c09471d241bf8dcccd600bd9c99652ba318d503799e5f81b6d996dfe1dfd07d642699393f7a7c1c6a57299186e018b5b3d05d15b3676c035ee7e66ff111826e088b91d68dc9cc9b911d280d84c1cdacf6837803458f875e592ee5e0228d3fedd8377cf2a071936273782b99d6821a40b4a76fbe5232b408b7d91528ff5ae9788b12fc0ccb87c23083ac2e944f3775edbcbd9800d143bf7c66981f196091908ae0c760f0c2405609eb3c74e7ed17b16e931dc64e60721faba6118ab958fcde3e1adb6efe773076a32d5af9dd61c2db6f613577493e10d33db7987c106e6be3c4f45b36f87192462392d08b66c794686c60cb51505bdf154c84ea80b01e2a6c0043f682d1c74276f5b41505c12d738f4b03a300b3c96242032ab373cd4c688ef7e5333cb5547b73702d26bcfa3bbeb5f9ec5c32772c99c87d6c5ccfe5513eaa54190454865bf6c2767a452f4dd904d29cefde30bb30bffa2f4e880bbf59b08364a053380fb0f07f2a65be896d8f5342c71e49c2be64c70a09146135c0469bde2d83d78332f2c14919fb5b8d99be3b6df9cad97ab2e0cff5cfa6dbbfc207648587a66fb95faaec2c05a476dce5a540fe52bf3d09159afe91129dec1ee1d68b92d3341ba620822327c4f792055d71bb6c4502e5b28cb7a25bd89de159063d8a464ff4bbcf10f9bee93b31d7e3c69e0ddcbabe26c4ff344fcbb47d35d7580ad4c37fda14df6dbfedaa99c6ac0660839634194d66442b72fa002100f4349ee3cc3b07b285d3d87a06a74c49446e60411c43a58384cb5902eabdd2aaa3db3f25c736b9833425a228c2352869b2a2e565ff17ccbf0f8acf63d362f4d864253737bf17b13b57b58ff66c306d30abe9e4128d12b9f3c342e906eb1c7dcdd8a6ecff2374d3179e9d324a5c61b1e8d5e5b3fdcde57411621876de17229f8cd114e039cde8544044ffc0196cc459e1f684a5984c54111b81c0ce345afb64da48ec403524009db9221d623ac60f1f94cc3619c52f54dd7502b7a1ceed23a5daecdd3555a536dde69eb2aadc520be3c0854313ba544fe3d43d6ae1f65dbff39707983f6c11a44f67ca439e5ab6ec602aaef95fc4e360f2b507f97584aa4159eba108df58dfe818d606446ddf7763a3fd5766e88952051f68162da6fde6ae7af578a621b5dfc8e79fcdda67a76f297f62ff502c6b9cfa8a906cec10ce2906665aa25f686af749d8afda369b99bad1c32fa48442b8a2b8a3584d4eed5f2c12c7f064f03a25d88145eb8a2e64e0f770a6ae493cfb071db984c8d519a6af2670f02420da5b38a71c5b55744a1a47c62c614b74423ef85fce64ec5df888638805b3c7b07b4ed73d7f87562aaf0f35a380a579d5d00b3fe97b060ece46289c2acaf4b47be9f3e38788639ce8798c8ec079459f027523653786560c4fb82415b3fbf3d5074ecd612a84cbb9f8df04ace163edb67682870690837410df73194288aa942bb693948cf47dd981e6a85626e751087adbe4550083ef4f40c063bd5b49c85732ca6d9809eb76d936876c684452470f3ddb812a078ad56b72a2f21e7e7e48bd1e5edadd43dec3eaa52a0960cae1d10233bd60296f39b25659f701d0a0cae03d8a41581536ce01fc89b91683d2265944acc012496d5832bfb7f57e1c049d2037c477a5be10aca47187c41910db946bdf0cba6a731687efd79bbacbde62091441c25a4c1e9918a7f753b70102962d4b5533bd5c4fb47fba333d0f4ceb0eccb96f4b84495162a6c08711ebc89b99ac36ac8fcf29fbce8445f3095c6ee015c3c4109326e4dac736aba8742052badcb73adf5972388c0ffe05232d9f00d544701e7ed5eb6e1abe65093b7c0ea1f023a607cfde78c35ffa7ed475cf9a8d5b8f2374852e6962a47958053e774966d2d838116ff7a47cb632b267f705641da0843ec293e512f1430be2a8b6ba016dd7075a68d96575a95a6010230d4b5d2e8ccb8f48edb67c384f881436e52f0da61a83a6a501b985ba2d27522ab624ec357b1cae1a12109a830fc458990fb90c21b0069e586913ffccc1416802971e342e4e49bd3a0408f11383974c96358838e3a57aeb88ac010fd035ed88f2fba89b35a44db2196247dbfb79c9809e71dcac174a93439ed4c84f0a1313915b02327a0829767e1ac68e0db4f841448008111dfd7d93671d5cca9f5f9d38025f44b96e00efb4dcd12072a47e8c6b8e6f6a91ab9126eac813a5f7aaf9531fa713ca5fe22c527d344e9622c9c1970dbc27a8c5cafc4816c0f2a1d853d642a436346f5d20df2990d72f7a122b378685a4687d5d70d9dff2a70a317f39bc1f3aee99e571ec2c520f200a775f7266a6542c8f0c3723e90452b49b37357e840b5a231ec518f992e794e4dbf825de823f0f154f3c022be953670f31f6f2c3cf7c669fbb704677af2c2a015a1d112d68ee49775aadca354c16f16f11a828b40f7688f10e1a19270f937f53d5cbdd0ea5da5c685a912b2355fd104b5cd24bc1fb6caab062e7d595147fefc3b0e948408d1a4625733932ec5d20c4c5715b365ef777e04d794e93abc905a7075bbe87826291be8a7cbd64ea53e219eb865b0fbf30c3c0b76e4eb08de1bb7d5ea198a4121b489a06273b386d37e118b29b88903bdf7c0724aba6edbf7f21758f7fccf213ad9a513d5513191c126107b31e930d9260bd5c756ec1674178d2c1d16ede12c142f4c66d6860b68d95787bd50a954ae009d5ce5b9b604d51658142600446f786449a135ed3d664e4176fba589b656298f1b333c4e195e156519f37a7f5f9fb73c058982f3f40878d0a0693b54b4cca4925701bcf2ad41f6bd56c249d6044651fa949d78b4e055a1f46e9cbe2590d25dcfdc868e79b6e847d542ba34c5721702f1a5b1b7009bbae6aa47475540e8ed137a544e9a2ecaaac973811119122c5453244367a1884eb88b9c58bdadf2558c235842c351f09fb54f46eeda6eef28ab3497a4d8dfee195b46b9d880262b1bec08053cb6097ac09f85d64e52ac80b0dc7c7802d18f35f2f127616cd3208210d95d932af45c146bb9f0058218d8b124ce62c54e48b0f0301608384185afb77ee14e599572bdc8e6f0a0af4b093ca4e1d8b0ccb45162e365452bf78c9e9424ec4a9ec25983947d3d275cf1671d22ccf0ee4ea6b98c0e22fdd47e34ee20d868e6fc79abbc64f4a0f8539a02053dd22a19e642a8c2d228259b824ff6c445219ee49ec7aeac0a73259386b0882b971c286e2c0616952f9857ac54838ece8e852760147749a7344b6d6d988a69ff5a0169eb512173a67b0fcaca11d3e67c08813696b8ea9cfdbace26c77f61cde3226df1715a1e7cb72c006974f98c6b63899b6c84f77c1410c0c948c4b6cf5a106365175c3e200f96f2b1abdbec728f91d5b7d78dcef265b31fefa2dca39a8a11920dcdcc951179418a1f6166212d8e18490c7ba3555d0af57459482a20a3bc847a20125e732482be983afb7e9b26a099732c4c17972df5d2929c322f27a54ae25b70625e94d184c78b889fa51f9e7cda48507a7d270673b0555ef56870abf2d300c0d167001940317f022439c55ab1aff8a8a53f9c5dfb5405fb0bce983a7dae93e12c710f6ebebc56d12008fa2769ddf237cc6e29439834dda31e2b0c271e239802326217ed7baae4b219630f0f7687f6a8a109e94801f4aeb9d66f119fabb2848ce7d7f05d05ead918d3d6eef7f2dacf7da8396050ef506418bfec2ab281d340a41a0308263c88a1fda9ad710a2a3bbfc0b3f061de93083ca4ff29b0446f78c970a2d6fb644fbe163211d55be66fdd9ba2d510c703e555015a2e341e4b74bca6d3e3c25e9c32de356bb6b59d4e932c64869835f29599ddcd153b3da1981f1292e4bbf61c57a8cb7593d72a1f80474f99459eadc2ad73af57915dcb1af160e15c3937854684c96b1801c8bdd645440ca784ca1fbaca8b0f28f614402e6e78a48ac8bc1681f20846a53f158508c2d3832db0605bea101829120d63fa028a9d7a9c304a6be224ae242d447e7530b4b62d01909aa37cbb3b84c0e5ac913902714bbc2cc9f1f69a57d260e0e9785be799d6547658d0eb46735dd2af5e351d17d7d642c1ead30bd5284d2ce331fe8adfe2913b12a2d5840f13ede5dcd480d02ef5de361216f4c5e57b657e4d229df6f2b4bd828292b836f9dbc848d4e63f943ed3b6bc157e60214e375b22b33c471842ef60fde40a8b97ad8987f1f2fe79e76e5df91dbd9dcac067be307eeb4067a18e1ffc11778032a69a6222741b116e7faef8cd83edad4c9b5cb1f584c3babad1400f2072a8f6dad461205530659315863ed8bb15458ef2f83b97f723374c1286a1ab6d7f427ab4973d4c82e868fafc11b75cea1a81c5a956fabb9756c7c1896f70b135c4cd242d476c9686cc79279aa0ed564cdba6ac743f187be139c4bcc252e6e27de14ead471dd3bdaafe243c714608f5375aa03d11072bbf308ed51c5f829cd6d72b8df4a4966bb13d2a2ba7c628302e552951370508a9627e95c8857398cdb64108144a383310e0e222ca9ca0a1885275d582e76897eabc83b8a7cea9a190f87514b39c0487626787c068bf2169a8111fafb9d2918fcac465b3b9ec6af5a83c1c23874e8b76f55ebc88ff1432b655f7f03ecd2f8145ecd251c035c85769492fb2dfeb063f780cfbcd12d1d4391bbd79754b936e9cb1772bb0fb53e8321b81c7f890b5ba57f8e58e38921203dd3564b3b15d2dd3861226f328481ba3207da9a3ba9e93c261dbb0067421ed132ad2c0df3164930947fa634fc965425f9e1e06df94b11c71714c443ab952250615e46a4ab90b2dbc08e47bcbd970ce9d3e571b019d1118f38de36f32ea1e1221614b319db5bee096a7e0a1eb7ad3171f9a3cc176d341ae5981410098332b37141827b123f448aab5cd6732692625e1ce851dbbcb674da4f05f7997167d7461e3da0603aca2146a5b9827c6dabb7716409133dadc88e421f7e7d20ab9f290d0ac33691fb57e4076ee6c5f956700891696ddf4818a2f2e6d7b2bd5f10f61b1d7a98b13cdacca9dfa91c77b6b695f600d198f2fc4d5a8584d80d033a3eb11bec5d1dbef7e44a02d7eae5d711ce817cbd39d75794b0e4ddd9dfe6f32b1190fdbd4b8eb439bf1a9eb85ee19613dd40ab847945c33c601d77524386a9a3f2bb465c7daf4f3d47d972cc4bca9c8aa048ff436090f0d92ff6973110f6cc7efb4fb16ba9bb58aa4bf3cca6446b871c8dbf5dbb9a2e98a21b61a9cada4423a11641b809bc64600286792f754c024651c8d55874070da7fe7f864afb4f216a1247d7b374f7b2feea760c1d4e5859071339bcbaf175876e933ceb8962ecb90e66f79b4a9e8ba273cb90a8cd4e8250b0c9d2303aa8310067ec86e6006ce6ab3e4a84b842813f975241832f506db9de2827dba87f27ea90feef7ef696462a8c88a29ebac4c3408fe833667051b0bee1cc0ca7aaa1a483154fc2a262031327401d7bec4a8dc1d9932cd953388a53b8defd823526d1164ddb342f0a654fdacca86057a51f9c1d655b80231a914c3075a18d4ee46e959f8fc9f0531fa5e2aaf0efe03dee40654a4ebdc01ad91498f4abd52491e907c1e7f2a237d608933be7806eee974f2e4d52476503c4759b255ef167aa15c55d23350a89a027ef47fbb145552ca378ffd87959d0b6d9ef0c7d01c6bf0d60e607e669e2de2d460c12b58c301d71ebc9e82236553d9bc321d5f170dfd8f2ab2da6e2f7af0c24aa5682e1880c64bae5af9b3e8ddb1794595587a18eeae431f28cb8df2ccfbf50e35eea5339916e12dedf9004f1867f29ca142b30a4e6ef19adf74d102eb814a520d25693e3c6bd2922b063308365697698dfe96fab05b0a291704d4e76ad07af3be46c84e69e3db98ea502a39809a2a866f7575d4a891bc90bb3a00707e3407ae32a616eef47c3074b62475659a349aa01d85e39b24b5b83bb5da357b07396aa562b5c882c731c0a3fa5c398db5783be149662422457a14ddc00f71f59eb2165f79e720e02253706e55b1cd3a86d34f979169f950ca5a35457537516d37d605b5890f6b301a3c01b876adf7a34a0d3d00a1745525710f820703d7b138d62da53948049cdfd27a4486525004fc3c23a3e99b8982b33dd3ccd759e7199894d2b1747046b815016bab2d2ff5f65ed5a2d4b46f55b150d076982d49208bed467653a702cc917b6e46e2a391f8a288a8ea45014c10839761fd03c628b74aaba97d03fddf5cb763bc1d7fe2a86a00232301a78aa08fe1100c3aab4780cf080bb7a60067045ea05633d702f22213b17a4af917803b13e26af489d7d626c70d3c29b2b33686380890d1b55bf7940ee47397e35477135e494623242d43178c91d70f3fb4d6d784c32d8647520e53ce13b9cc3f3f343d95eca9d27993018b610d4a9097f95520cb8ea5ad633f460760e3cf1009a05b6b60457c76d69964a30bf7b9c9c581a225448d573f7b510bd000e3f548e5696525593fa49c8876a3f26ffb2f5cda8cc2acc8a16d4b56ccc4122155b22575fb2739b8cb28ca9dcbf888d9b33450623cd38cfad2839a944b8ceaac4b516a203039c081874b262a7b877e31282c51e08ef8e2a09379b617f7a4020a245b7f32d61cc9a3e8481fb4e40587ac69ddf924039803c92fd18956a9050aa8227fdcb743c55d54bf43752f1669fe8a6e6bdaf988647641dffd7bb9bfadb06800ff55fa83937bdc5a929dec222d331ff0ef6d21c9ef518e00d3d4d969486960b689adf681a3ae6858fc4fd2db4f8014d664cb60da5799d4c86adb0e1b1ac3646406b6a25ca6155bc1d5df9ac5fb102c8ebf49caec8cafe2b07951718198722e64ea2bd83fc08906de0cb8acff221a8293c07d167497c2709543b1c0a81bdd17d346bbc67c6ac39359515b53565c29db5f5532700132316096fa672ebe8a4cd565e1bf46651cfc4308e43bc45c249582bb090b2a8351c1b1f8d3758619ff7357e054d537382a9d92f03f2bb0a0b6e018a70a840c4febcfd777d154e3ad9b265889294b4f7c113629b615ccc217ceb399df24f9069001e6b3c09be4d30e9fbc8c94a0f945259607c3e1b543bd148163dfb7fe07fa3e7cd56b3b2001569f7de82555e00544d078f976b08f4c5f4ca0776cd79619bc378ad017e69c75faf295e890b3360a10d648267b3c2c65bc3e1759f4610508558cf45f4f0ea02dba4ba0929d7b7878296c45165eb63ade669f7f1528d56b22dc1b650ec0d824a16183b9ac3a5d4875c1886304a86df97b466a5210e0bf7e4dbef8781531ca0f4d5f4f4a311038a56c5486f19da7eaf78269fb7bbb6499cc3b28549403b07af2c990e0a4db6cda870ef43ddfa3bc105a8f4a06f1002689046b0cef35af00386f235f1a87d47fe5b4244c1126a4043ce65187c1c34a5755db3bc725622f9d0f61bd755cc65c295bfe5213c32e823ca286692c0edb3a6c412b1fbd8d80da9c9ebaff78ec44e1ba7ec281a21187ad593b74e3d2ce51c39f0dcd22cb58fdc4c8b15c0820375490948b87988d53a94f988c6ebd49f64ea568859ebab76b5c22cbf5c8b8e323ca05949f7290166c70dbc68999f2c4cf3b9ef8f61a9f74364fe423a6ccbe563c2faa1866f6344004b0ed03b295d8360f40b8ad71cc8da95efd18264d0b87a2d4ff9f81ecc368e00f4fa997d8490e8867c2a1ca1368b15033959ddb54ae1006b06254f98bfbb56614749bc2f4e5b08f686c9cb2aa46c451d8c0a0a9ce2187b71bfcd4ee0ecaf73c9347f6545411e88f95f0e401b16a932c7a06d16a4920c4024ae52b6347b51d4d76271128dfba8ca013a2ca05a32ca53d47020964cc29786240f05725953933dbf6cc4bc0ae5080a74b33a947ed98ac16732339b0cfd63f1033c88385dd09a16c40c411b2508441bcae57d65c30d140828fb8d76794c74dad08652b1b1ef9c126ac7096d8935c1ad6717de6c314f78268e67a5c41bc2f6eb499c06e18e05b942633606c89281a92c4a6b0753db8256ee7ed978d007aeeb036431bb7520ccac70e1457cba152fc97d2b1d186a06382247bee7ecc8f839c7b6e04bd079ceb60055f714b9a0f8fc2fa0cc7920b6d5a886913a34c64b16a43313a38eb5340e679651fa05a3beff302d1c609982fc77ee8a8841f97d50005f6f0b83010223fb411ee37e3fdabb748b44132a29ef7ea2c2bd01df5b6feaeb11da15519316c11b0586895a061b5afd3ae0df3a8a6cc33d74ab4d209dcac95c4f5dce5af582c931c6768744009fc7fb04bda9b0acdcdc35b53ea66b94d35669130d5b3072781445e17f349c8665f73959b59bf1884b9de08049a85f4a3959e002ba1eea26a76dba056fc0647b712b795381d3388373ea40e3b365faea6df6029bd7c212655a83c4119ab5bfab06305a1b9ee5bc115d9b43bcf038ec613a611abcf15caeef2e1c3c4f3c2d294369ce45c3dfbd8e28e48b21f9b1fe106dd6387fabef43794b8e84166d7447c3b2c539eea28f8ee2917905324bb2bcd3b59cb402105f5bc5483893af959e4e3c5a5d8211c0f850c253681dc6eaf45a063e1487062ebd31634b59e213e144b9f4e1922eb189be3901a65d98de3ff3918c67a28c1447bffaad21aa73ae6d3e9a1b891ae94d8ce87ee93570f36d991a7be07da992db32d12d87b49c3f78cdff94031bc7b2c167c20313c85f78051bc2229b50daa56ef84e38366d03c5f5a40ee85e821347238d29ddc66e6314b9f97f4636b247c2ffca99fc13726a13349bdd65c2abeadbdf5c48858029c36c03e107bf0c30df65c0f392375f53d5446d2086ebcc0bab7973dc8183778c190517bc3756e6b496402679244c3c1f243b26412aed08ddcd3693b3aa6bb85ecdb99b91991ef3c1a5f395c131876ddbbd128351504e75419334d96c82f74e29b82c5b1c61ba33203e36994b7e55e0ff4e8e89666d75d4bf9496454699587bb3e5a2daafc87741d46ab1944fc3545e2989d8b7df0c88c354c7de651e6e3a90a969706af07ca3279ff594fb8101edbd244f0245c0baf01e0eb4dd2c26ca2f4b1ffb5f1d9989771b077c4d08fd8545aef50245e94593674a5120ac6542c20a54d7521dd69a3d2d00d2a1c801bf988eaca2cdb6909865a369cc5e2c8f7588ba8ae0616fd013600fe7fe81e6fb22bfe92c8b80359e389d2883defbf853f9b8811037f7df30ddfa3ec88364ee699b9b1ba2afb5ca50161ec3fd7bc09725f0e03baf0db8ec744de20970166ee5db366648ecfb8812efe2215e77172a27cf8ef7ad0d82cb72c34fdce60f9d8b94708db18697d92b06abb5e6444b8d55fbf333c30c7ca4637f66155e888c4e4046c92bcd58930de0b339254bb963276a8d029b4acb8f2fe447d523a62ded289049fe651442f863ee42fb24b23ef36091aedfb0500f472111e1874bd762491a55ba8ebd781df62b5d00e95c11273a8c71356ef1d87d5ccc63f5a777baed7bdc9eb5ed31401d7e64d5e36c80535f5feb5dc92d3b441bc542e10f561f873ee2a1d321c7e81a7648968c9a579539b440fa04e8004080e61ef87c0ee442c9ef4464cd58ae7b4b63e6c4570c40d414da4be4073f7978e01af99c1ecb091a42fa3d8d597f08d4d614c9f0951026eb30d94f93b1288acfb74a609315d3182f2c64d76e9a922b822f45cc14e1fa54584ec5bed9376d2696d602bd4f855e55001c9e1869232d27ef9f91405d357203732088856820670f48183a3bf2813208074cbfbef549494c92dbbb1fc4abf18b397a56a565d4b2df1494bdb16fe9a548bed53ac617d50f80a3fd684f862a0ef57eb1aeceda21eb1fc64c47f19897f6a88eebdb80badaacc2b0f4be039012834e4713aa9d00c5fb4ad68594f77e4ca28e0a9324a3b8cdcce88be3d3895cd3ad897c66a2b0bb03a4f95f5caf349e3b4ac62b37960274d3d15da8172fba5bac65d946822673b26d0cf7eda3717ef9edc7622d7988ae785ec0519a0ebf938b998761fc309446f49cf98970db7199aabfabca2ea6a6037c04d3b7c7c17cb9ffec9f20da80b18208350792413f98acf8d396641d4632980591ef9110979919b8c40170070003dedae4a436e3ef2634961983e34645a1c06b0f8cfaf7e1818913adf873df401273a8d6483a3d7d13e3b739f7123402cd3b59082e40e55cef98d0a82096e8519a8d7eea3bf9c739805c75424887422b34c19c3fa131d190a186c40a0aa443c60fca083ca21a761c525fe73a25fc8e4bf2d750f30f6a717fa7e00f40ef5e7741daab3e94f0d1c7cb59a02d07e3974a5b9cee15569cfb7abe1cd4abcd4625d23e1db82046c326c21317f26de7a309634a742734578e1d557856e2ce61e51dcb2d7453c82fb0ca503f5969bdba4aacbd7be451dd02d74ce996617b0fa63e25db207e7a4e53b74fc3985ab2bc6d332e803f4604ad11cf8f8211c762b51ba16d181aee032527539b861580ce7d5537f00d6de643f35ecbbf7d07a793b419afb45b6e0f3f5974ddf698c23db4e0c3c0f63c849ed6fd5760f5e56138d77cd9d24e8e5f25532027c0215b4aec216f25e0a94872530091dc6c6f4d9ca59698fa1de9879f95c1e2590343ef52213993d2ea81a4809323c5d3b40dc314e36d77250f1ccdadc55935d8d730cb18429a30051a72eeb988294a498828b82817548fb45726a552472d53d9080c92831cf03d6ec7f5fa61a89b37bda07e9c82cb9ea0b3b5d196bdacf8a2cbdc01f12031f862849789c80cef412751ad5e052a65e64f875be65d99dfbf46e3b5fc294293cd48596cc66692dca471294a9abcc0d1aa5e718fbde8616f9b89bcd03514b6c8773664574517dfe247df1911903bfb3420b0b6d6ff545b9d12923ce69274a2c06d28a22a112e32caf8be0360b7232ab90125d569d60a41a438cf8ede856ac5f0b1f4e3b643440a5b7779de32d1879a00e3088c309a01336c6145fb8aa7e1bb46b1e1e226e8bd8afad377484e16c56ffb8a5f7d86b7d3e7cba9d3c6111a62440a1b80772113485784e8f824eef6bb56b5ecdf1b0511a7f12c2c9c9a22b859279b00d729478fa9f4b0c0e843c3ce855cb573f7fc0944fb8ec7cdc5d22287e25494f3a5dc668c3ea940fa71e0f80ce8e6bdfa96a5df0ba19bcf3b192b3f8aae9b142853009779b15c8883e860bd0d0342fc46ffaeb8955de09a6b04cd9528e5fbb99b4c4adc53c5b25a4779b66245596388c4a2f7cbfb2ca51ea3ff5124ff55128ad02da573ae7e6f3e4fd07b75908defcb07f61802ecb6a66442fbd7ec9a4b850a9f9b0447c7c257ce6ba1bea21b268b6ef4b117abc8065c87fc6930c418eafd15c0a6caf50879c0d84e6f8cb168af678d35a1b474a3936dc7df855631fc3fc4c7c3245edfe184ff9b424920c3f665d9ebed18ff552f24c120acf4701da720bf662d22e14a881de62ee13991e9f6e6d526ad541d9b0fed1c2c0deb4893e97424cd790ae278825ad831859e37f6242fa7b49bf48b1bd1b606151f96b4f0c22cbe1a78c144534161e8c80bdede53d714605608380c044d4e005cd24c754c5788b61c037530cfad42e51aa9d1f1c29bb2da487e460dc7fd2f40683269c8a260c864800abcab47025007a0de444660c682e8e9c7387740f41258b5877716d55c3e560ad2f8fcf719a36f48636a94d9498c4e58b09275451ae8fc40b004b22735308b423288e3dd184abad2ce04219b85eb4dd48e6abb13d1eb43cf4b39c648e1ee4ffbba3c868e0e45d71e7c171a3ab75f4930f6a5a01c9667afa2395cd34210154ee39c2e1e77561662a0332b0084f6dec427aed5fff9aaa717739c667ad9eb14cebb2e8d7a73830354bdd4a6924dab22d261d18ae522a4a9782477eb2b3dcaef1e87e4373249fad6e40c27fd7ac0a6c594ef3e55e75d84330e7f830af9639933d1487c354951e47de59144edae7dfc223d0530fa4f3d44ca34d94f55cf476eb55b33e2241d408fe75259f25043322acee62c8be8fd21073f9bc41f09468646d5cfed95330e3b6c0fa91ee414023afd036f6e09c4c1e87ac3ca0a69672e9e72aedf35f8f2c2f8d01ab587c3a1dac7e9b0a52a96edb8ed835fa50af9db547e36e49bedfa5f970777d61392fe94eee1d29da17c7fb31acd82bdda173037db0a8a853c93103ad80083d19245f7b81149b14cbed016548aab6525929dec05245095bb20d4b3e4bff745ee32f78f27ae17004efd11f8005127596e6213c8ef28abc78bd5e0ec1d2c1b4184cc66ecd0d4236165513351904428a926291bb7b2605ab3d6a2cc17042ac3358d1d430444f066ee00b83f4a081004d68cd81fd21ba9e93616ebd6993219c17863a6d38ca6ec491654ef9ed905390f7cda554cd846c1ab6aaa563a6db5708b171a31540888402e6a872b185d5b4fce7bb2ca8f5c539f066b5e2f7c459ff41d9747ad75fc9e2779b092aadb906729b1ec731e8e00c7c2440d9a9bd8dbaf43eebecf9fb57f823c5ce275f80c16e2dcaaaa9ba08ad69453e43023f72881d7ab3f1c2afc4ad9e2d89d2bb7707e4118e7892406364c8495fa5525545c56acf643f020544ce680f7c081de567aaee280bd27fa3b24932b473f6fcc51d20ed3e941d0a2abc0d546e19b5f275dc1fc821e1e925f96b1cbaed63d2afa84580e3b1ec5038420c0e8a128f0c5eb92c1e8a2ac9aa1eb3fac10aeeec86e69efd6e8b08b7271544773671c1898b1e50fcfd0c8e7eac5cc30dfa283e7df9e2e63bda7d5d8630a80bc0105a96edfa14fb056416cb4a1bd7290aaa669176dc06849e9237494a44fd9d4c1f939271c2c375cbf73c0e435d6239bf15f3d75491c5e933482f9e23110242d673a037350d2b114872017ce486c66d14552fae0fa8e631a0842b4f66e3a003c2682874723bea69c8e02080146f196e46f54b5c2660291c4e69158e81206bc5cbfcf512d681628448a3a30cd8f39fe90a711071abe28cd1603e9bf35ef2308137178f9a8dfde64b34146208fdc89c0d1a27cd3f03ec7c0c7533dc8aea9ce6f6b865db1270574abadfb3201bed15ad22bbd94f3e9ae8eb50b6cb4b0060cabb8dae91eec9c153c7e85da610081ed2529d05ba1fddae6eda68b6283262ca6da4a840e525dd8f976ae4b0012abcff77ade4f4bcfe142f8ca6acb41f1a783f4172fb287dacaf9fb8d481bfd9d2c8a14a7b5873c8a9253d43bf0cba7ae01529ba880928c4afb4a7229c6d8326dfe9c971ff3f483d8d97eb2533166e5e69666ca241646c95162e36722f86924bef7238610b586a5e237f505429f5a87026d5583e78eacd21ec7f0fef1244254bda91c39b20bfd43c0d90e17c849bdc0f4cae33f9c80d9c07f963af0ad5be9b402f0e913f319e5976804a485ccbea2ba3157a295ea3fab21759688510b0298520c5cf98943c9b2c1c30921d081ee3cb30f9c29a7419554de977271531c36d10349304b203f3b3d16831d62daa28ac2187026a11ba81181b23a64b8885d5a45b675bf8926d21e63985893c80b2ae41ece9e58b8d230ac8672a051325cfd2c5e28d927c1155d5d2de77cba78d1ab515a69d48e1cebef0943024e9df5cf94419937c3b59e3e8f058afcaee0940b8819a1025deb8defe11712669274c64002d86c59acf2f7b7164cadbf9e6473792ed12e2281e83f7781e66177eb89d6042a84b5641a646b6e5f70023814b905af5558cb7af7939b5cc224c1a03cfe66d2cfe0f49df1ad8019289492cf877a2024678566449e4a1a17eb5e557f4044c9d642a1a871c355767d6e7993af64c2c4bd8ff1388d195227b248cd1ae943a047c4c66d975fc9e447f0af2a73351094e46549342744f99d84373c3e65794b64bd7986ccc0581e5ec8db7f2560be445b441b4d971bcf6ea8c84ccfd6e7f5f9276cbbbc40cafb2e234a03a6cd7759f13555bc3527636d63233d327c1f8acf9ab67bfae866616b245ffc2ae28a1e45c7d20ad09767f4cb694a7d272f4025f75374a8fe9b5db7bb4e62bf4106a0ea08af55b4c09063e0bb975f1411eee0501d9d65952f11f4aeff5039d22795d39261bf0cb467dfceaeab9ba8f23566ff3d33296f7ff594ad38263173f62d7872187a2d41d9c83fd0ca3e05528ae33b47b99272023bf1a8b7236aefbd606164e3261cbfae9323f49f9198153b76e2fb943e981f639d84cdc8865fa2ca3f8dc9a0fc08279dc80c49721cdf4bbf60098a8cb5f9ab85dea8b14f63687440424d550bbd9c41d83a9fa68915faac2d805719ece316699265f3e1c0d47cf50bc15343cd3c97094f5a30e02a4473a5249b18f2dca0cac2b130fa706c038518a1e86d7c533b7abc01b1758b254c0694a3f1083bc146d2cdc1b0479af2c10d939e5f0ff2794f5565b7371889672dcc2d2fcfd8f76a45dcd5419d888c4dc53a1071b8a5515e9e60d9c90115be96b9e4d24a20ee532cd1a299d7f4d9f2e6c9c86428f71bab13f9afe54cf3b446e5fcf2f98b601645397e7c4a54e5171682ff619168c98ace4d9c3476cc6378256a55cf312f7ad9a46ab018f6a0cf79ad66452fd245aa4062ecbd21c2bab49b1af21acc2d10d06a800c132e836df4c6c713ab8e6e8da0332fc0e3d393aaa2800ef9d3b75132d722ee1422d0508470b916f7c78d700d562a8cf8aeff1433413c21ba39a07b255ae87d6b9329d03470e06e8b68d334d439159b0fe0c86a23418970f6f0356e41a10a53c417a957e126f4efcb4091c126b17bfbbd4b40676f2d2abf60360392a65d8be97aa836e531fa11d6a248a60dc10a55ea15f1a38e886733a45d2ca9f957f7c7f255607a62ee71bf8505204b7cd693a035cb163386cb7c8c714d54324ad8e82dba856572015fb816ee4bf1b717f396a971c77cde9caa4dfb300711b2edd0783cd6b75c705366b8a24e2098da26556ce8cfd00b9b2a78c4d727a5a9863de88c866f199a237856fa39bdff2e6ce81392964c3f972a5197d011b6fce083b17cf58a63bf9140b954385ca8898763f7944691ce6aa6e0c6978b14d0efdd39b9570b7e87793999f6729206920d5305116afe26f3d3ae4d7ea3905ab44ce83a89d1c6d2ce89d67512a27cce37c98f351b7c242af63718dd76ba31204610517bb86309b377791dbf5832e0c35763656e9591d8c35988ec3c847b7280b6716a8c75e61fef6f7f55a3de2041d2c2d580621f202f82e08302cbaded9c0c64366975c89ab87464f3520c4af4d4e9f54b3e80b71ca675715c4ae15da5bde2ef61227828d47d14c2e16a05cbd9e4c0d5386970b4b9edd83bfde6b7ebe8daa5f6876e0d2182c818d56cdb94ff7605fa342959ff25ecc2b52245863a57c24eb12e7643bf578ed64a55c8b450caba91effa6442b279df4167587660f995b4fcbef560d50bb0359d89ef0a49361f3ffe41f0c2e6cfe9ffc8452a865fad5a18b3989dc63f7ce3de1e9b540d11de7a463cc0655af58f74e942f33367edd39405e50dc92a4a45cd48cdafca6748a8246c7edfda33218cc3c60b0c3ae16963fde221c3e3a41e749a806ef3a4e88b512b8eefc04232936537f6920f55412f7b333b273ad2847ff8f1854fa51a3dc274dd2be03d62d048f3540d721a25b42b993eeedd71f953ed81884fd6ce2cfb25954fb3f2ecd4c0db73a214b519b26f28781644529d4bb20ffdf11772644e8d1b677f55f1fbc5c4410b75449f23cb3a1c749f50179ce118f00f6b0ac3b40cdb0c41483e186370ba3a39cdb567bd8cf5cc1660d9718b0851d1cf95501192fcdb8c30c7e7a5d7e6563db7514f0c42f0bc3d1584a474b5cf19851f1c2eefcbd800dcd51d25c75f86176b226ec4aaf87599b61684b3a3a4565001d61d7ca9e73774e626785a58f5ab7c5c4776c04e1c22763aba45e3040221b28cc559bebc4584db98c72d529cc1f5234d9bd3ee61da41dd01cd611b66ddf4dfc6504f0a62800de4cfd3c329aef296d35e22696583fccda8bd3e25f6e1ad8a8096e838834a16d082741751114e7f7ab6521d501c4a66a064e29cd9570b119932df09ae6af4a5fa51499c709f8e544584c16bc53eb687a46b20a52131c599705eac193426c8fe5d4b6ec229bfaa4a17379a31211745b34ac10f55e4ef2dc64023eeba8b4f0f59d2135f8a9a2142f71d17b8ea9ca24ed0c2a21791fb5bb3db8c2f5fc1e3fa19ba15215796f480950f9901bc03bec0173d4d6860baf696185ee4b165c0a8977950d2bf805d7e83029f5f1b4c16a230d239c44f32291213d9224ebd7b8d4f0b2e95887e60b2cd0150dde45d91cec6ae1a8c4e5c5489fb7f554c3a31a23f10c362ceb6416545ac1a0e2d4390db827a4722444c973331a8224ea373ddf92d65d73038619e15ac612887c826d45e2ffd9fc0cc281177c2e3591cf69068dd2115fbcb91531c4ac8e4819a8c0d92b651a13c97a94697521ae04822228bd2d87f3faa6f4877a0d8479c39e86cced1158698dbe14773acd2d9fabe3eb32d89a8518cfb59202b5c00008f12c8462442da9284c58a5be89b5b65f6afd8fc31520800e4d0c28bf9dd574db80b8999305e9c55a7b5571a6d5febdb4fd2d9bdf260c5aded6c433c2998198ab541ab87aee35f62c18c35afaa2b578265cdb07410de59eda83ef69e7b929329c38524da378f62a91edd2dd59719d399a7ab562e1ba20ae8c2bda6f877ea74a96c31ef5dcf60b1d8f11e47c6454f75ecb686a6f453e90bb5c2eff0b2baa7e4f1ab3f5db2e2b9a833a1189214e5ce3661ab0d78836d264c267322d35b313d70f6aca3c5254da010fc5539e8a89207eb41e09b4528a2305bc7b1d57083b5a834a91dd1dc046ca36ebaf8472342cfa7400629883335083fa2dbaa3dc6abf533c5a8c78def7b8f78370939d2a511a6c3acbfb49f8853350abdcc4baf295be28528fdbae304df6baa583c17ce74901cd8a3eb237459c004737e0c1ad06dc75aba4b82198d2895c66b2176f94123872f24aae10546620fb5e00731de3eeec5714fad2e9e5a97dd20b7476141d8b94aaedaa2185a3ca14ba853d76f2ee1a6016fc4840184a9516c69d2cabcfd76687db86b08cfd7bea50f4a74d99bd443d8da171d15d54da3de70d52282bdfc5535bde5a7b1908918deb05b2c455b9233f1b06413476adb2efed597ac3bdb8fad3a0f88fc30902d1b2d5d44d745d0fad89d49bacc750ed04cd8a47708d153e73a7b0f9f178cb636b07a5afbdba76680ab37c1538773b71e02becc654baef2386795417889ba41ebb5440a868e0d4474d5a9321b82758c0d57e103f8e273a392b56b9f3b7bc24c3bcc4f2a1f180642e18b31dead56fa3acf0bae06aad99ad8b516eb10f64eb61b0e9f424db85b6f36ba0437728063e4126fb84eb8f4641e380a3b74988c603d188226e12887d292579715ac338114a19501c229b2ed591deac82aab9100d2c87872592e57004df24607ffd7011839a67de6db3ffbe703aaff010665db23a2ee5742c1a98c2696764d73538a5866b87cadd878054d6e1e2c574d6553bff21d853972f506df05079e35fa21bfa22c87167d5087b4b3fcb6c0fa2db22842e9b7c1b4d7a7369e0e4a57b4450ec5d0b7168960ba176a206540d911ff6caafd5f3e0b322a7beb65ccebe8984ad9a28378426e7183f34959f24ad06a6f49698cb3db920f184962ac18ef3916cffb16288c28b874d0c985011150f0348c6a8c10dfab7be5f9a5a4b7dd7e5a72eff199c23986a43467aaa5e705f4c71b312ffdf40f7eb66059a6408c66edf7eafbe2166650088de1d64e44c3ee46d7cb079e60d886d80d6342cde93077de70b6c605d63674c479242a17997c319f3a35766fb448b905dc539634b17d6bf3b096ff0c20540cfc6460e4ad35f590d45c5e1db7c14ee0bb83800b6282b65c44060ad7a309267700504dfc5669d76586b7dc69502cd2ee29e06fcc2b994b64eb4555a2e391fa85da39a12ebbf832ff0aad1ef3245490e7a161ad707eacdcf2a2d4628ab44be37859e14fd955b52bfed986877bce8b4eb6ce3d0b8fdfb4cefc3a924c376f68deee2d6cca5cc9e2d3c59152ee8c954c4487b349f1a5fce0c70d6ac5dd41fae253b65bd5c20ec4786e94fd4d24fe4ffab6b3069e0f47612e9983156e3ef782f735edda2267415c1eb6c0daca614f011dd08225ac6782f41e2084449ba325e3503b8d465a0c63e4d0ed1627a99119c889b3c4aff660e4c182b13dae4a0a896cb33ff11cdc9c5509baee32be4c38277504d87a0d7b4988204aa66be1f210a38c86109b1730dff9f7cde17e99d48797dcfb7e25122f0625e71d2604c3bf42b6cdd4ba1737d0b3ca8cc0ca14c7bbd2eca483fd8efe32b9b0bfe3b74ef73620cf00c24ccdec28f1be74ef2d70c663be311e68e8d1f1c9761bb8dccff207d5557b6fb9c960783ee53702fa457003abca5209d9c0778e480f16e52c728251783e760ddaf6e48635cb4811cf9270b64cd3611df973eb9659157691efc7af7534b9a76b14c3275736390c93fbfda408756a032fc9b42e1e4b2a52aefceb7e3d7d813f8d753defd8c95ce686c8d0d21c0f5054a54157f737d6477eeba13b716c5e6fbf3e645b66b3c6d21695613844229a54650fc69c33e39cc85eddc1c079daf0823e81d2af2c9ab02d2e4aeef4d7ef55a304c5901ccd9626a052493f4cb794f4443ce9f2c81cbc1c7167ab21066045c9ea0923c98a6385de2f37e24cc28af70976ebd97abe9f98f140d69edaaf8581e9c37b98b0eccb757b63522ec0f09e65a71815e40f4205997daa044f7c98d39c013c25143e88d3ef2cebf2b6d872908e7f1fd01c25d03f5aad1cd1709fa59e74d45b323a45b6a052f55ebba41bc12f026da540a588795fb8cb6e34df96089191804a0f8c29b62a782cb98a8da0bb2d6e3ba26ff1fc8548b22b352745d128685029a18df951571b28cefd7e2f960d26ea80f6f763f682eaf8eaa3b7d5c6614121c5ee3f6638e620b03332b579db63447f2dd3c369f12828652fa68888db43b31a38b10e7c8f75a4aaf32ca903468a9c286ef24f2aae7851972d12363575c1f8972563cc5cad55571b09cf7688b0c6d893efb520c19738fac224060998d10a44ff6117c1e24aded8fd429047ad883944733be787fb8f8da4e0869b6ee1c86d8aef60cd1c9e9f5a6fcfafc5943162418bba3a96576be1ac0b2ca27965866c6b8a3cbd18cd0b6534c0666670a25df7e3fb27b5bcfa9231ba74fecbe2f5faf305f98546fc9781b5242533fa5222b43317cc87363e1fc773d24f73f26b46b6d100b0d1566b38f947a753ba72532d0826a24d51cba423ee6df1ed5998ac2402a49109e9478c6a04f424cf044b9a493463c4d9ee3a89e8a14d65648e0b187252da67ed0d09a98ef471576296302fa473391faa7585c01e9f9ec3186e5b8fc92f13ac817ebd88aabaf82b94c3d40e5a0fb441b7bf7b6e1fe8df06f9e8db1650cd29cf8afc1d341854402df58a468cbcfc8662a979260f623e4583f7873d5067327c8d430ddd10846494982d524564cc91ffd365601215718bc68a536a6f4e416a45d578074b5cf2fa36f7be28839f64b28eef773b16700d104b540bf50ede2bf7a5d58a53d5b55165f89108ef67ec9a88ba86b6a83fe1ad8bca9dbed743cdce0f3d1a225de17eeaf5ee7e0c51f89a0cf57c6149a80cddd029672377a6366db4b6e013038a22b30a98fee9cdc560be762a531efdc8d1b62b36942f7c811845fa61096075fdfc18533f7cc6f9fbdc1c127e5600be53c5af606a28075ca4bacc7681fde0486578ec3f17fd0b36376a3b157a39b33f7669860b8fb8de20e07c05758a3cb9201eb8cf274ba931dca500454366aba4c781e10e51e183e83354b378d4aede5143889533ca6ff2370b45c6c3f0e774273800611c096d4a74c480d431b7cd7c9fc85b2b70fe547e299454cbf052ca4041f673fc4c38d22125473b1356874a0db6c65de857ed1258460935d1321da3a269b5ea088f632f610a1a294b52aa05d38b2bf11d9216af283d0c5b96fb1af3828344e2bc16e2ee41527f231bd7c7a4d78e1c75d595fcb95b5281b8530cac7f8f79e93be7431cb43d6853605a46019af35b44d254a2852c7d304a8517bf79c68a5c99a21c054435c46e1724e139d83ab72412e302dc77f28db3faff9cab75b7308f6e8dce8472e7869edd9f735b168a1f9afd6dec3d078cadbb1e41f84b0b71b3a2a17bc9210b4acf867d5f7e8597d957049c609ad009f19e48057ac4c0dce0bc9920f996a9fad4f7e15eb94c674a12caafb645f235cb267cb95a109318d6e8be4f4b9adc9d9dd67bed5024c7a2960e3c0610cae071a66fef9569f605b29634cab49688cb16666d6cd4c6e11b2fa8da751c86a7e86b9b85813b551c4ceacbbe79dedec9500ed2a0012ffe47363f44075b437b1430fb55d6e09c03024be08e2e5f347ce642b9ebcec72bf7ce4337df1ea0c9e93e182d0f7df727b35fdb19e021e7286d8e031ecb21fbbdddb84bfe78d1a122cc02902fed45417d60dd8518120e35d256f11253e803f3a5bfeda920b05c521f6cd99ab8b6bdb4ead111dceaa303bdaf32e8c3637f6f6e9a796c529e4af4cbac70e1196323515123c007a6b720abdfdbf6c68028d4720713c2425393a07f4418fe1b4a5ed250bc1bdcb53a3e927c51b92de43eaaab5e4d65d49d74c512f3bc0dedcc90d07c33fb83e8fcff01cf69d7be032e8ef1d75075a8c4354401f9bf1f753fad7518e72aa58ce910318b3856f5239ac2a75311e2cc831666b0b9d606507e2696be3ffb0da20927bc3f138a37903345af5db6b34fc1ce7e50d45af83cb0944d417ade1f90dac258ff9b9691eea2fc44f1879af5784e4b2b2a220adf6035fc19686432f310ce431a844f9bde6cc3df89cd5a25b5edec95bbfca51909f7e0357406c83741bbf76b5c761486a8c51e9c1a96351b5f87cdd9e3e6b78ae16e91c37f1c781abad423e56815570e8bf3a431e3ace88e01991ee81774dcd32681d9cbf1c75f281af1627f209aa3abcc069bda7680591953a3859fbe877ef897921e694956c178d6429c99809ee7fa0078c257d4d79df6e10c604334b272082a2ba6086168c2ecf65e60e626260f3e202e511dcd610cffb9da56fabf450736323b0f53c1647fa2a5362a68273be4241c666dd21afd73c4126a59348e75219154159899e88907d7a23b7fe26386480b9399371e1ec9f2e52f740b21fd81b122c5ada2783b0b5e18d01ad39c1ea6f41c518443cb98ba01f5bf0dfb98fd0043b2b590f6c0bdc3c4c3df504f0262a4f15ca44625b7e0e46e4bc7b808c457640d466dbe1a92034ec382a422523dd570bb721929921c7efc07ba4b25842f23045a5fdcf0eaa5351c6a428bf61efc73862e552d018e3cb280b29b2f35bf67b3ce51c90a05069fec2f169b347568a2f15b60546a3ff10344be321a90063748430ed803446dc7bf42cbaefaf9bc20934bafde2f4d15370eb36f9dca96a875ed9465c58d85e06bdc3ee1d2aa8f61cd9abf2ebf5032c30e9b445baa3c96bee71ba8bc03dcdcf85076783359f33dc7648cfdd88696ae8e77a90be4b6e2d24b3db1b4b9ab61b2ef2890ba7174215edef085f513e3cdc1399643095ddc362f3e02e51e7de8aa62fe27c381b6bcc3b172fc5bc138e02443cb6508e10be83da38ab9fc5ac235898923d07e3ab0422a35ee8c0fc594a6588b52a27acca155644da429df1487add197f422a684bb563b6d6ed44e4f857efb5c264b18b7a6b54f3c07e406f0daee29ee292b51b1c7831273dea4908512dcda740286b39f6a0c2651b6329aa1bffd06ed9f5382d3a45c4679bde6a36ec62c187d0571a184db35ca30c117ec641cc8ca1c406a81a3186fd74f7984a4262a44a531e5068a957c6026a7471bce01ca0a55b787ddc957a90ef16792e4b5616201b35cf38cda7b4b5a089108bec72c4c0b559187dc7424d89eab686cee0f8b79abaf58a0322230024d4debdd925ae4fb1348de00053d9b95b6bfc431fb100aa8db2bb7ad54c56c11ed5f6066d221c5f6f9e05ee8cd2e805799e38d925c3fa318711dd67e48158e840fd3d9382c45c56fe215f27b86bef38aa845f7aafa64dde033904e3f2b05b99f6f8c3f883b585efe8937c153b6a790ffd8c3c95835adf61af8bae639a51ad26b2f0738da1caee06d5f723de9bfbb51bce4a31cd43e9b34aa2029e137f64b92004cc13731e276942882798b0b397816240e31fd5ecb336d20c724da08ed6cfe2c4ba801caf4e137fab4d7cc13e9e85b60c68c4e2ab745b1eaa720ead276793f31b1e1e3884990ad927456a7de31018841969fa0fd769ab2b8a89b9afe2a230b790f4169ae6ca1cd66746afe8017358b4818e1c4528ca486dd1cc242159a5fbf49d0cf61c4318a2de23799663cda83fef77b5a86d87add6f3e82b46a670aa122b564ab07a9a17b00cf879619b15ad60d83d165bb7e20b42120c4fc8014a3af958e27f5c1b9dc9cba5d8b975c5265f40f3e1ef451da0b333f66b69a9cd4a261564c4f4bbe8e07033c9434a33ccbc4e35b9620e9111ea164f501004e409a42db4a87d31e4d7d3369479de9cb1a4410f91b2b20abc081e18848c99055716b3b5c1535d8085c14968b831398c33aceb68d162fa4a69c38d1720cd0ba9923788ab700b21afe4629c9a61fa6753cb5bfacce9ab1d89845c744d9314aec5fa2ad2aa6806afc40b8e4684cab143ddac731a212320569bc184b73f3e0cd510b3394faee7635e256d02b3935390334a46bd52f6638cafb2ca3fdb67641bfb1baa8fc359c59d1ccb64bb945fb7fdb9723540358f5f7c0cb51e762bda3ecf3a3e266af15031185e99a2605cebb55fc03b57fd18c184f2798eb4ea47c40e84fb85e9cc8e048df3c0a7774c1e2eb07c0f5b5fd241e98276c05429f53d31952253272e8f6e2a4559daef1375356fd4b3d69a437e6571069b8477cd1e41dbe46009c743f9ff9c1895ed14de2aa59b5ff9501ceca559c4ab263585a7b95b553173435f676ac441e9c1858665cf5ba0959c05cfc07fc5a66b41552c11eb0f665d2c1aedef1172d2a39c623c3bffff495588151e2cfbda7a1422075490411e0ac00119b31a7e33835cbf7eaad799958de141d7fc195ab845127dbd9841262e004ca94847164e0ff2031793e4389b2274d655f39fa5f6b3d2bc9c6324808af56d9b5442a808f90e8ef98ad94fed0acdac0627a1d948d71f6b8f0f1503cc05ca0d86e1ba4936723fd924e712b92f6456688be4f5f771756df72a9638c5adca82aa2d3dcbd4ec7f5b785b3aa4ff55e0cd15937968517aaa0f112665ca18119e71eac0c899152cddcfbd90ec389d798add5de13a0b65c4ba305090d0f1cd80c2aa8448c5a481d7c7b9759c4085dbefe29edab0bac26e2a9168ac762fa5ecee1a8cb1352148e014405186b741f1f85edc86eb9149bc9c74596ebbd3cba41d169258d5d88937a0e1ef924d9860be9eb5265ad98efc9c6495f37792499c6289d3746a7f1d2436519c509d81d940327b758b5748e2917033dfb3af4fa372676de1c644eb1c1656dba5320fdda1272cfb6e8f6403f99bdd466d89754304af14f5ed4479290ab7bab1be277abf78d74462291859a6fca459e017af3ad8f204dbb05c62bf388c781ed497d33d2ce3e9af94653a0667408ddbd8054ab7074da31e2d881205dfb9ce0c6fd4435324ad5600a7a7f583b9511bea6d5aa97665d0075a86c77027879bed6ffc6d4ab50668b9ef0239eb7f8a88e01b73ba6277d607465a203158354d4caba20229d1e834daf6373b5e11b153efeb3e1de8c815867a8c884893667174f390cccdeb87f6d5057774d6b62848d97e66caebf9a47ce382abb91888593ba3eac3cd782b3ad11cb618804b215824f33c67fac6e56aada59a20b1b779ff459c8572a4512d4c31956f9256e6f946df2f2580d43d87a37a5fe88aafb9dd8ad56febfd7036f247b728979e253118df3fb7416fa80498bbfbfab3d7ee8e3aff7e268eb17290850884584b29449fa9055eba7f0b6269610dee28f96b65f21f9e0911295640db823fed5635b75964e667d5063c86070c2c9ecbecc355da0edd38c257646f7b4542fefd37ba6aebf0a44c57a8b5ea546f44f8174c7f3654464a198ddbbe1f4b1d9a72bc1e9e803b79cf5a7ff43cc5f4ffdf271aeab2aba988b1c9dea654b46a548c7728c5311d2c3704831a13ca2cf713b500d8905e84c6e3ed94494433db490b8469655584618e96e272e109505c509dd3a60d1511323eb107c69b75a4b8a766cca064a943cf00da0d5cda7a76f39dc3e07b22df32e5145e6c81e0bbd67988c32a42027b7bcb43c9032c329d05d7f7b4dacb3c38973d16d2d9d1b2e2aed09dcd62e8f14a96beb7f3a538f88672f36d3e501d5d7b65cee99a83035949ab0b1d3a70d06cd3311d573fbe18c09dce5550ac09ec950fcbdf2abb952e801afadbde7701eab575e51e950bda486f5bf5adce4497b945501a9272de0ffb14fe9a5e162bda56e8aae2571445b62e577a91f6c2db96fc3170b81d897b053021b7bc1a0598b4f4cf45282520f016ec1fa0c2e613f86e06d5535faf37358c271390172c04f6118b26eabbc83168776c9fe65db2416c86e683e9b321ce9593ae02145b6cc11ce3998cc504bcf3030cd50adced265caabd51341588e9cdf5bf015c4d7e62c19d869749812701a1e1a55c1bc620d919a19911a2f802db275b681b0d51afba8b2c9027c2f9aded150789baead3142f23ac13ae78abf33d5b9318635f38228d2420e7aa511ea3cced161593f715f90998df05ba0c5cd93b6f628ab04151bc8beeccb7e673de7952a5323387b33756f9300d6dd4650beb0ab987a6c5f4c28dd89a91a320032d22b05ae642f4ff57275c6c52e75488ee99a8594d9c6928c049b4fe5eddafea7bbe9df8784f406c876d0b51742e2d2dc482a399bea48be684081b5236a64aad1217905421d21f815b100a8a19a2574670805999ab1f4c186f3dfc34effbfbfebf91126ffd378377e4951309844c0ebd11efe94b4cc9db652f9ae49bf0c72b17b1be871244550dc504fe517831cbcf205afeae0ae62cb43061e446e3f06ef7fd0619d0b81aa24f8dc31660a5b86a49b0272745f383196e1fcb82104b895e5610588f42678d957a541c21bb72f8fd65c5f89f49eb6bc4c1a7e0cf20546d678518d384fc6237c2f0b6d51eb29789dfa7c1ec659b7493baa0c06e880ef67eee4b575987342ce8d8bde574621da697a744632f7ff536ba8e6664af61f9b42a43b3153d87716ad1af5c135904209312771babbdda1203d48e2cbd2bb74e453f05d5af9b93af64166964b5ebceafa9eab12b3b3d513cc0071bf4ccc27a18fddc7dff7f094f489ae0a8eb3ffbd5686dbf5084a4ae9968a52ac5a17385d31965833f9ac16ea1e3cbcc26ab98ca0ddfe2d802bba58c862c475527ff3020f30736e0d3325cf6eb103912b8d64553bed7567255607f26f12b62e751e303e476b47dc850739e654a53673134cc7d5bd6c96ebdfdcd39c49f30f852e375e5edb6b44dde8ad6f7f9728bc01c6f05fe9030789e92b3d4da0d845f6248ec60dabb70140590057bb7cdfa538aa5cc5eee74caeedd51cc17ff4af4073e717bec1447447926cbcca2c1dc87dd96c6772a3f73da375fbd61f9c145349dc2b76a0cb53071ca890f5aa6a401c7565b3f50fbdcb360db20586b932630282bb7fa5b635482b5db72b0173a72b504aa16c6df43f726d3ef08b9e1a4c89400074768698f37767a62f5eddc63597358c4444811c6c8220296dcd2af131d0fd26665b895a257d6b23e77c72b4338c0090a61170734b8ba80d5306b5f5cc31d72fc4713623d5fea70f14062a76a425b1cbc664f82be502942f061daef57e5426914a4c15ff989a5c140058ef6fba5eaead9074fdd6e9f32decc82afc03f72f026c5d53782363c30f39b7dbd064b3b6c5d00e793d592ec4cffbb5947c3dd3a869e4f1a7b0d5f93b9019f59f751c0465c66494502dac5f4c4e1ea1cfde6cd7ef8805bf7c122f832f1e0dca14db224119d7644d2ebe2fadd9f21da44307d41432f2775dffe6c0ad279fa9c5f3d26ac5d912bf70712e7e6e6d2673492c32b87d555339db24d4da6fabad6dc439a1fde60089fe255bb1970d8c2600dd78ec916b2ecabcf91b1c8c34f4981fed7134fa7f4caf9d8273b2c0acd28a2a202741a548cba2b136823494692f8dfe420801c87e2472c8c90d12897ccd48d6fa6f8d05c79a63966cd1ef34fdc265a7f17e224db2fa1ffa8c066d16ba60ae2b3c02b5482472cae7a8280ef4921a74160151f294b93f9ac7f842c7a40ea7777431340141fabd9caa5888cc35f3edcdc8fa847426ac51136b4a38dd16a49212033859a10c34f3605aa79787c0bf23bdfa95562f9063a0d093e40b919db016343a2937afe3e8a0b61041e35ea01c58a21686ba81b0aabd932ce12c5f26be6576b3fe7b4f11be2a04c4841273d574fd91dd605424777d4f9581a7401e9944da01c4afbf7f74b59730131022e36d44a28c882b3af7e0b3f7380e0d15b98e5ab665c33a760b2fe2294c12d39e93d036836cc288348c5a801f42200506006472681910b2b78d0d37bc01e6e302730abee59cc1c251eb5e0fbb2bdca175c656230158fe1de483669c479c514197b9883f88e7f8cc04309b8ce39a47b3c0ac0f68719ee24bc002c9581dde1e0e5cc778bc5ab6aa0a2b732a669b84891a1b9169b9bb86467117b997346beacf4cafc8664f11bb5d9fd4aa5560e5bdfd2520beb8c9b567e4b1518ce0e53b1dbdc9a7a3f68f779b542d7420ec1589fb10c00fff3d2fdde3144fcd9c5941e55190761a2b25c2ba70e20fe5c731d59156adeee11f58a474b84ddd4971769048393ab3943f45646337a5758c41b37eda74c6295115d17ba982deeec8ab7f82681aad6fdf942bace38e8b32f40ed55d0126a75b5529156855b6a9c5cc55ca9cf87d7dc513ea314940e70b191c86c87e0e075deb98fc8b13e0059936f5f4ed7a19d2c849ec23a294ac138aaa96dc886d86573d466e28b1e50744e5d5b5c403a0e12b4c88a0b56eba19d4612ba4ebb20b6946b4511742c3b2ba049c886d1602f4e581a5380bfa5b1e18f29707eb5040d334e94262bd8b72b7c3d442f0a61608cc66ce4b1bcd285b8eeed0026af885e2506e327b3b56653055e0c91ab76cecdba7dd01ff4fdf5c17f37b747c7323b52020fe22364a1ef9480b7ea53d165df511b4e799ea9a21f396d97ad2ad465cbdcc92fd342c9af2d434a303c55e52ca0383d89bc85f58e08f8281a4bf7fe5390fa695848c7908077c288b7e542013b4db6158c27c45c5321a6f783a4e29df6979cc46346275fb45e4ed9b90eade5b0684c5c78e01e423f283d9b50534bb02f046a2a863efb9ebb5775acb373ec640d9cca1ce99a6edb9ceda832de0fbb755c31e20f8ed889eaf1cb61a111e9e1ec08bbc70f00b357c2ca40fab01a18e3a4214d3b38f7b7d5bcf0a323d63aac2cd3c934852d9fbbd0b8def8d0c2fec45f679e07537eafa95dce7bc9a4dcb329caff979ae0cb112e92ef46411e6bf63be2ca5a4270ac0e9d262004a38f619426c75d7dba682eb7061efd5f80a0407b88bb209f21d102b34e3dcbe9874335e5cac3715fa5ce0c440db179e4e5222a24422ae6e1dc66baa8c7a14e9581edb5eff119e5e7c683a569341c20ae43b31d27f7e1153faea28fd3cb37852097850833c39ca4140b8dde89f1043d2c712f8133469245febeac2e8c206e661e4475f8500903cfd833ec763ea986fae4ec5da7f37ff3a2e055337a7079199d9143e86c594076c82b59c3f65b3a59492a957bd8dd0072e83d7569258b22e6d02b4a0ebf8770047eef9279a441078595c89c90b67285f935bff68889c747a164197507a5fdd431fd9b6804bb317b72bcc65a42dbc81d58ad5326f2f3d531192e729da3b555aaaa85f23776d5af0cc4e2ea8eab9054af63c16218bda9fb2fdef0dc449a4a1c81848d8219f54f2d4c8419a0e18672fef286f1b0f47efdfa08a3c9726ae5a2d1774d1fb2a5a9c850c8f15040f8071093c4f31549c548fcf4eeea590d0568d18baef634a405f19fb0f9b09b7955e64c1bffb9c49f40eea2d0a9317257371d413da35022549adfd8f130f23c97235bbe3b0fd59b920eca80507f296947cc07e4cbad790be0a7e67e5b0a54f857ae934e94d5d61a8daff779e20bda7c06854473ac7d49fdc7a819e468897ed087ba4ec0d70a16655d35b5fcadaa86a88c0c1e935d2b95e74d5547fec8366faa1062711c8cbee638f3ea394459f528b58f6412a7cef3b6fab9a2b55c30d490ef81d19afe6cd1651e7502b0c4015918e66181920ccd126df8ecb3395079bc574adfc5b6f42bd9605e9bfede8bd3a7e8112d0ee1bfebeb79328d2438a78f39445c2aaf7412c3f0c8d251a6fbb8192412dafa68f69addb43e72c00ac4b97bf94d5eb6b427e5a193967cc77b47576b0e50d9a8dd2d7d84f1b53d707a9b74320a626a79444797b048be400f8339595e7b99b587b077501f6161d8ad817b30b0e1e8fb1fc89888d473eddbee2cef540d18709468eff4251493b35a494bbe940cf1e324a4bed5068efb09dcd16ecbbf09737ac82aa55319263e15335c6b13804e13e8c94149901b252a419a91fcd9f63299e9a9a9000238bb65f43cddfa6a0edda5ccdeb0d13ae785b4182efbe9752f5bf2ac4d8720bbbcccb3d974c955da6825db1990d9939e43fc5b67453d785d494bdf057faa505af5af8876e0c153b59b1963d7b906fb99d19ff486e6c45101f1f224fc130507413cf217a234ee64411564ff1ef68711d96e501789782d6cf527c05fa34acc9eb6ddbd6d6a4c2814d6debc20b414795b12b8dc7546dd8a560ed6f974e9ec7ecd3bb0a3101dae0142d97eca8615a2106cbc3878b071afdeaa66e70dac232d445c2fcabb850d3253361c856f5169a3407606ad555cd43317d87514afd04339f4ca663f75a7e90c33a312b014e11b73853722122e4aab2644810a17a2690fcfd7f861ccbaca9144d34801d6291af5d869f93c251f73e98d5c30342c638e52800b614c8753b17cede4c6bef975a7208f6c39579351b27885a17def9be6a4e09fddc274d13aa9616e7526a64149982400e96987fbf8939a97b347730252a5e764113b26ff153482bef340e06068b549f99b06a465fd75871007178970e059ff661cf747e53df377be8fa279ff100ddecb77e1bc8e618df4b0d52f9fbe79ba00906b591a8891607162dd0e0a23349e81ae17d6b186685fa3924c61da5557bd58f9b0a1024326eb26290a2ce14a915d1938ab2a1219faa45ca63459cc07c5627a86048f7e1751c1f4e63ec4cec8632e1ad6c8df77c47b6a777842d90b760a1e83ee432095dc060c21fa91dc34c0ffb0d558837729cf8ce6f1ac0dfc118f9d12a66d71087b18987afe0e507be45c8d0355dd9af817fabb55aa849ec1c825c01b6eff612c9ade7aa66d22a8e186fc1d165fa63b790ea7139b566fcb239587601c1780dfb7475d93c2b832a1de47dbd13e96a5abdada73d79abb70a48c2317ffc2326bc05246046496ef53fa793d519451f7bbbec84e239e3a40906e0cde9833c6fc04ce6fe498b4ff4d898abeab71a35351a99acb3ee3e039e2bf6219682112dc1d052abd92075d4179015b800003699f062c81d4f5aa9d5baa9d671ca50c0de162df436037d40cb7287680c4ae16b60d9e69f7931d70b8bbd1e35078d3045de9e2e4b4e9c7587cce69f82148a0ec722327787a6db9a7d05cb140799764bded7ae65b5f03252147371eb506d5e463b27b08a4639d3bbeeb08fbaaad4ce66e8a626c79b0c276f3f41176677765bb0fdd605ba8851817a415bea787784a82a06e185c60a90142c72c729a27a137907d1af48a4fb625631c06a13b92f24f45bc1162048bd055c600e281ff59ff15227996f72ba201778d1ef083a7e3405c0d4f756e52408f05e68c1553d6de2a4b0fe08dc771be7d21f64371b9a6a26f09881d4d8a702bfb88dd6b0953689d5afc83f46b11acea7d77b830c9d2f5107d73d4f4320d2336c53d50238f2ce2f8c37e0d41855b585554abc657c00a39b41d68cc7bc606153707a339b4b3fb6bfcd47e0ca58664cb253422216904e3041b8c9fe1ffbe31a99e7912d941895dc72cdc5f0a67ca9a081b6ada08aa7024ff736991b3fec4129bfefce96bb29da722833afd88ece7c6c2110876037507e837f88a125ec0c0a04ab13b1255c2013fa1500bd5bab4de7ae7ec2b2d16999377bb8dabf430501ea1c27e74720c477180994ab1f20a9d5887dfe14f0d20cd8e3830284a6176b3f1b1d0d55d228285204d17722363aa0a63cdeedb7c041dd27fbb31afd493a61c21534e65ae4c2528d46b701759785556d509adb029a91e721e44314e793ef6f9f781ec5a02ff3f7a5826eb804f9a9a842ab6ebfe3a2369ebb85d5a229eae0dc146f58bff4590c090e2c73204a37a4cd071bfffbbe8848dbcfde8cd2a5833535d44680a89e84114fdf210cd762ffbfd07b904f1e9b876875db5b1114888ca1b72a68dd0981be0cef43028e10064b66e69472cfc0680746902d2f4f5da59c5a860a10eece3745bdeb396802efb4582fbdbee962a3fd3c36863043ef94742754dfb8fe37729b824f2f0e0f624ec2ffe1fc2f20a4f963a820d6330d3acd42b757d4ffea5e03073d95b2a3c600d9a05010b970167ee8045cdba019b4812b82f58ce6807555997e1dec426aa605473cf972da68b31b0ab3aa291f1b7fd45d5a8f1b34b2a83e7aff6f29369c2d2eacc18a019cce0ab15867c85c43ca877df7e4d0ea5c0ab791fe7fbdc404ca997f9e125b212ecd98315fa149f02b88e3a726e0ed672ae2c3390052fa7de83e9918578e919967aa257d390df26455c4494a03442a8e647c4c9850017435cd373929b9052cb62be3714a5f827d7c6d117d1fe4eb72cfaf8f2ba84254e657e7b1c108a2e3232e56b2c5f86479739575e6602a86c76b6717e82840ac15e9887ce4a83211619d9ce5b2f464ed05476b32f54e1eaf68662539e354efd77b19e4fad4730ee01fdb00d53183773df46f940cf3835587833c56628b85cd5eb9ee2820bc35787e57a9c4fd2d1d7b0e52215030a42beb0088b11564233f9207e7422a15611527cadd24e3756788cfc695ef3c4d932ee45ad6dc2d1687b435d0a60c6dd33d579a91071d5c53c0133f26bf5349a39e9c6d1da1d44ced3e94b81df728fa97aae16c54590e9530b0c04ab5bbe8f8858c5cdefaeb17d3a5ea232d67b2894cd5cb374c866ca65259d46e40539836e7c6fe813afaedaf9a15a24d00933665686325847be791579b94849e24f1b363dbf0b7b08a33da233bae97c57a948fe744604cc4bbfc74626b14eddd060aaf75ec16beb778d134dbe659fbd2d210c071f8a6f4a62fc14244f07895479686897d6cd5ef1c339f8f8a48d0a5277ba57a30ac9c9238556bec3114aa714af53eea334c883f28d8098562f3f411316d14a2d3340e2dc9d753f5f0a9533f99426d8eb90604dad200054c83ea876f8856b264ba26d5176151843b268874d2d6b3d4e74069cebd6ead1dde0edaf0fe218ab4be56fd09e4321ab3bb57d15183f917c533339d4e2e238891ddec2eb281e7ee05fc93de39416eb0298551d3c6fd8f16b0598db91c853ee1cfc945c675268dba708c17dde1ae7de9b25920b765e570abb25ebbc485477e7ed5255eb16b0a8e4957d7893130ced01eebf551811a4ec1bffe7cd2d182aa15d96cf9c5a2c83cf705ea6061f632feaa1888eabda249ebb583c5b961f0f2ce8804a963ccf46477bdc6f2cb95e16074dda67104aa82a8978240d866d8bbc715b02e762ddfa4bd6ee4895a7c630642d41eaf60feb0b6ab2e553c53080345cfe4daaf6248b9b19d0c0bee6823acfc8563cd59c0c6ca0766c0be582590fd5eb78cfc076376034060fad8db3a2134edee6308ae72d9ae197e1eefd9f5e988df5f2938826272d6be306627e758a2fd1c3bcafd16a49331fdb83b4985101f1da79472fb5ec91cc421b934a90b7044695e643ec3015029d0d1d23a02c39955129343caac0ffa023f744f58a848e7dd09e00f069af86268335a28911b4ae565e7442791ca4a7c032336aac34f5ff6ed62bf3286c0f79853a5b35c82fdf4c0fe0b5baa9700c756e6e90021bdaf28940c49121c02ce9f52ad9aa01bc981783eb17606247cac4d1644317ab910c6d57aea6ca2b4fe2402646898b83250f319c87df44590bd72d398d2acd0faa3ac010ecc1ecca69422952db198a9b52e6058c6adf68bdce0794810766cff1c34bfbff3dd4d11ba392f7bca62193b8c5cfbc909ba463305a84a3bbca5e6872bfd8023cb0c6dc6b33ee8d017ae09a21e4ef4a527e2ad67cc7c7e7bf7ed2ea09a71a8d24d62a5537a5e56e70402d67eafc01150f5cdd3688099ef32896a3d20bcaa987671a0c342473e4bb04c3104899e7c2f855cd897d91064a9dd522a897293aeb654fefccc869dfce1b6b772d44d1fe11dac49d7de1e5bb1fccff0d36eee88bb3407587953360215d9bcdbf47788228134b8dc2c2bdb3e3fd1a4d229ecd3b0eb769319b645defe9249b1ff50beb834e330301710a0d1656952aa9bfe421ac95acc10a32e211490b67247e77ce2e406a6917b8279abef451a0de60cb014d560d32de3c4d89864e26c7b3d082bfa06c6b7f8f08b95109ae012f081b458e1ea478ce2165adaef0bf00085684a8c52015a63df2ae34464b0220243df1f474eb352546ce79def4efe8d63fd65b9e75cd4c30874bb0252e8422de3161e1b2658f8ebb650a3a630cb006df70e2385f5b9627d8f7d07f14d03602f723bfa6fd9dc8a142f4341998ba78da0abc02d1657e01000f88ee224c49e1888e1fb600953c325170b53894d87e589385aba21670cb14b6d719a419b2f82f63446b3ff1427d7bb4a48b6226cab50031eb79b2dd11b64ed45a4d25c656072e31523ce618b51b8e38a4c52c58b8f18399b9ec3151cb2416ba59005a53d4ac237fddc8cd7c56399cad147bc7e4fd604b68e74e0bb4d050fe468666be5cd0a479741ef427601183a8223526326d8d74ee7495b5e869126ba98055c436b482f7f09818c2961961ab279650a8f7ff64206d359c2c00672beca4ab4d165f26be6a72e7d5be34af13d59661a317dad3c63b2509229b942be310621db78306d889b93eeb4d000d4e6586f083f68c98782cba6dc1a791d1609ccae2e75a729d12781aa2fc38041109900d8e258f7f3cd01a3968d12e45484859eaacbe2216d330dd5863561d8a1f92327ed6c8404d2ee69c2428696ef0b23cfd478bbb90e2529efd0bf99768ef8247dab6b244a2d84317ee10938c6c0af065815ffdfcab14c05c3ce8f7940a2074ceda3b72ceb021e3875c5b3e35475233d2938edd48911dfe5caef59c26f478cd23c39e2335a10906ba0dec9ee7faceb2db468f922299e386e7d3feeb259faa071a086397ecfe7b420ff9b14a5c9b04450a11f08b8d1928d47f26f5e0f228d74145b7bc65ba3bf40828597fc0d0d70ac7c843f095e24ed36cce6f4244347e18b656d8b020dae5de32ed381298e3b2324feab20648e6e5c3a43ef6e5995ab144a62fe33912d0c4e502486634d059597cde6d1326ba56c1c96203760d6f03ad9c39d6327455e34958a737a03f00c4b85cc2643926989de3b32621c234e8f5aaee6ecd2d80a7647568572e11dfc279d7f925342aa240bf93fc3afba6dc84d1d432fc0cd398c522f0a39461bb84b75158b35079b53d42d05b2ccc6579f24367ea5352da8f27313696a9d347d908d3dce5d3c5fdc44b7def766c400576ce3a97d6820cf6b8d469028f8ef859e14e63aea1059e7bc77d9277a4c1b73cb18b80d30a5b602e533cf602996090abe3a5b6eddec78ef36bc25fab49a8e078a8fbfdfff4a59475923f8f4aba306b708b5c3b538dc796655401094f4e4b81e2138d4659bb6b6a63187d26daacb7d5860447b0fedc14fad1a7873c02a26cc89ca50c87a766414df0a10cca21138573b6c02f8cd9a78b7e7ea405cd19d6fbf9b2f27111dacf883163db7332ed92a5e18e8e8d15c5a166c53425a973eaa2dea0f8e23f307c0ca9755b1f453f504511f95149f54a3cc0619b206e7f78ee92dac6241dd53551bbb3765a0ab5be632273aae7c36d56daa63a7bb2d093073a6cedde2fdd466ac7ff249adfd553df9b5dbc410d81739fc78e25f2914b33e65a02fec123f1e16041b936b3f6f1563d355f2df6e4d0509d99d1c2ab3a26aaf0961a09ddd4280b393877502d1109ff3a04282703afcc470b4f8bb9b89e048358dc2b292ad37be54e6c54f6b5e2d791acd592018c7f804d4db2ebb7b297f70a02d782b5e6c6b96835ab600218a5a05150e12f83c4a7ad3034d3cd67d02dba8d38029b21bc91c623b6bc0fdc8f29f24a249e0e175f478b7251441c50d69af664c1ee9fb99c496cf9f6c5fceaca4402ec18e9f599fd2a322ea78b4678de3a2bdf712c71dea33afc569995d898270bf0fc81c7bbf1ad32185a3d26cdd60b4cbbbb80fd3a594b0f0a4ea1edad7b42665b9ac2a584a645edfb5aab32a5303a748f2cf7698d1b0cdc11a39de82dbbde648c5fd4254cb821c65b57e7bb823c124f0ee1c2647080504201fa22cc82bcb161ed7e244822c61481d804871d42c2f8ed2fe44dfddfb26836840f1fb91eeefd173ef9ddf5f1b5bfc2f7525f8d4bfc3fa63b5e6a8d64eb64a88488f847345df83ae1d86c9d82ffb1194a41f58896e09664dd51a7c11a05272f25faca187d69579dbc71e5084d4ac44b8264b542f7b4e3e6395f9215d68367ef9540fee483069e2918c99e76bbd733c47f77b93f28532077a5a7b9944e17d850da9b51645bda6f9163f2ddf5c28baeb55e0f602f41161b173949a724005dc3f064c8415f58bd56cb6fb5c3aac7d1f9360107183d6362aa34c8c68d3cd3a5e5196530f541c2d5efbfde59221bc3d3e2690963313c08b257b916db133b8272ae78ba62181b534529bd9b7e122c0e413d2c6a591f02443e23763e549cc6c495396169f6200dd6b82281ebd3e27e1883340908d1c4e3c09d5616d0ae4f949d55e7df1a92a5411a470d32a35dc69b83fd0f23b9e8d92be32bd284ee4865ee76e724f654d1064d87a074f8ee62e943288e6d21c9653285ff1e39e767579b8a99d8cfd159930e6be8f009734be4a837019b225d1e49dbc92bc6c627c2d0bee197e4e1c374ac65dc3789d5a866c368bc7d63661d1271bd82cdfe7ec44430fd689721bf9ff54d9bf05854c8905098521e245fa197f832267109239b626924e1b2d9e0d686565d0c529d7b76f431c4af9b36810b1bc49fa34fd47ef16d831b98b5cc51a379925d4c2c3beed696e2ff59ff96f97c78638f3468bd580ed1acf99e956b745aab7920ce1d1bfcd7d9541df488d79fd2501d63ed7d28917f1b180b76b8fb138c947368d2aa461dacbfec1a35b2d2a20e899d6bdd5995beedd1d8db4302188a47c9ad7be3c5ded783eaf733188d910ec3150972f39e1e45ff1aa4afefc0fb4619f21674d3d7de2f9b09e257e38179822fdd5606f38e8156100ef5835b1010cfd7b75bde5e00ff92d0ddef5d68e4c11343c139b41208795357d6094f84617198f95b78e27dc3b9e48aaca1baa9d05e731f92d979a955781fd248f568906ff3c87738258962fc3bb2412a668a4c572e060926c243699a6ddb4ad8d3ae8b313d7b1450a60c6858f65ef1edffc1f1c69d18f8b29ef2a7beba15f08d098864322e9a354c759aafaa059d7cafee84d3c9fa54116e2b02f4b0391fe04a9f6bd3e97de013b569f913512632dfa4a79f0c3794f67a181634491de2b30667ec1cdaa9022972d4cfb3ac86d3fd39e180bd57ac378a1d2c8a277816c3efef8a18b3bb63f8430e670b22d7b0fc476ac81199744edf7b3e61aa7ec9894886a64c95485687d48958ebbe711877c3d8956ffd672c5d1120067c487c632bfa93b079a232c9f03b5081c05c0cdc6450750f90320e8904597192a13daeb7b2adead8a30a3baa486a4d1deb615d1cbfad3412497f0278c516d511016bc3ecb4b515443245e7248640a8298d33fea32eac5be2f42c0e4aa6d797367e36e3f247d836c2e3b414937bad4a9c8dbcea8559e4eb17cdf4c33eb44e1f29302e68a1084517e54ce5f900030cb38c7826b3c5172c1ed432323244914ece166e29995958afda0df3d683a24da3b626ab667fd83d26f7ab53bd533125087a37f8922b361e8d1223f90487106406a43ef22656c937bad8e07fffdeef3f0a1ce0ffb7e6669377a98a36ed67c64d94849fab7561f8f2e69d3c433fac3accb98b5ab9a2b7dfe8b7b27f474a31bd3b89327ef0bee195ff7a5ef9de057807ee31ca8a7633836d62675db479ceb52b0460b9089ef318773d7a90ff1bc37f068d6ae3513bb6d6173fde96cb047b2949c8660213efcb4e65d5b7fbbb903b523b7ea79a1d1b736ea59181c6eadb0ccb8e75f862ba4b323a9b10ba987aece943ba0f506c706c3becad2c42ebdc607e809f6810d4a88a36d1577b607474cdb353481b8513c7c71d8daaf224507f0b2db57d6d40fd3876592c031ae3f589a19c4f8435a28b0a703e3b84ad6994116a7ba1604481fa77586d6f3c99b2f3dc6757537f544287203f7e69b0503ae93ba2584e8978805f6668e3c5e8d8c545d91784f248ac25f4b353b4453f1b056ac5e4479564d9226e5b5e16db31e41791e5d29703594e5139a4930d043c7056a30ffb3ecc23d025e76737b6ee1ccb737eb4f54c78afa9bcdf00751bff93e85e022d43217c89704732abe6a3e19697591c62b0a3781b9a2944d4f88680cc68b528d528938e408376c8cf0717fc873cad422212c09ed5b14a3300e66bdf908c09b6b4757eddf3f0ff0f2c18844557c8d60aa327f25f828c2ae795456ab9045ccc938478f1629aff95ef72b93602da71a10cd73486e8ee1cb50091f702c60e8b63e276411627a00b852b571c48870503916b6578d87a20c4c8ee274be885d88c2430f19f7bc2f817e2cff57fb89482fbc0cdd6dff579a138d361ac65b3248305aad749f8040dd9846b80f27514ea8a0fcd6710f7594f22a31e15345a0d669926cef677a4bf8c0764aae23934d9f313e33fd19be6a091bfbe8d91abb606cdcb35bf1b95857a326aa98dd7962a6cdc6d22ba9ff3cd556da0faeb8e158e972c6665b285d06d4006dcd16e420ea7e634d29b921840d4c22bbaae5826c9367e1218a951dfdd2b24ef2464e561345397fe762c8b4056cde5e12e6b29c1fd7c4c15d9daf940278600d84fd1bb2cf5c270a55fcf0b7f19f3b1fb807139235458f19f3561d2b4e964b4e88c7daf3c5c21a76351e9d5617ff136bc76eefaa045e8e2c510270662275547e9853be4e4a4df07950f0712c7ffb7791eb7b31959198c1b3c0a7fd6e6afcb976daa2707e0d76f19398183d98b078211b4308dfd427dd6510ee797278e2eba586390ecd546a5134126e99bb27fdc00c1e53f8d5fd2bc3e33a33cf9bde0f8a64c49cdfb206d83218bce431f2b3f5610be2df2064ba5f5a7e8e6e4e591a37401a23bf327d537068b6f4d15aba3377053c312a7d1e196a63e89287de17360185dcbd21b2ef5384bcb9a83a4b9287d9cb365dd8476c115df5fe48d988907d87e5b934ff2c230e8f2a02a48e11036051518ee58fb247cff3c92e1342a60709d86518f85f402bd856f187ec43f2a02d837bae2d39892388363d9db87529deedf9736081f53147b0dea448abba5f06f2ce617e81972299fe9c1500a07b4a9165b5fe56329e693492a02d6275af8720e7f29b8e3c8eb6f63b84cd8dc5952369de81ae932f5fbcf75733c20b784078054abe86fbbb6563fe53071ab8035863225f2a6e58dedb42550ddf82a1457a3186b57c8d6a7db9b4ab5d0c5869814590903d331b6960d83da7c9eef3e17d2f6b548a2d06bcac4ab0425d249976db57755c97dc8d55eaa7493a0e551174804312f01c57bafff0ff1f98179888f07533d4d50b05a2af8a1b09f1b4e6111c0f7b97995431e2b92cd68a9ed1575ce0092549e530ffe007af87864d71d3c9aaa58979018aa41ff61de278dd68a5db4ff34a38ba2494d1d0b035d5969cbb3c7f7510533720837a55bf5daff77e95d65d03543ffefabd501542f92e9ab7ccf732451aaf181e6c5462580bdc572f1c20558949f76c1c74b3f765f52bfcb6ab3124985874e61cb19af704b60322280afba11338d2f2dc9ebc469c0ddc0314d53d7e3baa8a8eb5686dd07b4d1ceaa8eeadf334d5723dfc67f57fab54a9c6aaa643a723b1913dc98aa4065e3384d9fddd57e98261affb15c90828438a5fa12567f0fe2827498278e0ec75c635725b16db8482e893d163f138bb44c92721630f2070053b27a453a00993611ddc7a83a1c2afd08a1d4a58b530209200615493231430db8ae834faec8cf4fb92764aaa68a78251411bf9298fb6ed9ce71a50c8531307ce5990437568e4723807403936c8acd3aba78eca49c8c20cd4bdd31664caf576bbed5f5280e550416c7da6fbed700cc6148cefe8b8eb1637db2d5210ae52741f71ac2998c545a7dc1ed3f4116b4a5188b9a19854b5c3ebe82a73016473008bea8288bc15e5008ef0371a3977d054eb118a61e2efb2f7880fdbb8daa673adec8ec88860aa50a678c1b31913b007170d81ed2b1850fc7bbd0acf537a5be76f64f85e58bdd6d768624547c3d91f4c8de219388ca30c736c91eecceb226173d150e19c74a7849bb0b183305fbb2e474ba3fffefdea8a09c841b0aaecab1539fdb0f170d744c076629893d05a25eb9aec0ad1812b37e3061bdbe3fb5c591a65a011e7f13254133483ed8b890ec935dd426d11735cbcb669490288f9bb4f04b73baebbfc8d970d15db138ac3ef228ee9ac814332f97c1ca1dfdcca4664116be8d01c9715a7b90a8fd4244f5fd81832beabe2d5370dc3b803ac2459324bb9b6d5d347048ca83603af42aa29157dbc95dc5bb4296cfec15a5f3a0d2e0095379bb773bca17ee06fbaf03a4d1259287b55ec3275f7e19be1b359d001e828e1ac9b20cb7130a999e940c99cc1143a20cb97185f494ab42aaa251df68494b2aab9f29ff11d369c476b1e5c0164ee317cc566410d9cf91e0b2d86e6a1146e5df6a19fa8e593081cecff09b5b4b7c974d8ae6b8d53b4a75c308134b27d0df5105bf89986069232a1021e30acbccb4ce200b4c0b28d4141195c0f07b5e1db32ceee13f733aece110ae19866b0e668bfa29e142123cee4283378c3ab441964e9c5c78a215b4fbbdd17b6482c026f546a8c4dddcc73be99c7440b39368299a96b54f82b0be108ddef3fb71c34ccc8add3e66941fd47869d9d70d04ebcb8866f0ed1a7bc162285d885e5c37c98d38f9339245af86a556f04051208b3dcfd3364dcf08c9514967693eaea17c4aa91ce06ae4fe40ba3a10b2dfa53529ec2ea220b27eb2c6889304efe5772dcd1c12bdd581afc422148815f0efc45578b7a1e1168eb061cacf5a2061db7ca538e29d025e6a55e8b92c977fffbb1671361539dd19d8cd2ff2374f048b422195788e520ca939b04fe20c9219a84c4270164fa49829b62f4994ec4b43c354b9fd55d1dd07b0c904ca62ce256f79c491f726c306e32b9a0af7a1686fd3ce7893245c8552c98088a12fd29067c82030707dca8d0a6718091dcb83701e5c4b6f48730381feef8452ae25233a06164ce30d357358b507b4d736458cd553206d9a825174d974ca1806a3452034a8b4527b031398521b0748e1cc945e66ded6a2b1fce438777846c5bf53e237d2b0770f339e1b69139e2156a0d6f1f6fc402ff69e8e8a6da2512093a7f3b6d938a0cfc928d7a529933fcf4cdfb5f40d23f294d56d27efc8d7d4a0b92ffcdf448eb726d5f9a53bc0226d275f5807c1c3c422d516beeb713e5baa071b8f8591a50e73f3b5858151b319b3d63d2597376ae203a7622ddfaf1b025e2ec96fe85e3806cab6a8eba79564107beafe24125fc410ae93b1dc3884c5e2bf8891dc89bc39a0f1c6eb8666e0073096a522996c642539adb0886f433cc1d78841f60d97d419b12e801e9ccf15fd290f8877a14a733aa9642b9473ebbdfd883a4cce07947049c89bef17642b17d4e0c32249f519b3d2bb90230f6bdc6b56bf99c7fb448376dbda1e64591e2197f78a188043b417fb437dc2cfd97ee67e5d8b78fe5577bb5036074f66eec1d607b7896280251a87dce1cd29811fb1a030a94d25a7d758613f58a82365497025eebcad5f57de598efdb37266732e7b9f6163e526dc0d8deb0d88632be69663ff2a208ea5a7060374268df7513856ff647ca0999a2de68432892affd98b7bce359b49ef2f1d8d63df2f056b27c68a49a90a92cc12b7c98065a05d34288d69cd59e3bfaa375bdaed72a3ad746cfb22ed77d237efbb97291a45b62af0529023f318075a1ff796673c309c07475fe52b57a577cbbc0595c0485b9e55d059bb5092af7160abdc5b7463216ce930799165946508ea1a23d3708d096df98d1f70cabbc7b7db9bf9d859331e724d29a2907d28cb5b56996c2acec381f0260f01bc83a8eb30c7ff310a555b5cf78c9b53729e4dec370733879faff451fbf0ac789655b41d4d3853d094ac589b1767100607895e1175c10227b57e6486f4fd00042e9ab53ec6ba51774acef0e3c35246e40d5dc2605d8fa53615d8f6db4084875fedac834d4886bea4fe3954d34841d6c4fef753a2bbcc39ba32bf8c5199c426e4b149ac8caea6cefa6f96ed31a3ab7475bbd046b843c1f9d30f1a9403466175e4a59b715352f7573e412843d7fe6006388647f0459726b44ab677b2c11c9c4ee9b82f236ecffc837d2f12c297a398b37b643c347f0bc4fc7bc925798390748a169d9283abeb229624babf4b270351ce95fed82b7afa37f8248a72c88a734eedc5cde9390d2b2a5a4ad8d1ae592e3c7358e22f8cb3830a5cd9c3620c2141a702973819abad1654ede0df12ad29fce5740eee1d415a713c2c48d19f31b6cf06489e2c2665fb2082a1258396dd9c9b2b893751b473e15226a0a6cd1d1d2b706580597590ebffbc55643129c3ea3312878f501ce1233bad5412434e5590e86bfb9b0fc08e5bb03e80a7142bb13fc0e25336fbbcf3c344ab64a786a17be1c7ccf661b86403bc71e0044c733955c2eb5d941455d11b04c3335d2b7ba029faa64c025d1a2d74aac7ecf31cd275005af509ece6f853684a512efa50ceb48b835122511b872693b6ffd585df03652195e3b77b59c814d6c800b7ac1535ac269643c1b0149827a4714da087b6e66855cc714ba9bbb4a9ed08333ba140b5b1cc55ecdf18421bfea0dc8465b3b3604239faac57290e89fa683ade1c5c88e93f9d026552ef76089bc440e23d5f1c68e1be3c44ea4aaa4c3905ca76d729601221a97680748bae965057c17ae747e9050efe8426dc6f73b0f31dba606e39e9dfb60f39467a87c6692b16da3933ee4a35ab43b464bfa0fdddb31cc1e7c025105f6229e346d8c53956c433b57c8d508bf0db41cc82cb5bd356a4c47cca08b0cc9e6d2abc0c890b0220f657842fa8397873b1f1dc4dfd8083ad6ba6149d0984bd98263853c56d2dbc2823ac577ed9542a8c612399b413c79d98a8ecdf13b65fb8928904adbd7a9bc0f67204c6781ccce2b01dadb114c776510f9314977993d797ee4e6b4780aeb80f1f07d8e83547a70217261ea58fa0c9197915d01cac1a01eba50f06ac8b14185b2e2d962092a65cb697f40ca06e5b3d9f8b069d6822c749aefbe2628d098bbe0aa49bee3a643127982c4440aabbe2818853d6263b716ed340f94cd48d0aa3e7d7c23100dc29deff1036e2f3c2233ff63b000116db631bf9bf5a255d7a235f411aeb94e42dd35ce773aff941d9f09873f631bd4f889f6a974d133a1f2068736ea89361f2ea22ecdebbffc3016ed60d9c87c33dc86432b2697879501e03ab20f1437d46b073eff7d864d9631d2eb2f54f9706e366a7f04fd6020302d05d62548a38ff52f75426a71b1418ff3b4910d03273cf2a8847af1178d9ca776214745256a2fd6313f66c1c06ca59394464f4f610deb84cb6be9981429c0f50c1e6f0963e7da2e008dfdcd420e1406a0781897815f10ce874f5bb82f445990a12a6a301b899a0c800bf0d8a3bb48530bf6c7a899fb2953e70211be66ef35a358bfffb34f96901dc31c51fa1dbabe3bfbe280250994457163a36ffefb21a57780633e5851343db6f691d19b6122cdca277a7ecbd25375de46eac0ae91b62e6f2befe747e7f4f422bcd49ec0ea51579eef1d5d57091af0218e49cd397e4559fc7ce928486c0dc54f681b9050fb98b24c288cd89e5cee153ce4bfbe83eefeaef66602d5df1fc3d13707c8c5ab19298b06c51a4eda098c2046891ddfd0ef41add3d6b2e103538051c576595ee0ade702a443c524c8ffbab9bd57eed643983ed33c60de5924f8ec319a370f9f1fc82c87ca52f5f31baa0ac9de104245671e404f381df2b1b5fbcb4a320ad9ab0ec41e572869d013aaaf4f6267071cfbee3653172b4a11d8ebc39beb6ff0ea2ed947e563ca771acd4dbf47fe250eff441197f7c2d390946aab99d63782eb9fd045d014f2845276926bc7d26a7d3272f5508857e318ddb35f17dfdf5bdef73526384ed0e578d4e571dd5d94dcce6cb5bb628f58f78e08904e7afbb0904abd8fb47f0198c5b93eed05d785bd418e869504df91fc7e5016238fb8b91b143b0b64f6cd9f438f8079020046f854ac18a6907179b443c548dcb61eaabaf6624e2a2526d9a228e0d97cb333144d802c82dced56b2246b9b4c7cdd452e7b8d290aa752365513d56fd87cb1179867303fdea1987cf89c461aa2a981b58129d811aba6e3f0b68f5ae66051f22abbf22c2633312388b956b9ba8d4fe12fde64258759189a14f852056f9975b486c731ac98194a1a92bace6fc288db236a3f354f8ebf9db2dd8f91815a7b5d30bef2151048f55eb27cdbdf0118002e5e5f330a7d7f85e36e367ac3e2316d3e6824b27bb31f6991fadf68b394c19549722b7ac6ce5604332e29aa1460be46eb359c4a56398c18f138693d816df3980c2ceef9585edb4a411a2630af5be7587e32f7ed66a52799e4f6e067ffa1ca312d4a2b8b58425ed3189c3d36b093e04c585d3e782e368993bfe53e7055851aaa5b24f052012070cf527087db3166c09776ed4062ec10a54976ba11b0718a116c463d74c1c843138a888055ff0f94acaef2379edd3844e65ea969af2f216e7e3335df8506e27ba053bc93c6c846320da489c688b07b68da91ddcd38f75e2720cc3d98420cbb8c1e3f2b50f9a59afc2b9badc1e80590d3d71ba15803ece6bec024ff611f90438994493da3ff1f60bd092507e77a61a0f5bb8f088d84255f79aeab71f7b72a782ce836fb6758fd73ea9ae7446c7dec38c9c1e7f3bfd05d6310648bd150bf41cd4e198ea9c7a9ca6aae399b5a4f1ad2ca9e7f995e58c604d71df5d23874333ab40174c66448996bff8357176c2ec33e22115f2e1335d7468d2d2b39df27a56f17f6359ed23ecb7190e03b5d5658d1f50d9917c2b7a3944fae3292e7e6437caf22f46563cebe962181ee6b4fc5006b1502bfc12a1f22e7b78baaa7c36771f00f7249c8550438d5231fc5e9c540fa1142cd46094f3e629bbe7ce38b6432c8ecfe59e638c332cb6905717bcaff648e72970c448a4dd1d53f02e08e52ec52713ba34d8a2aa108fe1ec20bebf713da8ab091ee2d8c6c9b40e579a3bc1ed49dd876d8790e6dce6ad935cd8879721fcd2150431667348a7d79505006cb1362bcdd2fea20b1d172cd43aa10ae54bfcfd39288878312684dcc84d0e722e413b32817a03aa6341736489c797df154e9140b529f1d91aa0ee52d57ae59d336b7fec1ca9075631c25e99ba7c4b89fd705c85f4f54c6c7dd20bb123c7cfb434da23ce752de575eaff178638cf8edfddb532be8bf31aa792b5ec598adfffe5cc0232df4bced42e390ad3ebd347e7966f897fd6a8abb23035aada5ace4e90045c94b1281b0756c6d7d4d64a410bbb705c6c08c096166106e72ffaaa85d14217996f8837e349d3812e99593e9cbaa9e21138a2fff3f567742eab828767d3cb70ca192c7c60f0bd34a9a48c51a65d67abd4c4f5d7f85f878102553e43942215c8f01168f70348c2a9f1f22c05484b2c896966059a43129cbdc477be5d36015a585de395ebaff4bffb95be637f7a05243eb9940c5b081c34d7a0a957df6f7089c8a8ec99e1bfdff643fcca5cd3ea45d948113dc38ecc3768f554bf791bc9cd05edfaf10fd1083a29b5ac87c596cceee6e8fa780e26b490c0d50d1a6d394aa931c9227cf34fe21a9e7309fe51b9f822a6e307961e17794ba215ec09925ab3338233cd47eeac2594c13b3b6c2f250d05eb3a1177a05a05a5eed0e5c5cf8e083ada2c7b1f3b84ca288182a893c2b95f7cacd700752030104abef839b37da246c09805c86c6181a08c99c6c5e619d90b8692094c7ae24dfc0284fba4a2649c9dd727b3628350e7a92b9ea0d5df702a7d1b928eca52673302a2983417f5eaadb2c113d782670c67600b9806fbbaa59c9aedf091437e544bcf415bdaf45d500e42a9b081d0285958bc8cb46bc27e38f3c32c076a1ce8704a87f213e0d6d068e09c70b7bf8697193b7413606800100554d8a566b85e52c753761a7d66531d9378bdb1f312922f345333127e044ad0432666fc0b6391ed7144e3fffc757ff5863eb47c3ab5afb4eea7b5e768c29d4cc0fbeb81fa266bbeca77148d7cd155aa678d00c0d0fc1f8a17884ff97eeb4d2b51833024d3f6f2c915dedac6c0cf92038baf5f6bbb279e817c53e4665961c0fab7b93c8497418f0be0ce195610a0eacdc81725f8b4487ab2aa0a1f2b1b3664ef2bc869a1e83bb52c43a6e7d452956fd19e6398cbcd67a70d4b242de0e88b5ec27f00740b58a780fe30d1bd01ef09987dc0a2b4734cdb609394d1cd5991f809e33068c2fb2052c10c5a284e0753ff822c07d1888985145b7531009fa5babe830190d3d2c77f9eff8e1af5c7272568b4dff39f1df7760e2160b6d19f707582c74947fedabac0140fbbb3d3fb678fee58febd11fd4ac2a87608c90c9cdd967403beda2fc7f3f6bd241fd3a5e2e45591247207ca454bfb8f681c55ed1a52f080000b2ffd4268f2ac53e7a3112660c1e135fbaa455b13b28cc9212cac63fe7a7f1cddba50faa8083f5d8a56cdcfb6a120a70ffa6f1cc5b85ac94b23aa5e33ef9f1cdeeeff92cff2c047bd6f83983fc6e0f5ee485c127b4579bceaf7be29c4e6fa3101781af3b59d776a8af4cf5ccc60f09f1b932be2e7b3329065e89257994d75cd92604745cd0dee3db67a4a0911417f86f96a4551317e5d6b715f10a7d0e1687a73de0e9fb09af3a71dbf1b146ae32a68d4b6e31fe89ae0eb6cb19714c2862ce8a6ad1622e04e6b88afc7f5cb785d33f8a607f48b5c07537822293567292e94e29113eab6e5a99a5acb218a349d46eb39d7ec5eadb613c75447124ba4eba9002e3b61ae14a7080a0d8427b6b18ec083357fa37c3366608a26f8ec9d23101a633fd6cf2f068412dd537819b2d32b3d888de232fd3c4b21d635b8ab6e749dd32b6deb08757987761d889827f4b56f66e7be87517de9a9ebb9b10c81e3f47493e88a01133915defab5c59953abc65b1ce24ccf953293f72d23457b1f057ecfe2a199dd41728b2f148b0c5a5dc7c0d0b665b80576a7431e26310f05677966544f58c4be1ca1d1554a0431545eae3f3ad4053f3dda2808514f0bf3c2ab31539144c7fe3b650c306a8ea5a24e8e241efd1575faa2bda13d95d25d1a63563ccc644e39b63c05e796e86cf72c7af161f1b421ef8cefe451cc88c01bfbddb513c1f1b84dc2d074c46c477b879e44b8c004f3412ff8f71e6cb252007afcfe587b043bfd5d463bcd5e0129e36b8f0ad5f0b2fcddd9efe671730a99b817ec27bf249b84f606b7f89e84ed92d253a0e7444e45ca33372b4b478b8e173ebdae2431251dd3c1590e21abbd9df5717cc7a2ca97342792b4079a095fd50139ee414d49deaaee4e74f05959399856bbdc7b9a9ebe1e23afc269a286506d8e372541a562d1162bbe141694efbc9bbcbcbdc76651847b955e66b6baa61bb8e382faf1c5ed694523b91ccf89b4c54405d5b852660435e63f67ed7139e95c591bf94a7c88429602db8eb68d2b8543d12e0bba5b1e0632f54df06ae9fd4c89aa2a6d2d35e41dae190c97c55c2c6e46ce22c64a2acc1dbd81e7c3bbeb2d43373e473cb02aaa2c070a026ec3009c948e67f26c80bd58772740e91e88f3ddf4406143f298f555bf75de370097eb5973392e03555f32ebc17bbec3664e03bff635729b9b77bec8ce9f7bda2a0fd89bc9f27609bb8faacf03ce0bf29b5cd493f6a11c29fc866e84e306c590d598d29c564f350fdd8d568effd1b4e17ee4301ff7024347dc36cb4b4b71fdd738dbb53d6d6d01c91d5f41124c15a9ada54f7ef285c83df12cbe448d9fe225ce2e6a08251a4b5c5454ae675711d166dd626dce33198546607cbe4777db02f93ca14e5762bdd1f2ef0647c1cece0d69ea08d3f85eea806b12e1c101e5cd3d4ca1869383a34e5aa203a41484435aa7a584f331e1d5ecd831ad6ef9e1ca16ddb33b6acb7db43e7969ab5dfa681f505becd4d0325ccbda6a036f488c7db1f1f800d585efe999a2dc6913a8123b101a752c2065e61804665550fcb775b85d425a35639e849126beead7af1022b4dcef897e19c8222a036b7806a48f81fc96b1ec32ad5e680e903a2b908861ee632092936f5ec919b8071b884832b3c00835924671e88b1dc4c4def42264a23dd29446b9cac0dca119b843544b89ad1e5b8503ee542a2a74489407cc40ecff12fb2057408fdd98a068da2d2b3bfa5a9164589860daf74860300b8c2f154097983044974fef703e0505f216342c5b6c06dc27e74863ce5a6ef40ddbbedfff61373712dff5d0c18e53a680322c2a4cf32eee6e10b33cf2b6b2f05b9dd0e90bb43d45f1de04f2ab32222b39193c978ab97bcc26555f2927b1461cbad8df22595e410b57b67ae7232e3d70ffff721ca75ad3339feb2b4ae234b7676dcad348af137114aeef28dc2856a51773806345a371a9de2997ecdd889f1e78d04185f715f17e8541897c7836da321a3e803e3d1282ec2724ddfc3c65394f27f00b2177d7bf79dbebf9d8ea1f9b7c3f362eda52bbfc6570f5a5a73245521cf9334680b1a2a93397d9ae6c7a7935301559d1820438f059c91c51b6b8bcc7775f12046b57217d35776d62e331624c6b0fa0f1e49dd11bab72cea584059fe5a80e013cd5b8c9d7e00477974582ebd482759154e848e3aa724189bd1b19142b1d9b41b0f87c2a129ea3b82d3d644ec2eceaa4d4e61202c614bb36ae23e14a8b4bbbb5f37b744f0a654a376f32051ba9202573ac38b85da7e0e22ee9bd5864c2d4f41de090516e84491ec49105f400d8c14b2a3717109d95729fd62eec038b6b9afae3e973f37693b8b03882fcf1a1061d23250e19b3d9ea424544f7f4eb73a4d03bd9b330e5ca9c34368e4655910bbfd9bedb117fb5ed0165a536d2564e812a9213ba70caa5fa0f5b373e3b8dbf2da2dcac4e64c4ac4754f9b02172ca083996d5e82ca5665cf77fdf2331dffc7d95f0fcb574744c6e5b32016ced7c31d72269cc01d41552d46057133a2221bd642a92f106121922c8e427c54bbb445e3b21e7098b0ca54d1d65a6ec86c575eb1766d49c266fcea85e852f48c036172abd4a4866a11c5929eca542ee1ef3b0431ed7360bb88f3068ec325c6ab242bb1df87d37a0f75f10de5022d1465ff778981a48b8dca4c8fe4b6b77c94f1c34959dd04bd2a3506ea00c7486c1af2bc3b6761c566ea81a9f287dca9f51b2627cae143ebc1f3045905446ae231a3f0ea75d5f59799fe72fcb053854bc463c2daa286605a41056109c04b52670fee190b52f914b31226dda4028d1657e96bbd3abb2aa1129bb32002e3a7158d99cdf203b8271808b6a531063553e03320d03d12b97c0f4030f7ec44d55adbb9f2cd821856e005ab2588120cab17f665b6002b8a7c2fe5bc1677b91e39a7c7551403643bc1a9787ead433f1415b0a76660997e2e499c6d85c33ef79e211fc6394be661c0ae0e199811e1b1b9d063dbbcdd194a1d48b6fcf262f5afaab9600d1e8a1216baf419bbede97ef1a0d590d85ce48378254231c6e7a337e6a26cf6c244ddaf990f30a0c09403423449189e3aad96a64802c7bd973c99e5dd29c50f08b9b1bb01c726e48b671993b24c0d5fada2d02b1236b39c7adb2b3fcfa62944445f52f5bf160672f639f6b9eb90182784c52b750ae05c14fed1aa3215793a44ab2234fbaff22664229b65b2ebb493b117623e9fc95e846ad455b62b0f310c64c35082b8ec3ecdb1f6bbc26a15c59c90fe767fc6e42610b4c1fd366c662b029dacbd82c243fe8420b35e353f75e1c1874767257419f06529fe0f370ffc4a9232718763e02a37f335c87d469d0f25a3cbe55b5b8e5e3d3a6df32f3e0edbe83cdce1c45b194458e1d409b34bb235d035f15340993d08a5c73a33eec9f32afd8aee9f691ba828d8ef6398b2ca7abcb433be84b2e56e491c544e5b41703b84d615f1042c6ffc23e9b750d1d22fb02504ab5507103a447514b0f9f6346819e0bc01b70be8011f528bf7a9fba912739e79518ce95512f29642cde18764f88ed68252d4c28628263b5561d55a5959ad943f59a24c290abf4650d3d535e2e9cffe593ef203c124a3da72934a9415f3738e420ce7c9acbba0e36cef63a35d622859b08ad03582611b7f411e6867bc3db20b48263501d89996e6d3f18075696b6cb798057d9a535158b129cf410236d0bd7ee3122e8049fe524c67a29ccd93bf65637d288e3ee0f5e178801332f1b9f3a3d4395f21c5f2bc5e4d5f4bd24ed74dacecbe5eb251733b4dafbb8e214ddf0b755a0e12ddd0b79b1d8913c011e9613ba7ddb6c7259a711cd7564004ffae929737866cb84e8c010ed43ba59ac0374995d2be89c82f4c388dcfed5704ac8ffc9ecf848f00eb69d8b1fd84712c4bfe06a6ce48dd3ed4a2f6d3d0a684f5519bf1ae18ba2413fc5dba55c605a93103c2ad2fd35ec59451dc8c7a4841ecc08cadd423abec2849008d7a1ded0ba17ac8ceb8ac56cf61e92e7f403fdef6232e8bf4b00483a863f4f3fe59d59baa7acee1f0c4d3b5aa44db7fb26b2651ee220c2d3ca8a552f0c12e02c04bd8ab1ad01145b4b8f536ce7873c68d0395ae005f1cf8c32a62f86fd75509ef2feed6197cc9b8b2201e91e871a7bfd3dadb62528e7f79feedce09bcd44b81eb3aa4637ce4214e66ea34ceb09588af315f5f877b3ca636d8cc2510a0c1aa0f938957fb957931b0a1ee711362b4d7b8861bc17a93b86c9343f1ad6bed8381cfa4b8e5cb8f00546f1a1495dc3bf3d18139ec8c1cbf45a8512e9748a2a22c8d39299425812945e901b7c3b21d623dca243656bb110728dc8a8f7057fc4a4982d2f6bc9d77c1a56f7b7735b32085317b1d6540413b890879dbcecaebdc125708cd0808ee4ce3849505a07e84bc1b89397a832484691f01c16d7f71672c862ec2908170e8c8f4b1002be146014148e745194ada6dd005cb88dfa65f3ee17db780a33d175805f76464a0c4cdd213f7263c49655077dd0432630a835bfc4bd3e6f30350ae0fcc48b3cff8ceb2c3e58955385ff4eb358ef59d98d7c29e59be18c70ca002c519e486cc0f9ec33b096ea1b40d3d628b2e58bd32165812d75e7ac924ad13039c170c5a1ca1be5d422611238deb44e9237c1bd360de032101b1e2f08495d8e801935e8dde68de6b16041097ced201f421eb0c8c4ef93f163f545a54fea68769897158c2e3136bc167ef9c69312354aeb00ce18ea19a78df279f300a0266928a699029ffc05ea813b49141ef041f5c498fbd640579b53cfa485cd01d9a808f48287c425d4a86e91140321179c51ccfafdee759ee9cf42acb08e8e2a234c9f50ae4ec4b2818e6468e0a16d107946e825810f33a062199185735f735e38ef05d00bd634aa15254b642aa6dd272206a28fe9334552d03c696d8ef0b0cb32351a48008de8946af901f8b23e5fe9b758190d79440b77e40f6666380bd0481340bf249780d2702a1ec643432d74f13be8c83ebd7857152f6e624229e6e7ed3133c1a8e00a6e39f98798611fa15e130e5c7afa8c3cd4e273e16d17e736be6de0643990a32bc369ac4a0f5396a64f352520ffb11d6f87e73a0af65586471246f509a02bc7cdf0e2b74b7def677a26a23d8fbd2da4e48ec65645a896e21bb2749c98bc5a57f8c0014ccec7040b8b5c430e33be4c524eb998377a39a9966ef97f80df6c1f485fb5deae8764a7762f61bcb5972f872adbbc23ee6e720aea081d10e4282d0724a8aa0fa32e2b14411316935bb4840fbe2b97a7adb976d373b0816bc56a7520c8bdbd19eb77877b3b9cdf194803a511321c8801b83d3d17487c609d83e39585c484e004b7f5644ceedb317ce7c6be4dea7f736339ceb3b72ab4cbf26586a3ea3bad8f50a674a343071fc9aa58b9c7787bdd36d808c47a270749e67e811bca89bbe79e041bde14b7fc0062cb22596c930ccd8efa6e324c7aafa458d6403b64372f193a3cc04425404e1e512b36ad7f55cc2f452d22b90383281645e298c1f8c816143a1665b36ad6129eb45b5386f0ff0d22ec0a4a08f8bf796ad3fc26e0b43db04b31b48e3ff01cd9e78a3343b8f41a4d39232066c44c2cbd44f69afb600838ec69d2c499adbcab29f94c0b86f88703221ab3e0a2e29d92c2324c8d6fa61f32a495df19cd40aff7735dc93ef3d2fea82b4ab8781f9a8834b44d7f6e8c56ebd405ce0fa5abad3cd231faf36696695f3e2d1b7a63d3d7ac2f0efb9256ff0310bf3b99a5fec041ea2387a1f3dcae4a08c877caf73dbab5c077afa0915bc77df635c245d94f8b3a7eb3527c49f78ee295a61b11baed335b514975026c35f661bb90a8f4f31449548f723b402804c261034bc3ac825a915fb1ab6a2e301ff674278dba4830f047709c5df61ab19710755d38190203cf2857a8a5a2d7f459811f12ed89ba6a297760e3028be8ec97221ee18a993c541b646a75ea6135fbdf6f3b134702b678b0410b2ecbb2c2b404f1368ba1f99d08098ffee4ce120d81becb35e270cf989caa33ec75d64ee9176d1a4571a5548132c715c6c8924e9c669f84717f94339928ef6e1e7245b926de20e2ba06d4eb56f8894b205240e18fa2582899050eac8f94b56d2a40beb7a6967192b3767ad8f7aac66956f7f3c3c8c3ead61e6c1122b449596ca093004b4d900589fcbe96649d98d77b6b8767c147c2e81600d3990d4085a3281cee260f3042889c10fc21546f73e0025f0869c1073ae0d55ea1f7f6ad07b0fef60294f5beb0e3f256b16bab441f4fd25482671d3034430e871fe0d38a41163fab177f989ea4876e9f7b46db6a6902c828b611b7e6365c9f0dbb301bde1cbf062774b5c550577899f77f0f950de94e01349ca5911e70f17b8a83ff5a1b647f227bda12f8a05c6d4339c8a9eabc7d5dd23540faac6ff1b0e1d66b13498fe65463bdefcddd855b17a75a3da46541e3d50834489e763d1fdb670bf399bd9bd9f8f5bfeeeb398346244103f11dcbab16e06a5219e193f630a695939bbcdf0d07bb500ab3eaa8d48b6dd50578ae9b7e2618df2a8d20318babf77911db127b0cd5839ce2cc5c5d7fa55284dc467437cb91df0cdbcaa5958c7c5a449d50fd4f497533988c78dd5f98c9ec8f86fdd4fbeab41b1b175ff33ec3d3cd5845af3e5c250c5bf03288422f88e797ce21c3dec77feb3dbf2750e278046ec3e57d0dbee6517ee791f10f2aa4d3d772c34b77b58a9432bfcf13bd4dc8ba61234fba23936f4e524909060e5bd2e635c5536d2ccd60dfab89f6f86f7c572c1e725dc37ee4a012d0e7b595a3aae1fa2c47cd23f7f2da942e9625296b82b32193b753fa725c716897eb3d242f76586729241c8a93bb085c6b59bf63c5d4170c1f7a0e4320ee55a540223de40acdc3e5b246532524e3c7a40d9934e4d6d38d2b9f6d3da43f604ac70b3bdcb857fb6f03aad5e6c7dff6ddd99fda56121596c3f9bdd7f574a6679503e5bae817f38c11a6be1c0fec9a798ed86b9568c230355737ed18d11e2f71d35fe0286c3983d650a95045e87db8d8a9a4b5ae301e36c03e803c3489a8331a4d0e3fbacc04dfeda619ec987663f3df34116ac2915ebe943199bdc782ed446ec2a2cf2d5823632ec9b20f9a643857301ae258724f25a2f30d0a2242ef108b2aa340902725675f3ccb81db9badc9ab8258dc87410e4df96f2c4e87e95f4efd657919000cd600f5cdc953528677ecd206c0d9c01be12caa6487409e0fc3b56460f0eec190e462ef4918eca578bc15c1952a8e4a742d833db04ef3843c3fdcde21bd627b75700d6065ccad7a8a94070c20ba1de59e9c653ae8269ae004adbf425507881d928187e7a4acb213b643992ba3ed6cc44698e15f3bb554a8582d5ce143c88903d4b2d90bf9427626d93affbc55a782f90c6a1e35cae14be2233aac21e9be4f230a5589fcb164e9a73a66ce29bcb7d2d2ff39ba243b34f822d53e7163983f440fb3aacb460bf97bfc1c21f37e6aec18bddffdbecbe32ca49ac6a621a9548a2d8429af07dda27184becbe6449e32d348f7c26fd14eae0fd8a885a48c2da32448ecfef6cb85e55e763286c815b887fd929dc5f00da15821eefcbd7005f99f48f850a059e539946bd4fcd7564d1c985953243eafb9e8b24da62f6aca3e28c2125c7ddbc419512a67d4ca42c8464a11130b3f05a8a55c13a084ed0e9fd820473a6f2465beb2ae0fd578c22b75b22a4c4e8ae83f9b2316bf3b8edebfa1c6d75dd2cee21ccf725c333adf9997529b31803789070a043787ff9ff35050296eb4df90f4f4de3fdf4e253ec53bf020dd4e2bc6dcd2f658437057db75e347af810b747a0adc4acc1941d1ce6182fe53043ecad034370aea6e2dd7a5cf0193a6adf8fc490feab7b98df7fd00972dc6831f3e87f7e846001f2c1cfcc30aba142f5330e98cdb35728f553f7565d2e98b4a288a605807604b6d4d9133f11fc567ded3c529874d72a6b0ae035fd7f135af6228bce062fc46f53ff4ca090905e76a51560a43454091842a2dff49a41c42d7a8ed40ac084adef6f0084e7fdee7df234341409931587886b61f1b7b9a685405b5ae28086b0971e7b0bda6ee63b34b72aeedc905c1e958fca5d30bf649bc3773812f7d4b56f6da0b12f78390547a1a96f92d7cc8c38610e04deb4ba74c773873761b8b31083338ad2017471c408f71e3df323d8514c743cdd30b6ff50ad9d6f6750ed6f0528883df65737e42371d8ef1d97c2230adb3e79a9dffe10071f409dbadeeb576eefa1d448a4bd4de4baf33e5583abb79e6eaf91035d5a1c8b1e5916c4aec72aee53c7e501c984894f76e76a88d105944e852b4c04937f871e2fc4d29f4dd819e9207351f4d0dca443540107592836b40f1077812e5d2d995fa50340ba7d13c92dabfd1eb8c7a7a9cb640d7db035a6a9536788c44ba561814ce906dea0c52ce47e89d4e2f31ae6cf3f9f362eaf8e0cc893878f8a01fc40536751fec9504ea6b244c00e8a317b9a6aedd2d0e02db9ac4f29d04c24023c43a3dd9007d48c7468519b5d7f82b95baa4f99f81caea598674264c64b67d87eba8dc0f41f1bb255e9b633cc40f3abfb440cba94e63e39617875720d3eac82197acb47920d0643e964cf91dcba4ee66e7adb456aa4b66c5a46eb0356a61a59645966a79f0700a83631f0fd86fe78ca27f2d8127e8e98268b359285467b19374683cb046f60a20b8b018949b6ada5ccdbeaeebca6166d7f904efedc69f1a101728602b6a6ba60c297249846081376f16eb515ce9fdcc8b923c9fbb018b9c2a253d37bbe0a1612d656167310210c525a141204a7ac7118b3d6aad616231d6e210f7fbe5968869c09ca883309b4c6eb33e5b26ef1ebf8dbac537bc6d718d5dbc748e911d869886dd4ac0619582a49f8876aae0e3f636d9973eee18a9ca42f233e3e34ea79aa41e888fc03ca14143bb9262ea29beab4f243857bc465a7c14b594d19b5c12c5054491eb318ce044a26b04ccc80ead194a69317518bf2a142f1b7d62422528ff7f4fad2cf42b0c4c3d1008f2e94f871e4345e41405d6049b8be83534a4db896f89c732ad67dff5e63ff96257e520d00b1252dc61f7d0b38567a9b9d3774d17ec9d346751d069f27e69c0dc5ada3b9c1c840e0e4a784de4acf3a6b401b4bae94fdb71d63d6ac55266e86a85197fccecb118d76891c220448cce0829a1e0e43b757cd1db7e2d89f4eb6cf22c71ccec1083dfd9680421d95f0158eae07533671c094ab6f96ba7fd14d3547f0d33432019c86f35b1482191c9624daef8d6f10703dc56c9541cbf45d89e3a9e99ac247e07cee032cf4f80daf5895ac604ab5c74ac569e2e1e8127ced6d0b84f70eb77a96a1c162ee0491cb9809fe1a6ec5242f57a5b5cf65fcacc3a771246453be0ea3c8bb61c3c790305433b867a5d958bad53d75b9cb4c0422f889a4df0c995911eeeb20ee94b08c159510927012668103c23cb776095684f5129eb5b011eb685fb1003e345dd4701037de66338530fc53bb1b043835a4797608cdcc8632e3084e93e3c0c2eed5dd24172c7a40f95a6d17df1b52e52c7fb98c94463a1c3b0d16c95ce0d0f997ac0f7ef4c86de6039788cf5057a743259a81356e1b165867c2fcf9cc781b1c8b04800ad16d683ba753847736e136b2c640d40a86cf44c944ed94accc01345ec6ce39c7681dae7a60ba3f8e0fc1629934b2fc40d2895ecfe78952cf8771e6442116a7cbfc01a4ab71035b9a8ce17b735a8409cd51a5f59b4ed9bc5dc7cf3a15f8903dac24a32fe8915e35f80867b3b00ead2fe43f2534ff63d59012295d9b1a92e921488474ae2f2ffee539124122d2f0507dc0919d63ec921de12b92d826ceb4c117d999fa3cb90a7366f8ebb6202fdc3770154725b6fb96a2aa89f4de2dc7926dcfcc41e84c6179deb2cf98693acf48d21a6d518481e3c34ccff4543e56a3875b3d125abb6335e70ca6d4a35dcc33fb3f0e5eec1a272e88b8642077354445b638cb13f77362dd05bedff94bde7955ace4a70993abcaaa55e111d530417a371e82707b9c1a6be5d8851133c096a7e6a81372c4125b9505959857e458109c9961eb58b534a804414da6a779b3253c18240727712503be63e6e14b1b43c33f7afef10f785866e8bfa851e9bac88cebf3fa65f84b458a0b88dd34305376878574d9d3a1aa1613ca900e80f33fcc899f0bca9ce969e7e4ba63ab61616fe4faa03c1c0a7bfb1a75d1287b5efa27ea832b9ea7b1c80dc45006b0465560b50e756d88dc65bd74cd222c61a08743206395ea038b1c6283fda91e24851a511ff1e879562ce17ab272ce48f4a06913a5324fd088b3a95c96f0a50b5d7ca7adc9ca24092edcf474ab98f4377d57acf9e0fdb916d8b4d55ad31d7deb8f83f414c25186de7b3b659246011cf832a190738f07819873cb0a48eae42e88f194b1778fd1a03e18ec7ba7eb768555e653f0a734b14385e75ef5d8f4ec9ef2098f21ea9de7a2c7e89715c8d85e9164ed2a29bd8063f91dc42e24501874f4820b7424389ba3d47da52b6debaf621929532f4212bd1fdef572ce0ab1aa9ad1faeb33e90cf478083aa9d5728547e88467e8723b6451338adc1ad1e5941ad8141402e74aa73c2d025cc6ceac42dff22ccb734e022fb2a9ec6699d29fd206fb2e8eb80d98b30fa79fecd16a1d12b39dd8d25b65e441609d0c1cd2a0ced6212010c723c8f5ae51f0bdcda624aab89fd1ee950b75938133566f04859b5bd289f5ce9745ef88ee427955f9d5d8dcdd7b3a3a782c5cfe6a4476748da25412ff86ec90a42a844ed6f2c16b6b54e8efe89420b7dd286b03f53b541ad21f1935f76fd8e115c14f28c3df04bf3b4572b9582f3b2631a3ff058ba8051158132734bfd9dc1c8558aa0245f76e09867a51431b48bf12695c2bc4907f9e8b0acb41a9a36d5fb05eda1754a10f12b99be5a28ac1198e5f8b82980b10ce6de737c15e68fb5189b015804cedf442c8963d1e2b7fc07856d05e99bb8c830be91d2417f08ed7e217e1e0069894cf22da81181f6192d0dcefda7556d1841a00c955bd26ed03f9837e0d054b1fc7a84f4a8772d5a3812f09bf7ceeb5e70cc501270f0084d5b3b4f46d735381b5fb77d6b4495da98c6f5ec41c6e44c479e225cc10ba8dd7df880aa8ba4149ff39032643b3e07ee5777c18eb7028ef80b93f9256d03656fb7e5fecd684a25da223952bb542f0573a89d249c39d78f008005a4628748ba7814e2da04eaa3bbeddf2eb3bae36bb183a75412aa75c39a9c93e99bff5314eebf5d7ab13cb4dd351e4b50aca6eae1437701437c46c2c72ba44b9e6682d21c502dfca05c13ac6e0a4fc4b4cc6592dd1a9446e3201ca54fd641a9e25e18013faed3b060cb885c47445876d5fa62bc8c770f3740f6862ea03d1f967d9db1cafe36677f390450aff005e9714adf054c50e2a59513fa8677f02e2f124dc21fde6651744c89de71c460bd306712db3510ddab782b4e6dcdf090deb98b07ccade3aae950bc2df7bbf893d02a63ee23eca23f0d301e5cd02a42111cc7470218f9731b6accd3daecf9ff8806f99c9681796080f7cbc334376c0ac5ff3cd64ddfd97af6e85d51d8452cc8922334ad0c8f5b10a6c55c9fda9ccd25a8483cfeae661e7cc0626f196978b0ab6807fbe77f993fec27243d9c003adbe870ffd7d62ae81bc9578a7cab58311040ddfd94b9f270b4037a4e4f07d01bfd5275454788cc1940be3c1bf54736ec59ff0b38ca0a4205e47ab6e739ad2705fabac6181049bb16107332525c482538e10ea52334b32a72dac3edc212f3b734f14814a3a5d28a3c408bf2cab6645a83dd0e0397c0fecbeb710e2c80e5dff3463364ab78213242acfa718d051fd0bf254cc0456bd1b018efb7659aff9d06796da4a6aefbc49d87507cde882d7b5b2b7ca03862dee79425a464d76fe07c20b969b14a53548563feb8bed20552c4ac499864e83461e793039708db612ea777308f37a88d7ac4bc018f103f9265fe1e779ea138c835a0bfbcd3208149fd08be427cdcea8fa8d8f008c6df4c3a651c0f94ffdff95af46d42dbe6b3ce8c45d10a4a78dd50cceec043ac544a82da14fd8f6d8d8839e5bf9c809c09270b47f7aed95cc91ae96d9d5807e5aec2c226d1119e0f25bf7a4f5dc557715d6cdd595cd6ddde479fb6d094afca3ebbd36349be0312c0b35693bf15b57da32654fbfba0030fb8fa10926a096c5f56c661dfb810ad413e717a7e3a09c7e9ec71744d31518d720b02fb2a04768152db972c989bce9134d448b404923bf38cc25466a46e39f434cd93ddbd1d0b085972ec8565b76874a79605bd48c28840e30d77ae3fc24bfab5abb4d6d969c4b4303c96c0d43e18d6837f22fd48cc72b3588d3821b2ca151148974b98a810814d00cdca6a8901b6746a54c611482738ea0b2c599d0cb2bb199e3219f86e7cabcf7ca506fa4f89214f9c8b6dce36031921b71a1c309077b9ca0634f7c3c9ca9771b78f1194709a47ff37c54efdedac35c1813fcee87619d66b0f415a4f363f438433552ff561c5499f8f6f7a961db70b2e5879083a79d2b09d03028c3557b66b07f1c4ff65ec252d0c3731fbf7fd3e29e5c8164e7d8af51956b4b2705750ed6ffa7a651bd7883b9145c36847783b9a6ed6174cc519cb3f69e3b080061b00cef2723b8b5387afc956bbaa7fbefa0ed3c8a7a7439cc0b39ed563d5e61965fbb9d325ae05000d61f98a4c61e84d5945eb77766480123e18e0b711d5e996a2de0d0cef9420ce81e40186c06dfbfc8161edd021292ff37953d52b49dbcebd755b686bd45817b154f6aae6245ae94e5a6cab9738533e88287e5b7a613a599e8de83c7970c7744852eac435931ac188edbb5ce72c3341f50ae6dfcef51554fddac47beb7d48785d2cb887068c1bb6f6a5035b3f367f4a7afc2ca890adba27985bab95326cec1ef73b6e28045db61bc47957d13ff44849fa6e66be088f0db8c2693a0c88dbe1c8bb89f95d77c3f810e1ac72c80fd4c94ffc85353575c757c2f11f19324a25793b3cc46583568f9d90fb421d7bc1c2586c411463232a2b25c5d87e79a3d4de2a48df17727cb752e5b99c40cd2ddc64a5bc6dc7e5ed85dd2e0a6e732eae03fe5e3d543f203b193b10cdddbef73cd6ec7cce14085d706e6a2b7b70536bc04e0587629af9677c32cb915efd1c4ffe3867ef33f5ef215aaece83cca3d3425f86f122c00e1b60103a08ff3ddbf923984cac8f081fbc66b2fa6501b6027c5a6ddd2e930de0e64c9a23a00942a7d93b9c9519e13f9daeef39602ccf6bb3a8d6d18a8aaf8939385c763a728dd38a0bb98ace9d03c305d9aa99cb75be837a0cea8004593f5224221c30e905bf2a1c03a26ae5d6c1c320f726f738f056854204596bd8b3f981551275783d408e3c4681402465caa8ba4ef66bb5e386992541173c5fbd6fd65c5598a0e4262fba9109d6e006cdbcf43d747fe067dce429678119383f8a498a61d1263118590a5b7b0033bc66de894bb80e685aed158881a2bec54e62d3061970f7eb77153fb1c8ff8f67842ad750c0735f5d2f12a7581a3ce6d1a1917be2e747227c685c09513f4117f2e4235238ab8dfcc30946bcd6135bf2d9179581a00335506cbe8e59fbe4ae48e3abbeb17e61d154ecea4ab8db881d0fd79db8239d4c388b239123ab9fac6995c28d146957ddb57bd1a3e9beb460c690ecfbad4f68ecbb4d975718f5ed539a91043efb75115d4ec0cd595ca9f6e1535e15447a9ae6118d43f67a591eb84a34433e7daca311e87bbd22d4097edc5667cf0b3ef7e5629a216533f4e6824fe1ae087815927f49d658b9cb5d91a4627431b271f393bb7c08802a3c811e663b62d0b55d48ccbc6edc528b574efeb294ad2ea094e686dfdb2df908080465206e6cf4ecd4efe466343af00d03423818ce6602fcc851960ea298e1d9ecb0466e26b7d99035174a39fdeb6695947d2d13344714a8be1bd1b1350f9bbad8cbae3d00194d89c6f226542366b7de56cd669bf948909cfb096bb0895d2aa985e9b83f0bf41e22e8640a5bffeb92eaf5b8b93e4a218afbf9e05f8ac3c2af6f312d2efc039017040fdc1b17dd94b25e04f54a63da65c4d4fb362a7475c8a2ef7a357ddc2884735f73b7e65cafbb9db9a09030ad7955c97d8faf30e93452521b1e17275ba6f5b7613d03d1975a7f32e0eedbfde6f6416d6675bc75e6314fc5285d6a8a235b56fe11db27883c4f83d0a463e3305f80198202f1d47fe7d2b082021d973c2332036bc1906cd5f35be119b49f0f2fd1bc250520fb8b64b1f164bd5fd24aac2d8b0eb5c7c882dbbfea464ed1d3ee038d87766e463a1399131cf31b321171577a68d1ea8fa43b2a28d5ee26e136693e69ed872925a5f82e6e6ccf754c64540e6e58f7c333c2b767a245637e306bf5c9156e048d8334d6e9bc4d057b8e9cced11802239828a2fab63b9dddcc835ed962943ca229ab0c858ec88b1ce1bcb7ad4aca94faa8d3b4d364153436afb2d8daf1c04be13159d9b463a99468405e65a0ef233f379f1f73d0deddabe502e4aa59b417b6003b5024b53fabf1e4232dfbedaf1f5338ce92541ebfeb8a8709f2fa82cfe9c99f5b60f1e443ea010906169194a3e726405dff9ea1c5ceac1524c067df6afbfcdddb6ada92cce99bd47783571083d568a1d4a32ee689d37315ed623f5405fc472c5c30c402dda7cbe397bb7016308430bab075e85beda70761c8ae2a544ecb0868a282d7b039a00eabf68a4278c9c7f0dddbf85c3298b62f481519277d0d0f1ebafe924e98b910372a5dc05a2cc8ea4f4aee3f7f73f3cf328a6a9f5496badd74db574ccc8d9f397e8ded1279e2c472a277638c959a8e1d1b384c279a085706625e7db5229668fda1f106ee0b6733afe332136fec164cbf4f7236dc4b39d62a59da9e21a8f561fdeaf55569cea9115e110384fe7b43f9e26a35386977a55994cfa2cb41d5466006c8eacb3f06246873eaee3170130ccd6520f5c46c80340b2a355858934144768933dd4eeec867dea5a6f66122cd8c429cfd5b64157db3651c1c81e54f0a0229eecd2f076a280ad80a08ad44bacc54d1f79474c13f1607db1a921692ab18e28e7bc0de55c9c30392639985de2efc9e3e6cbe2e544a8332713c20cca60e6fdabcb3b62481b02c3fa559a65e71d03abb997e8e1c7869277d59cd3d201860b8942e8517ad2f40aca890feb821245b30ba556906e209f33bbf80b24ed3fbac08e5223331c761e32d4ace4be34d7a0bcd544c50e9d65d48f93013350e3a7e71779d41f0cb6a1e02ba509c6c082883ef3987b55a88903d7daf6b7c3d15370fdfe625c989deb3a4a83ccf3f2993576798e8bd87c8a62b634ab86002a6be0c448aef2eac3162fa557979491b4c569bda68c56c6b6d8aa9c7c090d93a762c69df708c25cb1d05fcd424b2f7bd61b72e2c1e86e54ce7313cdce5a8e4f29f00b30136bbc7764ad5063c930ccc50132e2bec993581110a6f109bfafc209ac4d140b88a768bc000d8cc23513ddddcd37725052a8c794a69d178881c81ee7a6f43ca0aad027e30810bfa214607c58235c9bdd8fac55a157c1003bf7b5ab8077a9664304ed13c58fd998952248db76320add240ef20da084eda72dfa9ace3b23e9b7e136628dec9fdf27777551a2927143f52b5a3f8b27dff226250a5990d33afb751fee7403582c76ecbbda4c376731027a131572d6a16e19ec69c4671ebb365798cecfb23223f5ff31707a34eca8829cab6eba60e5d7a24242eb43fea2e90e0826caf48a6b8ef944878de1f812a21b41f86dbd1c24eee33d07cb268ff1e5aa3b8c756f446fbdcccfcf962ee9af5c0726cd2b43d7a550e66f075e893cf0f9204e50d80957ce1bd75e702abdb749a3e68febf20fab215ff815131854683cd5387679e765e7b4da4f8d3552e458b6c969f50b32e1352530c2203081ff39c15d8c08bbefab21ae63a98c2348e473426b81de14bf67684d24cb382c3f8e0db0cdfc4247ad0c63d8bce39ace61099fef81a5c8ea436c697f3d30206f2a297d2cc905ea7bc6d8380d0d6cb54596f1e4d3b9a471b1ae35032683544f11911ff8d410edd926d06888e2309dfac6419062466b243a56880fe354637c0af89731fdc2d60da8c9d84d6a7057ce31c727c22898b418bc2d39bea66ced77bfb624400dfb7e7317b7b8e368a549baa3b7440e7d435aee4d2e93475bc81f2ddfb37f9eab6c54c47de4ae9ae316b7037049da6850c788730b5b2f1f2677a3d4d1f66b8aa433dc9cb601ea2538ec7f6a0bf4dc636239e0fbf429d59c0a341702acb9ddc228fb83887dbcd2d6e3435851cdbaf380ce30de58529589f1c411d8d62ba0d944c272adfeeb8dc83956520412c8044c24deb9968e81ce35c2e7d02a3b96465313ecf4bf901af792004ffdb2c92f4597fb7915840bb779fd38418a06a19f9780f6c1a23df1093e25e8e40eb82e83d8ed9ac378862ba819b987e39aafb49bf9c79a046b7af0c46d04c84c67dd0da214d9aa85f20e24bc5f27faf10e83ed3c876a292d06a3b6ae7cf3860e578e0622e3907d5488a06b35bd5cd5735332839756827ae24abb5f2e8939d688d75ea3ce9c1a330d94d0a9af18531db869eb022c2ed5befefb6269d9b08db7121539a6a253e2cec5273c1a504a284ea6554f305313976a8575ddf341c696bbc88cfbd69ab2f09d21a6ad2524e45b6ca797035ade3fee99633b0ec4da56c58399857d3019c514b018bf57103d6338c9e3ca797909fbbfd85956a9e3c6fea756cdcb12b59fe789690da44996ea39d50f36de94d739960805615097cb691b0e4f297297f331f6527541f34da54766a1050a9fec86d1429d66f6426dc5b2aa80c90ea83f02ec906007fa2d463cc1ce8c5dd8c4db82b2c015ff8e0a21a0805ec306416ad475d6c0a858ff5532feeb518fe8d4bd875dd6aa13f88d096ec2759912a5e071f072a216822ee17d7c1cfe5ff42dc7e38e11c4187d08cacda0d553725837d29f8f7fe6b50d3a93438d87313d692e7f25ad11d66f8b71c1f04221ad0b1d6bd8cb24f1f06ff6324a53520ebd117f26893964526a40868372cd55c60200d4fe1ff231bf4362db367ae39f3660cef683b864dc91ad8de9ca93ddcf1dfd2d1c5868fec0c5741ebdce8e74779e80a39b9fb58ef6a26fa1da18ed76180325690fcb8b1844c9f252e98dbe34a8a36ce181f602464185e7103ec4c9adf1e0ee13c5877ff4379165bc0fdb14f73035c86963f1807e4001105bccbc2ef3ee86a08f0e7b004c80ed17b2e11512fc77a137fdc915da9269848bdf06e7b1ef8ff054edf86380b2f65ef515854533d0f36373a1d210c76897822d75a5535a8a0042588d2459a7f910a2b50bd905f70155d742c67828dd6f7d4939358eee9e1dcbc1af936294d7cfc66c60b6c31ef359677415bc0265d1b1a57e99fbc38483f5d31e2e95717e8f2e183fb90baef2a84412417e2fe2387d346c8e6e238e3b09956a6b3adb03c333c1bc28a7e70334b3089956741535d3e74e5ee78ec88d6fcf87d02b6ddc5c1be208f21a2fa7f67c083638aee7ee9d09b54535be901057db0f9bae3a6977d10df2a338d06aed6ba24567c326ff01ac00fbed01293ae8d530827c0c6727dacb79484e7363f309362923ad0a0b93e655b982cfd850f20b61131f3212e07ba0dbc30103a81956ee501075f178fbb8058ddf661f4370b4319564cd9932e173540f0d7e628cf5fc8d7141c4f9923661470b9e7a7dfff0340236d83026b9619cc2984c945ca310acf0d3adf04dbde91a1bad499f3475fcaeaf316853672b5a5d45e5578e3ca27de6a0cb75884c14106976e8f83a69627de949bc74f05c3a73b1042da8061816273732f633d5513cf1885ef7f153a1af8a8bb5d882ae2d7f6b3001d793bd0be65873c0c3411a94caaa0c1f2e22e93c046ad5d5675c631dcc194418e8643895319abc28cfcc01cb3ecf6c6a06c47cff91f0768145b9d7089882dbc9033f38c0c9f66a577b32d5f6089c10045dde8e2d4e61d9dcda6cdb101293ea4b1d76632e911a5e77102b5d4779e92a7b4ff167669b609ecb994846933868af1f77355e042b1ceebbccf78770c077a5a1b11fc42d91cbb7554710e91a39a60290c5a97b0316e3e272264c7dfb44a4e2e901b3c13c343751c116d5e405b5f81645c076b3216a7132d6f037661b21214cfa1241519837354fe9a4f8cf9746f4965d4b50df24b7cfc9e82eafa56b0f36706c038ea8babfd7e71816ae307caa2380b91e7c391600a88b7b6f8923a3d56ea91192254a000e5bda87a729ab4c7de60f25c5f472effb298eae7ffc99accf5960c297697e46b03af17ae84c69f4afb20dddb17289ecba54f893e5689d2b3115cd7993a28997ab248bdd2486b10130ee4f9ff62d29ac5152914e99b5629c37f741069d9f182a6a8460780bdcaa263fc2da1fe110a7ffffffa425825c883581433801f70bb78c7f740b45e97e97fed2d7c387d743eca02fe8dbee5c567520004fba3422101a220a4ca9401852e471551e610dee62a9d3c7b6d1df0180a99849b428383487c1fed91d2d63fe992e20ae338608eb01512e7acd7cb2fef7c6f0be3fde3ffdb6cacd5f96f7f98a045a5c03a919af0d38ce0259692658f5f53d4ee893df99eb20ceffa169ceea1ec82dab8402696febccf1eddb34497a308a955c2283feb0850a7a4225e0ef81ba8eba21e5759d88e6f9316ff69fb509caa1c461787096e9afae262b807170c146da236b5b7123d2e47c36ac8f34f5b54b13e65647ce79c79a48cc7072eddc830b4d35f7c6ad1f6462134a9d7a4679f0151f0ba5c184f2147a06257a18708fa4f3982164e7263ba441dc881d481a610841ce4fda644359e66a39ab70a3df1cc044bb2d69a11297740a7be1fb6cde82d78d5f16201110364b7b9ae9bd5bfc398b5f3a0078c0fcf931f30e236057a87bd5431449079c5b89f69a5055b8104487eb234847fe231f9b04297aaaa476134eded4dc7bbd04676dd6edbf214558054e0c6ce403fc6e445170aa5b5e6ad5b2db5aba950fd68ee60ecdadc530a76cf764cec768c85a83e0f61e07792ba4119bf9e4aeecc07d663b225a82b115e065f75a2ad342d8b60cc516ccecbd9d63cc0f120f8d27ecb8bd7524ce47d961394f1deedb73f4a9451e2966ed949a6f314926c9a27cb01a76ce57672b668a5788518ad46a683ba78c938e2c4ab9fbf7256dd18fa1b77b6d18492302c3086df4105cd17733f42a7954d3a470773b2971508b58922ef82a13d5be0109484e8530c96e31aa96c75851ed7f28ec6f40760165c8e116f10ab3a1811eb0fae62ee3d3e84a5fc59acb334c545a806d5eaca8bc7171845ab60a7f4726e3e008f577faa9340e727c226fecbea9c367eb358329040c42d198e650dd4561d8f3f7f58470ac5511d7e788f11e9a076435633375d89e89653c7209561c7ad918156fcd53d64ea52dd1d60e613f33c3ca6e2db7b1ede2a66944e383e26544ba99891b686d486788f6003cacf5f4d3f7f8c8031a8a18658a46895e2d4b63de56236b6f5f7ead1b6b385ea0aab6a7a1568946ebeb962d29786fd7838073cf90faf7241b25fe432371378f4c757810c803c36564c09447bc42318997e96c31ed65cfe3a7e25773a81a9d3f4bdce7a6c1b2de94db8959711b3e05567f7454ec4dc8c00e198fc46f947a4ee73b87c01121e860edfe30ea0a9d8bc6e8a549292e737e91feda105304637fa4be496a0a5a95da0834f1555064865b8c43954bdffb09607b5f7da916feddd1035a7ebfab47e2283ebb37615b8ec1e1f0fde211f2661b1427a3081dd2a6edb9422752eec3d7c9749dbc8760ba0b4661127e313c11d42bb01ebc559182d697655c023d89881ad7923f6ba281607de7c298aaeec36e1e62fb8db23b0c5d2d2b901c91e1a7141a8173c7e8f4744b3ca88123129346043c9fa76eabf3a5f9f197d77ea50a39963df4c81f3add3559102fb16c357764442e5d2b09abf1a52637c73c8f405b40cc24ceca323a17cc5de80150b11441f9e71c3c47822bb4f90215379cf68da4b9fb1ce09ebf76bd3da35ca94956b66dcdd7315f4481a802371bcf23d45030253399f3265ee479b375220f1b4f9275227513fa5f71621a13ac2c01ef5c5aa0bab12d7bc83dd6f46b5a89a7ffef18f5c922b636e8082ed9609d5df4774dbf146f1ea9a7fe8e994942abedb4112c58f1b7306827eecd31df81e9da58f47892b9a57c0ee930089f7c1503cf224bef624c3e77d6720a7b5ecc9b91775bd976fdaf77008263742cf22d6f922b10c65413da021522487752385dfa3294f9417db3e2c8e954eac19a9a4a10c62c3d92d22728f781573ba53c4d2249f158898a6353848c4bcff90c20ca9489f5e4b1592ed13a681822ebc491145ee3f042a86d74ff93f3ad811048af69cbfe854cc993e5e0b8f5d235f2c3c6942e72caf58925c0e3fee597cdc3439ebbf252ca5dda86e46868b6058d1fe1343b9e572c35ba4f2eeaae85a80f04488fef1a2eca41ecabc99b964002cd68e29176d28389773174ad22c939d1db504736f5a0f03d5c575cd8387000df49e48af433d7ebb1e47431368f557754c84f87e25f24a9b6b1e16e7540f906da791f38912689780ef98f35c60b38ff1f0f725cc0d532459496f36c442ba22935ede2388c6b4e4629c42d0e6952e3ce9a8ab690829742d5ee5f2095dd9ca3e5d30ecd7170a791ef74df0a8cfd04fb6eacd335a5cc1fae5a3c4dfd18c0db4d7a10fd7cc9379aae1c10b4811433f992eedef073180123fa9e06c6d6d7349dc304bce57f39a455bd6e8f3856ff0af59382c139cd45784d35d3f01ef8e07efebc1e15216c05d1139e0a2af809a53c85ae36e18314e6a32f2406b9efe1950204ae6caca77f9ce7126e376a40cc1dc6631bbf697d8c5554666e507d68154241cfa6c843ad56ff5c7dd3368fcd3ecbf6f17d71c2de82e11b2f0c428899ab2b361f67cd74ed587481a0fa480165116128829c6436cbb77670596154c346882d40ea00a0b11cf4d2c700acbf5ffd1d89af1afa7e92aa3e489d6fab4195c16f8c212ad196c309b0b5042799d70201df48d11c23050bc5238d74f989d222a2ef2b303bd38f9ba33a76dcddc0800b720fd34b97e0cf4d10714abdc29c643304a87017c025397be81e43accfe70b3dfe7a0544a6b7dda0d4aec4941877e64808f3e55730447b33a838307d301acea299b3926619718cdef92b7a796fade7c8c7dffbd4ab069087d1b171d83c128c3926a51d2976ad287b47bef5d4d983dfac7fb1bcdd4d21fc2bea2d88c2aff4b3e6da701fc2f7155d9fc1dc0a01b92d21814244c4bee65025e82855c79521a71ea2842a9fcdfffbc8af38f3b3a20da6d76b27f15855682c0bb746b19a180cc9edf276dd740d5eac585c960847b7b3f7447b2480c1180db77df9f094e26d08c0b85a21873bc710025c47425c0b85f978318aa4a3eb2c9901e873515deb1f5fb3f727cd45ef826c71530b3320790baac0e22abe496d84fdd0fdab7555593f6d777dfec0509db52c92a296c3424c1f58b4961ac659a2fed13d179d365fb7a82ad8188ecd5f013bce97c41beb1b23392d592f04df39f8321f828f861fc2aa60df546e7eac9fa0cd9a936bd457a7edc467abd349d35b650b3694ee12f1348a5d8ce3fc7877301ae4df051b0549c436156321e4a3b060aaba3439ff92834969a5d4cd0cfa66a02ab839395983f734fc8c6f8f37fa3cd7bb9e50a944c1ef9016bcd77af0c3cb0d3f493b92f0af82a0495c9f60c5b657a25ac6a556cbe177d91e642e8932215d6e5000b356b0fb6f1b7faa5b80a876bd62d1441385c6f2b18c27a8e147352f49b11d62cb684fe9b9052a80ff4dcf7ac4a925b2b83918b0becaed38d047371137f1bee8d2488be9584b6f299fdab2df0b5ae0497eb370f9c262ec41a75f9dc5f24395f7b7d94b5543ebc108d2694877dcc79f904d446f032e2a2e027de47b3ed94414084e5925472643890873cf0a8f6ff3535027b97d6f3081b8f725276ec4c8c3856087ccfadae3b5735889390cefbe4640bd68e9cfb992d79bbffcf9086b9b65c39acbfb38c9c73f74942c863d17d6aeab47cf4f1f9c02538dc434ddaefe9501a82ed9b4472b15ede20503a48e288909e16b54d085e05b46dfdc77bd6e7e53f5a456ce81cdaca077b127d59fac0042d677ae09fafaf774b25a2a0f658808fa49b8b35bfb7e86f1734e5272596f412b96078616c174a88aca34142144802b9024465d0a54bac611dca5c914ca1241e536b67abeef70d50e17799ab23e02b5057569409be020771841bec01ca9aa4e279840ea8872d00a97483c491b393435d46717a8be6b6e69e9133dbb45bb1c896e725203204e667199e2faaf4e09e87ac179f6d3972e5682999d8e1104f21fc01d030d2c434d7d9e65f028b0e1836f92c447e1318c0d9f1a55768d14d1fa86c80dfca7c646e15d3dcc0aa8d1cc05ac7f97d9bf2d106a90916d0fca3b0512cb5306c0713ad61b517954aa87e1123570924a34124a457b9198b3ae4662e9e3b3fd33a5cf004b539f2907a121c30080cc0b0070466ba992fd2d8b0bf52e7b751128762a6d33c00415ecf0479996f42dad91e4a4b310095b256d621914c21c17a396c196a0e6fb132d68291c1d252c3f00cf7b1350ba785a3b3cbfaa8907b462ff1780522dafdeb7bd3addedabe5144a05d95c240983622db6a9a3ae7aa627a5238b5218167201af2a1f4beb47b36abc5959418607bd1118468c787516af2b2d5b2c71a9bda8c24d493957da200458fb9862a745e1f0ce7c6438b06aaa07166eaf8b8f2471c3eb5ffeb40b1d0de144e14d00fd54a05a36b373197e952093cae8f79a3e6bff4d2066707156cae1d06551d7dd212158f9fe5d96718acdaf8ff0b147a436ea99ea8ccde46c4fbaaabf5781f853b5e02ab9351cda9f1b80fb26a2cf289962f18dbbf71b7fd9f9294906768af754caeea7a715f4840c4135970dab1a595b3a1e52e0921e19f4d7746a9180016d719e9f1c920cabe35bf4a0650b2d52ae44d261e92184a2374d82828c79b6093be6aa9900bf13a892e867e24ff0aa1f946d72db835dc2b95b122356f92d4a65ba1fe0f3194a6ce6739fb2554ad0729cec15d6624ba880bb5d88b4dc5471f9838d011113a1e30ae8dde7ee5b4cc8e2eb74fc2a5de9849eb7c615dfc6047543ded179d127b2afbccda606b85450053b538f8d1342a88c6c5def974bb4a6e79807c65e38f5458cb3754044a79fc1d649b1684c855ab8624f49900e24bc6f9e46c409ab0f60b49a34461bd93c9acf752d0a3eb665692d1f91a3dcb8e6a92e2031e87c814af8ca40e675e06020d5c6c99a5ffdad288e867df36386ba1c665121eecc34fbfbedb529b30d188c27c146c19345dd4359c9f0ee250ff1dbd907d8a07540772c564c3f35f23bf095ce43c210a67345833224232392eefefd65b713fd9320ec467bc58738848b9b490f74168a17d9c5892ba99804825a07cad3d991e4710b5d8dbe0e14d67b1b45f25e0d406418fb0a47ac15b3ea704dc1ba839730f3d896647b4d194626384dc9ec6ba8a07b684905bae1122fd8f31f390e3ae88b9332029d1c5eae94203cc65bcece8f304535ed334d393cffe071993c82f17a99a22e12827c26f96323e1d195311a69a51c05352c58eb98c19de48143e35a4e2df85f8edfea292a875dbe476dd9c86a9fe649d9b7dc7a32c9abc1c0e7026b0ebebff990f7abde3c130e8938d13ce0a839335d8ca51439cdba5dd7c2233cf3500c064a1c5af1e78bd691e278416ce388c414aa93345db2b28bfc4059c95d8a58e928fcb25ee8f753dee51cd20b9655b5533c8f4254419cf8af5ed66b4e2b88918f0bf1906e6fea0e71da62c66945440276e27af4d357cd6da38b4b11680da02ad7c4c193180e9189e7d3224f5a4adbdfe98b622d14ca1a031009702aa2287281bdac664fa5aaa0988c4f2b15987779d622b677a24eceafa76e3ade9c166925cf54fabf49fc45d2d19506ab6ce1c969b2c639a4e815ca14873406d9e661510fdb7d16138e3f9dfb6a6a3a7439424342870b6bec6e4467565cf26e7a688967b7bf7d3f1cd68737ccac0688729578c963ad490a44fdae20457342fefd2ede29fda07a9dbfb8ffec63c719b320177f77624d22711ffaa44337d5638f14d2946b19a4da320acb7c98e2eac1318ddc6c2350e86d8bd5344ea51615c3acef6432cd087b65419ed30a076fc7215a2771d0349c64d26d760394482139da5079ad52a923d818cbafb05440b6556fd780972d1b88a7d5bcb45fa246491cd3d2261b4baf882e021a7397a5892ca25b8a60895bf2cf77d84992b812cdb6d00bc35bdb529a369e7b1a2a672a86a02d152b598db70d2ab59401c5b37cdcc3e2e70184c5ca41fd3283d2747f7da9f119d8e3ac7184c6ad26728099f4868f07b4ae35cacddb8d0a389621a28ea3b580706da633fe083391c6eb28d90294edc7eecd169ea6ea538fb0ab4deb05d4826d7a8f01fd1a689dc0fe0b5152767b12ec1ae84f57f111290fb3b6ade70c35274a33283d9570930fdd3f03b45eb98b2727a2f73dff623db701f13728d1a09e67751514fceb180c5e9469c650f966bd6e961bfe66c8ce41df1061eb53f78c29f7a227108332769e31cb89739177ba94dca4eb25e8ae5e84209767c4fc37fcc680df47162167cb89a43da714e15bcf490e451161c6ca279f9e4ae8eb77d67e12bd95e887865a2f3e0326e2c117608a16857c3908eb0eb1f458e5a2b1e6948f02d70c94eab22608d864d49151ee5d590e9fbb9c898a0a3d862ca284d066f81bbbd757f37fbb50e3cb7370a5162c70dbb2c6b6d7fdfd83260671e3e6f43dc2d8b74b798aa3bf5f3dacb482f8a76f16789871a606eb94c9f505ed6149f6c9727e6d05231e00681c70da2020ad2ddd4d6ef84735f541ff79dd9ddc4769ddb924eba19936e492f00bd8f36dd5725c5c55d10d47da2aab10f77c3aceac5df1831773cb482334ca157dadd612c205fd4f59a720acbf3fec59b8ae3c607cfdfa9fd4e51cc1bf61f6e02806db2a156948f0e6ae0ee8d342038c0bd688c88f89ff31e627efb21ea7dce6bd3e3149c49f14d427826fada7b2607945bb363fa07ecf71e9f773a30c9bfc86de47e6123ddaa591a1cf83a7804c2ac86b767eb123427eb339f0e43eaccead8bd22fb673a5404c0913fb6b836eb7b0d7f1dd4eabab33bf3172c64c05c9c246871bce7b81c136ed05fa617a8969c23d4ee8d1f1c53118c51c13fb61a4c7c083fd37b2e9e2c7f7cc861eebbca6d73958d933f4a313065c3c7583f3f8b8f557a01a23ea8ebe4ed1b0c617dba32fbe9c11a56da5266b474d3f6a078f42185a371246ac51faa8519b90fe3a58365234a5eed99e68825ad1da3b4ad39a97fb950795e927cfa47fe68b2b70d50156ebbb84a8c33015b3df0ae3ca422e0dd0b7576f5bf6a42df35d682a28f5e1f48cfdab3e1fecb49e5373de2f0fec2b1038a5a5e9c41d4a7548213f93ae605875d94369119cf0146936e355aec5449379d36934fc9a31be3c7c28dbca26ec20899fa79a91607873dd65806057bd02e62ddcd03aa7e679726e15822d7cf52006ee02d712aa5804f7b6831e9706cd5b90fd36bd9e21b38534d4d066810ac65a5a31d4c8177dd0e2a935f9dfacfc32d1c38545b83dafa442dbdefb184f786736de140c640cfdf8183dc0455d2f16b239124b071cc194bfb207f6894beaadbcc4685afb35c89f3bba97f7fc28a2ec1581a9e42f112f2262419a59458934d3e5979d1987b1c35c171fa36a0745221a03be3b04e07252c0dc12253befb4b342e33af9fb018efac29ebade8814cafde5b125867a67ccfe16a7fde25228715a3e57e53dddb9d349f36a7201f01b0cf11feab6c6001f70bfee4fb7a00b633aa14ae0782814a4ed61e08200eaf5ff83cb3f2d7296bd466a0123e3e07a60664b29f10360db5d2a8133f0d4eea96f5a84e5a63778f5be64e2b7af905df74f970ed73f66d3ffd78e1bc0a40f64f89e2c14bd0013d0cb432b2c023099958ee27a643ac5bfe005671d890e74d266ddc902abfc5165684d2e13e8b3228d6961d6f5e62d5a8fbaae3def06dcb6616af1cb3b97f07aa2026718a80d50cee491a07c65da96d821ade0863573b2f85925800fcff4da06bd3fa813cd7c99176bfc147673c0b40f1c4c529d7e0256dd0cff15f41ad8517599ef1a53d73b0f2b2d9fdc99c136ff4769b0f71695cbe71211eae1a06e19d4d99c9262e2970286802df28c6dda06ba8232b19ffb243e59eb2ae3dd68928c42dfb42d76d85b7e40bee7f052c21df8604fc8358680a706171fb9556e4e5108806c688b8ef695899ba6283d9335dfff7c971c107950c9ea6c8755af353866c48e07ebefa4a53d4422bc0beb4ad58032778fbb325a7bde4e80b76deb6ff1b203f8a3edf8a186089514a8c8b9046f7321a7e8d1221a5f6558c23ee54a176d2f7856100ee3f364dcc6bcd010dd8f7db5773c090503cc37ed629e828ab6ec3748da0794d00fddeb92014ddcb2e7604198a34ff7419b60fa6ce41f890242af2b8bc4079cc189fec69ae434c529a0fabfd9c88a3f4b45c199bdff1b9b6f71c3e26651763ec7f07943e2feb0ed9ff22c034a9256cde30195051c8be354cbb9181455caafe3b33ea83c25c8fe312bbbed6ddd77c36ac7d8733cd1a6bb66f2e12e770a9ba9ce697e19876bdc634724f2eacb8b6ac2d5f853f0c8ba70d16256520900b9d1747286ba011a8a840dd657aa06c6925f4c64e68b3954c70e238919aa9ebd82d4aee8aba62399baa254877de9596be567b5045e57a9861a957d03d66f809187b4d643c892190be5edff25fad24e09cdaac21d96f1aac2f22d5a1005c20b763d80ab8e372d4fa150b540d900669b98e6542939103d63149ea0bf74e21c63f3f41a669a4e6c22ada5b125e311da249d43645f33f6c9b5348fe0b44fb53c4f50c29bc4917b53cd6035e52b815f5ec7450217bab5a561f262fdab72738d34743a67ff219b35a6a4cb23b683017f2c7b4ecaaa1e7bbd0afb4adfc5d3f1f324a47052c0e8a08ddb73f823ce3a06b13c234be9687031a02e5fa79184b82cd96929fa5c9cc93251adcf0e13db501e76fa7008c3f9f0766a4227e76257ab4da77fdadfc82763ba127e5536eea767ae058663cf81cefb3beca31fc64749320dd2bb46f37eeed60ccf30926f705ab0d6bc40265822b7cf1c9b42959a0d600ad7673c8f5078417724756d3013d864977fef2a03e114978aed81b6354aa426c431bca0419d468a1131c8f0b263afcc83797582bd837c2698ec0c199f4b2515fa9e2efa4fab7c24dc8043511492f74df3f867e62288ab02cbafa1f655031dfcd6cee5e45a74b77f776beaba94ae0397c3ebe3bd583819e74cf292ba5544377f33bf8697788572e35088f6e3d7851b4a369080e4e605dd71775e47122a11c18e9c72d6c87b7bef0203b64684094b657a29d5440f0e14547b9a149f23d80f093dd250c54dcc29c86874e425bb85c38008c74f60b260b578297f47589d0a1d4ab7390a4c03a53dfee12be8f464e60a0b5221e6eaab26802b2babee3fc1dc8f1a9d6acb99bb2f645f844122a36d0b761d3d73522fb38d495466af112aa98630d75c608c0716acf66e537591acc41c37ac2c7f2c6503f1a401507986de05416d13b43f554f0ad6489cb0465bbf236ad7ed2988152e5ca660fef9575b2ddb3dc269725fd98c0009730c152dbf405af98bff7ee7cec96221b5824d3eb56f6417cbd4f3cb59c7de45daf8696bce148a9a4b6ad4b65f43b0e3ef6291bf08e4288a25cc8e6f40d9f45036bb524fffa31914c0ce49ebab7c672b3f23469cb45e2994af62fc0ecfd5f12debb21b5011a543cddb9dd1a56a1cc71b19c734d5b9013e9d3111a82d60e1d5e06a5f91aed302fb97cd16f9705fbfa4aadc6492c9d96bd0cac298aa15b1963904fc19fdc33e1cbd56faeba3b58eb95adf16d3fdf4aef94017c8f05a992938079cb907eb1acc515cea0cc4a1c392434b91bcb8cf77ab01f74cbae4f54d0546eb86b290711509805f40dd9df80374d94c4d9d571a522f925e296133f782fa772d986334e2cef9eec28ac7e49de97885d5597eb32dba10a9601ce0fa8b1dc2f37b8ffaacb6eedc2c6c32e50ddf38bdd813e1a2de975d27250a77843dfa97b7eb3719263e1c563a2ffe36d91dcb6f982cb661359ec10013114ec145a878eb3e54f13862e6439eb47bc40cc9a4e2af6befe5ce9ee3ee2b1771101d0b789ca958d03c1d7a46d0daec633438c8752da4dacd8ef07d92688d4b83173fd7d38434354ea91f807ea5fff9d209ff0d3e96fea38fe2cf074fa92c827d26ae35afcdc6e42193239c7d8e21006dd8f429053d7f4434f2d421091f44aef782382e325467d721ab2e140a8ce6232937517b8389e118d0c58eddb1932530034e85303acb664c3c8ef1e3b2162c5e1c16a0e96f2341c051a5bdf77e38ea55c35470e039a89953458221e821e737d45ec53065de9de1c17bd2209a8d7af92f6955cf7461c7807d45123532f9f94f9174692463e2f7470638d3743679a82f8c0512e42b514f8f95fcebdc12e03eba88f97adfc404dda33d11a14596047a77449c6420ba40f7e277e4da8e3f92d75074d7db72990eaf5497acc7ab64c54d930bfbd00ec6f5f25023267087f251813851540b8993138c9b7b10091592439dac39e8924dd7434bbf757740ba730c4abc39ad377da483d9c41463ae31268e0279fce1f019a8aaca4c8b4c8ddb8b716e6717c29b31fcb7f8aa9372d2d837db41b88ee49ccb8c31d320c99857996bcc1c09c671bf187d8e933b73065f395aa46e6f4adef51dfc86297ee4ea274c71b512d5d2f22fe37aac33eb9b7a4a5bbb8c4788682cd6efee93aef30f9255535844d770fadd32339af14b17e4ed9f4118e22e2159433b4ccf4ae5780738a29f688e893f48c00029bc751422ac3b2e47e1b48cd4fa246e6b05cb5a41cf400271db52a4e58edc0bc6141af1c6fae2ec071635b967fdb1e955fcfa4995f58c6cd7ec770b778739d4d8866acc885f9844b628e19faa69c27992cbdfbb5e1d9b6fde1b1902d93fbca38fae3642d9988c582e091da330016d78488f0450b690a34ae55f9ebcd5da615a383de577a7a5b20fe8245600893247df7e7c82dc2451e07dcbb2f3a03611827a9ec49c235b291aa957d6584784a864889847631ed8bff08e5bb227a308a5ffbf261265345346494595be85c7dadeb7b5abbccb89f64e5a0d60301adfc737605bf7c415d9c05be1059d960f3d96d9fe9f86e5247131589f979e763e9210663e7353fc9cd34902bc73aa8fc59598f0a45fbb07782dee284e739657dda71cb0818b95e74bf1f8a33e444c2b3c8275e885b2ee8176d7eccc52465e0eea117091f79a42c010cbb5ae7585818a1a68679c7961a0c995b085736bd5c1155382d0bfaa54d49185c4fe4feb6df7b7c6a68a24892d64df0aab6232efae658e0bbb159b6e0646c054d6428b1282c418e0cdd40c4c32202e6dee76bcc83eba4ffb5606e050cada4debaa0da30e02bd40ce944e3d8245643262a1cd38e588165ce312b86b4d9a7a9b742b62a9590dbd14519732a8e1963681584eb463179777ef3d9dd5cc6c5b6e8c17478ec5e2f079d4241e00455ec5a0c3dbaf121283475452d928371322d2e5d4a203cda2bbefe9535d3a6f4a26fe858bc92c587bfc952fbae920c40ac67a0d89b598f0f348efeabb9f1e2c28525cf884c1cd9808ea7de9ab1367863fdeab0bee5badac2ed676d0252b64cc59cc8242fdcb1a47c549d025e086174c2bc94322327acc4805dc8f1c160beb90ccbe297a661acb3fdbe723df65e6ee3398557cc0a212bd2006182afcef7bdb5b6daa024e5331287c5bf287a7cef33d4dde8dc389f036192227dda8d111bb8864afd43dda6545f4e712ace379509e149b5cba692604378772ebc7db1d5eb8857c347cca534ad4a67ee9316872f7060a145f47bd3ca6a3c2fe26b0b2af2a147459e4b82556544575414f2b947812defeded53273a3c8be0fa6780eee699ceb5568057fbe15bab0acd653dc76ead69dd9603439e108e7f23e97537fcbe1bab29a50871340ca1fc664ca4185b39f630a0079897871dd21dda33b6ee0c2cf225001aab0242b6c8685cb6865060a637defc8de7e34c0e85bd886c1a3dec3b2ee926b5e87a18066ce577b5981f56b1fe64800c8a3aa3ac6c1a329816db9cf27a0f1be0c7134659a9fac07fd576f0d2c59315b3442d19b8589fd546ca54dcbee9434dbc7df707d673db23475cac8eb95c2040af722654d9543064986fc6e9389f39c7f09c50349ae57498e523f7f160b4f50b9722a3d31d274e3a6e3966c9bd7199c267cb60b8795d729b42349f65c37a5ed2ee19258ba5910d6af3251e1309f9a1c02e09a5c0e9c6587f1e9db2b195a5c0d97f41689eea81d8402b859a5c13c2d862b14778e01588e25c5812cc51a92625809e67d18d4becb3cadcb2adae2aafd4adf79fa4005cac69f23cc77ff22cd945dcc2afb46462c8781547639e3e7372d8ae83f9ef76d66ae931f5440a91dfa2b13fc4450621b6f9d92c9a82ed349a6c7e34333524b6fbd1838f52f94fb089fe8459c53fc1e731acda5b6d6e25f8648ee8c1a2440882116a0687668f6096973d88e84d8dc7ddd6ccd6b52e8600a9537d7da48f31b907035c3277b0e1617df1a5a94665b06edb01b8ab1bcaa0cfedcc6a756c7665e40b31772cb048e5204db6194c311402f26d18c61c4ada9e47beac78ac5be3d4bf6df1ddcfbc5e3581009a92aa72120492df70e959dea7be01ee5f09b7ca1be1510e643dadd360af343935c792f2ca94a6698147762ff19693c36dc840286f53e8f11ec7101e83f5fb56fa36f650d6bad30ed4b7cdf9e773d1f035e098d23f8d1bf17d52af4ef5b5cb728930f4ea4083076c277d617b9149b1b379abe6f30d44cfcf64045c0ea84f294b67b67f273a9fcbb6cbc11e9d51745c35401a623cddb7b7e2b57e7d2e11a95e6e7a3764eee384beb9274a3f73a9fa07674b2a4d3cb37b898e345a0c3ffeab014b88d33aca2a07012850098f35529df7ccda5ef56a39bdfd4960cacadc65fce1e4b1df093f4a9b5ed0a82849e39f14746ff751879cf4985629ed56a2ec9d3c41b1d642d8ade979424622f0767d77d063e6ad78e2edb0afd9ffc2a2c14a41b2995f9b6a66310b31b28740517ccdd011b7e49f226ef665c947cc5d4f0f51703e90b077e16afd0968b33d194d85b6640b599f23dfb7eece771da142e6525c309c7d6ef1d48efbde7e75fb522bc0ac1cfefd64474de3d7afe3f49bf2544d7d34fd68f35b9616daec33c442ad3a52734d7c9a2b03a743f52fa543e8e4e2c176bfc9363e65bc8a0b9aa383b6557e44ecbe672d7020efbbabf2c23696566826da99eac645e4451aa708ea8ffecf45f33fff9ffe945ca228053c87925c26321721682ee716139785b566e242a5cb774b646bb94d7e9db3d225e3fd37bb2c192a7d5d9c4db8e0fb3687d923cf97943f8b9c9d5a3787743418884d8641400fcf830dd2cf3e28a681581cec0abaec63395c06b46896b12700065bf990ddccbbb6a4e68b0e344d86a1e30f2d91f5da084a2e6ef96cf61894379fbe5f910c3cb4b1de6b71ce87933959f00ee1313b6d6b9b901d3ce18f6fa3c6d772914fd4473f95ffb50d583bc1ddca8b0d1b4e95153e105cc04b55edb979710126630b0f0d1afebd4b77f16dc79bf4019b9039df3e092ce36bbfb17f086263f5413772032a93c6db7d6409a80bfeda00b40d4a4a37a0bc51759e2f79bd0951ad115dfe1d80f425a7ae8175066f347cf1beda922464f0ba8d8146f84289ae5cbafeb5c205be97bea5abb6cda2d8cda99a0785d83ef177dac0355dd552fe96a4ae13fe79ebae70d618fb14c50aa4b5f45c8373847c99f912d1c3247e5b4cabdc2d3f14a77da79abf6aa5cc8725a6118882cba3f49fbac7129d6d82a9f56b0fffe00737c50eb26fda46be6d4a484476eff038d15127172fa84625e22d9d5fa00fc3bcd06564eb44a0cdf161e2e56f395031b3d94ac5282a6c733efc7799f8642899263efd9983ea7cb42d2490b0f5baca15f7ee34278fe6e43d7bba8fbd79e9ec64bdde695e7bf5f5c038d38b6b125a728eb776bdbcefbc241a89da8ddadcb4beec0cde59c7fdc1ff1582c35ae086f840d92922ffa134d8a68ee9864a030411e557c89ad0a6f93707236f0bf6195a1a8c7fa4b25abdaf524272ef4d2e017e7af11661e16b8bb404c28c22fd041e75a58f73b5eb1f4bd7d686648b0d46b521fe7f6eda6a6534f8366a8b92679d79d31ad3b2b9f33f3c9e28dd8d8bc59f7e716c789de2900e279e3f083a6c5c2fff47069b2367f3b6e5193efe26fd6d04ea3a4d426843856af258255df952105ab1b358e9d2f8353821c123413ad1071815ed1aa730e362a6e948d18f0668990d0baae7ac0ccb99f0979550399cfe5004ab60806adf3496b01dea581b620e206547298547ad1db05730ac181a62c5cfbb3344bbdafe3b0ba7143c89122a67ca2932cf77e0e71f3a5059fbf9d8c40e6165174b5d2c6d478c73e4a7950b18dd7b118421dacb2815ea0676041ac01606a59e822ed90726774387c645ce208affbbaf239651655b5c4d0d083e6545276517ad8570a6810015c3bd6b56387daeefd21780c1b1cec4a26394e961ed35ec1649497b60eafaf61f00d7601f1d06e951c6755d5d85d1e483ffbdd4d5c2d0d78c4e6b2ba95054a9310ad98ca0037982d26c5b166e981d1f8667b92561f628a59dac9c9c8d2dbcc80f568208e88d174aa0fb22983638c5acc85f392a22964f654044da66a31c3cb13c3413b5e256bfc5776a16cbb6d0bfdb5a83a94852ff768a5234ca776d5426d74d0609a11d8b670be0b8b929c07bc82ce26078ab26334a0a2725f7ff646f96ddf63c2fda0f8f7a64b4c5a242d7b288422cd4b69bc76c2f3ddc1d5b2522336d4f541c90e92679983109bde182b4804f875d282c5caffb61f0afbd1ad77751c525aca7d89c0702a7086da6c0e58c9cd8d779b45d0ec9de6d22ca19526f6b1f2c68660a274c074d0729bd7ce8aab2bf76163ff17fafc5a27d1e6bb079c6c88b8ff82ae32103f3de40921c2b02b0564cc552f439ac87d7e96036c7086e885bf463b2609f7662e4b3e828ba23cf1970cff9482dee0761282266ea90f787d02cd4afb5d9154ada3fd0195ea917c57bbcae59da239d0247dfe1d3019751c51422087e766b97dbe1327162ad15f439626c8fa5a7c720fc8f93333c8a98b4268d2847dbd7cfeeb5ddfee35b133ae8593556b5abb5ad0f8559d14a2f8aeee5c5fc950a77a2a1f3bad2106a85efda29bfb5e0791d5c6cadd13befd000b7dbdea9d3c2c96cd33203acc5c38a863070556d726050007c7f28d798f253fb9de38360b5da1da678fcb879be2b579062acd5e3a4f06c6182be7d2381ef7ee4edba2e1563faf0e371573dc41dcf8eff5539de67357fd7afdb3fc3d27505031f35746c62fa9250fe01f687db50eb31829de4ad0322572f48c680bf94870e2fbd35d521cda7721dced41ded4f864fc2732c653223f698aa92d726a0d79ccfbf78ba36653204e6c7676b90db9878a37fb358e0fbc4b9e38663f34bd822c032a16452480eb7e34260fc926985af373acd5bd99120b728966b50af97f6501c8e9430a15c9237ccc399f7654055261175f0c817275f86ab456d23ee99071e0d28907aa85ddc2b060dc0384e72101b186cc7d9aa3c11713ca8a48e7dfd4d3559fae33f326a21ea282239bf22c18a29b9b227204a6dcb9afa3c64ae4cfcb96e26f959a3e9c1481e7eecb8b7d95e566b2ab63649b4a283293f30af4be71cc23063ea73da43ddbc6241b5494d3ebeb7a6c8ab456a6dc34e24ca990ebaedcad3bf23bb7427f30cb17322896b1cb5053bbe0dba4641560925a95b9107e36d7f50bc6edafdb2f2ee134be92d63643f9ec01d340260db92a6c8436901f031c25ac95ba0f5a5a6e184247eb497bba6c3b74c32ce60f5f8cb060c3027b2b184e1cf59e1de5e8e04183bf95f87a96253c273ed211e07800f5ab35653f95bc420d0ab51087c64eb9ec323dc32421e57ef837cc4211906a0249970478bb1cdcbaa5408014e15cc5c45531c956db7e6df2ce3031a5491e4bc5dc9a7d29bbfec40468990a77daa24cb7d596cc4cb27f933c6488acbdb89c5c0954e078ca3eac3b3e1d5c4cb323ae5780c4bebed0348996a026d4f4c881d2c97d1afa9d261f12954ee9eb962a86eaa4ae7948539911e03b2c98dc78128cf8f32de74e815e05e7ee910b5aee20c993d12dd90a40cff58d33f60b72f30aa240c35cdbc7121f53720f5ef6b04536e797f15bc4587ae88f907b8cf18a6951ad111c6e46e7ee332f5736b63fea6b7ed1df2a4b926d8cf7cdc21f421c438b76003b40a0ac4608abf4e199c5ce72022e1fcbd6cf6cd9c581ad342db7c71401f15c7f4023720087fb37df953e67af3908606f1e1c68a8d03a70912b7394dcbdb34a52c8cfe91179fe6fd6be35a174055923cce2cadb95a1586d9e0867a83cd40c1fdd2b2bdfbe74e9bd586b8e965249c52cff2f0e7310301f1cbdc90303cdce67c334cb0c1fda9468a1e2e3bddeba6c9ab3d65308455aea5d27d01dc88d90bcc71eefa08a3471ea94b29e0a00ad90330a1ba61d83be31f05784b19c8f4538416e9bb8747467bd072ebdd4ddf3108e743f314d761baaf53b90771df85c510ac26dd9c82efc72db7664ebeb8eda1d3104fc9ae36d2dec6a7917d2f8fa43f4c6497292b1db19ddc1ce043d1c36cb5b2225f01145ff36bc889b3d1c7557e925af3ef03e099b7d0e2db7cee74d276f68058b432dee584dfd2542a2ce144ce0558ddde85b4a13902e3f9ce050bd76db6b81094594aeeb67a6fa350c928c2940b92bb918f6d3d80a0fda5df7471760a2d6cbaba74891118a17e4583f369205cffbc14f896386051de54864cfd519fc61a0a66805561d5c839a6dbe3c14b1b310777a120fb4002f556a846f4c2b55d6eee9cdddb57399ced2ba1fffdc2737958a7ff267453a111486857e01137cd634122e674ad7d6511e8edd8168c0803690ca93c2fc94b9cded84022d56f5e0a2477455d57b8408391583c22d445ef0b45c410ce273194db95e942088ed8cc84482d6e04889cffebcccd797e3ba7ac2d5b0f44a472bfaf552381b9e4a063057541e4d403481e58d07f43764be006710bae5cf6f750a7cc5b8b49dba69523e4ddb79c54e7a62e5c15092b8d9d9c88d2f1f9d2e5cdceb3c1634358093dc354190bc29c6faccf69a4f7e07d5d721c892aad08595d26b13da87fad687cf4c7d3b7587b9e6a13cd3e1552e72329b95b752b1719bfa9794c5fa609547a3bc6d55bae937ba2446e36936baea1666b0226d449779ff373b997dc4086254df68a056147a38cbe812e30a093c3b89dc94778df3ac770083492e9b2d227c2f80d0dbe7dbe949fbfa54d23d6e2c554224183a915cd924e3f90830a7177af1132d2f3380cde85ec3734aed6753706ef9c7ed81c6621a7a11e073e0f48640e74c7aa68b4e1048a88ca11b496eb99a29835184fc992ed32231bf015f56979eca8368a482208981965d5db151e8bf1778cadced1c484bd8ab37a42c609001ed8cb822e329cea9708bffd689763588f5ec458321e288b51ed90bab4eb3ab15b0ea94478688defb06fc517c3be723b9cb70dd0f4e01e73ecb48b791c2f1d9ea31ac6d483d45250348800a8f347d685249c93c4af7afec7888485ee408b47fb41b22b76bb6afe720d13b1a397685bb321215e63f6856f0647cc6bc7c0e78ff1eb21ec73e1d85cc6db991bb6f20c773da7959046b904b17c0e1da219dad8960a6d4261cad566f1f28bf98f993d78874b02fb6b1e7e5dbcf8e598b8ed6a207cf45f276f40b9b87e8d2fc96ced7c46017ef7deff2d31ad6676a4e8b9ce86350becd2a8974fc20ec52bbc9f1d041ea61a18d60a48b9950ddd82a61ba37838886d44b9778f9bb519fede473c14a03e362b9663bf5d0a0158820b21f8772abf234c92b455af8770f58c40865900e3ba03a5d592918d3f485c344ed2c08c0bdbbc8d6f42774d1b97438c8adf7ff133c7439213b9d98f2cb1899e658c8c4fcfbd788d1f8f054cfb23e7ed3d08274ae8b323352f90cc63a5037b83170de8b28dd2a5f861d167893f20e46aaefa76920c43bd7a53fde7a50013d444384319401f78074e7c0852f5681312002fb12d5ac7e5976472dbe883f5eb0862d2c3e373e19d695bbd1e7c81c15eb2de8ee9846246547a9b70ee3e2c713eec37c54f5a538d662aa8c87fbed30d7a1d2f20dc1668142b66ad15216f6753f8be06fc6a60994ae15a65b20c7487872e546a2159534e0ad98cc44c99ddf71b22aac6a34f75954551aa3953e8b9aaa85c74e8117d01ca6dae4db26dd2ee2f6c9044506a5c50cd68558ccf30b0ec1c299dea1d8e7e827f80726706e4825c54dab9f1c74ac2721a7da6f65ee3661b5ba8ff12f6bfceac63d2b743b1546380f66defc89b613859da5fed3e0da4d330a9d5f243a34f963abbeb630190222c3315561affa95e9c9f6c827260f058e3658927bffb34c9e87bf15c9a04d111e807f50cc020d2109109c2d55b66678d12a0459614492efd2b71db50d4a38a1224d7f5f6c975642134d4e49ecbd67b9ce8bd8591b34ea29a6f82175a56188e47bf33600f1fb727b04adbf72e26b93ffb6f41047ab6847b045a264873590491c572528d955d343502fb0f43fb31fa96fd03c080eeb792bf40f02ae821be763c91ca254ff1bbeb6567b863646de0c53647cc9777a3e814314c31f3f0ec900a1cc591662b0f9007cdcba401f80a3d0055b95d25ad7afeb2ad8a06e4ce2de90997f337f8f5b206d130910f2be23716142906d399ff1229ceef044b3236b65be5f53e3e970ac221ff4cd87d7c583b2d55ca862a6f71c34cf604c73a556ada82c9745964d2a1568c526a77d3ceedd57f12beca42b52a233b47ade0aeebdd65719f41b2212d91aa5c8d257bbd6ed26c38b5f2a99f038810800c3301ffb93722685c29e2949b2fa15824a6bf897280863b07ad93d03290fdf2d4aa18c3de143aa60c1ebcaa946bfe5f8840022f51ae126ec8e1d570e22430041aebe2cc1bcc084bb359cd27b70dc0e03ba9c98ccb29134f5bd6fb3109940c2ec0b65c133613759127ccad458f1cc4dafc98b1a11699da5bed335f0605ace581d754b38d1f5fe260797f045e1d3d47ba4cfeac0802bef4e5e977e3348f3414aee37dc82d0fc590c00369cc4deeba1ac2196d7d388b297b20448b1275e01453f8249a3c72626a446d8cb37965e4c199623ab5eba504dae6a2b791fa1144370c8f76179950f1d8f46edd25b0eb7c3540220ebc4cc229391ae34e11fa3d33ec60f5a8887f28210d41c08d8d931741d4009889901f75cf280db513a2fcca3427ea549ceaf6a0b4c2b3e2d3b7762d3f0e072c4416ed379fa767fd73469182c63d32e21b68cb08ef8d210d6ca113dcfa0571f47e751f94e1b2c54cd005b469c30baa0d6ac23786442fa507461e0f5470cceb52107cb63aae9f3dc7a636d987d6e735050c5aa685d2fa6ef8ba3b5b879fc4132bbc7a9657870d041050eb81c2f614df2f6eb211def2a97f13ddcb680c98e07b66dcec5877fbe66aa99561e3ba547acc8bd1641e1230e729387423a8eb9d9e166e18046d0990c6867751a6464947f2d28a9342a86b93cc5f0f17498365462cb317245d0d8be6ee1b83d792f9c8b2df2e4a3af28ebc6424f992113fe0dcc5499709368baaacd98f3a71dd44b94d8d1c62e45345e198682e9b253bae331c329ec7f8e8913ac79cf63b676d2f5fd10ff6fae2f82260a346ce4605ee4f58fbbb816439642e3a5f2863b69837ed3db51be799856bf5f2d887300159e161d71be3d3c6b0851af19f2bd2636e08fe0ae81456b5aee2c3c403a71761d776df87914d73753270b1bfd30e0a088f8fa4f2b3be51c5934c52b1775807212c9f874cfde54f0e000b141d979120f34d1bdaa3fcc17eb2d512a4b782a1542d073e32ecb3b72b2af240b6865e43f5029032b0b52ec654b7bf1cbf3f95045c8019f64f38ffae6c1842f60252f86bfee569c99b1f5e76750fe550f786f65036edb4171c092c8ad558a966f3a8f6880e2838bbd1851601723309d64b4100017e1c2c8e78ab3ea057387b85d4b66ccb9e39dcb08709b523c91dca9470bab42114ef287ed0e4c71246b0ce250258ba0c4ba585ae09bb7b752fdbe82be3dbec2a959d823c683036936ba2de4406341f9bdbc685a8e1847c3ad3c67ccbe0db6668ca2639fd9ee1f1a50d70fdacd515d5c5155a37b0e07eb782d330fb69a18ff7ea84fbcecec422768d3a918898d872f89337b61dbd94d0e4e1a67673b50100e707638a30480c93ce69a2e5e0c04c59c5948a5336f48f7c3ad995199fa90aa3006a91eb0ee5365aab2c4d5e5e0c1b6cf032e3baca4b3f31957687349e7e5b227f149eb684e1b951a97ec3ef47da9425f294315592d722f0921a8e4aa66dafd8f5a44fbea1387bbd188f1e19189de6821b1926e5259d006af5575f9214ff1cd84b72e0754e57cb538ee104dd1deefc5302eff0158012e3eccff749ecb0e9cddae016564574998ca2bd5862d669c1b2e1fec7dcc0cb487f3de5e0124a30f3e15a702c219c7a671788a0993812014332e98750bc2f7e72bef8359389c8cba3281cbae305abd6cf2ad58ef440327783fa3fc61829b189cb1ef4617894a16d78ef92518345834c8b63f97f6c38f59a458f5a7a0b0969c09fee1782cf83bfa5d1d7897430e14b11ad60e07614690a562be3290bbfcfa4977d676783f5821d860cce94d80a81f587333924ac8c49d816c287230e8cce5f6c912f56150a9961c60cab241f206711ce46b532a3086f6db33aafb9baa3489b2870b9849fd6f9fd8537affb33bdfe2700eb841a66e20e41105cfbcd8839d4f967638dfbe070cfe288afe5cdb1b2e9dd5ff7da23059438a74e9bb77261973dcc4c403c09040582dfb064ab3d789f2e2a28bf8e6dc89369cec085a4becbdc7e714930c67164649b327b3d1727a53197711c7ba24b42c1d2647f5d379bec62f5bce1877c4fc8be22341a9007777cb65418ccae41534200d0500323c6c39aa041373b285e7ba9a73fab44200bb647be956327c0c15baf54e1c71a52070d570d8990637540e8c89b36608b1dfad724cc7c7b6583abd75fbefd5f4cb69cff194fdd09ac8e2d308ef7f30667cd74ef172c518e3b3081ca7396007e20cc3e1d2e336a9c501516bd26a42cf6ad72141fb94b39af2466cdf47627ac74688321a737d4b8c49dc2d1eb7c893f4c6fea3c9f78eb04fc65407308309ed745c3b4d524c255b3461b5644fde610cd8170600d03bf36b2d353d8530787095b0fb43bcc56b292f932f8be1e319975a78bf6c8c7da4052b33ae41ac1d23cb6ee38cd535090709e4895f8e354abb9087bdc634d9af9b1140d387401712876bae4d6d4acfba278b2449a95f2354c60037a6c530df767e560d469be2bd0e7ade6a7115feeffa27908822717bd295d6134bd7e98470e45ed31c0b83cd341391aa2e9b7602685b75da256397685b24177a157f0542c090920abebf058d35af12d09f427db49f458e13cdaa3718e3878c51fe8dea606b88e35c6d759266267ae5cab61a557f556ea165a3d4d2a4779543686645426827bfadf4b3246135e9b782945b1431b29a1c825c3abfffa7387f226cbcef5f6409971f6473b56c503df5d63d3153ee644fe55a586811d369955b66e38b04d049cd1208ea1b2390652186987aa38058c3bee0518e4831f8274ab28daece2f9db5d9cb2d76c7a676175a504e8b8513619698e466dffdff17a8c74ca5da90c538551fe124f0b3fef5595be4725172a5968b0fd36029271640a1a84a04a6b24fc55aeef4114522e1ee87209930c047d3f03705d1d5fa9e416beea239826013ecdfac20d567761522eda5484378f804b9bfd167e718482b77cbb30c2fa9a2c4d24d2056fe9f59afc31e4bf34c84b8ac1a31608190b2951adaaacc8c2c973b6858d27d42a2105fb0b3e3ba0099d7ec05a994e1e4c87f005cffcd9248c60e68f78c84f255a3aec86285991ca5b179a9a22d407225be07bcc9af7f1164d4427e4736dc18628b0d54278f5d2989e779fdde3899ef7a8672a47563513c6b61830c2e14160c1022b6bd092ae8129768243e0865b466a02ca10b99015a4ddaaa9ef563bc3683e5985eeabbab7a40a398606ba6fe4ce6ad44647aaeccc5f035b0cdd007cb451b783811c88d52ab577c74ad33cec3f686eb4de19335d019713eb458dae141af39e5f80339b038134a453f3216e0b006cf46600659d7c0f9dfa30e92b88d9692f0c97b6b7f0be61e7d7005c1da4f3497eec467c38f3c95245029a9e83d68996530d72d7a3bc982defc28889686e9dde090aac4effdb1d62548f0774b45cb771bf08887bd2ba12116c0fe49d772bd6ed46ead3fe6c07fe1186e12436912adf87dd4462cfbfcea90e85cb81353ff2bb885e884cfd75791c53985ca6ee14d0793551cdd9e5b85dc171431b138a5762256242a65c96386ca045a67baf294216859a7c05510cef442968a27e0ba7b246281a88577090b1bd9c85fe97fbb0dfc2d53b9a4cff1690f9a585531758dc37c5a869ec5a200e4b74b7b71569c041dec5db5e3b5e67dfb46305d9733f82e579e2e9d5af0f8174260b7394534f8755b36ac18f31435b39114d41089fa3b0b47329d977e76ed74741043bc659988503c5b7f43d3b43c40f4d0f231a367be1470546705eeb9f7a564bebc5ed870845b512d3d2a7a0c8c7d76e591471c9c9a995bb40749176f1179240adf320a6ed4719f4024c6d3e4d20e78e029d8bc0b879c049f0b98cdb34fd78ff20346301e9219cf5fd0da72ff28e9b50b115b0582c5fd5acd3e85e8b86f1174e6f1e742fce11386078cedbbf55e0c0262d035ee671ebf61eef8547341bd7c9daf92e921a6c5a5bd4d2992d0cd1aec0a7964cd24c0e2fd5b119e04b69d53d203f9e28a193d6b53da99b1b5d4989e1225836846af12145679f72711fef242e40665a3e82d10b6dc8d030f30cf2d71c64bb023f9fca7dfaa30364f4e094b3f4779e4bd390bd57b0de40898b5a834ce769710c57429a0662016d1bf10413859fe9c7f0b507f35efdc96bfd3bedd54814b79dbf0ed48ffec1a3205efa526390d24e692a8d2450976899376e5fd5885660602c314810085a23a868dbb9ed20aa183d05d1c62ec9d8de64d63d9e5553593deeb4ae2dd79081abe4d2ba77464fe3ffb94e5fd5b608e75c202e58c662086362ec12b495f1642143575b8e984083fd088714e18f581dd68b80d6bdc3ddf7fa545fe60dd393129074f80b1bb8bcb4273c97b532e6f19c2482b93abe5a9134f5fb06daf7725f30dcf42b19768f5cf7c8c785dc649b0c0e78fab59a9478a050b80c57672460b35ea6e2796e13b5a8e9119960228168df400f61fca91056b0d4b6bf4ba36930fe5175812eb4a5e6b68ecbf9adb5697df67ad3f4aa768ecb8ef2aa81010eb8f8c07f5d6264e34a739fe59d020f7ac641b62170caea45e1c82d2dbf87b109448d10edb8e4dcf9fdaa8969773ae624c14562c6ed5e466cfd6a2cc0f03609801956d9c5c9a96b4aa161ae68e9c3ab8ba414d37a2be0647fed1e6c5f2f719b55d67fb62335e0e928063db54ce43bef772b690bbc8b2793b423289810900a8ea90c45ddc88c1180dd732d3c932c568e066d573b2540b72239cee17b38b1ab1dfe0c544e515dd4e008e4e212439e1e696201c601e99f68d7255eb9d4af022b59814fde11c39f85bb1e633f87c508e7511a77e91d66b9e990114a51b52e4dcc7f5f3dd4bb0a6dd01286e8bbe4b7398626b8e91f50fd86fe18625954a8e09233b697017bb7c313a075bfa13aee01145ac89a271004bde928efd255f8c2b18204f238ed13a1ad1a596e4759b9aeab515cfda5d6702db8ee32ba0c92a15eb13bdbe9398e10cff8646a1326134b27b667fc5478af4604cd75806596cc7ba7d5e9628613915c8dd72646bb01782faad0bbe34f83f4b254c7f9f8036284ddb0721d1a7f727a6a9f859292496dedfa080cd6e3b23ebc7703351f33378b23f8b939ebf7f4b65f00b49c42ddf8ccca584665a6b54cb1c91465dc8562b7b9b7eee61fe165c4be1f8e052a8241649f333ee0e7c12e77947e9a35eba6c187cb8b79b6ac8b4de18cbbe29e0a504a0c49f659896e48cc558e450568bcd980f890a64259955e23140f8bfa891d6b57f41c49c9f8238fbd7cfd2c7072c5e96e1ba8043fecfd2f94cc6b340849a0519afec2916e8a9b09d320156de9ff84d409fefcbaff5c5365966711a057115243add8560ba1950fa767f3d732662b1a1243127e20ee1fb2713523f78ae1ce15ac90fc04ca29667fe40862f8c50d3dbb08c36c43cc0c4650073b90006fe8f120413d9801617c610431532a85c101f0245ccaa65de4d7b66f950db01824c694db640f6c286d6e4249362c4e31cefcf262cb1ccfa62e87ead9ca3e2e701207f81afa81c52e152aee56b44ef36b65e0984442a4f3c2cb33003cfe3a02f0ff4de8a17a92ab050cf09d2de45a6d837810c8cc4d0cffa0cad54777298ef051ccf8057248a0936a6346d16cf1415aa053f73fc35c151713ff1b9e831add7836cea9825a0a2156c4ea6885b3c5e19b8d3e22a15aa6ac468f1f9b501014267ffb06798d5e1354cf837c2ebefeb68d069674a7d8a80e65b854fb9445d75d38340e1160105fda8902d99e630c2686d4ee4800fd317f7c1f7c38a8cc2aeb26214c2728b8347bb64823d4b3c25f15f21eba4286aa3f14395d256f4e77c2acd3066f7f670e515ef90669785d0764e7ea314836a63a9031bf61193022aac21a3e664f00fbb0fa8fd86dff02836cb982269e1dedaf6a7e228c2cfc80791be4cddd944855289166995454c32346e5553a2b9cfa9ad55da8f4d7b5de0d3370aab4a26620eef3bf3e621c48b4bfe6268da004bd941e80d162f8ca0db8db4195bceb8dce4652248626c55e91d7c2f634ae7b1af7c7400b4763de2e2337027410d8c4cca03d420a2917c5d0d2121db084b77bdf63dc7c4766098bd9107c8bf07ef36074a233eb9d352c19924d78cce8cea90f5dc699549d3a379592f6c58117c7710ecc9b855be9b3bba67640bea308087626e3a177658d0f49d80f4881c4bb50d1f3d9c10f1829bfc1e5f3b0eae659ce41d71bd28c3c69d7fd60159c7aa50d43da3f612d12cb244866a6abac127ddf920dd87408438a0dd632d36fe0ad9a59dd96d2f26cdd5e17418e54dbbf2cab0af59b17e60d4f1c750d09948c7b3a3b4d7a01745bc31c5d1a68c0381ba11795a1df6c9d712a61787e593b301a353701e5fbf7e293a8006f28e83dcb72825e5cfaf428c406bcd1cf2a2c98348b515bfe356d9ec0231be9d97932d295b8c92d3a5098aaeba962c3b6256ce794b20f9b4abc762995ccc62c7ebe5347c32763a12a6f707c66bf38f8e61f37c9e3f101c3b0e47fbad9d9183d6830cab819f5d257c7df7d0e21845ace3e0aa0ac0251a6d3ec5700f0d09b2a2c8d64e53e55e7c5ed2b9d4757c53f3222326e6ac7bb49643acd8f8e1c2802407c21b92df010ed5f27e14cac38a50dc09faa3a3a4cb88f1ae84e426eb90e348663c3b3c904c7727137441b9db105e0356210ca869b7680f3cca969c9a94b4b083351276ceaf79479bed6bc10f9a2150cf550ac5b4fa13e186038d474abbd944ca61e646904446af5bab1d0091f70b63d91653b0e4a4797da01f987c152170539c095239a407145e9559eebe16ad7af16ad493c51714fd8e734e97d6ce4740080b6c5e26ae28c633ed1690931ad963ffffb8e12f7832cf907137798b437b3c33b296a404a8e6fb45f0d20ace7256de2eb7d67f808dd62163142acd2970b2a4a437df43348b4b4df40b34d858bf63a8fd0f81d0648ea0450db4eb1da2dcce48dc6fc5afde084f1969f4e7ba1863782c59f1d9764271f5203b11a2c6fdccc7a661bf72f4966a39bfff913a5f5e257067b6f92c87b583a9f071a36bf264609b399c7b6a63b0e4021f94fe06b986a1dd887ea77deb358f8a92030f25517a9868e49917f95e7c61ec196f1fc45d581fb4c8ed601b6f3407092b48914cf54e6f8f93fc3f87115a0529275f5875519be0384d8c967fe34586f69eb6bde2e8618a6a7c3cff1a22f9f62170ba1f9e0282c06766f5f126ae4f8997d13446a69a413cd54d9253fe6dcde9293636ba6569591d6f75d8d7290abe71072df222bdd62a6bb07db11eedf9c7abf898257a7c016774848c4373f01cc38cc5c5870f36bebca591014200f7de2df61d133082b6a8a0c19c84c6a384e5a6a88562ed9f1379f8e6005d3cb2e404cdad335c5e5f3ca326eb0f872f14c06a5bc07ea6fd40afa53ab71e9d8b8501c6c7f9f68df881fb02b29986c5645e33d8d6b35e80b136cde6eeb5b7833f733f539450f1b562ab190df36275b2dd5768a5b1ee0ad27c78845f5f8a116e4df29b2289e66a3049bdd116a3e20d2b996d24de61be0dbbc32e354b437fd079f414602f72ec9e56c8b9d10f1dbac49bdae3ee3dca73c90d1b601fab1743e7b8d41341572a636e03fc553b6af6bd3cb5457c800616d66ed384c38fc0bf36eb653e76c174101edb20da907453843d2704bfdcda5bf608e25badee9a0afc0faf2c8ef08506dcbf9d2a115d7f18c7ee5817c10ef6078ac5eac00c295d3b6c8271f0c325142398745045f5ab7a97f40ef2ea8ce68de5c254cec6d104ec36390a8dd8824e0ae28947b121665456ed1d011cfbc6d335cda5a5ae973839514ed5d009a90dcbd401eed4b5e84780968afd2af41dbbf22728b6bbdedc00f94c8a218f21355e40881fe6a0b09458e30d32f2cf00a01c28625100b94834839fe4ad7167bb76efe41ed74f7eacdc86695b32876b2bbb3c219834e52041dfe90ecd11298facf195b1b31d845b450a91d178d0854d8fbda2d62c7db220687728d3dd8201f5d739915d8a527b9313aff07b8911264f0f37a34f5ac25259f38439c5a5bface0c4a7c43177c90d18a00053615493ca5195ac0b8cb8c2b9ae78eaf75768267966e3ab52d913b91a38242c7e6738f3ea77f7bfcbfd1c6980bcb4612ecf9ad4c217b55dbd490f2f87b169efecb2f27f703dcbc30ac94e93b88b44dded3062a094437863064a45d78d135166ec839677b2557d017f0f01245ba9060b6d38ff83499f03700658437c0cab7f8278fac7b14ffb51778033f9ace28e68a25c8cfcf1c4dc66aa0e9f882f98400d25caf10676d0e33b81049592c8adb2326377c4d17b09bd1961fe8b25cb215380eb0fe9460f8b9e838a31af8d2df3530dc33fca19172e3f69e2d1f29f2c6d75b55d04a419c50042bce8413f0f5d603f85e161eb3b26c81f912fbf874086ba980a5d2408fcc9974686f42336ad3a2d4e29cb6fdc5ea52ae37f3975ac9f2dc3e8f5eebd2e88bdf744e3f9aee97df1d1735edf334a9a05126ae9ef36ad6d2375813cbbc4788eabb519a04787055852e11d7fccfb0bdaaaced287e787c3bfc9e0cb49e133ff9b296475a8ca4dba4b756d2ec3079e6abdea17a98bb550a7bfae9c749e1f258c87ddaa04b55080a73a0c50cfa01e536cc99ee48dbe4a1a09181dd92e09b6175d49d6465967fe32ec3eaa8d2da9047271d1bcd1e3226ff224734a238b70a0e8549f553db5b1525a5c025fbe97f5be584bc40512c3476af672d1d5aed18a9affa56ed29887e39995c224a6c6ab294d7a14f5815d61e4b089e21516f1865b957043bb200e49558970eb51e10b774cc53adb97ae3c9a38ca7f7551ba7373dba59f11fe0cb0f9d963f0a80628d6f320b4555d747208f6f30dc16caab44b7be5adf8eb17debc9f2d4fe8dd0e6e81cd2acb444b28d8333967d30b74a920d6dd0d391bcc42c7823d718324207628c016282a5289697a51175349f5ec7ebaf36dd7c47d48220204f2180da3abf9f4a40a333109bb13032ae7c32a43a1f97592ac58ca68900bb9c00b7945f2f88f0f190d888cf8e7108f8f647d8322e0b361eb306c48fb2855e2cf2ca55a4600827efc813385d68bf78430dad316066f87e8555766546fb67e507d2f35f857d57436f78bacd31da160c4ba0f76f45acb7696b2ba396c3a61b9db59f823d7cc01c74b8969417c7c47b2d6f49e088b253cbb01e943bd47f727cce00ca25b74074359a1b0819e5d2c5fd9fa30162a257526c39930b30ac0e7743af8bb1ed98421a186c7fa1ba5a98470d699a24b29f3abd1883d1d6bbda7530b5d8db7d35f93fbd07ce83da540a3df2f062dfe3f122c2c8b9a9cd9bb258e3570da066d302dfb38ceaba290756e666c395873a9b8f04f1624dbdf027822c447043e35c5146e54f9089ac19eea02064e5bc2f9832dda573a40a5e00baeed44e5983ec3e0944ec185bdc3efe90b235e8b9a0da9530a02a67a2276f210462c25e963ea3c190fd24b9e0fa38ec929e281507d1aa35061e12b3757426ad4019b37f7a6f64cd19cb92438d16ca138d2f1721a9b3cff79bd3786cff1471ebe2997cbfe769fade2609adc164e61108754ed363b5832cd29a1c78a4afbbb62c74f815b1b8e1645de90de98128304f689a7602fff3c12cb71c3b5c8fe4f5d0fd6864ff814655d15132085ab507ff3801fd1b335d1562b226913d9ca50df1a476c93e0cf6fec77fd578251353fbd111b68e1f7be30b3e12cb7ea5c0153c250ea90c7786314d4a8f61c5c940112525145b05cca4d20a27476ce05b9fe9ead3652ad755e5fce41ef8c85e8b51632d4c901d7b2721ad2ddfb328824694e75a7f6bb58e19c5f93c2050ea499f87cd3f7494ec0306d6cc6c384995274c21ea4245208a6d6c685ee82cfb2aba4b9a700a9acd958856841b7e4c8e81e6b7944e9aee8d5444a78e548a1b2aad3d79e4c7e043d2b89fef0840bc0dbc86cf9223042d243113b26a8761defce27a2d75fbc6e66050745e58f2f35294ffb0116750d2a0c30edb6a5c9944c4330ed5f78ca342ec63ba67737cab0237f4fdfe51dffda72015a9fe95904ec7d61e8e218ceb4bcf382d42307a78851c52ee43718e60132839f40c0a0b86a93dc9f924cd3808b2c45e0536bb2b28bfc16d67ca3afcf87058725c13362d898794018057d3f03af24f80eb38d2deb0695860df27841759bba1f423642ab291e5774d7b6877ba662d7623a02217d9a5a111076cbdbd1be45c91cee6af1b13892d88cce9bd5cb775165736c12f791e3fe90aeeae70b4fc66b2b53492fcc455f661b00d1937ef6a908c02ff16cd6c72915c104cd21c46049f97a9a3c0eb6262dab204337b66883fa9ff1c9733d40080355e8629f8e010df726edd9184eff532b64ea8cc4d4de4a7619a3e264fc0459667fd41c3bb1e5f57dac79f26066fb061a6d6d168fbbb25ed9fb7b659ab1b31ba49d8417bca08eb534d1caabc72e9dbd2792e7c53eb9e14dafe00bad9673b599121a3af50821ed8b5d59f803e72e70b9646206135d3496854d9039c5a7dbcce5a9381f1d4597c5fe9766ea7bd606d58431f3390bcf834721e30de9d98f11bf2f77d3eef754b8d03c31ba97cb2e4ede2781e5f7cbc89ce717330056b78a177f5defed7c369072e17d8a15e7a8dd5a40b0053a58d9166e9cfaf0ab0659f132954ddcdfe1cba605045a74c9c0d295246042e17c6c80fe47a9f0133cc50b27e34cbee203b21eba11f38136252292364814606039c05bb5e1a4892a684ce7369ff67ed0cbab2afe21db2f675b854f7a7c01e7d71ce04276f49d015e43522debef9eb5fcbc5793a844066fa77b3eb99d870952cb4b0dbca8d92d30ef9fbcb904cbc7d2af7263318db1e4ade3534c168c03eaaba39a21ce5158e409849aa7d148ab48d5808e59602b501847a256049afc5355ed7c75c1a826bd3d757baac415f8629b32e4d8e440c6cefdb8e12c768132f3aebf239b5db4d54973bb4c9401afd78dc55495925576574670f986535c31d7cb15e3f8218e10d5468ab2fb7a184a022c6570101d9ba347180776b5b11b8c7346187c3793ee58f6ded0a723c1a877470866fab76b85acda5d546639da6f0ad4c2b52a397acc2cf0380d1d0e832e4e7a8a86f3be6e7b7e9e00ed9f49e8394d1e8c8dd04491924c55eb9f11bc606b72b5370c56f89efad5d54b4b9ec6b5a59812e78cdbb0d4a47d1321252ce380ae09ad03e9932faed0bee967ff95b9ae9e9ed7db2c0c3860091e4db42517fb241c9485e51f47a4bd26b6b5142cc2d5d8ba87b97c2445cf4215a9f25409c365c9f7490408a2322c489f837a4455e91df428e2af29a5e548623497c19238ead1d33e31b085d464b21499a2f2111c085fc5f9c3c6441ff522dd992a3f4c2c5ee2439dba70d88ad7176310945e47524d9e348f19c95153aa29a049ced221ccacf9c855cc14138758ac7f7954f9b34878770b56fb719073dd3fa6601e4377fd62a1870bbe04fc9d55aeec40a02bbfa9c0de82d344a4e3aebc052ca210d927804ab12cde4137b0b3f95d28b54a82d1d9b68102e6b83b0987e247b1c963c726b853e153504feee50dea1c40c78a30b415cf70956965046ed210da7d296b94af1654de717dfd6f878d59163341748c5241da3be2491f0ff77f0a947a3f2074ac90fb7e004820041168540e137c8d1bf273dbf9ccacf78e857b63c7471170dc17ec5d59d583cbd27f91b4e110a9dcd9d55ee637b31eda5d8c5e7b8afc2e32bd5cfba6684f101b947e92097e7fe3590dc1706c9ffc730291565579ed0e1ea4ac127c311236901c7aede0a0653a1eb165a4a9ef6683b31a8d85c1e7df9269b3c7c02c05dcf7be9aa13b998ecb6d39123100d3d40305bff634b765b8c146abeab3f3a89ffa3380073682e0e4ca58605b386e6ec7bb9ab0ad079fd5850f84e948366eee3ad908c6d9411d72bd5918999421b54efc92f5219fbf3e2c931ccd0829226204524a5ff995fee65d20cc2ddc1fb1b354b5a026b228b21a031fbb0311066ab50d4fbe438556605cd16a59ece8265b99a13dd50e41b46886ce4f18923737b49df75cbae0e3ff769e5e8ea15cf485f39eb0b53d5cd3866f372bf957acb151feb7fb7394817ce8887feaf1f3267e801ecb08f3097551bf36d58358cdc67f984de44c53d8377d4b5ee32c1421f174c8d4b9e638b7f1222f5eadd6f2c17f5c75a3fc63962a682aa6389a3a07f96ac6841d936eae32e0ea0825b835b5499c10bf1d9b56fa0f56a0dc9411066a10898ee03d453c21368bddb37571fc73774a56c6aa73c6bde4ca16ecce0f5975c1068105afe5d442622dd18100479a678ce9db2426dfa3cc4cb7f77279a5ff0efd64c2bc098582248935e0115b357158d2a4f798c837152a62099af9022f80aae47981b2bdb8c78797bfbf20af735d7f7c889f0ba9d7d71c8d832d46faae6a77a0c73fe017edf68a2e1000eaa5c9688f694418cc71bd6e81977a1204c034f6a04bf913b37ca27ce201d64e916c6f88baedd6f76304d0074c051c84856bae808d62c25e7bb7f684fd28adcfb22ecf61d3a98b370fa9450b1fd7879a6c205bdc99e936c682d332bc96225adf19dfce8b95be93078ce0d2d7ee699ecfc26cb5c5f3e93dbcee5f43a12ef4899f59100263ec83f627315b6cff688cf745f3669cf1d1ebdb5e5a58ede88e968b977da6254cb76820f1920535c76071baa7f08e65074d00133e0443b7be03005c76668ccf63e260613102a13102d442faa9593f184c9d332afa302bf5fff827280a41b6f983d4304e017a0f30bda97f98bfa748a4342330d432de2a0d904bfb0e91bec8e961cd6af4b453ca846f9d3a9f18af44c9d040bf8566f1e89588ac5f2591aa6f619a691be823f152e275f6c93d2b356c7e8aec6fd44c48cc562706f26178e6611afd356517459b7b27b83178d6d2deababb9d510660257ff0151383f11e10a6a83f972c132d88ec672834461cc2ee69bb3cb42fdc9a692cb5f244a13ee976038579608fa8e90957500703c57d50b725da9f535becc2f16fdc0ae1288c2551a42797c352de0486882bb60df06e6ae358bdb7b6112c8884d567d1cc1dbaca117b023d69fae392ab9ebadb131e8a2b10e1c6e75e646f1b99471d2ef7cc08d8b8f55451f573fe83ee4c77e470d8171964eecd54def10489114f93ae3105c28c8c4946ec0fa2eedd9a06c41380427c6d62d047d76497e64774d28a97d9ad5adc54617e739731b817b31753fe6f69c263430dac2580e74a25ae42ea4e4aeccb4e7abb8af0d4dcc4649618880b17086e4319ca7de0477b8160210e660f1889f3c2ce74e8c25a7f0db61e75aea24f3e1df95bda3989b32e55ca76e6c41b6d559a1c202ce93456b56f39955916c015d8cde7330a359053659bebeb6260634f1c5f5578226b6a36d0c2f3bc028dd9032794b306ae7b3c878b583d68785a69ca127404dfbe0fb48173c23e841bd893eb1b8eebdef212c6d36a7e389f7a0d6b570232868acc23cfa793396d9d728af10a0b4a9b33e7a037ca7696242fbc21ecf219c6ff4f2303037e18b7efcb1a91b0242a3e8a1da954e74dbe46d2f004c37a73cc3c6c34d0f39e9cdf9a159937865609d74db7decd17f175c112d6a1d6e15a260e9a1b465b0208855aab34827710818bae5dd240aa2050949e6788a51e963d2883a554d80f702bf1166301b36f3918ac475b4d8a6fe3f781f56b67d2f3d26a2706903a5ecc8ff1e7df674216553b252e1887662649f70b05a667224ca43e491ffd22b42302e6f61fd3b22b7b457a514325637b6cc3716527447117671bb4beb80c2a8156afd34ce837114fb2ed8956c82a0f10e4c788074298c2e3914de9650b80e6064b196e6c91e345a5b2eed4e67ff0fb71421d4516e9c1aee443fac1538a0d3d7e407854f567c577ebf00d6b465ba3795845864312962f01e5cfb9ad917698f29869eccbb1f8dfe4b897c24a203735092f5b3adbe45a7238b7390f0ac621d1af1d061874798afad771f417a9d230f5eb48f8173d7979fbd995baa7bedc8de5eed4c3758fa3255f9104b7418b9cc6f16a76c185ddb9db403d6303b90405adc26bffe5fe1ede21b85874354ae469336e8614257da6c532299027fd9f903abf915790884de58b4ca9e7053c74c6484f7b1a3b829c15400e84108413c72a5056b26819f015546bf45e91f098de0b1508fac84837a71bb90d349a6937d902c7271b18d9318ad86e93e932e19cb5139bd37c6d3531cd7eb15ae67ca7464f00607deb41603aa24734af3fc2480532ca06ae92dae2ad6f04f8df9482c734d55ee4ce1325e2173c53463ed756eb834f164d53b2ba4cbf8b4ad4fa38dc5851c7b9abf60a8ccd1a4a718208bcfeb015e3988ad3613385543873c703bf7ecd65600017af2602db9fa6452030ad11a33e1295dda79f634281c8156d2e769397637b0a30176305c5fbfcdd0af0ac3452211159deff32d421526634bf21dd4664ce19fca3d616281050e1b46a2e5c7d1c5ac71e2b5ce90808a40181bf44a58d6e759e1396fa78e618ea6221cf766dc80ce5df7ba54b5e770b9b1386bddc3ce14c2a254005e45330bfc9e9e6ab8f78fe4f755a7ebcbc761e97eb83f60f4f45ff436e12ba04e27161b0e356ecd92a23c501cddb56aaf7e846d87b110408a761f90e2e7c43196ecb7e70e653b277199d107634cce8d9a32f760dd51a6be56668c37849195e54ab100e0b646fe605d523a8334c41c7972b0a73362868086ac1309772811cfd9eee8be8e8291b7984fbba651a3070e51093f92a4353d9a874dde7926dc98e347fca0aa4bdfa112cdde2c89e22b54631a78dbc8fdc46ba3a1948cb7eb2a4c0fc77ca0dafa206862687a11674f67d3f0fdbc373df930ffc85744380f06900fa29e2bc0ad9efa6fb74a278a5d24ef3015fa781b326032917eae2b916fa9ebce3011be61ad9e3284af85876b96671050dd3849684e45c4fc25d358a2d265109340d4b76a9cacb96cdcf1832812e4f8fa9c9d7d9949c6138c0b8606e76615c3255a0044c2840f1a4aada23f6678854bb12bff049df56438483a64e49b492367cdd6f64031b3ffaf29559f7bc5325d700ffdf5e7bf22062f75a2de0dfe7c931dd52612cf0af356005e1dfa48db5e722277d6ad321f94073419766f078ca8a2f7c8401e5a367d3d80e1807e519bb6db4906f89d43480652a06ab53e62db8a889b87a61ffbb842fed592471713060dba835a58dda7ccb76d381a022d904f24bc5aa58d70dc2360e1f93222e314f3e6d84e7b2b42db13404025d0b91443e5615488bedca245940e8591af985096244b6b74801c3f20eebf933649c32f0bfcf2a0c28f760379614801409b09e6b724fe6c03db4c71467951146f76c51ce20f5e412a453804d4fa4abfe8caa6b0e69e78915dc67021778334ee8074846e88a71d74be81d253a14dc0077cbc8331fd7fe8f30cd4edc35f54fe127faa07987271ac1357d79619881758881ff8cf6b38a938b597fce8d48b81eae44f0cbcd148ca199317682d977af94a4070163d7f99756656e2ffb7d38cd2ed3384f0e58ece4c4eb5ffddba917d4c391921a9215fe460df3d6cf98d1df727c8e434bc095a802272c2452c9cf818fd840c8062b58fc2427fc6d87bb30478ba7aa5cc4d63e344918f03dd3abca8270c70490b64d60703d96b848354d00abc8f555dc38d56f730e7df29d117ec94f18ffca455d36908b36447ab93e89a00fea42a8980261374dcac6bcc4bd363f4ff3189b1fd60be475de4706c374dac33bfecc5bd9ddc0950c60380460a275bba3b422d75fcf0417b88499a2ef24b8a005ad66cf9acf903af04848ba801da392746ec1886bb5a4e0387a90c9fa57909ae97145913385d6a5783c7e1d4191757c3902bb5e5297583aa80d347bade33dba1e84b1eb4a58d3a10dacf1c694b6dbf71d0cd4423ad01255413d37ce4fb4720a575852dff5f85fcebc2b0ce4940f344c6d54d7be71b9e294a3800ed635286f900492af9171133766652b0e51807309d64ce9b1bc3893e1d4e469092e8aec1a62c3830d4d2908a1a38c0cc571c4dcec8f28bf57d66e7195a052e4faa8f1afd27ee98bdaa04352072d4e5eb9eb9c1997d395f94041ec598d0140ef0adbfdc49ed0e58baa3d6690b2fad29d47757314530d3e28fdaff171f3d02a44b8e948596fef094299e4281256ec9a6882ab403b9a16256423fd748bd08f6946d4dc9a3bcef830cff7dc8a68bb7da596690877ef0b4c638073c405f6bc7a9b17ad139c644b27eb9e25c766a531bbb78c87f0e6867c695ec187299b336938e1e668c681992fb1a40f8e01219ec5a9ee274d9c6f038500acac8b0c61f57c17ea2544a99c18dcdd474d20d7f40eaca7932465563662d97d5628e88166d99107170eedbf41f9a56b12007c449b2a856b22650d41616e2edb1fac0c5e249b2d304f69866d66ef4ca31433fc84e04bc4f6ba9e47afa0351817aa04d85aefe2de79577d6b551e2e7d1482bc4ca95e19153eb37279519f326c1127b10fd71f08b28813270c5c7ea461ac0698e95be7116b820f14079cfd26215dd4ef9523213d4d379bca0ac9ec36b2d6f00e9e5e4db87b12595cedad922e947dd5f2587d70960e09a343654949563527f1b4f13b541bd4a3baa2907b6ccd9c7bb0b19321db04d3a85fd3f8eaac0fa04ff79479be6de6311981406b93b569da539beec5b19ad0c2faede14caf594368695fea8930e3efefc87f070099bae5c70c78545dbfe252544a4f3c34760f5957d5638d0edab22dd442bc7982343d29a68f94b8eb88eb16df876242f94847e3291d93ddf8917c60d64c2885b402eba174e26c29f5586e9c9891856be7d553afca8fa32658938c966609ba49de941e8c57416eec00bba96ca4a26fbddcb720c38645bf2961d3b8ac1c2b81cdafa41b5b54d1b37c1fa1b88eb7085b7e436e1665d0f013872118e9d632c3ce55783897541e7c4ee0a0de1fc5dff49c9d0eef405ace28f5f55572cc0d2b5de6e96e860058016c56470b1c78cedbcff80349746199b4b6c7a61ff063a7bd3c84ce479feefb49f99b0cd97c98e062676639e553e53c0f421193b236c4e6621e6e947f8302fc454368c02c73e6a072039511917f2cbbb73effb8bb0f452ab5f65fadeb43fda6d553621916a2be37069bf11d8c9e89fb1902c5cbe32380f837f6046b193269ca44d5c64c03a53b84f913b8fb96e115235d2a3339acafa8cd71ca2add4488b23713a9eb5f581688767cd808e2b7fa34853f7f844c83f44fe75bd3f79925e101e62dff913e83aa0eb0346dcb1fad81de69936541a6a09216a530c68f0e3a86e7d131b2e4a88fc4c3b45926061433472f756d25c0b43622fc71328a1ae3b2ba13be0093061b27d75d2fb63c6a53c5b533e19e989e4e25efa14a8659b2cb7ae72e6f9786c43d5c0b265e2b27698bb98af299b4a41cca3e7aa3af067fd215d585ff5bd2988ecb2e8438385e5f051ff8f904e193f69ca872021fef52d7802d9450f09ff396dd317ca2695bbf431186911cdecf922061d8970e0746d5a55a94b515aa010dfed47d471099d14efa18a5d381195687e0eca2c2426d89949706883d3bc34fef7e622f497efbf250c47fce083da7944a614efb942ae856bdc89972014d3e0a59544f20d88d56c96a46673c3082fba9b60f9f35099b2ae82bebd679e6dcd6e3efac6a53d553d8065b664d61d4f34bfb60c139bb8a209c8a10d733d120650593db1a73d7cc6d3d8201d5c8a9cddc0d314baa783822e03a4e7dbfcf58f66adee87eb4c7fe90a273423982199873f5cbee168b1fa148c5c316a77b7f27d58b3dbbb9839a7d5ad30ba1df5f551ab977e980205d77542f0e65ae431763dc650765c64dafb2069f4d6c02a44e4833a9488f43d168b34086c893a29a0eb5c1f3e060974e08c4c76e125f4786c8d80a74f932fb8c4e6eab47fea7a3dd9ed034f5887df2394aa3787b2d35a2c8d68f6646518d8a3b2fe0ea9ab420067d838f200fd593ae49d8ac1e69ee16e92e266b1fd3f5199c74764f5cdd7a14d744da8293ab2ad097d63fea18a21ef73692cee989da230202aff45a554bf2b3154ffecaed275ee8fb67bbc045f6e10fcf2a0a1bb57656b0a908345ba82873ae0b32befb8e42d5803c279b83455ee4e170f7765ad87dfa4bc89f8ec0a48476d724d0795abfeffaba40af2d6b143de7aad1e17ee8d047c78e4118d2096b2ef9145dcde1a3b61a1d90fcc9fcbb2dfcb1c16932dbbc07f9e0c824151ef2ee487096317d5e2853e5bf4aaf8ef1ea4a7790c6715983f75d515664267593c7e5c261d9ae9a713b01fac5ba985bbdebc9baae4a66db1fea5693e9cce7e7044cc3d4966f6d74f5a7c10b7b3d70405b8e2215d27076db6b6b3cba7111130129cf1377360245519e9ec1af0f43a2403ce6bd3fd58ddba0dac6883ebd944e03c2ea024dc5939345668569e2968711358c713729e0c0e5090d15bafda7c781764feff8f2b69fefc12e9adc37480f303ef2eb55a7246e0542376c3c76c17a0ede3ed2e0f9993233a0ff98e0f22c66fccf2b6de65f510ce187221f4e5dfdf7e6cd53a3e08d9db1f2fed6128b25bf19814143c5fc38555b1bc22242ce307c9de666e0b6eb0a3bbba8e8d9a95216a0dd71b81f690231c952cc11aee4e1541532de136c720149759f109bf10d2351fa7ec2a05dec39dfc3caab707f6434b8b3e01ae53a9b66f50b6f939e873d1c3cee2ae72c64885faf6ad14a406d521990a24ce14a1eb6dc163610c59707b0a43b20a84495e5adab0e7c492710660310f33e6d5b069807976c9899c761392fa7126c2739b9fcc8946260e35359c347551c3a9a872f1facde26f35af015bf3054862289d2a63f4ae3b31e653af7ab8e892025db11c3f53a8ce40b46db94b3904871c98414be16d27804b45183b17b2e0464be5d48204abfb1bc0f051456ccd137d38a4f62f6a6413105d37b3967cf4dfb71985870e448cf6730fba13fb9e3d6579d84902a9adf4e9c7be85329b41d4e3ecf4f2d6e23c561a6a82f770e4377a82a5223550f7b9fa1ad32fd2991ebc2554c31c5138a80be81c5871009e27d88312e8e8e8b721b7526dcb3a82504bfe4dc3a25e22026652e68a242eb7914d1777cfa796f50cfab7ab1b87af0cc8c89c988e3559b3789b4a9e3d4fea50b7ce5da1a4ae16bd07b29ad13944ce2d5312881139ccf8f9ccfd33c87707436d02987d7f4daf1960066a94e94499ac290d1c052cb8708fe3feb3d77d4a738c159e96678f50a910638329f768068d1dadd74139048c0291a7b0bd499900a33daf7a17971e582f422fcfd93ca2f04db934a658c701b12f5ad284af8a0bfff9198f0a7415eac3628a4e9c50c3e3865cd71af973fc82e4bdf342ed28d4b4b211dd1d15e1370b4826f9d580fa6d482c51f4ebe7be61387753d53278925dabc22df2797e12eda564418a57737e4712c490ddac5a7e2dbd740aba5632eec3c03c39b230eed37ff6508e84fb554d30be9d458b90ef0bb56827b8e9b78cb71a5d6eddb73f8f96da25d64ce8bb904bb44041315405960509d2fa615f4909ad5c77bc7e23d42abbb79c8b8d2e7a4d36a5a7184dff7386d49bce21bddbb44f4de11c7b4ab179bb93bbafcb23078fe13ab5cf2a28a3ab4a8321543fa8044419932ab8ab54a06af0d0f0c79a8c31fdd72dbdbf956e1ad78253c2014d538a5b23bc06458f2159bcfb56bef54cf968221f25b1e85f9d6b5717842134798d67a3bf9e69b7fe24bfef5ce184888c90e01f30bdad083172bceb20e54c5fab032b7c85c9d633d89ea8b967afb74d06779f5498275dda4979dbcbc0fb063be2ba624edc5fe4d32ad3b9f9ee0669215db19a36adde82ad1928507e88127067fb99a948aaa263ceb33950a32ae528c58000ade24d7b57ad237886ea6c1f2ae1fbc5751c19d2bb3add09346d198721242a56c35b2c2e90fb8eac80a076ff8d69187ad9a7d9e6b01aad21ca124cb58bd94b89682acde5477ee70a349456698652baed554fd33aae9871864e33e390899b59280c5fa5d43edd69f3a70f562de48c37b07f37f5ae586c7bc7c2a273055481465f7b449867c2ef443915fe1be4af838e990e672be4f4d6d874e79ff775e98a2d0d2d0f36f360d4ba8b739a82584ede1005b28da1cf220db608d82642747e11aa0a1fb0762eb7dd9452ed27e0d24d305a0d2222f9ee69a0fb705b62825324435c96ee40beef1af87c817cdf61dabf36a7b7c903daad181f2f9b1bbe68bf13c5426c3aeadf0220aeebe9c824fb7c478c34be7c022c88da3103a88ff6946add52f45c9c61022421cb253c4cca64fd8e351c4d3affec2e6626cbd5ae3475cdf541106cb6fdb60bce11b1fa28daae8856ddd8f6fcb5e95985f7ff6c593fd04d91361f296ee4b22bcac71ad924f6cb104f7e940d8f2c174dd194a2d9637827151be51a2cface23a2b6c7da3a9bd33056db2f9d34c326f2908fe61b80968677cecad8dbbb61808ff57794018b3915eb0d8e5653e49af9fc9a5503e8d440ac69e55a571b78f41d64225e78b8968f7af17aa66a5e6dbf00806a5af3ed36f02f735ab6a77d04cf14fbc723ebe945fb89838c391cf5d38ba453d8890fcce3b175c49d3d0cd0e8ece8bf25ff3c007904d3c74397ddc4ce968fd71bf8c7bf487c569cc48f0812b99bd27ba6f2065150b9c51aec33d81412cb5599ca6e9618846c05b5aa398c900593b09b6eef82a275fe5a0f7da4edde6b5b020b0fca250ce422bfdaa23a863c8ef82e11a6b5aeb93d48f844593c922ad5fb7680e5dcdbb06290be7a076c0ac3338321ade789aab96d6d7f7360bd8f16b4e844efbeee3d2e3e9a333871f41e155b97e1e1b9930bab7c940cae205078f57de49ecd8a3cd91d4410bbb6d10decb59f4467f6daea128ed045edb942c268de5aa4d034ee12f921d5bdde4116c0a4ab93fc094bc360c9fd65e1bc6ec348819e7de3811ac3d48471e7f67ccd01d285e4ff396afda6680ad0fd413286ae24a9fb1729e430842408d86709fe3dd28599f7f8051854eabf7fa2fb2a3644708119a1b913d7e982d8d51208fa7dd4c1c6f7b89c9f09ec1f027f3a1ab1f4fa5da75015524848f7e32ac8255e8ba8c7757966b3264e2f8708c36cc9c4c33f3adb07e702a4ed8c86d86b7c2db2343c3887dbfe7cbea551035fb6b24e4f91e7a851b4fc0476adaab1bce85efdb6a476ca36147234eaeb1c46b9985aaffc95cb696af686b66d3947b8226308de2c693c618f6772a95c74e8547931b77b994600c908ad2a3da1178d9bb80ea3e232e80dfd877d1074a652a18bc4e0cf1c344aa8c8d14c0075c3c03c4ca9efcd09c60b58ddec0a97cc84248ff58e9ff4fe0e717288795c0564b09d75f0b6252b5496211439d6cea09083c7a536fb022fbb39d133b171e46766bf06ab3022a8024e53e681e5ba4478fca8fc3fbab2b1e6754de77b22dfdc07b783a1456015c304ad7aa1615ce6cae9f9e907af030d5d1a64c57b38deadfede379d348322c02dc55a8050454ebdf1c3f2e9a2a038d49fbeb9e9f9a3346727def8f86703fbafe8dfe3d80eaac2651d7ae9f121529f000a3ea8c32070c1ea053a56d2d148846f74c586a362951698f23b506fde208f5886967665bdc29dd725df8b956953d491f18b124e578671f69d1235c1e7cce7d3bbae1ca9f0556890d2beac559ae695840a04a4e585e3493e90c5e074bf10e1576737dd9a0ed548a682c11f51d1844ec045bd2cee7cf4f316dad78c74e98626806a1261b485dade912ea164d1ac8550a095a556d96c554c35e0a003eef5c0d97a2c99d06e31695efd4797484ecefbe97eb1f36d5d25a19b3fe66c784cc0fd422dedac5414695b4fb8479f3316340576f1af0922b9d90584678da585db5967c06df66fb6023f8e094ea474ea1bbf48f60d92994ec99209948835e15492e26bfa81957eaf9a86b1faf81e6e21025a771101a3f508eb65acf961c87800da585b31a509c322e40054bafcf31a138017049d7f015fcbcad4d282284e87f1111918c18f6c5df7b028b5d931468b0a651c5860e89c10aada4846b3d52b117bbf6a585bbc59b8ac7edc5f05aea6e5636adff493f52ba67be5f0b34cfd934da0ed4559e0b2ca3a2f5dfd5a96f3a95ad538cbfc183747aea86a1bf899fb8797d97f533b50ef45e1578d59c244bfa2cd34b48c9e65d309b47fc319a39d1f3e701164804ad677a3163330d7ce85e0a543e7c92429c6fc83b5e0f2b531c7d8f948172d667b25e30a1cf6988e46ef95e897634dedf4e37ef202ae3cc0aca3383a72ff01da0c5940944a0318d4c659864e59e25919db133e340b41dbfeecfd583c62299719c219a201640e76a590c3c17ebe8c6cc18fd157de567da0b1fac602632cbc246d8238ad334ec98497c6a7cd2cf33e114a7061911eaf16d8a067efead9c19f515a28052d86014e6d3726c76f295193f44d3e1fcc36119b0ef119b1f247b7d21eaa638ee6f3287d835d97c058b3fc2c4f438f046a88673df8f6e93087296e54b9de824d0700da3956fda0db1fb4e176bd78d62797c486c4e0616ff05c60aa0afb0bfba83ac5aa453b7f647b702ad2957865a4b34047a9ef84ca3c1cbe4b9b2825a66dc9ffecf416283e41813fd564ec0baa9c20616929ddb5d4d8285904b89919db0bf0fe3cbb4e403b29925a9020ae40666b3fae4ea5e686de86592ae71a2ea5ea857e8056b827a50e2f3a82f6694a905376c1d6615b3ab5a60027fd11de7ae894036003f4b0edb2bf394b1bc900f0b8f5208bee7080a596c64b41d90dae5ec84b9841e5b93718d2d1c82a42bcf4b54317a2318bfbce3aacd8523f2188c7d3ffae78a933490077f88cfbe931a64d2f7b6deea78c869ede401691b60b2f3494ac300f41c6c3737441d48aade9ec7b7e8f4ea9ee3c66318a578b6ec2cf3533a3348a04dc8ebd541b8c710a9064228c34c0a3859303f5c1296617d5d267ecda3d4685f48a4935ccc6017cd65183edb69bd2f07240c20d44bd266b6e7d8af3448201ca817572ff601a696c949bb8808b557f93ab52a040aedc9fabf16f0e79340cbfa3f9eb05aa21c76c5ff1db92e3afd13184b20deaad8c3907a1cadb5d8210294d7dfc84a6338a4b786ba5d6b4e03b91c777ca1c1113e126653d48819f42279221710f77e70ce253ded76fb4d43cf7902120a2422f1ae77c8035ec48cde26dee486eb5bc621e9b9af95be22ae02fbe321b69843eecd6afa3c85e73ee75b5de42a71d84a1b95df65dcd6747f81851355a399ccaceb01ca293304c1425864ab16009efa64aadeb49f315c447c2e01885cf352a2c6c543536caac26a706b587b86c211d418db75bad63c3306cc764f463f5d50b2e715c5c82ffa9701a52e951cbe1d9510af42593ea2990d4c6b99f36eb6763dee50815f90f50585c08841401561141ad10f268469bb82fe406f2d169b7f0ff393f0598e1c0ff56d40a5e8845887717957b9d8829b0172977d96daafc7a72e81fd1f4a54ac4104b8fca65f44f88c895749d138fda8c5ff774c39d0f47a0365cd8a71481c5a54bbde24fea18767547192e543f1c13858125035ba4358d1a92442f83bde4c346fbb51b7ea456e0606c97188ebcf7c5e115eb63bc18ab7dd1b37e3497d539c0bca9a1eb3c4ba096e88aa83974b9fd661d68aa958527ffef20d27cbd50767e182384653ee9171340fad97086a57b9bb7654ff34dd1f53c60a66f40d8f26aee09fdb27dbde74e522349bd26eadb6925e955e9363b5555aadfe7a5f222a99212b7976c572ed8efc448af1a73d706cd3fd993f2f9d81baa802a6aee84b2708609752d8cf45b424ae3b237eebb64b2273ceab53458549728a5649aa9384de9de79548fca793ee689ed784bdb3196183bd91e05cf96f3d74c522ae8f8c57d9374e9e764c5befd809b1eea0c3171d927839f3683696dc436d0f5a37bbb21d28f2279db20c049606beb40f9078bfc9c7aa1d80484ce949ff81d10586a8dc786b0cef9a95415fe50ec5ea373d64f4a0de4a94df8c8e49098fb8fce58d63b87e23c68ab9e1d1656da7cebb0fffb1cc9c3139bf1c8d8e0d23cd6b00efbb6c1dacec3e78a158f7e6085e83f0bec4cd69b9c21015575c66e33a42abb259fa4037d7549f80178e24ced270aa8264624f3e9b4d946e6968e6d524e9022c4d0e5c5e2341af174451af3b53e0d36f289cce85d6fd3af51cd98e7c1df464266426af4c7be48a2e18cc6a0d2345eea6936d21a9a50046f15bc923b2b5a64f3db1d3279a1e6c5e056561fd927bca9149031ee39089ccc6a45a16dad0ed5df0b312181d2f09bfbf6d1e9e5896d79366906c3c9f809129cc8f802d00e4195238b9aa161e7fb3f2e42f376813290ff0ea179f0e9aefcbed7ccb4070515a5b0777c2a1f21664f3b210a3b4606dae66754817bc591502e66881124e77e050faf90783cd342ca2994bc87cc9878e28ef05075c2bc4ebe68ab2a91d01e0cc36f0bad2c809c86be127a95ebe28a9408e1bc747720a3bfe71aed12d47ad1318c2f67f6e1454a1043b19110890828db000c687ae66d9109d43718f3d9c6bcde337a49746ec2ed2f62963f283b9790c61145a40308045b4a25af110cdc0597a6c81845bf43eded9e58b73c736b14383afc222bcdb1581059008c91bebef302ec47264df3b5d8be2e7fdbf652e8f9d441759e4a106c85ad950beef38369a32d86317c82a326baf03ba7ddfd9022859afab60472dfa60caeb63faaa57f1ce76278ff18421d256b4743f7fbc713998762aa87823a9cb9cc31a8e3709d82c7622f0f4eb8aee46a8bc5532d8e1aaab988c43a9c82051a167a75c6abbf746f3b0f6504a64b019e7d7d1ac3238ca89cdff46189b40824ed766ed82038424cb8fa17b1eba5fb91d32c950a9f2849c07f2a2b08f6b7fb4d191ae99784772d2ce2e73f482c0b432d395cc984ef2945549b58d2200765e9db2d9bf818ad1a5eb8c0ea45b4f1a1abe2d3fa2dd362e1d208e1288821b090ef2f98c4a46a4f062ca7a4b40b47053545563917deb5bf06c8bfe765e9b46a56e8fc8a060f2869bdb94ca42cd27cecf20ed36f81d09ebe4175c9edcadd16dedda1d2977b14717b6550cc8be27fb912a92d3d592ae0d837abb5aa978de34aa8526cc0af1280db2e50dd56abef757239e1ce1de314e0b572cec5f807d799cb89ef8fc03fc30043fe64ce861f7754baf52ca6a3ba272c2e4e2c5706969c89384c1e478406087411942874a5212b1f21490402b77955cdc76e0b39e7064bb6cf877037ffacac2d214e47ad71578f3e1dc8e63c1d4f38f25253812d5eaa55bc7eb078acc8b8b2bf047d8d83707377a579f0f53953582ff27199746fd27ffb4c0725050dfb5ac3fd10deb5c2a109ebd3e3e7a206fe6f4e8757f4b16ec7ebc6e2abaa30d5133aaf98a89ed00b93f7d1ee2ec292a8f93efc1adda2b9416d3608a5ce70919c0845fc5105cd294cdb50dbfcefe280f3b0b21836c4cf27db04649df052c2e5305f70d1397ae30a5c546f7c9cbba2979b9f731c51dc0b303ced1c1f78fb4a35ca9faf428ea1147917a8be219d4d9b9284f1c712351af47aa111e6be2b3fa4b22d660dbd13d3c5c3299a0e145016c83860764d1229982ccd9186d77e18f9e12e24bc7411c7310a1ec15f7e94976e269e7c30380819c0116b9c3ec26242eba911b96d33b33c18043fe8ad63a886e720e9a0d162b23f41a1b5a31bdfc9114b30b42c3f821be0aac06816bf1d04d132267ccc8bc4feb24683f9502f67d2c1cb4a068eb5e804922337ccb9cebbde9092589880abc5ba00173c9b26c39912c4e3bc45f138fb08684f3a5ff70780837113125d29081fd71772903abfd44362628c95d29b18b66d5bf953febe425bb4ba3d81bfb5bfbde31134f18331f3eea3b6a6b120bc8d86382a0d9285aa1325832994092017e21c573a2f0391cccd1ae412cf251d3345655b47c1ac34e6fc4fceb8cca280168345f4f525e60d8908df1b40c3a29244f3f04d5a0a3ac7bb9e195a0d35d7f754d2ecc91d205fd6af9c654d8ef90fe729b8a03d428e573f95a6d3d298174f53cbacff35af4d7e6b701c33cb23689813b580a3d5d88b9d84f1157a7dec2df4ba6052243ce93759861121afbbb4e62b48319ee4eed3055211b26e564255ebcc5ca2fa7e699cd6959d27afe6090eab4e6eaf114c6353d96f9c3cecbc99ee02a826398c70a5bd3b897b1f16c719848ff8812842f8ae875cdb9b757d7018d2c4a001b074f07d4bc69290647bc3277f1831bf0922867bb78f2ab62459c9bb0e3d392bc62b229f75564e1f1e1d6aa9c1daa065d6bdb9e541a2a030298e83f85a21c00fdd721c3223c3ef4ad16975edbb0ec5603aed0e0bbe2608f3a35b99917ee682a29876d754a58fbfa94befd5d719b939315d9560fe78c4c3d19373169c732e68cd832c21b16f32140877db8b2617a8da87df5ec5d71d92b85cbacc118d30323b81219a039b31098173f0c7ccd50827a6725f7ee8a1ff7b79d06645995725d5e5081322d17f123bbb7eb2b34913f94840f3e31ac70158da6846d884fd660e5142d1d8ae04c05053f401cb64c8a5705ce591ac95a4e046f6eeed31a8ef3e9c530bc43482f905dfbd2756b05b9b05964bd45a15b60f0a54cf48ed93b0c96129e2767516549538a47b140de9cfd04f4e0edca18a65b76ce383f11a8da70b65a927c2c98d9d39e06e0f40972944c2e4bbc2ba000938830789d17f46b7d71bb40e4f1313f3f7282d3a192dfdec0e5c00ba868a6a2fd5d7966a9833e5eb21c4996e9436ab37ce603fc4c544c79b2703c9e890d4ac10b98c8658ee77da400e829f7e959b41b13296adfbfbf3c37a329c9dd424e539caa1c0fa4e2ef1909371a5705d115e131667d9ba128a85422957e5f9b46c8c4e201c67612335ce402f5e800bf1e565db8559b5e6f680ef6bf202a84f498c69b83ae870b89cd908da50163062001dc1cb7df5a6a2bb4affac8b77281408553f4147bfbe81f273460e164ac9f88f53c8391a6ba56f7c7da4856ea6690c2cb40594b8d085145e2973116612297e836d427b85d8ef1cfc506de92d20a6252350a58c95da5fca9c58673e062dcdc08e0c8cf1d00cc72331c55832cd08324e0a720ca6008162c79a4d76f297d14196860265e0bbf493ee583dcab36a0efcda0bf987fd6e37f129bcc47135696d0070422aca8bc442830effd9bf02f5ebfa616da93112c9a736593986308d9792385d9cd9479df11d861fd065d9667b535b3189b8b08b8a2b85b4b1093baa156373c3672c9086c6dadc755e0ecd40c2b098b720ee35fa7820ff73f80d528f391b376cc4138f967eeab5711318e8660e3b73528f03886028175073ffc3fead1109de055a9e2d15bef3ad5c1dc0e70a0d0e57b338dd771aabda4fe3326988951c2876e231b8ba22fc211558a6766dace412bec4c116df5eed8865da6ff85ff20fe41da3e0bfe0e9ff3a9123c472ae3be0704ceda1ef21eb6e601449a5cdf1fb63c89114091512071417772884ea3cc0905d19aa2bc111c6fd875ace5905bb1681520e3172b9676fe0538a53dfbd2f031fa0ebd88a9be184dbed1392218e6441c4ffeda7ae7c47cdb43ecfe3acae7290df4a04510d58344f01cab04c42cd2f0a984fbcd50f5b70001a3f73e7f287528143d021af9dc0522adaabee5a0c2f815237ab64e95cbc6700165726948fcb6e20d802083558a6f85f3f5c41d2fa0d6bb173bd12de4555c1f1ce9c378d46de7a6d66f70f13fce0fa37c12293e6fd486e56a7947344bc71c6a13bcf1764eb3500c9d98d4619d1a5ac8515bf304265144e79b9b8c2bdbc1907e361ddfef9e1fe8ac44223e2094b524f620f3a6dcc20b52ba1b4f937949f48cd952b103c635d2c2ec599c633426d46be3a9a2cb16aeb2edc8f5a38a3d3ed51d0982bfa14dd711b60cbcc53ecd9e2fff265f9001a6acc39947e6c5d5c36791c0247cdf8b8f69ba25cea553168a19a452306e8b3a6ccfc95bc1e61b130cc32f8908b4478f945e9d427b0b4dda094af5bfc3c0047b53d662048f82505f4f95786b1696d431dc6cc3aba5a16a8ecf57f9d787467a13a1d6831c6a059473ecc158758dbb88f1c682666aae75b9cb56d5d04070df0d641a73116cc2c9034681d9cdc59ca129c4e83b6adec6c8dc7a37074db1d45c3a78cfbbc6ce9bc136d2a076a48d248ba7f6a4023613dfa4703dd7f04a5df1b81bf5eeea7deb3e89293306f4598c4bf402bb42c332653eaa847e62af0df7dffe6b62e9dadafac2d26c2e773bab4c2c5b2e75bc8f75dfac979a56ff63651d67aadb8368410b54ee9d22a6d05b3405c6d5853c73cce10c4ca31cede0f378c6ee391a012cfd024500b591d2361b1ebd76269b558df1e9aef5debc5f3c4d1a3e26d3708e02c0f635fd274f6e5ceb9bfb870161f58014abad9c2b1356fc3464c4e67c290c31eab80f67a6a49ae0d3b9c266fe7524ae5e4c55ec1ce4b551519fa63c468331081c7b3f7fd305ed5dbc03fa93b5cabf838b5b0ee1c33a29d40af92a7d1a328dd7bc3fed36f9555b3c5c844cf924d90a3eda4e78f735b06c926dd172f31222dbd628116272ceee0a1c00716cb4f9425b0aff7573e660b4ba558721836ba7a65387151e9a03e1655ada519c47b451913e0bd3a8535d669d7561d66ff5dde0a0b215d031dce4f2c09e1f573aedb97d28931ec820cdaeba52c70e42ed74bfc446f39c6a97eb69c3bdb7abc353e095ebbb94118d27fe447e90853da0031bd85abba7d418827c0d7b909fbea9926b3de14e68fd34e966dcf211e44dc93ac4fe9081541f85bdab7f564d4297b5a55b79e3a95c7a37e279d3a53cd8e182f7765afb2760d99158323e9dac06c5ed1e1d826d8f971ea00b1f275dd26e15e93b2c107ac338f2a52102454d8d1c992298782ed56a5db130ef9d0ff02acb3fc15a0f05945c6b151f07ebbd132e06dbf4b348d74805b7b28e1c53af09c84c919c1e724acc7e0d5365c0f58188dc3f3b4e8bae3f6f4bc30a755834f769b7513d206add6be52ea3f18bfa1bef62e1d2862bfdfc2ab99b5111e0e8b74f11d5e85bd21beb610c8fce3c16979f39c995902d77ee8e0ac67d15aea9228194b4a7b1009d24952926b25c8a94f0f6f3873a3e827381984fc254cef8090b8ebb7ae6dbb19c5fe16709c0980ee254c47ba20d1a3af1e6ebb14700b16c0a480b8754c85d128c94bb92b681304e317d796a77e86ad1d211ea778251069078aa3a83ecf7e20a15e99bd3061c00b1a64ee92d8d884f5b7bc3364e5665f2cda4cd93f834bfbdf982ab7e6a75601832d8dc5646b9c85b39363a533e342e1c645b1e0c3479ff8aa06ae724b967669b437d915f0acd8c33aaa18cf7ea9b0c1ce04831cc22cdd0214054bd178aa10d04549553d265654076b83ff2a010e7ef66eb4d9693b9b8562a8317f775da06cc9977ab09a4744bb0d3d3d58303e80a8cc40fa43ba2ad019364816950723635a96d1ef764a78c0acc4532a1c376b5e0d9a77f6a0c6d55383d15050dceffdf956196c4a90ff3aa8efeb68eaee36a58eede4ffe31bc735304bfef25a97e7fcfbc6d57161e3ca9d7354873de9d7d4cacb8f8dbf69e63abf54bb7104aa30d8cc06379773d6958a20337538205411c20d519442420152da21a48d63b299300ee8d8c4cef0cebdc107fe796a1322fb8119f1a31b2540bbd85b0183b46357e4f4d989a383d6aec1d4454ca49089b02f14e817ef204383a294fb71e3d0f7d57909bd4a86286e0f81bcbe4f2771cadc534eab5c6630e742c08d8dcbc0f97e131b296304559dead10d20bc1fc55a2ccb503fa3339375e785c1701c6d4af572818b92d30e2d0a6fbb29fe1237084d92da86ddfdeab8f2136c756f07a8ba2f090f935988bb21344d38c650c556c852d9a9641adbd2afaf2aceca8a69a2cae211c20711e3658b8397a2b45cabadc808774452e2a545aaffdf1645e76886a0dfb4e9ced1d7816ad4f99f6fc81d30230c11380b442bab3c91b3d2286f8a962b57997db450db8cec424ee1768ec890bbc2c878d88924eb504b280d1942cbf7d1ed56bcc07b37d16029cb6e81663cf9398336af2b229b814b71335eb398c4d9ac94c766924ba0fbbf9f5ed7229b079938ae8b68c7d146561f1abf8033ffd03a772d31aed0722dd1e37a32288fbc26718c714c85defe1d4fbcdc5565c92f400c539f091c0484a61adf55c496a90bccde2241c3d2ecea5de417bea9cfa8fe2c439e4db0838a279d7e6d9c2a9f602ea3402fcc4be0cbd399277df7bf9f834f79b9e2854c45c1d02663224b3e789b0be115c34090b0dee240c73fc67eb8f601c47e6df8f93201f6f22381307ca0da0eb51df226d2b3efb772fb117e7cddc1d903832f471180f1500552ed308053037c2c48455ed88a3b930c0e6855d2757da7509354e61a7d12c23d473b1715e8a81e0ddd74a32808e680b36efcc767c167112fa17250f3fa1c6a3a21cadf68e3f4ce2aa951a9f8ab40e05ccb3cb0b9f9b9e6a54eb4be356d868b7ba1a302a89568101812f18226a777af07a8f42dab19a884244f01105d5e8e397d34b7aac898186a9623750d57604163f69574ea0949c7644ee04424f4af8f1ed7177040f7c31a2932340029852db0f9f81920720ee814d3661bd4d37ca52f493b1cb109b34a62e18c46c735aa75e6593fe3a32b332f90d9c2e5c4bd590f1e8d3df70aedc21ac2745e61e76cee1763003133d8c261e2518d6ef73734246fe069b77598a4bfe43031601b71d928eb21000013ee243a6581ed7c38a9fd450ead875cc7838aebdc119ec8887163a7555b7c8e4dd7a133259f79710b5a4a381281da3b97d4ba2b91e746bc9e2a32fbecca96a8963aae94c882e71e58f706b08aaa5e37ddad0cb18b1d04ec1d35720f5fef1652956125af302a01b5392056f92792d5002a3afe72dfdf33b69b6b852c36f69947ad42de1e20d8d9faa1f4b6b87b53657bd2fa5c8afc5f1f4ca0ced3d6bc42d163a3538400af4378f570469a7928647d66e1911e4d383964681ad9765d70b56541b793995d307e1df4b8c26f45235c7b8f764777a45b08ded32e0259ed0948c8d8b89ac9ed486b2cbdc76554bc7d0fbeecbc761f06a622d9a93b2f01a690a8e560eb797f7f892d1bc02a9d90bf3edd42a7e81fc2f8e6cf462fc7dcdec7c75feaa8d83e76b08de3d98a47b82ce5ec1afb4b96ef35d041afba1e775d2ea848d3d854774282a596dc31e242236fdbf18caa8648606d8e70cea450a0675a40b6baf1555abe7222e0263187448fcfcf90c605a400e9c0790eec56f1f7ef4f6c7860adce80374b2b60ec1a4b260ff520d06ef6897f3bae95310a2ce3bae5ba8a071587df80e4287dfe829d0169dc94964126db12acf9e249aeedd8785ffdb6e4e0a784da15850e1b6041ba2ff866549b5397608e737263dc91277375d1c37c819dbdcff86c7b83f58da1f1f18c02770362558367024517dd62299e0d026ff6c4b9ed2bed2536a33199d515d312a087b69b40179e078979da6055b22122484ae795e91be31d8dc3ee20f9d1d3fc44ed701169000599c4a326a11ed04e9ee6cf2bc849953875e68defdb37d4b28a707a4182233dd355b8954e0f2b93c6db2ed86f9f2916fcfb1f487161193b15e9639899187164200ab86db6fe84822eb70eae78a8f7dd5a96c4bc3f24ff03848a700ea772c5a8fc48a0b16f098843c8a71ec3eaa24446a923a15078d39754f1f06100d4d24b5208293b7bde0b2832dcb872f6f617102f1217f46aa1fe85d59b53be4ccafea975a8a9b56a8f462a5c05f7d1f1725405246128369180525dd08dd1f8f2366ed1494a7071b3c7aeace433ab8f2ea5baa637d314e06b9aca2dc45d83fadb9aa0667114385438d089f6e661d309f127d25da0736aed63f40c8eef37c22830db02c2048ab48597fa408757ddcc230ece0dc1d4293eacaf40d677a3348c0839a73213573698923d01707d515f6c939103ce141c93548573e3530c56bb4c346005cb3bcb1a323beb2b574d917e9e31929a082d7d3a5179b41208cec8cd837b9c703035f1ea8254ff17e171410791ad9cb8e08fb112969ca47f1c5377d040d35710611b0b0e9fa16be71eb15bdee8c5b57e18fe7ead09a9e73da2a6edc9339599a1aabcdb8054f484aeb2d038d91411b973fc9e006621301688d637abff301c56cdaed7635faa9c6bdff5fe3afe278b5ee66c85dae69e2b327b4ec69bd3d6bfb546f9c3024ed7dd04f2f8376bd0c1c540859623d154830b9a00de4923a656ac85fedac64b636708cc0543fb5ebf317cddcc7110a530c14a6743bd6f2d50451ecf9c2c36edf345b973de167daf655ddd6a7a08ed19f164b1e44a38532f423d497f4951ad1c908b21cc8d27ffc496bf5d1595c38a0cea233508192b9a5075072aa127a104d8dcf61c789e13513ebe1e9f360078f38a0665802e0f595d63c746106d94d90d9afcc50303c9577f0f388119d80ca817f1db5cfca01589df291489250a36effc1af92a63d11a2e74b35d93b0e9de75f351bba12fdf69387aae612b3bb342287b51d4ab58939ca5587f6bbe45b71aef871a15de84a46e55c75efb1ed46683e4e6f6b2ae2aa46e0676a674c92d574cdd7779bf8658050dd0476742bd906d2e6bbcb0c4343a954b0c7c3a271dda2b062b023d63621d2b272d855c1584b550fe56239a06b52042beb30a7699230d0ea9f71fc535d9ea32af6577bfa2db95bbbe28146f71e117f9018f3142359436ca64227542870091bf722e37d6f04297de822a348cde3e4b739cfd5279a47698464ae00dce8603bd21cd1a9092a1f6b3cd0b1284a692f8c153cce373de1004529bcd445c91b7b21dda4528f3be13631f82a294321a090634509146686bd8c64e398b908b65c556e8bfa5ca80ca1dbf40e85bcd939ce9fd7768903cf02de1e597f602f9801b3fb46517a9706c127fcff72cf77856955e4bd260c55f1d94ac93ff231101c17092441fc29e4c061dc3d3efec34757aa261eee2364db798291dc2269b2ab9ff4045009862bff6133ca28cec1c7d926db2debda0e21cf5653c5706289de52d7e04660bc295b4814da6b0c711f6bc826d3d94c35df566b4c0b4721cb9c123217dff641126e68179884231579d419b98020968ef16059eff13861bd78458f27c334d62af8b42e8e6e96bccafbddcd3bc4ea08d60387318c5f7e65184599d41a2cb37435ad83a05e1e39881c202faaf5850bf113605c12561805cdbecc8bb07b4c4186922cc9b43fafb137aa4fac5f907835f69bbbdc7d42601dbac5f6079ff96dcb2d53c1e77fbc76109aef55a3d3e06356ef0d3dcc30fc214af0749f65bb6e46dd248ba55fc09f7e14e9c5ddfc2b571381f321996421039c93b32a811b7bc4f600b5e686a6e0b38d6930b37c8a841fa5ceeff3a101a1ec84e9c2ec4adfadb9010d1b96a5267c998f43c0b77941e801457bba501356cf35c70b7dee0b7d39fdc46d1503d0980c7843dd6e8a14126d30801bff4e5c036d4ea354580b2c5b7615f86842205197a2ee805361d23402a91dd253d120b0198f9011f36ed95c373b41eb0e6f6ecc2012c314ec89002e0725da2f1930432b9b843e90b742798a75c4abd2aab813594eecb5f9322e245c73c62a4bc7da2c716017d9e9bdeb7db69ea17680ac639fc3e9276e542f638ddc70dfd610cc8c4ce040513566209aae75fee4ce8da519dd5d3e0a0d53e88885e0c4be45bc5fc4f76a06f6da0d710983e3b748163a0fe087e096a828126a625fb54e6f0156e49d03df8a8617338852e814bc0cabc1743de0d9c05da883ac7c8508d5ae518efd054c5dbe453fa261c2117808191652922a8ef673098f3c80dbf81140b9382b910e8c1f4e3aa5ff596ccc4e0b04420048807a891b0384df0381064b81eb95f0e7eefd84c6676c05dc693af274bf48de9fc714df39a17a8284d67c531c94cc850b6b4ff196131c330457115a7c85f43bb8e2a6d525afe7b7a069f5479ce454e6327a94150288f99763575ce3e7d7bc0b92f97a94e984a51277f24f7f10fe2b2ed81a68c7a72f6f4739999f91a76c29e6fc0c4eb69667ded9ad69d85dfff0b68edcd020d336c2909f919466d7ad7825ed4ace4e64f4f70c3110aa8344a928c6fc0ac951d7fdf707fca46fa89b6eb02bf70c077e4811426f3644e7c6793a027856e8c2270c40a467d8cbb5d22acec2cc9d75ac055e27f0c86caf73cf79dc5e6d7830d904c2c38d8defe43e49a935970213747e03c9ab1ef0cf8a6d6caba5cbaee262d54ee2277732532b09e0c20b87d359f149fe7b8516257af46542819cda43c51e5c6f01d7dece496b8874ea7076b1327cd9f5be2aedd6f85abb769f9de26faa6d188124520d4ab8f404484e94ad456a44b8d4e7df45da0df28461ce6e720b7c828b88b956e0eef131694904b8d96b24d6a18ab90e1357f6d50ca15823e17b3a865c9b88a0ef0ae35bf8d8a39af51f5cf1642e56583b1f73238c0f9dfc8b37d427dbca777b63b15a9c06bf6086f66d2813cbc3e9b61b47b984c49e731e870aaac95e7d15610346c703f16677cf3b1377e2caa11b70ec36331a41e094428598c2d2a4e1b65673176510f28885041648f3376fcca11ba74fb7da2c97b065e49f59486bbd91dd54f9c58e634ff6b0609b9486f666e464e4c44d3a803332f3d63ffc7bf9796c41adb1a3b566c5996edc5282a9d1f2f92254c7df7e0b99257509dab34b09830e7c78ef34db5dcb7b30bce536d9dc9606422ad49e51ac28b656c23f2f3f0dccffff33cdcabf6fa6e588ffd483188f792d918b7f385a92f20955b2d7583822f11f0eae4bfd4fab9d78377ccf44e23901ed60c8ddc16db61026eeefbc199996b8f00c4d6d9926368835837987e14ee18fc08a7f3630c3f85c8993946c4a3264c882c9a678f9ce6a2f8f882d854c80df51e0c132425e300b4713b27f6b8da278d5ed3af4a8e76d8cada3c57d0b84862160aee17cb952ee8e8596559dbf65ea4176ddf7ee473b88d783bed02655df83b6565d475a5b55b268b4957f6bf21151435ac9571d2f3558c0521e47da568adef2c6478c7063f359e8ee39e550b5ee3bff62a5bef62b00a7d151c3e62b6e3a1225ce62338e8220b00f07a801b4710330de4a2c2161d52849c3f130248d127aca016ca7b4c7b4d473915a0d38389589c271acb96aecc3be6b6ebdf510224b54d2122ddefc40bf1bb122a0aa7834ae36a171620aedb871abde6861819b3d3b083611dc0ddfebc7d884c3cf2243957ea26ba751b6e25bf7ea108e9df511a0d85051762c7446531fbd707e42f0e0a3ab73b78b97e32156214a07c1b471b7951ee9ff8f8b3154acbde325e305aa1bc5dda54ebd9c3d2bdfaea0e94f31312bdd56aff4fd43fcc4a55658a3deb9bea92da26b9a0246655b316ff85606e93a62e40468b7a63ff67361e3c51bca1d762b3cb4b239d1b7a7de05e7db1433d863e10542db2b3a75cdcc4fd3d618d09c8cacc06e16204e9d4566b0179f0927b7c09e6ba75a2d09cf3ab79aab53dae47c1739a90630b0b32696c54842f0bff58fec6c499f16148078d8d957b09f67c979cf925ffb07bbf8075517558f168a991fc4ae9594462acd04c3e90b6ab9258f61510e3e1638cf733ce4dff708182d4835b20ba47ab65ac45ae99d67c760587af7145a0939263dcf1e2a1804a7fef4315d7d36fca786c08e204c1e3158c14970daa8d10c1f853f262760c6dbc6ad6e018fca51260cb3ed5f0381d973416685128dcea2950e192452d93e49d5c1d0b80aee1cdff24bcb087b8e772dc17a5ce8cb2ce2c58eef74bc9dc434de4b83784425f453ec67f5253e07bbeb450f6efd6d91a41cb2c7f721651b5a61c6fbf358e243e11bb4dc5e71b6c7116394fbdec4bc714a68d39d953220a4aa0300bcfc3ec8a11d89d97809d1e0f0e8be3e702264651f927426d79da0c98c39d9cbe5d8015b2e9644b9cd8083c7541c9c075b713eb208ef26f29754377e805f5d226e4d2f3bee42df1236172b276ce67ffe3bb25ea3360bc3b2e2a038022e07c3f3c131cb5e400731076559f50b07d5ec3867b52c872806126f674462b3ff58547c4b738f51e6ffa95b1af03124e5ff1993aae2987176ef5f3d9606657e09a661c17c8d8e5e6d532fb1d5d34d34ffb1741c8b6f12f6df3a2b63b8691d00cd7415a6172f61f12a645cb530912f59971ff07fa9e7f843b264dd0088dfc37e2c663d417ec1b34911bb2de3f498850b451180158671f7dd3f0cee99c86a538a085ef7ebcc0996b6dcb94fa168fbc2087c222d6ef65c2d35df754c2b0a7ea9a20221c7872e2efd56d389485e655933cf6ef2cc5df2147f0d95ab00d2f7b76ec6bd1801a2c826929263d1c5d32c5c220dc602d28c13bc7e522d21b0c93494143d481b40b39dc7b80d06f16a7e60b43e9edc88cbc3f7eab80ec043aca51fb14db9b4edae1b6fd220ef8c83705f6cd43a3b4598e2fc8c1db3315cd485dbe3f9474b7d905552f93df49dfbe054699a32dafb59fb982f42b0fc587a1fe5d450182e738dfa31f678d2830e804992c38f2d52b27610d7787815ac8b0bc3419e40598c7fd225114a5e3f478bdc45d595a670e180e7d4698f1a90ded9384c6ba823c64d58639a49a1dd70514ff23c624fc91333365f16c8fe407d8f1454b3821cbcafe3925569d1fbd02ce86236a1d34452efdf282caf68019a2e435436f6156f5ab9cece1b9decaf86cda117e727069b0351e6f07c5d82397490498ab4a07d546d6b1ea85827f37c6b19d266bb286b575d858165ab9966fe2dca785623a9d45b1872e3bdb2bd040b783b62cd309bdf3c0723089f142018412a68aeb2bee4d80e9e0ce65b053289e794ced582d6de9fb5fe36a7b9d21f858db3db8d6c7f3c6e4c419e59063454d7f4278d8ee22df3ea519d384cab706f8727cb30ad072c70658089b370a61059289fbf84ee2a91d96f06eee27b75bf58219ee8912ec1dd09e1c311cf5613d69889972d95616a912968994227e47048a84abcbe4cd36b75a18a721ae9984a742804e0b99a829385eac5ce8a32e419f66d69b465022c3d2f3dbd6fbecd4770a6fc231e4c77d16958de1edaf8767bc47e7397416d0a2e9fb56a09e20603e3ada20fed810b30935804b0a9792ed2b574cdd7694ae1283dd9c363f386a0743d988be30cf71775dafaf72a312b8e9449eac92284b46f1d026c333a554cc0f5d90f2ea5c1873bf3c0b69564adf661a5592f28953bdb04099a61c4f75a0e278871866c1032376a313cf961f1afbf150252993b5a405e557b60b653d8a2b8c57ca97b67a7c2147ea834635d7365b1cc64850d00e957aa1306d190876a6aed7159e5841707c7ae37b25e5e76a30d97cb0a9e5b85e9ac04be066dc465e72f4c89c2a1969506a36bb110bc9c93a22fe7e136697c3734a515744f627a254a488ad3e79160aca3aa7c0d36499cbaa68d98c809396bff5e56a2906e915dcf59274e4c9c350032d03c961815fc4ae610a0e5606e8be1f08f626664583107c349861bfd90b2fdd4a606f8016231378cd90632d845b1395fae9f87c249c2d21a6225b1b47582ce31099f8dd26355a67727e8ad8ac347b43e36f12e5bb285f27f42361b4f99388af6f9e5cbcee36d36b4339385c70c4ffae953bce6466eeb861fa953d2576682c0272d681797d173eba8209ed90bebafd1db9b35aed62357bb7fdfa757b76de40b247e0e7b9c70f932c5fba9fe1762bd457de829272c24901a766b9d29679a82f6f55cd915d893c58d9a8779f9228f7d1d380f58402255da7bbc9fb5a4362bef9f176eed050efdeb18de72deac00c1b328fdb2b74d4cb12ac41514454bed364b17d0d33617dd00e8045ed9c159dbf75bc5a14a23f3612ddb8ad5595ddc31c5a65313b058c3423501b8fdecb8e025d8752be7d1034a407dca559eaea34097fba6233202e0c48d4f1f519d8f1948afbebcf8aecf8c66928ba367ff77ff9143b62a46a95b4c4c954a151d18d6059f8a4fc223393e5bf225454a26afe9ee09bb331b28ca2649417354b96843189d7d6e022e580a62ba0cf9326fb79e4508bd2fe887f99a098e755522748d4917649fe7f140050fffb406421c752c81f2ad4b448f59a78ba557c39b83ad4c84cb5e25f9cc7538f0b764b15764f218c3df4bfb239b35973ec2d446743539415569b5f1b34c103e27591ad06e0a64bf7c03a9df982754a4ba4d648abb337632401e961c711a9c3d31154bf3396fdf8d778fc7f2a28c3df80cfed2799f2edb3e0dcceb9add35684222973af635555eb1f3eb2967307ed53a403ecfe421a248c97c457434e29d671ee151c31f310243e6271c5846886d082e36cd171226f5603a8c07e75d330eb7a5328afa9b860360fcb1c3d45ade7e72f13e76a6487b56354d225f16c33c2f6bd52015ebc9b115194c6d7ed8c22b8546341929ac1e17681dcd79882abaada132995afb0812f2dfbbd6e9110c6b478eb9c0851ea8ab18cb8206b7d8d7b79f2800ac618574b6456b02c580e7dea168d547745aefd2a44a8c6c22720929096a1c2ff03414926c2768d22b6b0bc18472b3d17c292ac3c93e0519fe37ec17966e56819ad8b03eb6fdc223e2567e25c2ba5340187a750b894907e54c24a5a795ebe38451921a87c95fd7a6f8de65a6f9475befa51b9c8048ed3c304890f754bec89adc9ca702cbd2829cf49a18eb25a935f3afdb30d6ef910afbbcf7d8893ca72acfc7f95da90c90577bc4244c292bff18f7eafb96d461cc3c84ff5effc7a389e659dddd9b8fffc4f6556e9a126bf0f03471c8d8f7eebdaa8b7eab7764d298b07c08ec2e13522a8bf8bffe8c09bc41662b351265673ec7a1bda02bd23ce609c6d7dfbeaa4352cc539639db332e301d7289263977c14044720ba5a12e69dc689dde4ee362dc7a4b0f4d75773c356736def2c76118d5703bcff81c2abdbad4182366a85dfa9b354c9d046ddfe0e982eacd362bed3a3168c9ef0b2967169cfc2404dfc3222e577cee5fa1e69939f74db764bedd05d718e3687b2317cfd24e669b11cf8ccd5d071e07d7f89a815e74d385cc2648adfbc1e1fe3543458ce5ac6de99c3dba5f899b4e53917f8ceb98722bb421dbe20ecfd877a6599390a4a032a4b9f0825e760304219ad619837d8ed9771304a507e49d2aa9d8aad2ca123b3134dfa05f288c5677e8d1e77949d47b829d94e61d99c5335976c581681a218ac9fcbeb5b8fa979e4205d2b23b46d73257924b50a28e2531eead1b1400792bcfee9c701999e261a5b11c4b48f125a665e7d77ffd90efed6a69768176e84486882e9244c4d3a542c01912c372fa23a06c5798d4405859b5f98a55c2069df2238fc1cc2a7a6be8f5105bec5d748ae0a2ba20cd5cf8154c5b547803ab1441bbe58f370caa262436910ae1ed7836624fb5b00b9833275d1156941794ba58303048264f66c7dfa7de529bb3dad371bd0cce95abfb2a754e6eabdc9194f158c2d20cdc0af73a6ab95892c8e77b7d51082cd72266a4ad3316bc2ce9367de9d447d7512553051c85de40d6399549aa3f046ee651c3741d36fcd7a3ccf6770bf7ad94f6ecd10844f9672912f2e2fac4e85e36c83a6fa94b39c8220145a5ade06ed2dc26c88c23c927d1ed9d2de6d9fe2f61719566a3f197b8015e02e49ae41d5f69d04894498edb358d90ff1186a967ffaa1f343ba70def167afe4e61fc0ad8d255ecc160e5d7631c9ca924c9bd85339d142a7a57030ed46f4db439176e2679bfc3b430878cc39d442d9409f3918ea2a7dbb0e0c93c1a9409d59109070ad89fe78852a6a1290ee55bb15a957282a9f076583605adeac688ab68ab757b4b4148c8822b595892eafd83828ddd5477c8e8b706385d9773e3427f4e4db3679b8fd60db8beae75fa45b42274d47127a3f01ed23401daaecf26e10ae7903aef6c897bebf7d41d31ce68b92bb97e3d5a2d7721729cf233d5410e77cd7a7ecb37494cab9d83c39d5fb40d8e7d4f7bc17e51a9b8f38d3b8fac1264a41035fe15ac69dff5165af8d981513322c46a7d62e7b7e2d811d022c2508c720540a2a5e6f2230a254409cf994ece87ba3169cb9f23ffa3662c6750d378deb74cf976edbb98062bc1f07a18d3993969c7c6b801b98bbfb7ba8f145202f8bb77837ae61fd7dcbda89dcaefb3725a56a09550389d481c19bb69bef9c879470d78a991e1e402a889358071f3234084c41355723b989a938d9e223a7f00694f1bab04750ea6f9c03769cf674773f8fde167a18e5856222e22e9f39294492cda86992b2efb123ed23bb87d41ef0034e567ee304447a941874aead24100565c140cf92ee7eecce6e4f3d4466f1b56304eefd857b83650137d410bda967be3456991d80aea0df535a3528e859a360e0d2c9ec2b215292614593aff6cc13e96b7ba363cd1dc1bf2d8c4069b3e552aee9e8e814b5d9656fbec529978086c3e64eece66ebaa473b32741544e625f4ea9969f70045795027f320208ba10404803e7a17215f759eb5a3b1e0fb768fb5748f82f53d6a4e553b6c54c9861bfb54bf76a9b65d6346309f3a3c8d6f3de7d21075c95ca6a4793787f2bca3784194e6b512de76e7d7ff8650b3280d0a2cdc65face0c6ec3f1fbede2b308836f8b0bcbe2cb722ee3b6a57336c1ba84ab38e9e9ed77429b9be19aa529bf4ccdc3a2766aceddacae1201692d5b40f03c0694ff4545c19a209a942568fe2016209b1ecaa3f826ce8c524d0571c0b11a520a5f7285e246fa21dd31b7faeab8bd730369bd377963861ca8228d2635dbacddf8122d714d5ce07cd6a4eff15ff38ad4562627eb0755559932ca878e99219e6940c4a571557393e6500d9a9b058370ce36275978f921f5b0e2b5d07c2ba18c36b87c88616f76f56b9ee3c112cb1d083efa20d498cfbd8997aa8d744a327a67ab0ef78ba731de1c2e194a443a1ac28b8050372ecf0439b8550051b2fa50d4436b16d902f77a33ebce67a2bd28fa65ea3c4892de958054e64f98c442fd882f5780b32b60dcf88bda81d8e729f115f4bb661173b4055e6258638dacd154179b3e1c1eb366efa9ab9e636a1d5913b23245caa7c2b04dd88cc6e0745dc461a09251087d7c6744f890ba094e38244cf217b14d3b641ff4c700271d6a5809fd77b7a770ef38af7f29cf969ac7819091c1b16066ecd159f67ed2feb8613db42c0a10a04377b304f5baf3b60c2c80c1a4c4947f896727bf638e38633bc68d215e6ade0bd4e37795625a7d025b9f329fd19cdb84e154fa1c532782095442a8c2373b80523dce83b59ad71d18dac7a37f5bc9a782ba7dc9bfe7a6f5728471a005151cb104f682604bdb99d145e7552606fd913df0541c6ce985352797d1634ec2219d48fd05cc3f05440225bf73e181cf372fb5d92194c170879988bbf5dfbbe22f91bfc6eb16524c1520e35d2a7ee76ec6c37ac9189ac51b6ad63f1cb8ba0a43c1aacd4b1a92c4d3729bce76ae9ae1405e9beb5adc5c325e539d6c5be8c8892300823a8297f72fc1fd299cdb1ade931dd2b2d4cad29b3d9efbb8b3e4aefb7f77272cbfafaf8e9e582c5792bc9832555b17aa602228a3f957304f12eca467f734b856095b0db916df372d37122da5d1cc8e0511deddd57e87093103a487a9c22442769ded98aa69277d62ca4291e95eeaa05d0d4cf25858d8f5b85600af8537f1591d56bf810d19c0801b2fdbfd1f8dc0341b020c17ad056fe98cb7ae0ffd7c50ca1082f8e09b9feb767b03a308b5d978250825e8373e19dd64ae731fc2b1368ad102c64d37021cce5322a3a387fd2458d10fae76d35f35369f75ad24a948950b1e17f849e9be44e47c291f68e9d51fd442804b055d8d02aac5e93828c45655722ee3a7740ec696cd68e33663c80cbf29d74e5f6959d415cad83875b6409e8b8a7b1a53f2eeb7a0cad7e5cad5aff9333a1c4a37af38a9dc86ebaa710c8247a0fb8d2f1f0c599bb50caf4bc32cca9665657c047cafc534af7b8c1196c0261c8f89fa74d96c8e2add9635e9219f4b36845e15cd5902e60c4175bc378bc2550d9a90ae12149f0a812f43218bd851d914673f5638042d0181bf06eafd706f96bb2faa476a48d0db7883f7880018f2d89054f27a2dd10bbbdf0f490fd3fd48f8b08f1df03b828491f55a7771065f4e6f02b89e80f2c151ee8fc77b92c1179c1e1150df3f7af11c7729f14da3fbd19e4225f70178eb7e46dbf1b52d9bc30b2e8f6578dbc62f1cb02f02c7916271fbb0f0580ee97f052a34267d88537af9eb2e80e018bd3e543acfdc35a43df645d56f744194239a1917d02a8a1b8e74b8fdf29eba870d800b37db4a084d186051dede205bebe4c5400ec6d945e3eb14436968247010eac4997ed6741dd213b8c04906df659d121d747844a6bd54c2af6d01e247e5887242a569ca6859ab1597056537fb7bd949fd3de613c1cad893565c27af35e7c8e3ed12ccaf4d72b9a0620dd252c5498c099a7164e45fb7ba2ef9cef135973627c6a9e66daec67094c975d914de8f2c71d6c1a5fc1427602057c25d7d16c723aaf81074ea9cf9bff4e4c59053c7967fd7f94a0c213ffc1acb2321f034f0d3bac54abfea5540615d430c2eeef7a9261c42371cc0d017a69d7a6572e436118628536ee522c026980f51d68abb124beec303880ec3e6cc8853f081157faa8e6550bbbcc876d86a427e7515347994ad99ea1b340961ddddd5033cafc6439541ff6d8b5a3e98f31889376ac02a90090d101411d91e75c570e2b6d11e46a747d08ee434e9eb991682126f7032773147639f95100a582b68a2f5c00244f45b968f2bd076e2d454f266736a6651baece61f57505ea49f4a905a8b25b909583365607d0bd04a44b5045639fe2212717f8b7cc2c29ab0485a7e368069ead5e8d2ee8b3061938c56698d4d13e6097c7330ecc7972ad48bbe942cc9f933616cde259e7ade56e951fdf10eec9cb525d5ff294814564725ecee91f289a47cf9dec6fa5ab708f93dd731f1cbda439c7d179e0c49e6ff14d39d916ae51465170614f98c51e5c7d321d5252d9d594b7ee9881b20ea212db182e97a74b11f57c952dba1432cbcb08e45d2ed85915630de79a15d3f6bb95724a900be4bd9b734852bacefe17d0db00da05db9d80667375a2d52620967f9140bc9b2fa52c4c94c6fc52c7c37548af3492678634fea247c212c167f4dbe929e3369113b05495fd687584cebf22d0c9e8108d1080c9a316f5cd35de3b04057176c3348007291615888bf9a481557ed2a9e23516a10b89c33cdf460243bf8944bec49380be09a3f2aa8433ac155c40e03f0e9dfbcbb4fea3980778df22fd90b3a9b7e6856d52321946a2c99f0d3207e44b8d63179a4215a29e496589f05968f78917751a0b674aaaf08239d8531ee15dbf3381be799ab728fee241d815fccbde593d97ffb599dc9de9d18fc5cf83940358c75dca64dbc45457a951420015c520ffe3423114ee2177dbc6857d4310eb190260c20d0b534caf5b72aeb2db73ff942dcf6f8b9d6a93788ed416ffc12aec36fbfb890537f37ec8edce2a840b2950650c272185a0f88410a2441d9c3ca2dbbe59587ea0064fcae99d56a20f61be78374a109a0ca39458cdc6024469a22e17592620fbb32d984431b65df2770a6087e10be81ff52b02ea7346c23b545e8243e894ff519e89b912df870006cca986bd883663169dfaf59172b34ef354cdd95c3b50415284e32afb3e5f540fb7964bc59b977e722626404e93bdea940e2878f85e98449b3f8e78f9752d3b16bff608d8b686e95941b591adbe86c324bfe24c869dfc9c8e5b5c2b221b2e1cdb8f697d5f1bfdb14d3bb71179d7a3586a762d606444dc8e0b7757be52e9df8c4bcf13da4984841ca59667c799fdee07f18ab2d82b5eb79aaf64e040947ee4706f85882ed55c1f1f59f32bb6216aca24e929d5d214a50fdfd64ed142bd5b45a966204044fa45464145944c073fb95e780f163ba6f864030d3ce22d920295ab754e5063ebe82c3f5d2291008bff74f818cfd2c65e481051267a29367e4f096a56ca84f8d2bbceff425a86991278adb26cd8e4f705a74b8bbcc7b214889a5c06c3d0cb644c485854d5d08f3b028eb0f59cd9844cd2ed6fc077317b9934e42e56674ba54ab4c1ddf8ca5679ad1634c4f3c743e37e751b6b3d504d19c847225889081a4eaad5a94c9b1a8454d8cfa93a843e81197457aa5c8344f67d2c945624af4b0a6c7f80dcc0471bc7749c72ea241268abd11ac0a169c6b5ce54f1dec0841e0daaa55f773764f1b0557232d770fb1fb24789228a0f3959a9404b6572545bc1a72acae48a4dfbe4b2c28f3802f7dfe9d08324fbbfae9f16c1c237e01203358492b22cc9b61397782f930f46276b103fd76dab4ba8bd241a156122043a2e6baf4746e5914407f0ed16719841c2e4193abe8e2d8e9049e5fcc4da6274777802117a27cff9a4b1d6a21dd01b2857f935f1907119510bc2be140f238bf5c572f90b3a59dbbb71200dd5aaa88680a3ab85d151cf5e1957af27b8df1931f48cd34060d9b6f7761089eb4158fecbfa5143a2e290f65f2ea087ff99a559d44a857df626bd870694f796ce033e2a64075cf2d819194b61747e08f9d033592c319f4b7d4608ab4293328e7327e5e19d948e5b3603c2a9a8d6f73b99cebc5a793074a98edbaa06c66d0b242026942ae679052be814e4e46ee6aa9c206df28e84675ddb3beb32be74074b9565725be2dfb04d47ef30ad74d5f6b664bb0fd7342946f7668996915e8fd1bf7a4a659e7830fcbdb3a8b9f874f29cab7b4eb475b2f525649de3838481ae8d5515d4eaeb6e57eff98f1b1b0dcbc97ae0a82a549ceb1d87f4bc1ba44fa8f48349cbc31b520e8c35f20f50c98b8b6a650254b50afb861ef248b8062b58fa57a9dc69b4d2040d4459c7c1cad089e9a30482e265bac15ded8a5fdc57478f2e22e43b76e5acce8ddb3087ed306dd5f7b64a25c39f9c2a68dd4536bece096c5e4290be16b371df759c42ed1bb7e6ebf2fbbf16847474e5737b0fa8257c5a73af32dc5bb8ff31e2aabd25ae73a7f8a827300cedec616496a6a4e425dc0f1a46ba6c512f88b368bc0ae57bc88ed5f69d676cdb422f98aced22b2c5ce592826f9ff32a172c6cd62dbe1d0fe3406595df6116b2f52f761fb2fb39d06ff91cd17c305d774a82487239c59c4938e8f024968100b8f87d6dfeaee3a58622d20d8eb276f021cb25b9bc57c93dcf2118ecffd30d8125c15c66d891aa4c17159b72f0b0b9dd87d58156335d97c2afdc095245c853b0df3a7f23b5262bfab9fc579cf7297bc938de04ed86262a2bda5c8878df647d1a829c9c163f0b333b875e9da172263c4632826e077794377f523138d1436d1e40c0308ecf88630014cf66ecbadd3aa3ef15e33020488f59d997667e9c95f6dd1848f004202efd93e79df273669a41bb66d1a40a700371ff74fe48b0190d2d0fd1da84399580afb367ea8b0660f677a4df1754b72e283bced6107ba0d699d9bc7e650199a31d20415e5f4e99013a5c0cb24fc946a018aacc750f4e7aea6ea3241f1aaa89762f922be7f9e7c3d5ce8324269eac5a54cfa303c9fe258b0e1a760fdfb1f5d173ace9969f2b84ee41883c75ace77bbbac15b6aaf0bd5e2583fa5bf9423f6592ae8633a718195429c67a22777423abca901dc195109dce09a7cd6bcbf050c189df045de2ec1737ebab8c31b699e3b176e5ab4d2c27a6a9978e9993b07f6e330d904bad189c11ee70345d4d1b888144fab075219b4beea6af654665917cdf70579f18ec5581b30311ac26230b23aabe5f187d16b7016489163e422d666f10b096f71051782d055badc7241f640926284a48d6e8ea1dd013cf7f1e677b62b65415b544cd73fa3d40a5953d8dc359aa2b617599a9a2166c0a72d41267536b001f270f08fd9e0bd6d6ef3694e7fffaf6fcc8f03b2a7dcb445502b8beef448607e9e31e60bd947a17d9c68985940b317b27842039fd7d492d159be91d1be5fbaae24c250ae4dbbb7c905641f0ad22026827bcbc327b89194516b486aae014ad1a45547e52bb6815981f996a5f473f98c1b57199a426be01ae362a6e2d1f08114032e4eaac3d5c4dd1c28c82e41d2c1dae6c39694fe98c72207ecf14e930496248b1a7f3de719915afd760a58e2b88bc75ad9a1ab1f7ca2472fe7557427367e21823aaf9b906699cf2c355eb0ade67e6182b52827b312c948d1ad918f5cdee3c6b18caf09bbe639fdf4a6dc807225916f999a22fb101250da24f114c9766ccf8ee3a785dd1355d229c5d282328d5ec4d5d62d4ffa1072c92e96bf8e66a9da82242867f73d1d81715a039d289ca7e7a0e7e125fd392d0042e43d81e934bf4536fac5a85d9b640b5d34adef62c59f9ab419395b73d9428748d316e58d29a009d34489020815df3a9b2689c648a644190e484d07e47669471dd42a26765aac5a488ce4a05b3d64d3c967b2c3815b5ab434ee38d29f7dbda6bba54dd338039b7842399c9fd1b0ce4675f74c62c22558bb5a0b54b8809b2bb7bfc462c3a21ed50189525aba0b92b91636f3af58069a25e3111bd8715f5cb4556befbe482abe77672e1ecc64e958056b1177d3d3c494dc53eaeb361f062e76472ce925a47c10b237cf16b6002d5106716d31e36800e3527e2aa27e133c74c8c340390e6fc7e6b98d01b6347a67c8df39e9c2f5ef297821e44428547752f3c36d60a8fe488a2a0af8fd4fd06258b6c6b64b6594c7cc8f2902af13c1b8a722a41d8396a41bae59c4fe7fc5c694f4e5386cb920aa14156565728ee6236c22cbd77636a3fb60fcebffae29d4c9d154851b2bc0949f1e4d5618cba6a26fba639fa844cdcb1105287757b8db3a849593e46e47644d8556a604295741bf2cf54478cdb3b1aa54138a18c6bec8b42cc79ddcffaa56c330e09dafd3565ff68b1ca8c494d1211bc6b5035a2fa692ee9db6bd1a3ecac618e0116f692a440244d7dae33647b195bc3a1c7d7a73e06fd1b4550551cad96cb588a4af21f87f4ec3d8245b62823de4aa3a9bfb7a4ad66d845a51e9e07a28f150e03b807d6456a398280d32d87089ad33f54196e0a1c861db949fb4bb86c55596f17190376f2cc072f2d401d22aa13635f79e038bcec84409a4167a45834fe64261e732ab4288028991540f045a17715774709f32b2605d58bda2cf76abb9b19e2356ceae528f612615c9b54419f2ee3af0e0c53eb1b7d96ee065a7bbf74bd53a794fb5c3ffff40076b6840e281019efcb1341151fb300ade5865ebe54c190eda68cac0e958906f239beee588d47c987daf780a1bfc1ad04f251a2209bdde01978f8c0a5a5b6d040abbb5a2eb8e94087b1b70c7028b48239d359ea41bec39b050f3fb8e574e57d2628132ebd61fe19adcf825495dd61d512fb9228edb4fc7076941c0f738a7a955cc91097bf1ab14e3d25ef3e72fc4257889721ba6a78e37d55ad5a6da092b930dea73ac7ddd2012b787d1244d1853780cb9984fbe5a4a088878b9b51686c986eb2885857f82e39356c60098f2955e2647287c1ee6117145eae67ac206f1fe4e881fde933bb345585a9220ccdb45c364a3cff42e570fcfd1606adb69478e139eb05ebb34838ccf3c0bb7e1d157a94aeab8a43567fd9c78d8528caa9f82a7d271aeb2d6e001bc37b807fa5ae24d2e5c3c2109c6faaa3f1d6d69ab0c8ece660ed873d5ff3501b199d9f6e6ab688da249444910b3fd2f03665df5799b6beadcd77509b3cbedd9001e7a5779c652fd5566f6432f96f4f81151455e536acccbdb8ae43d699479c7792ea896f1541af260af498c518e6c3370506343b11a783a90f7e6fb4409cf2c0adc31ae809417f70bf6ef0f60479cf9d072b7157af64d0d5ae005851029a79d0d01d0a88000c95eba596d3768a2fa0767403477d48729fe0caf9dc03cd831b994f8642d41f289ae939b8de783713f29749311421478472b6adab1a0b70fbd212761fb9261441c24315512d56f1b3d28e5aadea74c5fb17c0fbd4a9b52313c93e36ad7a253be7400fbff1ebde7cc48086955d43b84964b87da69f4ad34c7c53bc338eb1b757db9b9e01d9359c16e19e86414e6fa86030b99ccf56eba3b6317224e4249173b2bbc780bc7dcab887ef39f932736da6aefd6b94b8a6fd8ce71bca697e23c5bda4d514c535160c351a0a3de059cb217e25b872d2a1d91465b20c73168f5ec1b8d030fbf6e1f0f7aec2dacb82dd7cf8a28e4c4c6dddc40f79add6ab6003db0a2d6f5ca4d78a6bca6344f02fa70c11fc938c23f8b7d2435479db80bec65c6cd33c0a95ecdd6e78ab58246069f330f25cca05b2542ae6481da454c70d82701ffd873f2e16795e9e9ede7db6d4ee6f6d602fd234609ba4906e85edd0dabb0ecd670c1d56e4f8fb4b61d7f528843ee73ef4e5a36215b8e315edb8ef88aa29e4394f1ecd2f0920627d3daa1fc5817596d7663e715c64cdbbdd7877fe11a5236ca71da5a68e23cf96e90e4bc1850530b021f45486a7f5d645c0d788960b6c4e4b6cbd327c142b94fa6ccd95db3bd39e35f69717fa9102fc16b5e0d9b5f9310a452cf395f352672e7b8586ea77a2cc179b85da969d275e4cf970a3bd38b1de04582ee469e7f29bffd0f19bea115b0766e52ec7bebbc44ccfee147b8699e35d468f931d60e7e8f9931342d6a00721901cce3a69989e1eef64f4f405b392397d8b6a8fbd212fe001f42eb8b9ca8c06a92c77e1e27afbef106c3c533db2bbd1649362723b4a011710adfd944e5d88fa17cc7d73260c295daad85ea6a8c46d93e181e8f4fefd92a41dc82a14f5b2db3546b0412de49a16104e140a123b6bd7c7096b3bf54aa71b8cb1e28654fab0039d4c1b978456a325a08bae96de464f27f32cb7629b77f92e58930caf31ef777bdae889e63428767afd8d596491c8e0e94235b14ec4b1403d7d517fbe83ccacbec5e81163b1dee3391d98ad46735a59b08fdfff5464821425e03dfbaef851d926791944a92868d18e33e8caa8e074719641adf200142dcd9a5b8ed22c4c1b25de8d5ded9dd8a48ffb0946874758f67900c7af0197e2df3bfd55c8ad7dd42626c09e5494e8e7885990450fef4b294fa8320462f4b53e4bf7e919a0dd3a0c24f758e7b80cf5dd1a1cb44bdf8446fb398098b51a3819de5f26d5317ab93c18a249414c5ec3da2589f143949223901f42ad1f0dba354315d139e155e8ef4a270967e3dbd4f0d36317042853acc7ab1014cc14585bb53c7c58624265bccd56f89c8b47b6f5b6dbe8923316f0e267e9e3f6b7d021783b50d5ce5b985c9912ca5e943551cc2222b79916396eb0a80da0dcec9e779090fad2de08e34c965cc6b5477657ffba40f42398c3e1e454eed2ef6a5f12cc341740f7ecd3bf2f2bfcd912409c14a9d02073395b7f9e4349ca0ede64c135aa81304b8b63ee4fc867de1b400820c5944b3aab242cbcac629e6c2a75542143e31a840e366d58363355238569f4df32516143d4586dcbb569e5ad39956250b46ab207372bc6b1a25dfb43818110a4a7b97cd8a05e0ea2f33907d4dbb1f0cb6f57a4f1b00df3b34f964bbe5355bad06375eb3dda25604e439fc35c2ed2ad139b5ecf4de2291b7fd09202d42e7c2d9b4d251c0efda2eafc1aac2163131233bf86a88fc18f28411b800121d2d0d6fd311b426140984505d170ec32b4063d5955745318e5d651fa0df63e473ce6fb7290677a635e548fc464d385438d80e6b8fbe6fcc2f238445ca19f400697c1d0f6274d7e5f613cd0077013503c3a6abd27bcbd990eab3c6f52f0d14208d4b4b605637d5291a838374271daa6e806a88cba2871f65e07b1476e2a8c57ff3ab765010d616eeb68654d8128097424cf62d75558f467f5cf21aac64a8da1b48606a0bb1c2a02dd9883e9684200750decf53fcafc764988e39380a966629fca85ff71a90a29b43c6f0d36b020cdfc3738a726e7d455b0aa03700e355844b2b853738fc3c385111c49f0d5618e3f72e02979e4e7341560efccc1920922ccd12d5abc6c6bfbc4d9f8446ed42370cf5f7cf5bd5d8aced78ac4d2ff04d2067eaa44b75f4f485d46eb31a8e57cd3ba6a185914cd9b3a71089cfadfb120762e964232dffde9535e8100ba4ef098831ef4675daf5f6c14eb97b079fbe76a0ab353fa30d5d51246e0da633281b821304b0c0af1d8993b21e383902d29d4b094a77ddc9ba72e27078843974508f1e8f8bb6dc70fda38249adfc04e9bfa42a6a59bf8fdac178560e0c9f53e7d7b7de4ff78d15ec6efe05510b5a33498ddfd35dc61b68f4866b8ddaacf63e122940c4f54f9e6a4e18f5f9e45ad4a7f4a97a26a81e0fc4a68df9741c011ee1beca6786eb6c3e2e1c88e5c22d2f69d7d3b37cc38178390cf0467d7722198d7ba9912ad22142caa786831f13fa9a7ec69f2ad398280de43aef1518753184ec7b416e426ad4342b84b750cbec428572351d5c53b1761e75a988664f1ab918f9d51f58c7e8d62b74266cc58237809c110a2e324074f7dd849da5b4e6f5968c73a6754d35886b08d81bea477e8dec0f29fb16d426a030cab02697dd623ebcb9186cb6fd3594a868ccc15106a202767b7892757448d056cba7a8b15d9ce9108ad4602b8293ee933e86fbb30faa9ee9180935e847af3001a3056531ac8ca3490b35eb1e9693e898b72944267754115c45a7f3a318ccf976b60c49b7a91aabead3bb1937baff4f3b077d7ac2cf13b58fce44c495f888732a39e1c6b2fe29a38b3fc6c7e2e8dcb5e4279725d5535b282f1af07e1ff10f736f24c70adaebe49db5cb6dae3b93df7d41f9ec24047e2526486b447f9456e2266eab610183f1d4545521ce6e2e88ee3900cedb7379fa5583f11f09e19a8799cc750f4119f6f321fa51c5b4fdd449523ac7661814439d0061ee31d843a6e021cb02a38b83d8087ae174962684d9a7ecf1e3cdf24f3dc62c163e611838027f1c25e8ecdbbff0c0e14422b5a7d8d45ef60770d7fbba62ca2981ffd74cf6f5a24048c8dec736db6196c25b6303a3d7b44a40d277668efb9685f74d8b90efb604cfd9d2bef93428c0fa167f40704b73d1ffb3f0d26c8021d4bfb5424403d255e453080e3a032c744c5d54453be51547d912ba9a60e532f119a241bef96a2193d2deedf2e2428102871eb26353b5d5a9e1053f3ca68f2564674408e1f5a0f6c4d5b02d35b9d1246db5438dc8b15ac6aa356c2ed41cfc5d657fbbd01fd72ec1f6f3d13b263bbb729928622af17fb67c6576b935b80ad4f75f821286eca9ef4bb68ef9eb35027f8f12802ddb580e123a3b0e1cce0f37dbd48b5ccc7f6b34967136cabdc60040f32e32b198f1f99f9cb65f82a7e2cf57f5df8737367842870366285766db691a84f8d9608243a41af4725fb46fe3c4937e9dc77754421b9fcf4a78fc4e3f528fb966ac26288ac71846f65fe0b949ae4bd48bbc192ffe1eeac775b4174398b3fe9f2cc13f2419e33980f18b3a65040836114e38a5ad16721dca4d87465009f47707581c68ddc2bfc5cdd3ff6f8ea4aafb069bfeb0a9054ab8ee7aab792d02a88d22d72bc0ce466d439292c8d1762886b0f96c1cf66c8e0a158eae2b8affaee086ab79a76668446d431d04ec47aa08b8e787eeec91de596b2841faa732b91a35a798fa2d8c2254319d99d885fae9fa04e4d45a776315bff2278374b81b8b6f871a23bb118f752a3c5b3b6bbbda7d5d3e7d3eb27a828c418ee76b2ca426b681f33816083dd425e9dd267a411fc108b9478721ec5d856d483263913262c362bd5e61142ca10c6e783340813875bd4b8330e007221f3b3572b0690e9421b404de47a798bbdea050342eb63a78cc46bb0d5866f37da67f1c03614d08f263081ba17e5ce9bd75d37ab67c3ee7bb6f7751780fed068a4ad2cff08ab79b982741fe8d380fe4986c38f9506ba14c874dc805c7d729d0423b1685dc30009cc0f18bb070caafbd96628b329dcf4b81aad7fc3a5dc1ac26b4b7e8fcad41d4835610d72e1524d41479f00a08f4fac34a9e1fd69a5cf4f37b0abbc076639174048f77afee90dc1234a7ca9e591b69d795d14924df6cc0d628b103690492e5dc9bdffab83a3d50785441e343a7f6514fc6163417af954f1fe1ecb1add2412bc069d00b3bed52e3b2cce089e6c09ad4bbb2347cdfcd39201a6c0c761411240a7a41c40ea3b8b0e9062095b73d4808fe0d20062bae529d1bf92e6c644755e874ebcf1e795c353957ef4bad61a366e086d66f736742e6a32cf667d712f8f17f186757efe41ae381c94e3ff2a86b9eb34fa672fc9c75f5eff397b9af81f9724dfdf8ecf11ab6bdb3331b691a5664671d2e1c5ddb469d96016b5da35c2a33560af70d70f1d3c2660124f48e683b1b26d18529152e99d6f588db97728b66ef5ce4e79f2a1f8ef46b1c298f1da960e7fbb3cb618453cf3d514c218550e6ade901711f2f087aee4438389508fccbeddb8e8a906d16ce8aa30a97cd8d631fc1c73656fe13fe7b33826894c5e84b8a02355eea0e3dccc1316a38b017cad5b327313bfb6d57e04e1ac733ad4734b74c8acd8c37ce68a1267760b039e64067c73410994053497e600bdf1f7effdb56f2a2c0017ce618a0d54c37fa9f20ba3d4b30424c3a379d807a7b4b16299bb4353a29cb9d05996293e82ce06cb28071bec8beabf4902461ee2cce780e7f01e2cb69373749915b6cd7d0d4eab63c8d61c17eccad6cc7bf2553ed99c1b49363a360962a46abe9a494a780eef2e8e42db64380f2665856cffb216a510a0a35dad737dd59440f5aca70914070c455ee8334ab4325477439b74b80f1ee36e3b72efc54e501e18c385b6a03df78a5f00a04075615cd135b22f5bc9d2d912dae238b00fa3d5a8993d0102ac063fa0fd88ccdfc4235de33871ac44dfad2369a5fb76c35848723d1994fcdf23f0fb129a3199e3eaa8079f0330ff78123ca4a2e211b48ddf37c5d0c009f91a7cd4f7a3ccb7796c990a5eaece0ff47e6565d2225638c7b7875dc1c15412ba52683432112482a375a5791d9f97d814f473c96b5f56da3b0219a7b2019868cbccf741bce7ac679102fe63cef70af3a5a55eceb700d758c04c82cf15ccb988c49e6f0873b16504fb005d48c8b22175594aac658f00b894815d64dbcdee28740b83feb2e014e06666c21ecf345a584cf1b04046b58c2481bf9e3d6f1ed689c4e3ce494f1c09356001c860199a0a4d86ee4f1ac667be78d4fcc49201064651552e3b78ab130902400c1841c5ecc91be3d5d1b9c5527032466b1f8f007d1db0c5222b84f509f826e93a05e3be674a526864f95115d9bd181d01173ce80690cf35564e72f0ba2c539689b9c1344ca63096d92c309c443c4410392fc53ef5f16a9a6dca7e3d7ac832c99227b7b19fc7029b07620c68e67fa3f93496221f85d2b87858f1eaaa5fcd0f7608fee442dd96c42af4e4fe0b69d6343d894470ee6a942d097c08f1c16ebbd2de4b3abd62940673e99733943b310ef8c63a49944e3f2f53c6b4ff230655eeed8ab1a63bd96ee24633cf788f38f13af8d1fad661d831ea2f99c5d40294d978016ba14816f105a8e440b00f11682406ecc19622a49c29aa5fcd0335d2653690f93ce5924290a76746bd538c94567ad872dd84336b4132ff4cf84adb25f4a60cfeacd95efe12f50ef8b950e51e9196bbee1e78e114a9f0d2b83b8e02c68cbabe2cd9fe3251cf71ebf2281c25d18443d5af6dca5fad337cfef1cdaafe13c0cbb046f271c4763f51b99d6edb05e4f976cc722f6e7091a4a8eabc04eafaba548ec39d39e167472a16b7da05c42795a84443a141cbb0bfb5b98d2fcf9690bc17e1289f66f14732064174b14576669a249c3d464a68654935454f92cc911d1af2fd0b8fca148106ac95b34ad357adabc73e285d87ad9b46ff1d306c11ed4ce64e9d808b9e10a0a654a2e6cc7aba73065ec9b266e25c7869a4773467396af66176c4514fe5eeaeb84f78cb0e647a634544b10465867291e41521984b3a77fb50e4935fdd5afc60c6705a861677d58b8fede8f449c5d0f1a37a8cd888187e598ac806ae6c3e0c6f618c3e8f78240dae47fa509d681c7dba45b2e3d850f5c36293e29abed6d8623a64531bae8319b64748bfe7d756fc2b637f6c28790c5bdb608140552e9be3d074d37cfa90171d014d83c4cdc39d3febce771e26ca56a8b79dc97c521d8119a2da571e68b4d5d6e5dd0c9ada9102d703703d04a36ac9d2fa3fb486458909cbce445173665081cd12ec1e901bf8946f9633d0b5c67ee60f49e541b93209004a2d5131279a11e75681a1e6de07ee54f52f41d71cedf2eda671b741ee627c71876479260cbbe74ca81b8efd5fa62d7f26bd21852774cd0bc33b329707512882ffcfd23c54acabf73eb46825520b3fd154317c41af58f37e9ab18b438d0d2b15fb5b9be7c5d7d70d4f1344bfbd79a9f03b7ca94880a90728b95cd3a351333a2675acb22353848638341602bdbc2757a3e90d89949e3046e855bba9032b435250bfc7db6104b837a99108bd8d020ddd69965c3a5a12dcffcfcf5f3ca0d3daa74155da9bc7dbf007c3027b27bb6b2191f42e9984d446ea6458f48b3210ab01e986f7509fca513097211638aa112e857de618c99b2b6f5744a8201e6281a289985c6ab49233f5bed15acaee00489bfdb479ecdd62fb88ee44a3905ae166fdbdd5bb12bc7c41fb48e8ace238a4a2af29b7bdf81fb1a0c67f957703b6be9a32503de3b1d14b93ae354dc30b4b78a2fb397897cc9013beb97374c7995dcb2b34af50fc8e2aa0e73a0488ceec936bdde2900cf3c4f82d5106068227bb75f5453e8745639daa8fc2d003ac2489968416c8402c20142b83cdea9add77f1cd4e6b9235c96379315de010ed6e81d8c02ec2bb26dbd8e101dec3b3cdb21934752802f275a37ecf5e07d8d5e969e1054fb7e394b22f6b295311d868d2c876c2237ee5d5a2e1a60297044e89043e0b911a18aaac92ebd92c9e7f66096ee5e01d675a90306acee905ea134cb86ab5e03a0d44b9e8ee008c5e01af9b4462153817ce92243792ef22b038028fd81d291951de128041bf435599ff3851042d159f0793c3618a29d4eef78fe924587c97732a6b8dc8c9fda1aaadc0e15e3dbddeef147ebbb3347639f81fe4d8c149a1149fcfc3efd08f951897215758ccd6ff270a5f4e5056969f22da04520cce384a6221d38daf4ce425e6874e3a10469bc8844ad32c22e524d13c913ff9cf123e196c791c426b20c99b88bf3e3238473844aebf309321a12742e905277d86259bdc50c16a248fadd4c26c708e328929efa135e487191440317ddcd061f26d78852fa9bc3dc8e2ad45c6f43a7590828af05ea128063b5814ec9d0aa014faa29ba8c9f4e872e7be19f50402c3e3b6ccc45e4ac259a40c91b8346ea47f00d87d43444df4f98008e7097e3de664fb2ba251c92141c6a0c995f98483afe798dbec44e149ecebcd008e4a3f38bdb1269eb546c3381d6b03c9d9939f98dadb24b1fdb426a06174c7fc21dbfe21f77a9e842861dafd0110ccf4fc765288fa2e972161430e6d9a84669b91ca9bd9c5b77894209548dde07b1e3f34b6c947a058d0d599100ebb0cfd112004b326ca7da0debebfb7c69d819d030eb85dd3b7e9d323fea27663cc5c9a71a63aa3d188efa69af350dc45d23ec2dcf49d9855be20f9f79a9a6cc9d025ebefe0f16218fa588bdb238b00e6cf850d587b9728c73c169feafc359b851103d35fefc71b6e52c9ca002fa6c8213d6a3b36a39d8cbd9c0be12095df18986f373abac316c1d0dee43ae6812f64417bdc73785b0dc8d2c4c95035bb6053f59f1fd165d5cba645658d86de54d7cf52005e14538ac4c51cf1e071cfe36aecb4b377391928631b6739742058fed8c51621307866c9777aa025eed4ec2ffacc7f2a7e97545d0da4949667a8f30cf64578f65ddb2095cdaa3e34b1894cde27b59f8866bdc98c6b3563e8214f9a423a36602d805b765b982770545db8bf1a4f19c1b19de82c1cb80ede9d31a5216606039b1d3433c3e77d52bf9a00119d2b1669f5422b7b1b425d6109771029fcd3ee390064a8ecb872ea91939a5641768308793ce2022f4083eb6f8bbb96dd5403ef8043220f7d08be3dbaef60695f182bb04827e39e0727ca46b8e26be1ffad7cc3c59c62b5cae141e1c7a2f64cc4dd819927f373f46fad941548654d33c6c51d1da9b7808935c67c78189ad27ae1979f1898734485f9672db7fc60d393b41a24451d0358c956f69d70a28587513b7eb60166a90bc58edf1882cc7bfe2693f42bf5150b0e833f801f0943d97c16fed373392e2f61e4b3b92839967152ffe98533df372bca25bd2ad5930d2f688af83f625afcbdcc71629b6456a32e86709f98282bf1c93774684f22b755b2d06f1f3b3f7693bd58902e9f3d25d5686b292973860703ac6fa787f22a1b429aaec6522cf3f5e2f56ab0f7d303aa23119353f3bd3ee6dd398081e0d38d8a9b29e945af823b0f351a43ad1d392561ce55edf5202ebde5b965a242628d3da42798765c3d989ba0f124fb566f39d26d9a546aefb38a878bd3a9b194f782efcc0b6c4bab22dfa5aea3aad2cdc9ac78882206a19a290b62965709679716ae41401569076cc69bdea7d4b01c39aa9cf3f50c6b362caafd4271504fe690352baaef7c565ec1a9dbe9ebacb957dbd02e4540d8040b7765a6db3d57d538e68f310a189a10b125ea5dee7f2cfedb384cdc24eac74ba7759087c39e12148f58a336b3fbd54ee82dfd4a38ecf942ea6ba517eba4e5b0174b6b25a9bd087d8eece6e9283c4beb65c54bc3cbb7540942c8832174e478c738501eccaff2adcce5fb5e1bcd37583ff97bcb41a0f7c4a4efef9ec4f6f05194394be7ac8ea44c375493e513acb712bc2b43edadb5215702e5f92b725c64f4ef8acb00d170051c2ddb7ce4aee7b0894ba5346ccd6bbfc804558f0890e16470bcca76b8c471762a03ef98fda11b5c99edcaad50b9ae3d0711813d7d58ef5142afea3d7ea6e6795dd083b5abd07d325015218afe36244af01e3dec47ef3496ce386ab20def39c0f705f182a6e5da06ca93bc09f2df4be44993beb5da86ea19eb5780d72f19a0675668fbd7346ae7b865bebdd78e76d49d6664123b2033df05c7a9718aefaafbca0223da3bb3f752c05774e90b7bc3bc9f4fd55c646ee6bb1496c32bfb5896aabf74d554701281a18a92673c3db26908a582c1f4fd697472f5bd3f39e82f1e9291571dfc62a8c701baf5be2919d96ce852714bed2c0f3e3326ed0d854e1085ef26eb0af0cec7af65d2ef996b0bd466239f09a933de0481f79c3a893f22a23e7fadd2cb75f6c2b2c429b4577a3be24b712f370becfde8c21ea8b9966ff7c745893f04fcc28cb866ab88d8bbe207e800c927ec308fdb0c2ff93a11a4055655d7ab37919633db78916a6d0afe8e071b7becfb4b59ad83cfdda538a458ecdc6036517e09f0d78f8bba9411e43e6120b39c258d5c7b276ce4496d06f98d98fa3c8f1a816340caac404ff2e921a36b301d73393bb1eef61c8a4db774f25bc95935ecd553f1602bc6a59465abf770440a32a2aeb024382a456d21f0421e80d27449149b7d1616d37dd551a61c377e53236d0dfe7a711266d01333e162a2c1afebf21cbcf73401bd7ffc71e932ed1cc441504059e015db4d499c237a940440bddb0e3fb58e8d424c160549de6823d049ce51445aea0bdde9f21ddf7acdca09d353d3a182108712909584b57fbf276d2995bd67a06b493d40e73b7cf701fb720ceff2e6bddc86540c887aacea8bc49021761c06c61265b1759f266b787db8d804daac8fedc31441269abf37d53195e89489cf2c4c2977c7ee27d22fec38a2d512d97e7d35107ecdad30003bacfdaf7cb93e98687a61775699967ed2a579318b3f1d1dae7e06f97a7e4dd7391744f68b4c1cf157174196fc67a5bc9591cde3bcdcd2f2b7529cd5efaf8f583d0a57ff88d23a9d08de362c3bc1fd4111891da54ea500725d8c8d597fe175cb31deb067ca71cf3da09dfea24522a7b98398ffc9843c71a4edec32438a4f2873a2a3130a1e3136f542074dfce91149044d688bf8179c77c4217e49c2ff912def22ae4012b11bc0c33b1ae6b945db1f657b2c8ee68fd3a60e6469da50225b1d3b78a7d0c2f17a9e91e8c04221741423dc8db74e1aedbc5b6a4ca6014e635b30ff7b47ff47874f0a6ff985fc1dccd89c8191f8c6633198d5d70a6c73a18709c3caaf765db792af3d0f45569387633b5b04aca1f25b4cd742e947aa4c8e9b73feda794f2ea2eb047d50752c9234ec958e940f60ddb5ea711627ea1c028024ba4514d2e189558af69a3720b7d99865287f0c94beadb7870e39dc7f012315c3154b7211aa1fce6620c9c116d9fb3ba822c788d13202c33d0f2aa2c680c068b83a659b66f66aa4cda71e0b10cb9cb0ea46a694c355e5c67a5c6711e27b6fde202356f30354736e2495e70b5407b854943d403c9b11fe8ac269748a49e794f50aa7f2840bf394f329b5a230c4556ef0f994d244e2805c90a5d614a3ded9a8bdb07d59b40024a145a5f61104ef750c8a9c3db7e9a7940388f25bc7a68a3e478247834758f25f01a0a93cad6b2e4d0d4ab0c0a1a272e6413d9e060a36b94043108b635494cdbc226e6bfa7a1ecdc963e4d441defa07af5816afbdf653d08ab8789d80ae88939335565b0452f24b29fdddbfb793c9ee281f65293afa10d1b65618adbce8378e87e237df3103c0ca0fabb5e2e458b6e20feba30c804f970bee343c453710496db5999b2f8bd1fefe0545177a77a6a5dd2a588addbe792cff459aecd714cf0644ed973f357eb6ef7f8b9a7173cbc2ca9fbc15948d5cd4c2d81c85e161f13ba8da522c9006c988f49630bbd35c3bf36ed98a888893911d02a2c393bb4becdd4aaa05d7546ce4c2dc7a3e4e227cfb754abe560c516f95c8d3a0bd36669cacf424cb6a59112cf00e452cd59f9f8c9bfbc735c9b3e87b2e52a85d11ba50c9f6fa77f391b307f4f3bef7bf4536d2d881b05aa0a14958d2c7994efb1aa1402c311129faee39c517fae28f234c162f90be32a39502c65931d81dbf731f4b8a24644814280e4bbf878fb2aeacf0e7b559ca870bb36349d1806299048fff1d4143f720399a63627537be7fa9892542c0a56ada577e57b3e72113389b70c3df815bb3c8f5adca180dca839d28e8fdcd5169d9ceec8e336cd24079c68b77439da16034e807deb3bbdd2ea56e66e5091f8d1b93fdca828595b0d3f97cce46b147dc632d2b89bc4367c1473f3c5917ddf2adac54a8ded0e8be9b058b1b0cbdc5e28bb982e13a85059b017c46a7a1fdb50b13fde613e2ba941aa4e743ac196f4f644c811fc7857fc079466b4728f45e824966fb11c2bb5d8ea30ba4b493afd8a786f47c08e92da4759b8afa891e5528beeb7d5876a22eb2c420cdba2eaecad4da5b6edf34a9a0766127cb04e9b18154c70ffcf9b1a71c3584b1807475772cda3a1482d37d916cea9f88151368416358c7ceaa0aa918d39815a14e5ceb18356093bbfeb012bebeda118398c4c34a8e5d81b10bd3eb03b771510690222ba295ecc0a7c3d23d0c1719ffa1c880f66c1a21a5534167c5dd0cc7f94e929defca81b2f544b8d237091cca232d66a7ea18c7dda57578defbbac7ee6725978b838a69a72f348d06e81903babe48c85ddc42fca9667851928b801831229bc4ee6cc312b7756f8cdc8971bf48d5db32191292f2b5b617db732474cdad53a7ca263284e04b57d71533b8d8fd1b93f96396163c7a85411a5109ffa9070fa8deba5add54d4804005f3ee6b1f66ea7ad7a85a8e023334d278d4a2aba8fbb97c8fd45185458fb3c3a9b974368df818ddd17be04ee26feb1afdb98ccf9a97b540a5a12795c59fdab856395071ced849d6c0a5b247ab860901e7de1d83f11301755674c42955967339b085bec7a84a8772aa73f19077c42bfa6d61e03bea35ed95a5b55bd39ab29d0bdadd9b402ae7faf3afce9fc9f9b0122f1b11c4644f70db70c89d15bc0b94391b9467ea26b00ad540baeb06926e77795e02de7a993afe1fbacfc83292e010fef3a4797370021f296504cc1e3158f9c6a8b7202c6b117da6f5f214af67ea1b7856b8bad09cc7d4155150d8c42438fa771c958b1e663d90bb153639c8fa09f4498711c6361cff993b86e32c4eefc137dc3782f3afd78d01972b0a2d44dc7f272c2548218832c1a343fb3dd4db3d1a593bd863035772585198646d7ff2d20567f9a2ae914169a3af45eeb8f1a97792aee94dd485ee1d2b1062604c8b5aba6ad88c2fb60d77902d7cbce1c98c187566ce266e3943db9123e4664cb4094e8066d75e56ff465dd60b4d89e10a15681b4efd55f82b44cd60ced4a064bb32453da3a03f91e35807badf65cfa9cdbcf4720c0b5785c0c23468615a6f229f07ac7d7bcc1f0d1429790b43b86508ca0a9c3f2b449071edac5c7b0f15c2fc9e01d1ff28a0d87fa9d700a0fd16ce29ea7ad616e679465a8e94fd674ff7ca67865f4256b973e58798b47ed29359b50c5dbd7d453ba194dc8d25a07f051c1e72e1237af7d49cf92f1516aa081cdb8d8c0dbc61510edd86c2034344ce33ec1f2c11d2c8a192f7e1ce57f9a8fabd122bbb7356bf1829159d4ae8136297354ef678c658cf5de372ba1069a5220b0561a52d028f666ccf31866bc8073ee55f82f0cd09361f18c071813157916c1912984a321b64fafe968b8611cebb60aaaf7c25ce40c8de2ce2afe339bdab6cd28c1a2ff84a9d0be7d2e384cec0aaca35c21fdc75dda9d8e5eb12a74dfeb52274103c0d031a1bffa13c0bebb3eb5a1288a7fc90241ec061e2d2b21b74c4be25f36098ae12262ecb4b5be03b986101c99b49a33ba83d743c871256d8e64cb574a8cd7df7f254b685d9313b9fa7b66e3b29b8862a37da8c72b2eeffd94a7d67903fdfaaa482a1a3a234f3d0e8ac5631addc91920a8aea9f397d79b0e438baaf3e3f310c33130d66a8269fb7599b00f1146a2ac7536da965fe36ccb4dadeaae75137cd1bc3b96d6677e687bf15a25608492308d37329e2b6c36f2cf326b8f765b5d92cf90bdd2a7252a3eb7f1afa841da78326513a45050224ecc087a16c74cb2eb45ff3f132d213d44477ee4748e07d02b780b274c5ed7f5056a05adfc793540c65023f3a25b63d49f8bdd8b4cbc910c68e89092c28499a4867bda7df9522040ab93b009d95cc211bde01934c28eedf0a4c3c6c1748c104c17ad17c34dc3b4bca19a8613fb957df79ebf52db9658def8ddc0429f7fb8dbd977c24c6487259398633331aadfc354fe8d2e6be1a7410db0ecd88078e81dcb1cdb4b675f11d1924463b010f366df9e3171a5f87029e5d257c1461e0efa4a8c9e4ab15d87cd485939519622a664357fb4cdf913e746ba90dd55a82ce0c306406f5e7527ca46cb12a49058e10c44deedb54886ff6d8bc7f6d99bca01235bcbec3091185fd201b77572996db2ef63b08ed96db3043d957b2fad34c9f528bf723534bd6f6894e727fbad59e84a471202939391eab255c72b3a84b0c264d1b67aaf15d5aa295e5033ba6a74c9f5121466eebc7b43d4452a4b4c8413db8c07630209ff063a8aa4334ae312a94cabe915956cbb446aceb4ce4c7b7c99dbf5c153732f0498ed59e1e21f82fb2f61c4d7ab8aca15e5592e7a679d7ec8ec48fb185ee159c3ef93ef0bb3cb9c851d15d58c587e518eb8123b3442d82f60353afe12ad6feb9b0717714c5d2eff0f3a1daef576ea86118c7a39665167e3a93d3a2d1051d58017139abac5efec26787c1746a3fa30ec9978b8dbdafffe7f6292c966c3c5e7f365770b42715583562787a9d8a689403efd346a8248ab133aa6434429563c195b35a7fa166689463ae9daf9e73b2ea5f173e3195ecc6baaffd27ffac63d29bd3b21e665b96aafe505ba8dbbd6560245327ad570f1252fd05923da9dfda628aacc975960b061e530ed17bff0a610824d054c5b4ba52d117d137fd9db79ad917d7af5c635b9dcc5a46806efaef2b46e466b7512b3683efc4b247df9322f659e360e0e4fd09f9be20a82e66b2889523f109a309b9f2d87168426bce131623121bc9d319fcb73ab3add16ab0ccb8b716ef04cb70c3128c43dc72da692c0686fad936ae1f78345888e9c3e3f8a9d2af313c983060f988a5dc401ec23db3511dd9028021e97aefa2d0a24a2b7d722205aad003ea776f7cee737621272140529c0a70c82b4c683f382a4f039bc84eb7204b0d83791039d20bd760020b2af5c53fee4762e8e9f58137c45e82c6dbfbdb3d1135291db455231e1942d8a413dc80a4f1efbae64f43c157419f7172e7a3029b28082ba0a72e1fe96ee65495018441a6520217e45e5c26bd25630856bca384aa8f8a2ad968d3e4af6891e34e68ad0aa2c6ea0a4a429b991b2d925976ff77aada33abaab7f00621ff9604b3c8c2849bd464b02a242ab0699a09f0c8afa174da6ad110740679fb341d0c182633ec0842a0f2c0ae8e2c6fa59f21a923c35a4121596389250f22d200c96a433b60dc7bbc06938510fb450e624c79b02f044b134c9f36c7c5297f47f06d56da23dba5eb99e1845f71a57f127b89c92537e42f5eb28287c3d2fa799411454744d0f9f2a26ab6dab0b70bc013fc25e3276d718f9cc82629654efb83452ca83993d72d1805604f3f8053adacd2f4a4b8ff034f3145790d438e8cc4a9b6d280360f6c2a2ecd652e3811e05673a54682fd334bb0e326fdd4694535229b1658b2612c0b7e3d34fe7ce9cdc426cac1d980cc8875b2364c0bbb2b712591a52dd7a2493af23a035320c9effaa95e8d99a9584452d5b47132a2d1287caae847f2f192cc724b556dc3c6a96b263c4a45a276c5cf386f4f4553ce618ea76bb9208362fb2aa2b4d621f9410038cebb2ba81abc6111df31f4881139ae857fa5a21d9f49256458058c65a0a6589937b8c6989fde1eefe56a0180900d3d4214031238037b268270a7f2764b4399fd92c5548753d5a7483fc3bdaddd3eb3becaaf6489a85b2950c84a3102c7b765ef80ff9287cef9f9b3a66de1db6cb7338dd7caf5b88903ee90b6867383c77c04674f58d285e45e3bee10127967cd891bf07f42c009b430eac5a1f802e370f3d08163eee73506aa6777d92534b7259e3e6e5a15c8f92cb35f63ecb464996f79dd0c20d39223126cee9bb91735928ad05d1216c7fcafa007c716265d7ef9ded83de5b1ca619c9a3f76fea0a9254c6de40702148f17f1e18e7e19f1cbfe2dd63dfbe9c7fea3b0a1d7de801b8f974d8aa1c87b1ac59246b80dd3c897810b578c66f63d059e76f60927de82afe4bcd6f001aa46ca018e2df0d8ed0dee21e9bf63648c343b1b4d4cc3bc62b9abddf3b6b6b849b2b26e654b123e7df5071236244143907fa440b2c3a326cefb8f736c40ec62d9da7ba3646b25f5ac947423b4f54dfa615e5b90e110dd899076a711ae087057ff4df8cd77f14adde64bde0b8132ec47fcee71d82e3f6b9de3fd249f6616d9c6528b5a8a7304825af6b884f6a3e5d5cef22bc75c45674a6c635ecfae225a28dd14e15fb63eea8a024d9d1e3cf9cc1c70c7b9106298ac393f0f02238c85e3fff655f8dfa9b33bb0bcdf27ef1ec1330852a603938122a3c5d35a8dc23e3454227904e679e7aa28d60e9f5b198a1fbd56ef5ecc620ae1aae6377ff02127ececec1b02e62a47a04b41a603e1c9fd2625c073d4427c0e6aa2f2f0c5ad3b171822c844c68182a9ebb9c40c1670480ea883067f8e5c8a26c6c955b84f0455197531e51cd5eb496e69dbb1220ae59eba6893718cf90986fa33ab78bc2915b0f5f45e419c720707e2d28600f5dd913150f2a3e34fa377a9007b4cff03864d68f043f7f7acf331693d6b24b9c5e87431aefa41f08274e7c154f7f59233bd6d3eb67ffb51f556fa13263d35d2c6b75abb87e36ec5b63e893b0d179c3a90d7760bdee4a72273ffc39cb2299fbc2df43c315b1b40e76ef72ed089add15be2e5aed64df0d74b2a20ad540f57969fee6b4de76d5e21bc18f761fb035f8be13b728dee588e37c2bf12e8b342c4703e19dac718431cbf1dd293758020dd00c02be5637d942414eb81966502b85fc9e35eeb241fde8d7b73fc0c2a46950869daf478cfc247aa367eea4b6449cc33a55ddbbb6fb6e65f738b01ea1d8052d32bc38b4395efdcb5ce63a661e7f7e78cc9c8653ef7a8b73ff56565b8e744fba35a1dc46771ffee7a73d26b917d8f71c66feea3ceada46fb7b6b68a1ed224657047eca1a9a8e48c7f6b57023f065aa20681fc81cd216685758dd3818e527bcd487a01a6f573f1744ef2560e3032d3dffc9f33dee1d1df2751029f3fde019ebc80b9d25a4e2d8db8c02cb54a7c532e9e421bd738e21bfc70747d8292da9de7083497dec7284d21df6d36a8204363e971129dc1cc76f585143dc03f6f3ed78e5972252b43e27c3315066dd369add72fb30cc1097dbd3e187c5dd65fc7ae0ae1af5bd0e84c88e59e707da47ff5cfb51ff9f93f4239413c0098ec589f9f2ebb957c0fee19f15e918db401057f455045b9d24c4b5ee02fac2fba314301509d9c5c621687c6adea174b3ba71c53f0c23f1c035ce0b95f16561db4bfd568adc5fe25ac8b8195786e1cc42a71fc8980c6de88cee6c855d9ed5030d52c7f9c003882de54dc65382fd1f05d2e294d1091a60039b8a8c058583e7c2d3bf1c1d473e772fec7847d9c9d5dfb6662883d704321510705b7cc68e0fc14fc581c0666a7b78a2d2f75d8b8f60467c9bb679a8279d4e443aadfeb2a239941427cc0206dc0a64fc81ef79a3bcd0e871c0f7bd054c94ac86334e5216ce6ce341a24c8301c3cbf2afc96efe42fc6d49c583ae5d3a02d3dc090a0712c31200eccd1dee38ccb5cd67b3d428df0f0e3e3b38a9a75c3f889ee3499871ef8a684c085918fad9e70a857741cb421342565117e4f0db10a4d2ee6110906537017313c16adb3faa21719cd9d38c346ecd4d83d0300ec68402a304bab0a06f3878b4779a170bf0a2eecdd07f5f3eaa52a3cacab2a938f13fd5042f24f07239d119762842846d5344ac60a894c2db915b5c85cf6fae2e7cc2f1247e65c5646d0d05ff8118ade30aac67b80cdf5815aed4c8d0ec14a6c4e10b68e67281529856614b35662538aa945446116f5820a4d178b7699f3399180644e77f98ec02e71ebbdb44c373e67098b147baaf8a29bb09242807c3def1811f7fb0fab183074598eaf4e178ca330b0cf54c1dd7b7f6a465a9b5f4a55777da70a01be519eab9929d3ac5d7afd011c9dcfeddab92ce083d679546512b9ffbecbd3385e3971d6c7471f100b9e0225cd880287e99d93672f0043bb2c9ae4880fc65062d5155c0b379f7877ec5d66af30c9a5f2bafa91134698951d72dcf983e1d8de63d19681ab0866426e0316fa6a0b9dec1c07ed1b872bb6c07e2a8e6d529fc32d14ccaea5b395bfa8d4061c34057526945466c5d49700a809e7bdbf7432737da7858ca90a0c05deb102bf5fe576507fc761eff1b985186b0cb4954df7608b16ad4bed08845fb8f5a51c40f1edcb8f73698eaaf1341c9446e26e99ef253d0533a3136ddf31f34973e3011ad8da34700cb153a199c8c89cfefc42e72253b4cc88427c0d26daec8bceda214dee32aceb767b95f530a2c04bcc50c174c6c80d76721acf838db642cd658ba12f0abe9566fae65f25a21266d3a335bd6e174a378e65c684637cc48d55f7420d87fcbdf19917fe6441ae119b34f9e30ab6b3e492f1f173660dfff126b6c10d26ce08b112a45b638ad68fd972767ac04523299eff5a6e52d08863e5bb936cc0816424cafbd037bcc479ca66008c11525cc0ca02511d7d0cb3df1b3f469eb4c2e1c40b3acefaf53460955bf728dfe75da1b3f2084d3b8f5122cb92d54479819bc31705dcf056de53fb5333c01e22021ae2e4b65ca8a6eb84f82fa10aa2d524c35b5bac1056fda9d0cdc726a179550ab16c73f597add815022c2aac6ef3eaebc2746d93d22f14e7d114971b54f7e0977b78540f305b4fb466c63c384aacca5fe0e91656dfb63d905867d818e6b83bfb3d76443ea275a6587fa91d60df844ce630287e84d11c417d5276af7118fa45982156a0079f0fe166914ebdff86217fc0708c0b0f8b4efb424d741d8696285fe27f3195baa8e9e0d7ca205cd1716fcac9f7f0e80c1ae0c16c6cba307e3f0af4682dcf537f4cafb2052674744e3848fd982c4a50a694ce63802d3a06346a897ccf9a731b0fedec72f103eacb2458d1c7d842fd55531ef005e92c8912fd2ca9997c523bb17fd22dbcdb34c10260a28500e9e2d2606189a8508fac77f23a6d207238e8608d1a47c77616d2906e6863273d2f368cf9f5c679d92236a52c488a5f782bc71ced1575d9f0bebd0bd031f0cf7030165747bd2373dbc46d1e41e9d43a2b493fcb8fd02bb39517e4bda3a6630a8745f29d9d93eca0e50faddfdf0f5b74d45ad79c6fc7b80693d492822a89a331bf89bd7447b6ef76f8d2c0a5f0aa0ad55c469e880a54c5da18bb1d9bc525c7af4f10059037d3c2b9df4e558ec7fbe1c53f7b875c023bf315dda7128f27f20a7b83d4b75583a7ba9873964a3c77d8a47c649c9fc1a5fdf0a1c5a66a4db8c49be7721e5fecddcaa2044893a952033a36550d42830aa104982d58e4300e11c8c9b19fbb279a1509ec1ecc1446b83cfe0587f4658f6798b9be3762c370d2b5416be61a70e1e75eb7d8a55316ec9a0f0d76133c49f46ef2f0282b7d29c5cfa5d5bb7e551458d9cbf857fec08d3e2a06cfde38f79c8a8579452626accddf20c9fc284e0033766a7537e0045ca2671f5f0173095cbfa0cab0a7ecedc5e73e298992b8dad3be936e2ace83d1007388edfc410c4b0388024329cab7615adf836f2a23ece47e5ac8943242ae6616ea4be841b3047dbad4c223496edef99894bfef40e389584822e4325e6fe76e9f87dfac8177d306cf2c922757d3d612b794a5bd9d370186148aeb12e2bec512228de7c4edd7c4ee38f3e4c948798b96841e9dec683e6968f2d9620881f313bf15a082001ba23cb95dc370e63040896582b5e74bf3a299e12589011af53b4050629597f21220dfb41839bb52b8063ffe4cb0e37258c7896977a22cea8cba0c152f286967ac97acae814f7e264100c836033749e82fb4f62329b3b17b6473808170f706193e99a8f663c3e6267964bce938584cb6f2a34355ec2a5314ecabe476ce72ed1738fa009fe492d6b39f3a4343846699f6a58d8729e14a9aab3bd6d32f6b1a0f3f3546ce92a6ac6c4716302a31657901b0ecce795eb1e33b8902885e7c1780af5699f02c9824554084660232745a510ad94fbdafe8a298d41066553c57ccb9c82d57d51074240dec1fe12190e7354c78ee25885044a720d9afbca215814e6a88485ae6df9c51b24c55799688cd9ed555566ccc2d17ef2c1882118f1de9852d7372b4fb93ad01be24b17468ccfa7c76c3597d3ab396b197e0338d3386d75437c0ace2611d7f40c67a5ed8e29c067df14a8f2bd624a0d96527e80d93f4f117cee575d381a73b3d06d6ec43d32eea8af7bdf15f71dfd3b009dfe67ba4bd5d14647b86ae6cf32911805f82c925d19588bcc8c36de47ea30eb07d56b7410b00fd0caacaa4d0878b817c20283d91200d1bd2b19a420c29d285b706c3e24dfc7502e1cb2f0b9b7f32989831354ea2ba972f4e456a5e27e925d259c070f98e80792f418172dbe6ac4d4a9c350a8c14e6e04110f677312ac127d5e49f23e7d80c8521ce07f653404ffdc170cd02ee5c36f069acd9b6a94a98e03017ff119f4fba5d73849eb7daa0147fb963e18af438e2d8e02da505c127d052fb2fa46967874a96945a6331f27c3e4de98c5e7de3104f762742aad35fde69124d7724a47aa2d7316eac0cffd418cd9ff75161afc7b4bf503aa4b794c15d432ad17ed4efab3d5b6f3b0eb1a09ade526850c3cd18c9189ef687bcc3be0120e307049b9595241b1fe4c9d677c4060e4726d13f3317980382eee4ff13dd3731f77d21e8e65517bbc8777cf2e82d6503817c82a2b1b7c5b94312aaff08134cb416c63e84b041bef886d4a9037986061edaba1e4a26af49244342ad1d7545f9d5fefe2ad83193b4c441eedbd26a29e20d93848885e9c6cbf292917b9247fc36806681b589ff3750539ea1572691e55f6544f3bab5a0136c2a949152215ff2a4a486c2ec13e2503075ec69d69e89b3eb6212522b5728c73f016af319baa8cbc8a9bdf1f5bb8796908c9a154bfc847592c5a587fc449a9d0f7177dcba9095c5e8d63257b9ca75936e5e9ab81509be1d86414aab2421799f635d18ba37c740e1732f6ab5f1d41f30067ea780c0d088fcdbb1dd65b1bbdff145c24df1eb3cb7901f8ab0c273afceb3195a50dd3028a23deb18149f373eec17d33fd6d326c1650041e1db888eb2055ec0444f8407ccfc14ace5a71bab0a207fa9c4fcf0afb8686bd12095873fc38062c282a343eb1da0518a5c8561a09252d869b1d30ce9d062e3e130b4ba6d5f1e530439f99a7665ddc19358f0820f2406c72f3daf9236b383bbeb16928edb9a55c8a40bd6114f4d9deb16dad26621252146b3ce39ea97a99120f577db77948fc55d05dc24505303b79ec40aa44b46d3e02832597157df4764862edc3a0a28037f57e929e84c95517d4788d08e2fe1f5f33fc0f4088a53131f719f405a331387f4a29017d6c3e46528f71c5a3753674f0ba14d01b36dd5f1a446dfe1d649eb968fd61a45f6b9677aa7b1ce30d7a5d22985a5559b346ac62ec075fe0dfaafaf9e4300754ef46adcf9f6468acf60f33a334ea76c1941cf342a99c7bd95d2b183061a917d41579aa92d28a22f3f3fb726b7289ff11bc5575f8eb60abccc0c980285caa6e5b55b7cdb301a24fe4a483b264cb88a6a3169c426a14519e0717936c5dfa06163fe18d9cb31858c5e6ba6a06995ee77c2c0eb08a2095a97ce0cb51e61a5db82870e6512ba6f833105da41a74b8c553d000440f80118afb9ccee735d2197c8cccd3837fa4c32b475c1c3c3320f7053f4cfdfd7a37f5463655ef4b0284b39baa8f65e5b40957e1730b227c30756f1fc97554925866541c7e0862992a5d847a6b6463abd1d0120dd47bfb7c6a83487770818e907d9c5f8ae22350c40083f393ba57f237995441765de63fa6475fac826891858c96b8212dd8657c0c2c1d7df1f2cbf2c18d9f5cb76cf72fbfb4490fa700fe52cdfbea8b01210e122ddeb8a23b753200be92aee4431ce04bf05ef2ede8bff15e8dbdb4ad97489e501f17537b76e6298f5cf652dce04438a5ca91f91500ec6636ac84f65f6027944bef83d8737a0ff5c94368cd9e3988847a125105c0432d6c51e7b54cf8887b13e64e28ecdb8fef6c320fc89f8396db4b644fc1f3f5cca168f0e32c0e43e84db69db4d37cc0dc8878b77aa3bdf02512b6839e8a119253c26fcabc4d93980082906192e3efb2af9da23d16f5d1cb06dcb6dd8260feb25c0a04baa81b9b44c777988bae80707ad47890219deb27c440dd409f517b75d10c602b885bd16727562e54f801c7d178fccbad225265c713f6dfcdb6316766ce9c2b00cd5561d3f5cbc1a799bb184da338df58dc7fd3060b34cce76256516e522303e7fac34b0037c19945ee5b9e212275d864d8eb0394a5ac02bc4679d3dab8d8911356a079ff71bb9905d137d3e791646f27125b209ee390bcafbe2bc5484f6285fabf74b7ab3df410a8b7293af50715d2a18c03d89fba25f58941747d2c29b869dfc9131c46022a11b5c541ca19bcb4589adf740895741ce1d65f2c4ce43ba7b81c7cc5590477b80bfa1a0292631e11ee76c4ebd089c9b99c102f13bb9f9c34b1dc2a52b49d370c0ea7d0aa76bead705ed05dd407dbde48858607680252fe8a4ce39f827d2956b1b98c814bcb517f8160216a0636da2e14a768d8dbfc977cb675f9ea93d0b7c3a1ebc7695fcf8541ca6ac7c47313659672a3181e666566e29408ac526a33c1b3a8059cde56282c3e34d8883116d94662dd518a4238d7b31d5794173cfdd2f682b89b888f267ebb90dab76e97c6511660a652749ecde82afa66c6a9530cd8d5f5972a0c2bc5fdf48fa5bcaea3efcf1d2942358bad954e1a44fde4c3a04dc1fef9eafacdbf6e1c0673675c63dbc0449a131848f7e6010b08a3d434cfab730e1d65360ba8194a5716e1fbbbb2fadecc4e951b53322ddfe9cbfae8403d2481280465e98f31ec1d12094294c71ae607c05bd3cea3b084886326d5244f284e73441cd50e5f500e9aa8ac5dfb808fbf208015cbb615677127fd4f416b7a947ead160c9d5936375bbb8ca10aabcbd6369663e553e12489ecdf37960d8b45600b0c9b608573ac5dc1360302618e679ea5832fb879bb91a8ca34561fe1307645a0fd0203572a6b64ad52080d8fc0946274b70a002982dcdba8be1447d52792155e91ce61ed722dca1d0a361f7be0877ec818e9ca9c62fcc19fdb756bc8266012d1016e80f73717214c071f493b4fb671903876f9dcc77bf49e4283dc52e253ecfc36e709a8dd602d74cb4da58ae08f8f05670dc6f90753f6897d4f80835bd48bf6b924f7af0b6d0a839c48147992d56b33a862920b73c1d918d39ddaf65098371af894e20fa2a54261a6ae6b69d79dcbee5b90afa4a276683f353e17420221bd2c5d214b1e600083969e58bf7d7ba1636d8e6e86395ec5304e79f4f04936aa09fee6cbef0185a8c2bedd7650de15dadfb4c181610c64e5a1942e79d4cea116450ee094751c96d7b617ea330ad428f29e7d9886d447d008627e0d06ed39a67de4bd92514e9bfe2ad23cf504a7d574930fd7ec583c65fab6ba6e332faf56f8f5c978494ab48d219240c59359cf217ea064767ce2de2784eb83643a10d26b98a8777ae7b57e74b25ebc855e262b8396358bb2073ba9c310fef0b95e1364fc01b58737fbae33d1bf1550eeb1358c9ae1525e64654f980976e61c456da393ad31209b5e8be7be3f70e681a1fd4b543d3336c73a80c304c0ac5b1ef0d53baa69143c178560da36422d15ae9a887740c45fd6d7a4ab2a1887d91784c12eb3b966c53fa96d0096aecfce6eb1cb10d54fed8f5cc83648ea484dbfac3e6ac5cab33c77d125b256d840d20f9dd165d3eaf28647625613ac0f00c94b470adaa84e7db225109fc3c6e765fe7fa5e595e8711b0abdc049f5fab540c30e81117dd5cf5538d4475ae9a60117b346875debbabd9cdd56eda41621d0d8eada50e6914c454dbbb7c5712b3861b2e4b65b44afe1c923651693ac7e989571f5ee02d5d2972f4179deaf7c1788f2cf396dd596df64505065c7fc94db0f15e83f5cde2c277048c876688c12340213b409da720e8fc97d836f97b383e8015f0c47c229be3ce07f98d2a39b87bab9f5e0235acc76c17f7dbff18474fc08cc7e81a2e402700adedc8e96dca3b2b79c6108cc36cb89ac28a580230f8a0410352bace0de960059ee41424a336ebe57580239d5a1713feb75a85c1b2e33fff8a0b53c05b7934a6b4045b448f64fc39957c7cde80239eaafbe9f028801de82965a2466ef91b6404b8bc0e144f58f2115aeb6cb7e34979efb363f8e40ffdc084e6b6be945098e438a9dba3671cc07ad5823d5f932d48f004888e47be9e43962084c5ca659cb0e4ca7306fd00a76e4523662e7f91c0d6f5393cd28c3780ca18d46725bcca5bdecb98826db1ed03aea8943dd71cc17c3f9e4c07c08e47ea95cf9b8b074634eb375f720aa44224af4a34d58a6b581d07c3f5fdf1266fb0bc331feecfb04efb4dd41894f7150b6b6e93b4999a826d8830c8f315e0eda41f6afc21712f21929802e00257b2b959e414ee3e4cb64541ff67990b6484ebff7d196292010e4d39fde783b745ddbffd5aa9c1da61e688e20ece3bbc3b26b071892aa62607833344538283e4c5738a93f4414872064cf684f307ad2f05d9515a14bb461e10ab5094ac0419a2cba622d8ec7efeb7ecb10221c879e76e884b7db88e9bab91538ea20a77d891b4f5f5ac680014c651c7a4f2dcb7ab2f910e62ff0bc96e1964dbd0a84727230de9a98ed250f336603598782611ce6f8b42e5d988d17dfa69b23aebd7aaf02e51ffff5881d7742dd03034d6cbc26b4e803c8e75aace4469dac65f1b79af0944272f279b8627a33d240fc53c92ae596c996634f9ac51b5b5ba91a9f9820c18535d08df002fbaf03bb58601f55375fe1f29384e17655025f6b4092c0893d368865df0025dc59bc6a26bb232697831d6b55f4a0adc5c40947c43a9d3c8ffb94337cb17290610797cb40384e82e9e99a7f1d94ed62eaaaff7ee663f58e76a5efdf4ad7cd13f3c7caeb56788857ca557fa8644a1e752f2d78c8ff44c9bec2b1af20dfc76641f5439a627c53b646e98deadb10005abe87f33da0672e3506b1d14073dc7ed6b82e6e0b1cb2215caf4468613a2101e6ee025437265f9c8371aa9bb387785e93b9652847f679c9d72e49792af4b62b0b0392e43535da5eeba651f0bd7bbb6fd05820b36d59ad678207f8489918ba2a5696afdcfb93e9e9b96e9ec6eb93b23eab1c2cd93220f5e311d5785b877be30d7d6317b6c1c3cbafc9508acbd524c2f08df7413507d0494e2a0282babd8f11fea626595688723a73a5c97a58a9df24e18f31b6361f89f574ebbd6c53c0306e0571f456684f51440cb556bf7a91ded23e139c3a6831e70acf408123aff816e25f853f73ee7e5fb4344ccbbac0e172ae44946156d99df4df67b359fd77a01f9f32b7f9b32f1f2a0f909a6af30d635faf88b264ad1672176ebea9afd68dec55fa73e3fb112ebff142369fa2b43b78767af6be2b716a0f4990720f1bc4e5dd79e88ab607fb2125de77533b64d555637fd5a879bf4966609a9f9575354fcba159d5e1b512dc970fec9dec9bbeb2c69d3db7b91439133e494aae8fbe87086ea5814c5c6ad167b284e292e65a046b05094529fc49d4c4e0458eaa7a31b6103432940d2ed4e792fabb29a005a76772fce9661338cb23395a70cf73ef2403361ad3235900e8bdfb86f6b3afc8df40049dbee8beec8368c33ffd0a03befe3d0db23b2a7dd47866afd4a4c1b8c11cb8a191ee0b53e1d908d24a8b24a94f7edfb37ff814fce8ffcd91485ade4a87093636176aac8a913806fb52aaa1570af58c3a36f38b127425bdee4c79cf17e128d64a41fa420f4352028bf47e0a0341a103cdc0e6317530478382441302316d9dc8d51240be7940d3c21316cfa939f0311f5d860cf2f07ab5dfc2267e50021effab29933aa3f39315beac1202866e14d88fadb03041964e75d871b1fbda44cda1f8fb271f598a8ccba9b9afedd2507f4ae2a27351444748cbea19e12e5f68ba3ae1a34de5e21c3f8456d60b24322bd5bb71a1b71dde6e44268072e7dfa6489e0e85507d90a531b1957bfc486d4d0976077a6a26355979830d8d388b896a11ff139ca589cdd7c4b7cd50394b86ce2164a765943d81c1afab80100852105448b73cbce0db0840b86bc42f1575ca54d79e696d086bb85bed56e67e6a352178aefd15af6d8c7976ff591817a2f6e707295ac063325146e9089dafb2f504df229676c4ce088674077a462e45d634518b3aa07f4a4c4c9ba2cc9f7f0f6adedafd0a81f1ff57b8f98bdcf5294ca0a6e2b1c34f8bcebd345f3b9d1a432dcd4935689d0d35b6f8f069c215392d04a4ea8f88ba4db5fc7f3f6f5b11a222c5128a9f71e6c56a674daeb6c36a23014015a2c23fa86ab732494858d9ccc1bbe99f09c384cd99a025d5415a13aba123f0efac0838c657685e24d0ff643ac60182f462603f72a3bee69b50c653c87f99ba993f37ebbd7ab3b512d8a81d4735dfb0600c2b428e7aa0ffa21045ab7145b508258ded010fe7be774a64106c3e8bd2573585ddfff4cf498d84f6a4609de154a6a5f2fa068d0417f6ccfb172380f41564aa30d1625d79e846051a2a2189c7571be54cdb4b3a435fa4066984e6479550afcb58d75a4f3fa944ee637b526b45166a7b628344b1fb4c5e9c6def3678d59f6d0bbf0769f7609435ff352b863366769245681ec7adce0144f9b98119e9435c8e70f6fd08dde2e02f1a4303e823471071a8734e4697622153875290dcaf62ca98cab97a4a755f6b97d76fc6473a537e81fb4b2b64eb613c0af839b6bbe31a4b740154ddb5417ae2b3a7294f8c84cb3349f74a501c698ad047376427ab11e9395937e7e483c9560f55eb8b4aa7054b5c597901932a5f11ccad5a315f25137dea9ce32c602d0bbec3051d2f224dff0b9d23590ee31735a9923d12c42fa6ea08302511e363e3017f372496fa29d21acefdf1cf15c0c698d04d0417562040b4e68f8f21ce70b2a0426cb829375f36de2c4ba0d92aaad7f12d8e227d679b72d19184b455ca783e72ab1a80c25355b3bb12be95dba88448eeeaba0e14d89be000e165e98c215add44aa8f688cd8ccb430497cab529342c2ac5ba3be18b48a457775a29b88e3f5ed01e651641c0f52eff6259533061f30d8cf7f914845bb171eeebfca0566a9d0a9ffd56129ba3bebdeea18099b564289332f24df902b6f2b749cef608889b80452e1cf6646ad5863d868d4e6c7696169a3263df45e28526678d45d2c8be51effc354bc0dea7f9227ad36a192771de92faedfc4727a5bae3b2da40571212692ebd8779365bcb8950a79af7af3e3f338b405e4d0eca83088a7a90ec6d47b2a73d23afd32946767ebf0314bb250ad6a39f0384a17457e85b9942f6fcf97b2d60b35a62eae2aa47a2e31cc020f4228ad1df10378266b06b743fb5da53ea5a822e1fb8d4a0dd242d0d052f70ddc9ec726e4ab70f53ecf758969fb8cf69c1fd739b0206d09a1f10262c63a9e7bbfa48283301473c2197e44eca7f1c329e18f8a0a7761aff42056d32157ea15316dde78c20a4c4984cba0f9b38e70e79a80661e567a2f45333627a32a7b94e42151f0e89b9675eecef57417ac943c96a01daf4b81dae87f0fc12de36cf4748d2eea35dfb2b636bea0e535db73264c6ff94b53551883fde169554e220eb06bf5ba745654df37ef7ce6bb230fe53c327f1d4653d8f9ab2c8061c54b77c3c174f6302b76db25373a99a623ddd7004d82f50bb5951e65909747a80ec8a228b30f0c88a966f11345dbf3d7252543e75e92841fb6a2afa6be654b98812594af437a1e55d990e4fba48e8e7769e999b73fadc77d04afccb149c7828443b6cc1af63a01d59b624739630695f1406286ee4b1db717bcfc7567f919bbca86e0ab9434dcafd3f1fbea34f29f819162a829ffbdf885d658696a74a0cff34173d44670ceba2bc1c535c34d0f9a5217628de0b44a6fa9ea45fd1f26ba2937c43c7b93a37595b156d31caf98a67da76f5b6566b33075be94f78f3a4ec58563fd58860d3d5e733e35ad768a1a229a5156f8043f47b4966acfdec453151f4f03a46dc9dd125c7ea3bdfaf8fe1d4bb3de256d3fdca8e0ace343f9bbb59741cbdabe2e3c733546299cbb0f9694ee3e81dd07332293e0eb8588d089e9bb2ec882b835a0a59519cf4a226578b5d835f8ba80dd84870db9a347acfd431ea13a5eb948f95ad58e0e13efa13accc58d52cb9a24e57651111ce47227bee97d6570ae6b7b9041fd9c9f38e64f21785e152fc6e11ba86859208e57befd30db7ad16aa7ec9fd72b3584abb2ad34a7aecf4263d7cda8952bce0773fb089a772d27805b82f63d6ccd87dcb003e172130bae6aebfcc36ea4d2c22d4a49e5943dba44a71084a1c66c5f05b16ed8a04f654997e899482ceb8fafae45c31558d606de96e3080b0f66cc15cf5ae02c167ea788e41d4c29eb0cc9a4e71a2006f977cf9935d11c9be6fa36a1dccb56fc88353217b18773ed8c600ee2c1c7e39253f9bbb92e4c182a9df48c307a9c6f4f7415bd6a0ef5eec98ff31dfe8c05d66b2bbe91abe1092a4942db0173776fb6dc20a49b7f7b0f417be8ad93f429d61fcbb4d26ce423b3cccaa842d4ca247249b62966f385e6e10edee034b52c5d63c75bc42d878900e4986fc542b7c6ea3e3086f478f5211ae3214a33dac9728e2fb94c840ab1b643231ee1393185cc8ef3883062ba7cf447844aad1533bc931b3092c600943e14417b05363ca1c0c5527b6dda3408bb721525646ef55f297e8f924094ea9770e8de6e39d2b9a5fb36548cd35215cee7f0675b8a5e9fde271a917d0661159ba64f5f56bfcc895d862cc129f819bc2d0ef2a3dc2cd6fac55c548285e0717169291c322ae520bcbd0dc2af5f7e63da1df36c97ad32612247cd6d07e1b0b17b406ef662fe2aab9811f0c374a990b69e06e156d8df6906639f0a273205a148c8774700316c3052ca71d602162ceea093c2f2d7a192b7eaafa8965067014b1d9c8c9883dcf72d1532db4f02692546744b4fda41d86734f4909f409fcddcbcc52a83a5ded7cd9135834a6944abb947ded12d8a205687c1b50691917e07349db02e9c5677a71115e30caa416bae0cb3cf53e7e4a14b14886e2c8f8e7a6c32c7fd57a88fafa2bbb4c94078fc95f47296699aeca42134e7d8077065356bdf2d97fd9e7ecf8d41a956c1a7b88dae811352353ac1b931017b6cfcebecee452155003a61ff7c158e6649e2af617188296f411ba6c3552dfa3226a573456b2bc13a81fe5f43b6e7c339227fdefe514fd5d30b1835d6f8b9229333b8b0b2fe96b82a0bbecc79db81cc0fb4673528abdbf81e53aadc74ee5d78698c6fad5f00659c4eb110e0e4530154ab3f110649bcf5cae80de9f23805c1b01bac6e4c33092bfa1ce8933d4635acc05c15c126ec0a3bbe3b4e2cdbc1119e24b483c8364410bf376582b10b31b90b4948b6552d7b53e41963ed60f6d3f7f3c334ea017828db77470b87f2810e63d88456aa0fa9d965ca06ed46e894c1ad8b5a15c8a99251f3aa36fe46e46b1a7c99f998d6b91096959fcecb6d765785520da3104c74b4ac3f5deab4aeaecc3b78619a42dc96a4dba340970a73483ab61f7f86c0188454362afb48dfab60b92a02cdc1dda81dfa56cc30515abadc4b65e9b686ff0b87065b018a9b424e7062d4140af8d76e2f317cde475f1eba9416e000eea74e1474dfe7f331da8de8c0e045a4707250c33c9ab0c8a94b26b66c39c192c06700b93e2743d73119a7b2d469be791475984ae11a50821ab56d6bb019bc4b8d95b6fb844d3201516bf20b3edea1e06ee677bc3cf98d6955ac38d31a0b48b93968521cdeed610a2c255ab044ecd88db1facbd9a383e6257c17c90e6245665cbaaaf643f145f3e0c96c21b8dfb7486c6d815038ea48eaf5a833a971defaff641bc5039c823d2d6b0b725aab68505946921b2585e42b15efea7da09afda82d53ba4876873a88c6ba7b5cea088178622d54075e41a72079767c4dabcb9d3ee306939983ff5b60c221f814d9e81e0864da2decf1b3cd5b744f07174e5fbd5f02b58ff69a5b60a64fa188da34058b179a9970633138acb23ab0546b60cd868f4bc5e6a5463f0848e002f1cc4c5bf5c01cca41234b721f82361a0ae164211c3e22aa8833791c0c72fd60372bfb39b6c46a6dfcb97550a634d9f4cfc28c3aa0f4425a2eb6a6c36e43b07c05d0d25d75138bb3251bdae2c33fbacb3df3667732a0adc29b1b989abc24245c17d9cc47315119d99d2b19362dce6322d0b0103c9651b5c4ebadd714c2ee2fd28c552e12670c1832c812fc18ff18ecfca2ec789b99995337a6d6b1c00ba9c78f203e55822d8c34fc5354e8da1a751fc9644af9a999120d884a62a228b92df106b1c5e4750898909f05fe5e6ea04513620f3c44d3490bd4a7a145c40bcffffe2387d8fd4b880d2f1b01120d02015dc1716b662cdf392c855adbc41f01e8cadc05c0b6ef7ac9383eff30c20753ec790140d419f6081b6bec7770163ddba8241528f6023551da216e66227facd83c9aa519108c2b292dee756e64cca50ecb9ce580a02ba986ec2f67e77b5b694ac494d4a780633138243cc9c4b3e062e9fd15f124cbb951350a104e03a0fc167fafc93cad1784a636d50a94cc629d6f91db6c8e486d79de2802ad867d82d2e1dff6e5d7567a4707e949b887dde8c1f753d0f18286f9ca0890f7ac686f540cfffbe544969271525caa6502ec1683e5a44f836f5c632007749b87db5f3da90cdda712f530ff16b03fcba8d8f32f2001d9c1f154d8775eee23a5d59d801c86d8102913d19d23b9cbdc9331294dfb377cbe1740c45c1402e08864d9575832814ea320f8ad3f3bc14efb5d3ee016d8f7988ff3a7e38d63f868b99645eac1803f84e9e5e64f4cccb3630db189290224f7f2ccbb54b63946f936ae2f2c7038351d9479bdfddc9cb9c933072813bf856b3aa2ce9cef76b8f90901d75035c0a027b1f881b1353f8fd08ac720bb9ba9080467f550dc5c8b07799a1b488190d8c1309e4e54d704953537d679e144e176a2fa1e9da2193db5313b1c31028831c980f8a36e4f36c9e302641b6fd4d0deb5f04ac90b06c1ed49b72dc8800ba1c7ff1a1259fe69d861607d179ad842dc3ff50570c2d9fb0a9e54397b0a559c20da0c640b3c5b4fcb6e331ebce85a74304d49519dfc209a025a144a4da79e6480feead53bce3a3073cdfeacc098c24b70e6e8b395f379458e5bace4ffd9286b4c5927dc03e13460572ec53e7d4e966b589b70dd1a6bccdd061e57de2d74b5b851821622f11aa438b86e249ab4fccd02bc84e14206d15ded0ee4a49d453495bb46f5853ceda0d008979c34259565d34f15b4c517842e8c0081d97d7f6f05e3f001962c715ae58ca8082294c8de6fef7c14289ab79debfdc8bbd94c9b46b7e3888092be3998a6d4e28f3af422b4216963df06b73b23c8b0826bbda9f4bb707a6073936fbf0fba343ef00c8d89519dc71eed0171b03d2bf22b5712f79a683cf14f987a6be17d7d8302f2c1d468a63d8b77bf726aeb537796946be53dee206b575f67b1d0bf0e27725f2f8d32ca7a636a7507f87b2e1d402b3311fa13489eeb38c5d9bbe1a73ec90e772f60b54696161d67f3254788f7b0d3968cae8f477628f5cf5a02b232c26c56fc1c45db4ce7c7ac20b8ed1dc910b14a66f5d1371bd95597f2c34c502333720bf623dee3221c05b687afd79a2808d6cdd718944f3425d3e1bd104ad68d64d2ca42f3a4c543b9f3a56d6649022e149567ab1b5e2222ebeca360e82882d5d5b249d26696d6c27ccdeef71d50619d673827d4948ab01d3261b2d43b8a1ee4f304889487cd5199c78505f967de33af45aa1e634878b2a99f6c8b042220b8d34bf71a0b9a255b1d36f9a8c46ec7bdcbb915731a49a1f2617592c67db9b801e9d23528e768a4362ddd8cfb14b19303e0c71627159639e22bda3af8cc1841ee1e80d7e7959960c7399e4086c6e4466c79ba24e163fd259dd4e9525c2f9c80d304133d9153bf322d15b4f6e1de94e413956bbe012f97b93190fb9574a3234527839f85cbdc4357cb517869c99f07acff2c8b6d7c0059d249a10ccca4f78798d64aa2bf60f94ba3650a206e00943232ecd88fad213c6331483d0cf9dcd29c78497e50e4859dc2a81767161cfdc52a95268f048c2517816e7409183ae19b5f3ecda9c0c76a84179a51d3c4a6fdd58c0d44da3d36a150dee1e8c255178c0a8b4a8ac4f56f1200b8c66aaf026035afb9d6f99e7cfcc1787bc4de76f9520c6a8df54ef6290c0d81556bd09e307f44f1344fda45f142a4a39f7599610ff3506d12cc47967236502fa54851bbf3c2a2f5097cd35664b0d3ecc9af830d51a9ca6bd4cb256bac05f7dbae084d2a3c687def4ac5c1174bb4f67898548f48c1bad30a92fc99624562ea908794602d22ad36188e49d3e55ee98edea8fc7109ea84565d03f07446c421b12c0e83c632253685e60da8f7ea323455e1364c1537ef52aaa8faa3f0091c7fc7bc5c6fbfb497bdc5975dfd993d9ba4a1e2490a263edcaf050b0b97c510ad2e1da4ec74062ac25829a2650e90f13d9b0bd8c715f13c091700d2d1944ef58fa9e8b664fdb96b40cd0c98cd7560efeef359b02a8abb8c09f4b617286c2d6c78302306876211f2dd692e30ae62b0e71f9edc61be4ba3d3a29342bdb6c26f5f595ed7be60b4960939bff12534c326359da89d16119a0b26d86a982d515a5df40d8ca3e9c29b7f6a5aef48c2dc86ed791ade0d73714ff661cbd1cf8ec0d957fba48e1d4f97bcaa642dec14905fe5081119e0be8351c423448900ea6d10d51c2031f6addffeb458a3b2d418c7533e0c666cfc1d7d0650ae9ff97b389930464380eba8620536dc5f2e3bb9c2135bd45368515dcce0a6540421a235a8408b5e93511f03f066c6f5ea256a8c10f0275269af38330dfae2be96d162b3ee00768f32c002562763e2b7fbcfec4a074d07630a32e70c0b77e3d1e12e4ba59ddc333deba58665ef6830b9e08913dbf7a827238c6df77d2d289711c094b2fef787e13b0205ffecdf346b656b6ca79bc62c98de4e3123716bd4da8ea3c28eb4de98c6f0f16a48dafaaa7ff5358152c2da59884c066f14204e3b4df1e091d7d5fc24a5284891d3b472a173ec3e060a9536f55017df95918ba7d8f1beeb8ad959e62bbe9692197d1b44f4aca27670c226639b4caa036ce2199792396ef8aec926457c8ec3c46e3e9d51d5dbdad827af32fc72b724e4cf4f313f71cac96f8547ca597a3968ee1e30a9b909b5de72aabf629dd6f34f9b6b7b1c4b16398ae6c83249e48a86bbaf58235fc43a79223abafdbd71dc7c7f98a1d92f54cf46654ba2b8287f4f3c0c2e4b72753f937cc1352755c00af8ddd5bc7a390ae9245dd4c657991f05bd3572a3551c97fc0fdb7f3302aa5483ba9893a3a4abac982b95300a84754d99b1ddf014c21d0c69e61656fa8b033da9df22e1b52e5f91f91c2beabf087ed04070bad40ed1f5d498f2aa6784bb71ee30ae52834cd2bb678df03829f8ce2b88b6360b07d1e7b1e3dccc240300acf8543e67a503e1d831e2eea9626ed406d61657bcf57c66768aabb61dd926998c83c5f23fa1d8209d584a9f1278e24588636ea34c9090048b7e56c83fcb02c871756a2067cc0a19190e75b316e3e2522657ede22c66a5666ae33c2a764284aa5d02078076f9923334b94139b573d6fe36ba4bb96f75a657d72c3dca97cc9ac4f0302f080719a4cf3c14ad32a8432c5220bc3e0a145c20002195118efb467564dcc9e363b864a812ac8a3744feadd0c9f53ea5593c4df89630d51277c5cd784f36c5ec2770a87a34a3151a7f12f805fa8255430009bb81fda8c37dc77215e9cc3bd08fa3d8a00884fb764d67447284c45b2473a200c2f9476ff18fce455ba8f912dbba67bb00ad2d177eed1c9a6bc2f72d192b0276fc5c4eec380e04ce9c4153c00d6d0f0c40f05382cc88574cfcf4d9081e01bccad35f8f4c8f5b81e72022f58511c6ff63730f30efc5a7da74541093c00a9cb85be613b30996f0f179608236d0e0a196b03bc38f2b784e2b9704dc72e50a584944be9826b597aeecb0091cde3c40bef010ffa9e89126093e65c1dbd6c22a00c14be946247db18eff26bb246bd500a98288fcc5646eb34061d66a5b945514524047afa94fa3d6bc9625a9651fd5495b76b6acf1b504b6d873d5f897d3e25ace1737ef5317d7bb2eb98628ba5ffb7f007b4583a8d9fe8ddb3c46fa1d6e8633fddba3e948c91b254e1784bc9785c448e75a9742695f0dfc8fcb74ec8d6d6c784c8d289445fefbef810901ae8e2f64c0d8036ec5b25f0f250e0d0a6cc5433e9023f0f2c545a78c103c92fe825d47c8752f3ba7a14d0962b44376bf2e46365b8f0a793e7cfe526c72e82e696ff4e351244ca616e6e1ceef810c9dac9645f607e7c76ebf2f021639041897ed972910017448b628e33d7f2036f45778ee0d872fa0e0f86f0aa03c9c84a421be4e2a24378cceb4c2a05fdc438393d78e1044586540017dc86d0eb1d88b19e86be487b93599a0decf93b73b67ef815a936cb5c03eeaad7b4d6296fc2e545126c565e6b21ad424d0c54347b694a10b1b47d32ecb667bf57087239a379acd34b10e0a3ff38abc1ac434d358d395ad70e16c071c68a98d93fe9151b7d397c3f5c658fa8888862af18226dc458eb6e77ae2518a26d4875fcf23c9ba0dd3ca07cfcf8258f4a78d303bbf0a243020897932d90de787883a3bdd6f76112522ea9c3a6670e5cf1bdbb4d43111a4b539fa48de4978eda0d99314accf7840aea5cbd277aae577941c7aa7ad9414002c4659d282eb2d3eb6f7999bbc4c587e774c1f2f25b3a5290b72233cec1a513178ce9cda22cb52f3c9d0df73f855cb211cce61a5042c84ab2ab1022cf50195852997d7f30833a836b235511f2a1fc55800e3b7ae08d3c70ce52c40ca0de5bbae64f328f10bb0fb512ee4514f9984138412bb1d03fbeb7d9f55e4885475579799f4740a5963ab7d04ec6333eb87ee8b4e40b9f9a50c653302d615c197fd9344ecf634de0135e248b32ad71622e74b23c6e505939fd5914a5f31a0df26fd3acea3f07a1d7e460cbcf69c0fc89700d267a728e64a5ac4cbe10a556117842363f03b70cdccec80b8ee3b703e0d1be3dd6662754aa260d02d86e04a05890c551d6155626eabdc1cc5de58ab900511ad128344879c7f2aa9839d18275b074b78d21213993f14441a923f69ec0ef610221c5f0131e5b3aca591f0a46772d11b9e35b4509f8a46be5b485df8df1b158fd0c98ffc78d2c5862df71de4e546054afa4f39781738fcc045fb26d19ca2399d5b130009dd2da2f567282d17147b0933fb95a77047d8c38f48fd2acbb918b53e2cd75d03a6181a070b48032ab998f62474a5b0049e8bd42781688db02f5bb9016b3b1afda8d0095c98621b848675983ab15a20c395c52f256878314ef553880cfa357d6bf6daf700ad99914dc5901c9cdd6179be83ab3639142cae63382a8d6f9f0b4aca53a91dbd86acfdc548d3c8164787f667f83c42b3dd6d5d3664b86d7a1d1b1b57780bfd607a666523fff5210d4b0a8cd29aa2896032363c3a42ab708c37e539ca7720645ab276587ebd1648538645f2a6f66d6136ee43a6610379228808b3d8528aceb892481684a3aa7435fe875f633444870f4afaffbc158ed84ac7d0f6411009590860715d79ebb6fdb4d30317c4eda2d86f7e30ec2bf0907bc7e86121380c7fe5483f0b4c8811e83c0d33dfafb53bbcfc09692ece537936344d28191425f574cfd0d86f92775a1fef43e4101bcecd72310971ac7831191a5fbfb07f389abff817ab636180355bfbb42354e817826e7ae76d27651b43af547cb3b5b62674e07b32da33dd90b5dab9c415cf2e0e8c820499379170893080fd628ab7e6aab16559fd71a5bf17da172da2d35d6b18d0f6baaeceaf5c2f41d92c5436121a88a39aa7f87bec50d2b7fa4baa9eb0ec9ed09ec4281037ab0f065327f9981b078e8c513d5fbc0f3bdf1c211b241010ce4d313d75641de1487394549a0dcb2028e33276e36c76ece9a46db789ac163143b67f3122f3b95d307a0fd6e6ab4f502c9d1a99210217ad7ed9bd4bd92d65c1b8f5a338a41f7d4113afff0319fe63dd7c50bce8994b5666fd89b39dda538ac3d83aed29cde8f7b26a94cac4ece2d5367041aae2f8f47dd97daf18bb8988da00bef4aa100f8b05fbf41a08ed7229ab8d7b725e8a22700521fbc51f06cc6b4106f036203878a4d0232760bc230489657cdf99f8e3161ad6c7088152bf87e1b425231df949303578f9d65c546e9f127fcec442dbff1ddc9fbf2cd96c40abc29714b5d2f2c16a7f5753baf1a85e7b3086b2118b8f62dc5fd3a97b40c7ce7b47c07bc0aa8596040dc10becde8ac8c4679166df063dec10e2077e20998626381d39734b21428b70f2ba76eefa30bd87f791e80f6c3a64ac186e2984dbd42e53511f634b1271e7c1af96d736cf553445b5fb29c5ef3cd866dcfa67fa5203b85a85b99316f325c5fae3e29c8ffca1d9b42a36b409d567c6b7e0c710e7799b8e684a0d0e6801773e410f1eb9a4bd233769a7ae949c66b0694273481861b1287bf355ac2bf5efa2c279d8ff67624297c1270a0e8e67243669af8696b340e9542afa6f17e6fa1cc8678f7420d72842a91fbf9b1dcd93c6cc5d834c043de0ebc66a668b62c548d8f6d625364de5feaf25244f5f6687d3e2e7f1cb56d116bdad0aa1435d4ba7c50c62369c38b8b6d2353efbb14c85c2e0c07ad101c38ccffee9b50cf78b64303426ca7acab5d0399b6f49d702997664ad6e9dce07927351faf64af084f2d636687e9646c4abef8ad4fb0ae20c136fc8770e73fcd7b2f0e9d3408cca96726ad7a1926be3ef5adb42d13cd6a5dcde9d2ff448678b8183312094ef7087e7023014bbeb8c7b2c49e25a27e1e8b3519a7c9b5ab14ab81b1699abc47b5249408e6c375b8829837f320a3b7ab7ebe11762a54ed19b833af30b3371cd074bedf6aa7cd73897f9c072fbf704eb2f94c47271d9f6151ede33bf7856af1c3715815342e91e0d42052568925fa584b5ff2bb089d1b5bb3b8e5600958f87221900e664d81fad5b1929d021fb75485dc6e5617b5d07213fa95eabe5deb1eb19e480c3f31085b127324967c7f2db8a692f35da52919da6b6d3758358234a6f36371a4e689ce409adf80a34ef287b589d08571fe1fa0b08f3fa24bb9b1cf84d4bd050fe84820fc80985eba2f168238d043589c539c53dec56d17768eb3ffe75f20be6f3048b6396ce4f593d73e8574080c01757f22ae478d7457f1776bdab0ed06468689db7237c1c9c1f647e3af05ceb778391d95f9cd24db9edd642bc6d063e08b3000dfeb6e9297a6c1873a353a44f38eecfb7eca90d67411b59b06f63ae42203e1948ff7b489efc1767fe1087cb29705bb25d13a80cde011fa6565d33141e993c54807470d5a140a39d1ff88b601ff21ed1d26afa5d76af920b32ec1c0b7e3821b2108876d80d6d98f534f7068391d30479f75cddb742e2d97e84db6f47d594d2a9b91e6d2ccfbb6ce5c7e6c339f6e676b58b551d5df8405d31e5cd4239db25fe550d9d073583893d3a7544a9dc8a6d08f05fd47fdbce6788e03be8614a0534adf1f199720431d22d64c4ad61faaa7a81c497ee42be3614e662f5da0659fafbb3abe7e039a94489e46bf338593b944159360968bc4ef87c9224e193c00f7f2465a37ba2898cc41d96e3a8ed5da9be955e3be7b7b2a65d51785c73a7de9e27d369b9a927f5797f8d08bbcaca4f30dfcd4780fc8db8050e24b8d0881291c520e43757f78c0e4096636e6606e76b3665dce51a480da5e34a4d60a358588e6466dca05dbbb24a742f3488f60b9458e8b50f2846b0303631f6d057df9b6a185aa213af3ac7149700a31fdc39b899cce8ea995dea6540bc1087339a5d61283fb8ffa6ae07f6674e8d35809f80b1ec2e0aff57ea26b7905fcf57024987809d1cb8a99bf7f814cd98b32859612b070394dadf8153a52d8676bf87435a456e8ca7644c866805eb7d7d92cb22fc29887b9ad45168ee804c1323d1719539c3d6194178d2b4ac77d600ba9c12e7a78fb02f5caa20b526b82c0070025c5c42f1fbfa4618b40cbbf0e9a616d6dc8a2a152f18954a37df7c62a1343dfa397a691d9332c49fa35eb4a1fbd3e8f56f362036ddcb3cd98fdb5254342457d4d7f35515afa3e8de89b934aceae1536c171271b25f29067333cb2dc4feafdd80faab40623e0c480500c72fc3d10b37d71aed99d23b699da26c7c2cb564488469911467910280977069e42449482220601a0a51dff404126076dddd999eb6719388977975952b0f9549d706f72e2c948a5418776ef0d20786e23785081cff330ac0cfc90bc3a298202378d5ad227b3da05dc5294fe4210f66d7c7824c8435ba43edcb928b46ded3a125057160b0e180618aeb915fbebdc62da77643a93727552d9619a006daa6483444ec64bab858f740e5be54cfe106041c0124e8fe4fbb03be3675da4c9828e2fdb159a8f77a30aac28d8ec28efbb055f848682a2af29b89b8ba0417b96b8fa64f3363da1350e8c0739afc77b9725fbbc5691a93f7545a2364dcbe21d7f2633a0d1521549fff819e3821f57509407a6b0b7bf9381d14c8654c3fa9f48b24276dad06ab55ca0336005f8bc8d317663d933c4cddc2f1f7bb05455a6c48a214b70b144f86b26ae76214ad39ccf0bd92ad20090de9b3df57dfe37676b1c29b74857493d2af05c8e5baf87742286497a9296dc9252daf874dba42e2e996d5b148f67e61d5e6235bc08b577bf6168a49fbb001766e19265ce2c1123194acec9053a86310bcf78847271d2bfe59d69d7835dd4ed179abca60e27d36ea38357bbd49cf622c59197a4ee2c7232e2947adef07b9264656092ea0f197a88daffa4cb2d7dc42c9befdbde767ec319963cdf01b3a5bff01ebdab23914de46c473536d320d43f45082d9378066a2d3cf5d79f8164efc5d660e1c3f380f0a61b7dff0c5a09a3ff06fb1761474ea3966ea94ce7486a1c2e47f8dfb543a7430bca38e8a9c4b675f14a28aa3a21a6202ce4c9156f4db54116493a46321998dac700435cb3978e68f7e0afb32135c64707fad6a1070198624a7f1e62018dab8843b50d20992124708e135904560dcca991bca32ca3c37ec179626d4f6378c2522096ee7600165918fab37375806945f874c83fd5cbbbecf7d6118664c9f6112fdec5925fc07bbbb8ca5858c470732d87eeec845a120c669e134cc91005dec4de63cc7e81aa339400a60ac559232d343c1037244ef9fc6c90cee6c4bf15897c1c613689fbc1c0155fb42d0ed594a32a784ee8d4256624ed2fbcb0492704aa56330c788685e684e0f594c0328e261ed80e42cb077b71b91e72bb2b55ab7953546a36b93e372d36e8cba7885639dd4bae4ec93d74c2925e1e1ab75b205b259cd05ffdbabef06aaa3b40b48aca497ed51ce9bcaf842f1d06cbabefb00b2dcf1e794c09a4cd0742ef75654e92a16ad5257c28965c541535d8346ded5dd1e8e963d7033c2a3a64b5b1e050c5969cbbf1bb1259be2913d8224b4c85caa2ea87fb718b6a74d6a371230fdb9128fa77d8eb2fb187c6a713cc6714dcd2723960ab4a309755e1494983ceee102232ffe9bb299b9daa75dc87996b08b16bb8583e5fb6067648f949baa436dec8d2c52ad14886ca30502a1b94dab3793833a0a5de38b85dd5576131b00309dcdb0a26ba9b9a0cb05c0083c04684e9e360c13ceb6085c8fb860c2179766a6fb5a0f8daf306c9a21ae7c5c851511ca0c6e2b16e86037b9f638fbfb4d8cd7d7994588bf5d793a772d29954f1a531335a85fa7ed2e9b1f5c88cb8b2c7e65fb9b3f899045b801e117ef13781d3c6b63be7f9172ffd30fca736404a2f03e247970df3522560e28c1da82f25191f158e486281763d1f80b18f7101e9192b9bf486134b4e768f218564f04aaa4ae5bcd0a772d492607d7baa9f731fb329c1211637357aa314f937ac6d693c0e48bb021551e619e143b87f19e93f7693ff3928f9a6a30d34cdd68ed0dc1664fa6d4108af4133b5d43915de24cbfb6ef6b99d7f693f6926dbdab9de08095f23bcd4be3f6455eb96874192be88d4f8339caccf7bca199d27cf6bc3b20e88b4d6911e0509df860201925819badb3dd3d6eb48dc01806b451b3df4c519dbb6ef752b3ffab3584c2369a95f9bdf1b2dcbb80e0419116a969db5d083fef8f8e60c1614dfc884f6e6ffc83e23971e634cbb19a7dec316b1d9e972ed2a1720df7417e58646a6f38dd395e4514e13896ec6effac54988b7e4304c4d92cb96ac9045eb93671d30e117111bcd585ff7ce6115955c4e9b9834c3ba13b6df943dce521d7459216614aa1e16e8ed55afbff75a2349f79c9231b6a8b936a11569e4b7c9d763e3168780edf21f058d005c15fba2c779ed454a7ee812917472a3fc653fbc27fca6608e6e0e5b51447b1e4f9ba54ae2632d0fe391ca502e4f9de01da9f930d8478cc7daca17fdd796084fe1ccac2406b1943785d7530b1e756049d97f984ca2325a96b9f7ad2ba6991a8de4e8b0b63a11e33883bd5d8180d0a515108f83941025ef0053fb35f301f3c585dedf446183c4d8d4cc9b873b688ebe74446f2c43ed26ef0ccc80a83a31012b3a62c65a361b06e5362ecb43b9d135b4f05629d68774fb4d05e3c1097d6cf9725edadf0ae9d8f7ce79e5022c3b391dc9eb99cc0d4c112465f5b911f6c9bc467354c924fc6df79e422677ddc18dce905b63266a04824f96663c44cd67112c71bec16bdf55888f477bbe06981a705d158b12fa844fda60036a9c36bcb224c4bc3a3b883dd962e98cefdb865ba0edf4fea1ea1a70e0047ff6c88389cb5af28662050424bdd3bec293dd0ebf9b4b69eb9ad8af0f47b120a461713b6873ea5900becdccd7bf2a49fcc6e1f582a8c943b0805cfdaa7cfbb9bdb9c1ec7ffda646229c9c7aea59fcd49d3a5a943f14b2d2270e8e4aa6bea6d1084e9bb668370848a0fd6e4394b8b8c421e7bcb449777c15da260e44d748f60f569d290568230871a16bc06daef5e5e577df46b04e61e5f54eea7b29888b4c64d943878880f9ae37299c7348438ac2367a7af8b3d2ea910ccd9c84b2b4fc5c8df3f2068c3341a15658cdd09f565ae59be2f261b73f3d3a0e2a4eef1822f24ef124134b417d1b3692307da27f720fa5868156f77dc3aee0ebca7adaad702ce61be781ce8f4711a9e9440f2bd2ecca47ce0ea21b6d3fde453ca187c6dcf705fbfc2d445ac3f9751600a74484a1a21f6fe80feca72ab3b44dac704bc390d574ebba2633a79d4e20d1dd637f3970dd5d4894dbbc54a666a9e166b5b0d224f07c2a970ad29a62f7657ca5f0902ea89cbc33f83d32aa69522fcebf48406e7c20f83ae37042ba6c60f741efd1ebb7e0fd5638bcb5e4423e03b1012e0b268dc7130bcb2d6b84a0dbd6b50f4ce79226e22fab853754ae360031b299c13d913144a7455558af52b79c5ce2d4ce950d20f3d2759e076a70d9fdb23858129518571b7c30a5a2df9c7d277ca9d56c9fa5ad88ecfe965eb81cd6d9018fdf9914a92bf25132e7fa185c2bf9dd57800603a312ac723e943fd28b3495f805e4692d35fde0da65e430ddd3f36458c16b8173df9e4a17de8cd704caf35a85cd6362f28161c570bcd8f90140885def8b35720cf3fbeddd05e8dc6489febde7e1b4b574c7c85c443333c07d0003663956bf7a1af7f9f3e9dfc4a250185d9d511ccfea05a4578b51ff1bb0e45766152287b511d25a40150d16b2a08282b5656bcab4d42f4caa1a07f48ec456e796633109a2e8f99f29da56f3466d51a0bcb492313b2c7ba99f5e5390975164e6091ffb2c4e35b663bf2c12c1678ca8627e52af9438b51155073f0900993f5512df0c5edaa1e8e6f88056088f1a0c739b55fd602c53cbdaa17869e44bd05c6b88da455734bca0d5277d9653e9b46f884e9e3ca0dc7e38fd526375306d9893ee6ed99bdb0593a575bbd47fb338bccab80d2763af01863a20547672f497679929a5ead81a2ddf849c911f0edcaba2860473b4a9ec8d1b78ee418e3d1fc8e6b0f095241053f0bca36a3185f1c3da4d0afe222ed22e9169c4937f7a258fc1c32bcda2676a43a662a20c9cdff26f5d72ce00e7fff9bde0453bd7fefbad4497e445c79d7c5c3bc0611af3bd5f3999d84b367597dba00f60619b3fc16a7541f05db3586ba996242c4bb431fec1675a573c032e171fac21b8e55d579c22f563795288822a6ea2593ab6c82dcb4703e199df8f161fd4ee39dcedc74c48e750e42a4b974ce64a72f8e2832e7f55dfd07190bf643ebb4c6f5300f987294031a764c81eb96f0d3e651fff6b7b0447d0f2def22045e68ebad73472c3747ffaae507a2741c875a09100b2fd65da310be63318f9495a9fdd451cbcb6cf7188608ee9cc72507e8eeef3160f3c6ec204640218b69aba8c7d8c7016db3801e9df6dffc1e550bf74464086b4958a94a93251f0162c884ac7dbe040dee15c2aa3265e12e1775e6cd746cacb2988ec27c81e3ce0d3ffe8b6218910d9f7644172eef28eaa3c815e0a3f3eb2aeedf851b6bdb6477d1ed522d4a622a0c1e2187b7c3fff2b8acdb9f4e1d7a5e59587a676eb5f5e7410ae39129791b73cdd93dd59cde6f2cd03cb53a9a594b05b8db17a0656eb428be873525121c6c052286b9e6a46873683180130997d3598dd2f57a92c32367c3c2ad31fb4a75c9b9e5fb68feb0001eb7f61280ef2bc105b9fa117b6674541c3d5920465b9e55e65054447834238263a0ecf6739d739af476a746153609f186328cb41dc1d429994f16301b177759303c4fcd6078ba39c1042e3ecf362c14700082ff144a3ab80ae3cc378b023461197c40902e0c0eaca967c7b239c0ec5bcd63722919bbe16d428a6c64f2bb43fbf1c01671ddf1a7361c35d3eba487430e10d33fc82e92b19b60a60bdfeabb51cbda64d0939fedcec949fa7f3680bccd2cb61f3fdf0b8c7087277e9718f04fc21f5ebfe8d9ba86a4ca6ac0257c9750e958fbad76278235db6b3be71a086548f92a708d22444fdfdc9e7717646717206fcac9ddadc327fda70eff75d229c1cf1c54669efcbb23d35822216288bd2b4563dd5426013f2b7a20bbd392332850d2a77043bb9c05659ee0c58e85f78792780a669790cf5c42837086069cf26fe2f15c73abe0976e2ac6726e0d19bee2bf2dad189dbef00bd161545a7450128145552a177dbc14fd94c2b4ed5984b9d95305efc49fb9cc829787a3eaa2a9f3ba40830011fe5da0dde350dc85de3124fc0a99d7a00f7a41368f0a1c073c281a2b9aba84b904ffa8ed56a94fdda49e5e2f47769e683de70e15d478de25e75e0c3361d78c8d749a6e25788fc8011f7024a3e9a9dad177e6e9fa32ea1be67a4fa7fe4ede580b5036f033558b0920c24244c9dbdd96048f7a4bbd1e92d550262cdfba7901c4e7637c606ae99231a0a0a8715cefb9e5c9a824b695550037d5bfb49559753d9b50009451f48ac1c29c6a71cf1ad1c1c6bb0f7a0902d3b6d8d8f0f2959fca4598b47c91dd298a715622e0b58d479f812186614d78f5549035edcb05f7b9c2cc8baaf895615d4900a8698638835342fcf1b6c4a35455ed2bcd84cc3eb531f229076b417661d5ebdc20b15a9206a8c9dca016e2f904d5a4cac832d21bdbdd4a2d60a610a9df5bfa77bc963462f33b5e083dcbaa924a5176fafe6ca6af7ba4da7a7d733c141c2ef8cc5ace255c4a6edad6b69373513104ce1b102fd68e1d00d71336c0bab42bd93a24f4a7557861af1b4dcc78b97f15f76421eda306d88f63d0d979f1e1e3a0fc7e297c1bfb52078fe696cf3330b93aa55026a5a1b5dda8033607d7b0482ea2d8edb3d558a7554e646955c8445efb95f0b662dbfabb8d5b31f0dd554dd1384b851afa9e604d68fd6d4a538f5ce798584a5e4abecdca3835d3c4c22040cdf554003ec1378c94428889759e3da50e3aef8ad9a62ff250c0173302c2b6421f3ed4134675ad3f745478f64b5ecbb71078082fa282415d2e5902b1a75b98fd73f9e907750849708e1f07e626195d154bdc8784799fe5c19e8be41cf160ae90ae9d5d5365d26e52a544c10945f74791f03618d35e601e0f3e4cac2b7cca205f8a2a9a1a96af780c1d08deb8e184955265409f789e7b1bcaa4415ae889aaa79141879c665b8920ef2c0403beee99978d3eecab0a463b30a4aebd0c4ed134bc31b26bb2c8fc994388cf5381557adf2c5da97bc543a8af990a91f06562cf14cfe93db6d253cdb38ca6b71df885f9ea731409339894144995f415bd38f3b9d10739dbe4a0b4508e61a8ad3021dbe3205c3fda4c60030799e8e8948d8d0403f74fd70b822e5d8b13c745b17cac1c7ceaf93cc253a4047200afd2359ac63871e3e5440775b2bf35f49057a692870734e2f4ca584d05e91b6f65f81349e808cc60ff5a24261c190792d1b044d1401c1903f3771fcc5f8727b57dd5533bddcb58fe444a64d10f937c4082b28f315f6c6c133e09085e9d1059316b1c918a28162b8199a924f1c942ea0deb30a4f88c70bdc9ba8e045c1bd4fd49549549e888735edea9065c0d91bd84a7fc7ccaf0dd924818f14335bc51c7c81617a58afa2843585d25b817b7aa32fec0d48a00ba62ab2e23e69b48afeadc0db6d436945d0e4905fbcbf5bfddcdeaf2765fde9b2551ba629fd3516f2451364c7a87a3495a44adfea1a69f1b49e8076dde8857cf60a15caba756a012df8f00f947a89b1de0207a896f0dc809eee95bad1479be40ed227d55d05993d7884dbfa4c584efbcd8694b6cc7e4723da2fd5b0954fcddfbe0861e7dc1730fba75435b28820f2d8c8114789b899f5d665a4255dca1c4a3909c7ceff7234218bb5e513ffff3d7abc2f59c16b0ba53fb70e6d90a2a5e606ce444b80e7740ed5a823a318b30135881e0d8b22058acbd2a54ed195e7031e28730219a874e909b12f65ae9b51875909d416ab9c5f2686a31dd5ba1503143b57eaf6d5452516afa0c68cbaa3ca31066ee7888011adad02d21bcc7340aa042cbbeaec8f3a6cb3bbb53ea90b654a06b7712e9c400c7b908b3b9d3d06dfec5e6cc87090a49512aa3bc4a022f31827859c88aa2483db1ca946aae98d5fbcf336d36bd2f99e72a4ca398ab924db11e1bcf973246644252de3588386a0aabb3fa716e7d81e5a7f2df720c3f0a2c43d9e17a76008054247daf7bf2123765dbc739aab32498c2ed629be5bfc1a7eaa6d79259008330a22016c333ef2e074c72533b46c73d111af0c0b41895e74d7cd1f4d7707bd86d2ad7c6e219b65427ee5fd5d430348df34526988d69e9574f5a3a9f8fe87c438609714e7c4265842463bafe82b90614c3e4319c14312d2519f0b3672c43c62a92db772f708a9046871a239ed3fa27b8e077eedeea679cfe1b8ae996ba65d817a5c165783e246d8ed3d635a5979ced251fe8ce2878470f664dd1d09ed01299648d0211ba674b9f704e14cdb34e4afcbb92fa288eea162074b6b096ce763106fd62f45a660fec0095d17914c5246ed12af24151d8a842d1e1c67efc51245280e25ce81ce6a43df98684119317c1751c2cbe0c313844ddc97152935b08f51e11073b3ff98f337bafcb1182471ebe26dbd620d62e0cb7a22633feb173a8613fc7a727d31fa52712ba5da616f26db1cdac70567dee9e3caaf85c88561500da766833e654a20b3674e7222d9d5a191bd3e4cbdb7ade9163d674d19656dbecc26be39d496be7fef1031ef7775b9a8764c713e568c722849e05880a8d69c1d106c2d9c89eb30925310962b2dc94cf41f261dc3c604029a819d77073ea84d02c1d7859950e3b90df48a1c5c68b7bb8506474dd75f4b879580228c28229573678f3649071f721cab0ac99f03f87680a63ea4b5ee7ddf69cc70ef561febdbb1f87ae6ce89ab5d47c2d39205040b4b7c55349822ad91ad7c9b91569e0ed06d5e03f23a48b67380c6f69c3d2b3e7bcf9d2f9873446b8c4af34a33dc5751efe773e065e5e4e904efe5b1d804f39c073cd91185507a53c6deb04d7b8e555cdc1982f18700e6f07de07833c792007c9ce4cbbac5b6f28e7defd22d3dac9a2c92979bd1f1fbbd65d50a186c49164bbd2e967d1e78219ecfe25452a94a618bef9bd82b11b83910c964a4aba4944e1b7071cb89f1578026a0344f31bbda17e073bc8662ff7bb83b4cfb039f82c94e693766b579dadcf8b5efc69c51c31a9dd72de37ba33b8fb08fdf6c73bd5a472c48d3083e1a364bfa5bc6eb4f441b688049f32b149e32734ee90e16a861349bc76ca0d27dbcf75428da5b734890a92388ed10d1e75edf15e7d080aa41d12cd9fd61872b259b8f090f95e93ad133a7172d43b2236a22b13e561015ee42cf3e29b035afb80ec1fa4cfd38ae88899df21da121ba30500457f6548d6ba6dd0e4611256554b5770d1031e1fe4c3a5a90d710ea4221406a6607a04e626216671894ce53604f35df1ed86cb0f40eb548ad4090d3f24daa75530a9e4f7e2e2f419ef90996f951c9cf89e9f6aed941a25cc7a3d03c93f52f762a29cd9495e54740b2beba765e9e37b4d131b5a98c2d6a65dd4b4c36f4b78904af2f4062a4f2475b536b80d4750c50ba7be99606af4c6b0c71ae121a1ad885db5ff56c9444140e3c5ab64eae8f0b13bf36b6876769e3aea14ddb0b651140f1adb30436f1c84206d242f6416660e347265c67ea923bb0dd00deef42e02d171d5d28cbcd1c7332683f7972938ad8c72f930cfb3f1420d191cdaa0edbd3a5ef69d9eaf1a362c4da6dac872b89a974b7049968eb06a3e14865ac0fdf41c79a5758763bf846fb732821efa327a53062ec5ba266b4e34c4ef06e1d6b4f4112416dba3131049d925acf43ea0a736120986c68d3e8f241cb74acaac4a67253e4162a432dc11c9300d90c65b298d162abdcd4f0389466cd12d5b92a23fae4b176b0d76e0ac294b2be01342b0b6c60486a88778cc33eb9b89077cdb67ac844f040552985a9eb5cb6532d6eaeddc70f98c389f292618e89f5958cf3ee5f2179f9bf2adf9e6c0578f1590bae6d8b6cf47b1f79bb1ebd9f0275c4529f6a7c20d4ffed4ebaa4859d0733ec8a6b2f66dfb4a1d9812d160720c8d0e0eabaa41272af7d6c4945909c99e581b61d24407716750712b175797dfc3cf15b532e08e2d828e724f72388ce57b429430775a47c12047c2134be8875bd4649fd481a57d1f6257b5295ae75f448a4996e120df9a31530ac9908c77b07179899e01b55317994e2d78d87c987959531d9fe879a3ad31d19a87d3c9f6dabec79a30022fb184eb06f5c54c51e0e802cc48dbf677dd0eee096d8f7ca6ad63510d130110c7dca3bcdbe32368f4cd11186d848afe887de29c8f4712338c31a1aaced8681b34b999e3bfa248531ffc02798e210929bf0e35b3ca8bf6ee2a7fe4d0a42f36ae1c8cda5cba96e459bb7342f321bb799ec243d7adaefa7783ea5a700c95127d19641baeeba2ec1386bac99970fce15829c99fafce4bac9120678bf894e08c46e25849f02de6bde2a453f295590856cebd67ac54370a19da1f8469d7d4491e51f8d7744ff09141026586f3b10f0a8c58b0041d1b0907fadea2664357a1ddfc810e4c27524f544b190e2da50baca3326fa891</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Markdown语法续与外挂标签写法汇总</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="我的Markdown" scheme="http://chfychin.cn/tags/%E6%88%91%E7%9A%84Markdown/"/>
    
  </entry>
  
  <entry>
    <title>线性代数</title>
    <link href="http://chfychin.cn/posts/c23efd5b.html"/>
    <id>http://chfychin.cn/posts/c23efd5b.html</id>
    <published>2024-04-14T04:45:27.000Z</published>
    <updated>2024-04-15T11:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对,你看不了! 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="dec9013be032ab03ff4a80cf6e1391af6443b09d962c46a56ffc92ece08d218a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">线性代数学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="线性代数复习" scheme="http://chfychin.cn/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记</title>
    <link href="http://chfychin.cn/posts/9d1d146e.html"/>
    <id>http://chfychin.cn/posts/9d1d146e.html</id>
    <published>2024-03-25T04:45:27.000Z</published>
    <updated>2024-03-26T05:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对, 请再试试!!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a29288567aa8a22dbd9ee45567088415d9dd6bb9ec8e879ee74bfa5267c6331c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">开始计算机网络学习</summary>
    
    
    
    <category term="学习" scheme="http://chfychin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://chfychin.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>代码模板总结</title>
    <link href="http://chfychin.cn/posts/e27b006a.html"/>
    <id>http://chfychin.cn/posts/e27b006a.html</id>
    <published>2024-03-21T07:10:17.000Z</published>
    <updated>2024-03-21T14:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的模板"><a href="#常用的模板" class="headerlink" title="常用的模板"></a>常用的模板</h1><p>我刷题常用的几个板子，因为敲一次代价太大，就给做成模板了!QAQ</p><h2 id="万能模板1"><a href="#万能模板1" class="headerlink" title="万能模板1"></a>万能模板1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(nullptr),cout.tie(nullptr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(ver) cout&lt;&lt;#ver&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;ver&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(ver,ver2) cout&lt;&lt;#ver&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;ver&lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; #ver2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; ver2 &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(ver1,ver2) (ver1&gt;ver2?ver1:ver2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(ver1,ver2) (ver1&gt;ver2?ver2:ver1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(ver) ver&amp;(-ver)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="comment">//#define inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fl(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ef emplace_front</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eb empalce_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> em emplace</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ikun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);c=<span class="built_in">getchar</span>();&#125;<span class="keyword">return</span> x * f;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">Write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> x,<span class="type">char</span> c)</span></span>&#123;<span class="built_in">Write</span>(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MEGURINE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;../input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;../output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>; <span class="comment">//ikun();</span></span><br><span class="line"><span class="comment">//    cin &gt;&gt; T;</span></span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">while</span> (T --) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MEGURINE</span></span><br><span class="line">    <span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\nRunning Time: &quot;</span> &lt;&lt; (<span class="type">double</span>) (end - start) / CLOCKS_PER_SEC * <span class="number">1000</span> &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> T ^ T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="万能模板2"><a href="#万能模板2" class="headerlink" title="万能模板2"></a>万能模板2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> deb(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(f) f.begin(), f.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rall(f) f.rbegin(), f.rend()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all1(f) f.begin() + 1, f.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> here system(<span class="string">&quot;pause&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Y second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbg(...) <span class="string">&quot;cyh2.2&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) <span class="string">&quot;cyh2.2&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;x = <span class="number">0</span>;<span class="type">char</span> c = <span class="built_in">getchar</span>();<span class="type">bool</span> f = <span class="number">0</span>;<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>()) f ^= (c == <span class="string">&#x27;-&#x27;</span>); <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>()) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>); x = f ? -x : x; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;<span class="keyword">if</span>(x &lt; <span class="number">10</span>) <span class="built_in">putchar</span>(x + <span class="number">48</span>);<span class="keyword">else</span> <span class="built_in">write</span>(x / <span class="number">10</span>), <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;<span class="type">int</span> ans = <span class="number">1</span> % p;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % p;a = a * a % p;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> p)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">qmi</span>(a, p - <span class="number">2</span>, p) % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">150</span>, maxn = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> E = <span class="built_in">exp</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(_ --) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _ ^ _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define debug1(X) cout&lt;&lt;#X&lt;&lt;&quot; = &quot;&lt;&lt;X&lt;&lt;&quot;\n&quot;</span></span><br><span class="line"><span class="comment">// #define debug2(X,Y) cout&lt;&lt;#Y&lt;&lt;&quot; = &quot;&lt;&lt;Y&lt;&lt;&quot;, &quot;&lt;&lt;#X&lt;&lt;&quot; = &quot;&lt;&lt;X&lt;&lt;&quot;\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _GLIBCXX_DEBUG</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(pair&lt;A, B&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C, D&gt; p)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span> + s + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">to_string</span>((string) s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (b ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(vector&lt;<span class="type">bool</span>&gt; v)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">  string res = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(v.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">      res += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    first = <span class="literal">false</span>;</span><br><span class="line">    res += <span class="built_in">to_string</span>(v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(bitset&lt;N&gt; v)</span> </span>&#123;</span><br><span class="line">  string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    res += <span class="built_in">static_cast</span>&lt;<span class="type">char</span>&gt;(<span class="string">&#x27;0&#x27;</span> + v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(A v)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">  string res = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">      res += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    first = <span class="literal">false</span>;</span><br><span class="line">    res += <span class="built_in">to_string</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(pair&lt;A, B&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(p.first) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(p.second) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(p)) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(tuple&lt;A, B, C, D&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(p)) + <span class="string">&quot;, &quot;</span> + <span class="built_in">to_string</span>(<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(p)) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug_out</span><span class="params">()</span> </span>&#123; cerr &lt;&lt; endl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug_out</span><span class="params">(Head H, Tail... T)</span> </span>&#123;</span><br><span class="line">  cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(H);</span><br><span class="line">  <span class="built_in">debug_out</span>(T...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug(...) cerr &lt;&lt; &quot;[&quot; &lt;&lt; #__VA_ARGS__ &lt;&lt; &quot;]:&quot;, debug_out(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) cerr &lt;&lt; #__VA_ARGS__ &lt;&lt; <span class="string">&quot;:&quot;</span>, debug_out(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug1(X) cout&lt;&lt;#X&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;X&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(X,Y) cout&lt;&lt;#Y&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;Y&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;#X&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;X&lt;&lt;<span class="string">&quot;\n&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="排序板子"><a href="#排序板子" class="headerlink" title="排序板子"></a>排序板子</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>稳定性：不稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">selection_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[t])</span><br><span class="line">                t = j;</span><br><span class="line">        &#125; <span class="built_in">swap</span>(a[i], a[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>稳定性：稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(f) &#123;</span><br><span class="line">        f = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                f = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">swap</span>(a[i], a[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>稳定性：稳定<br>时间复杂度：O(n * n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = a[i], j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>&amp;&amp;a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j], j --;</span><br><span class="line">        &#125; a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><p>稳定性：不稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">inssertion_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i != n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="keyword">auto</span> j = <span class="built_in">upper_bound</span>(a, a + i, t) - a;</span><br><span class="line">        <span class="built_in">memmove</span>(a + j + <span class="number">1</span>, a + j, (i - j) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>稳定性：稳定<br>时间复杂度：O(n + mx)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">counting_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> b[mx], s[mx];</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        s[a[i]] ++;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= mx; i ++) &#123;</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">        b[s[a[i]] --] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>稳定性：不稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> x = a[(l+r<span class="number">+1</span>)/<span class="number">2</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[++ i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span>(a[-- j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">    &#125; <span class="built_in">quick_sort</span>(a, l, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quick_sort</span>(a, i, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>稳定性：稳定<br>时间复杂度：O(nlog(n))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(l, mid), <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid&amp;&amp;j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i] &lt; f[j]) &#123;</span><br><span class="line">            t[k ++] = f[i ++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t[k ++] = f[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">        t[k ++] = f[i ++];</span><br><span class="line">    &#125; <span class="keyword">while</span>(j &lt;= r) &#123;</span><br><span class="line">        t[k ++] = f[j ++];</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = l, k = <span class="number">0</span>; i &lt;= r; i ++, k ++) &#123;</span><br><span class="line">        f[i] = t[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l &lt; r)<span class="comment">//模板一：找最左边的那个与目标值相等的下标</span></span><br><span class="line">&#123;</span><br><span class="line">    mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l &lt; r)<span class="comment">//模板二：找最右边的那个与目标值相等的下标</span></span><br><span class="line">&#123;</span><br><span class="line">    mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string aa, bb;</span><br><span class="line">    <span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line">    cin &gt;&gt; aa &gt;&gt; bb;</span><br><span class="line">    <span class="type">int</span> la = aa.<span class="built_in">size</span>(), lb = bb.<span class="built_in">size</span>(), mx = <span class="built_in">max</span>(la, lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; la; i ++) &#123;</span><br><span class="line">        a[la - i - <span class="number">1</span>] = aa[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lb; i ++) &#123;</span><br><span class="line">        b[lb - i - <span class="number">1</span>] = bb[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] ++, c[i] -= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c[mx]&amp;&amp;mx &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        mx --;</span><br><span class="line">    &#125; <span class="keyword">while</span>(mx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[mx --]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string aa, bb;</span><br><span class="line">    <span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line">    cin &gt;&gt; aa &gt;&gt; bb;</span><br><span class="line">    <span class="type">int</span> la = aa.<span class="built_in">size</span>(), lb = bb.<span class="built_in">size</span>(), mx = <span class="built_in">max</span>(la, lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; la; i ++) &#123;</span><br><span class="line">        a[la - i - <span class="number">1</span>] = aa[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lb; i ++) &#123;</span><br><span class="line">        b[lb - i - <span class="number">1</span>] = bb[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] --, c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(c[mx] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; i ++) &#123;</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx; i ++) &#123;</span><br><span class="line">            c[i] += b[i] - a[i];</span><br><span class="line">            <span class="keyword">if</span>(c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                c[i + <span class="number">1</span>] --, c[i] += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c[mx]&amp;&amp;mx &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        mx --;</span><br><span class="line">    &#125; <span class="keyword">while</span>(mx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; c[mx --];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span> &gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>()||t; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; a.<span class="built_in">size</span>())</span><br><span class="line">            t += a[i] * b;</span><br><span class="line">        <span class="keyword">if</span>(!i) t += x;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!c.<span class="built_in">back</span>() &amp;&amp; c.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125; <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;B, <span class="type">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / B);</span><br><span class="line">        r %= B;</span><br><span class="line">    &#125; <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>() &gt; <span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125; <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f[i] = f[i - <span class="number">1</span>] + a[i];</span><br><span class="line">f[i] += f[i - <span class="number">1</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二位前缀和"><a href="#二位前缀和" class="headerlink" title="二位前缀和"></a>二位前缀和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f[i][j] = f[i - <span class="number">1</span>][j] + f[i][j - <span class="number">1</span>] - f[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i] [j];</span><br><span class="line">ans = f[x2][y2] - f[x1 - <span class="number">1</span>][y2] - f[x2][y1 - <span class="number">1</span>] + f[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">f[i] += f[i - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f[i][j] = a[i][j] - a[i<span class="number">-1</span>][j] - a[i][j<span class="number">-1</span>] + a[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">f[x1][y1] += c, f[x1][y2<span class="number">+1</span>] -= c;</span><br><span class="line">f[x2<span class="number">+1</span>][y1] -= c, f[x2<span class="number">+1</span>][y2<span class="number">+1</span>] += c;</span><br><span class="line">f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>] - f[i<span class="number">-1</span>][j<span class="number">-1</span>] + f[i][j];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="number">0</span>; l &lt; n; l ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>((l &gt;= r||<span class="built_in">checn</span>(s))&amp;&amp;r &lt; n) &#123;</span><br><span class="line">        r ++, s += f[r];</span><br><span class="line">    &#125; s -= f[l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[u].<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[u][i], ww = w[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!st[u]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    st[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[t].<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[t][i];</span><br><span class="line">            <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">LCA_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    ce[root] = <span class="number">1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(ce[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ce[j] = ce[t] + <span class="number">1</span>;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">15</span>; k ++) &#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ce[a] &lt; ce[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ce[fa[a][i]] &gt;= ce[b])</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">    &#125; <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i] != fa[b][i]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="多源汇Floyd"><a href="#多源汇Floyd" class="headerlink" title="多源汇Floyd"></a>多源汇Floyd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                p[i][j] = <span class="built_in">min</span>(p[i][j], p[i][k] + p[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单源堆优化Dijkstra"><a href="#单源堆优化Dijkstra" class="headerlink" title="单源堆优化Dijkstra"></a>单源堆优化Dijkstra</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; heap;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> y = t.second;</span><br><span class="line">        <span class="keyword">if</span>(st[y]) <span class="keyword">continue</span>;</span><br><span class="line">        st[y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[y]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[y] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[y] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>; st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, inf, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t == <span class="number">-1</span>||dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125; <span class="keyword">if</span>(i&amp;&amp;dist[t] == inf) <span class="keyword">return</span> inf;</span><br><span class="line">        <span class="keyword">if</span>(i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DSU</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>,s + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> a = s[i].a, b = s[i].b, w = s[i].w;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a) != <span class="built_in">find</span>(b)) &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">            cnt ++;</span><br><span class="line">            res += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(cnt == n - <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">return</span> inf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="二分图判断"><a href="#二分图判断" class="headerlink" title="二分图判断"></a>二分图判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!color[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!color[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i, <span class="number">1</span>)) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="匈牙利算二分图最大匹配"><a href="#匈牙利算二分图最大匹配" class="headerlink" title="匈牙利算二分图最大匹配"></a>匈牙利算二分图最大匹配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!b[j]||<span class="built_in">find</span>(b[j])) &#123;</span><br><span class="line">                b[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i]) &#123;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i =ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            d[j] --;</span><br><span class="line">            <span class="keyword">if</span>(d[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++timestamp;</span><br><span class="line">    stk[++ top] = u, in_stk[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(in_stk[j]) &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(dfn[u] == low[u]) &#123;</span><br><span class="line">        ++ scc_cnt;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            y = stk[top --];</span><br><span class="line">            in_stk[y] = <span class="literal">false</span>;</span><br><span class="line">            id[y] = scc_cnt;</span><br><span class="line">            Size[scc_cnt] ++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强连通分量的建边缩点"><a href="#强连通分量的建边缩点" class="headerlink" title="强连通分量的建边缩点"></a>强连通分量的建边缩点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, x;</span><br><span class="line">        <span class="keyword">while</span>(cin &gt;&gt; a, a) &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = h[i]; ~j; j = ne[j]) &#123;</span><br><span class="line">            <span class="type">int</span> k = e[j];</span><br><span class="line">            <span class="type">int</span> a = id[i], b = id[k];</span><br><span class="line">            <span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">                dout[a] ++, in[b] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= scc_cnt; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dout[i]) p ++;</span><br><span class="line">        <span class="keyword">if</span>(!in[i]) q ++;</span><br><span class="line">    &#125; cout &lt;&lt; q &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(scc_cnt == <span class="number">1</span>) p = q = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(p, q) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h2><h3 id="LCA-1"><a href="#LCA-1" class="headerlink" title="LCA"></a>LCA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">LCA_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    ce[root] = <span class="number">1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(ce[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ce[j] = ce[t] + <span class="number">1</span>;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">15</span>; k ++) &#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ce[a] &lt; ce[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ce[fa[a][i]] &gt;= ce[b]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i] != fa[b][i]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RMQ"><a href="#RMQ" class="headerlink" title="RMQ"></a>RMQ</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_RMQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!j) &#123;</span><br><span class="line">                mn[i][j] = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mn[i][j] = <span class="built_in">max</span>(mn[i][j - <span class="number">1</span>], mn[(i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RMQ</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = r - l + <span class="number">1</span>;</span><br><span class="line">    k = <span class="built_in">log</span>(k) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(mn[l][k], mn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络流Dinic"><a href="#网络流Dinic" class="headerlink" title="网络流Dinic"></a>网络流Dinic</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; q, f, ne, e, h, d, cur;</span><br><span class="line">    <span class="type">int</span> idx, n, m, S, T, inf;</span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> n_, <span class="type">int</span> m_, <span class="type">int</span> S_, <span class="type">int</span> T_) : <span class="built_in">n</span>(n_) &#123;</span><br><span class="line">        idx = <span class="number">0</span>, n = n_, m = m_, S = S_, T = T_, inf = <span class="number">1e8</span>;</span><br><span class="line">        e.<span class="built_in">resize</span>(m_, <span class="number">0</span>), f.<span class="built_in">resize</span>(m_, <span class="number">0</span>);</span><br><span class="line">        ne.<span class="built_in">resize</span>(m_, <span class="number">0</span>), h.<span class="built_in">resize</span>(n_, <span class="number">-1</span>);</span><br><span class="line">        q.<span class="built_in">resize</span>(n_, <span class="number">0</span>), d.<span class="built_in">resize</span>(n_, <span class="number">0</span>);</span><br><span class="line">        cur.<span class="built_in">resize</span>(n_, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">        e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            d[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">            <span class="type">int</span> t = q[hh ++];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(d[j] == <span class="number">-1</span>&amp;&amp;f[i]) &#123;</span><br><span class="line">                    d[j] = d[t] + <span class="number">1</span>;</span><br><span class="line">                    cur[j] = h[j];</span><br><span class="line">                    <span class="keyword">if</span>(j == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    q[++ tt] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u == T) <span class="keyword">return</span> limit;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i&amp;&amp;flow &lt; limit; i = ne[i]) &#123;</span><br><span class="line">            cur[u] = i;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] == d[u] + <span class="number">1</span>&amp;&amp;f[i]) &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">find</span>(j, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">                <span class="keyword">if</span>(!t) d[j] = <span class="number">-1</span>;</span><br><span class="line">                f[i] -= t, f[i ^ <span class="number">1</span>] += t, flow += t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>()) <span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, inf)) r += flow;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><h3 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数分解"><a href="#素数分解" class="headerlink" title="素数分解"></a>素数分解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getdiv</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                s ++, x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h3><h4 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="欧拉筛-线性筛"><a href="#欧拉筛-线性筛" class="headerlink" title="欧拉筛(线性筛)"></a>欧拉筛(线性筛)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span>&gt; <span class="title">get_x</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            s.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(x / i != i) &#123;</span><br><span class="line">                s.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h3 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">eular</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans * (i - <span class="number">1</span>) / i;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ans = ans * (x - <span class="number">1</span>) / x;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">phi</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, p</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    st[<span class="number">0</span>] = st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            p.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>()&amp;&amp;i * p[j] &lt;= n; j ++) &#123;</span><br><span class="line">            st[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * p[j]] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        phi[i] += phi[i - <span class="number">1</span>];</span><br><span class="line">    &#125; cout &lt;&lt; phi[n] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><h3 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        &#125; a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂求逆元"><a href="#快速幂求逆元" class="headerlink" title="快速幂求逆元"></a>快速幂求逆元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qminv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>, b = p - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Combination &#123;</span><br><span class="line">    <span class="type">int</span> fc[<span class="number">1010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">inti_fc</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        fc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1001</span>; i ++) &#123;</span><br><span class="line">            fc[i] = fc[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span> % mod;</span><br><span class="line">        <span class="keyword">while</span>(b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">            a = a * a % mod;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; i ++, j --)</span><br><span class="line">            y = y * i % mod,</span><br><span class="line">            x = x * j % mod;</span><br><span class="line">        <span class="keyword">return</span> x * <span class="built_in">pow</span>(y, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卢卡斯定理：</span></span><br><span class="line">    <span class="comment">// b    (b mod p)     [b/p]</span></span><br><span class="line">    <span class="comment">// C  ≡   C   *   C  (mod p)</span></span><br><span class="line">    <span class="comment">// a    (a mod p)     [a/p]</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Lucas</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; mod &amp;&amp; b &lt; mod) <span class="keyword">return</span> <span class="built_in">C</span>(a, b, mod);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(a % mod, b % mod, mod) * <span class="built_in">Lucas</span>(a / mod, b / mod, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Combination;</span><br></pre></td></tr></table></figure><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> c[][N], <span class="type">int</span> b[][N], <span class="type">int</span> a[][N])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t[N][N];</span><br><span class="line">    <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span> t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k ++) &#123;</span><br><span class="line">                t[i][j] = (t[i][j] + a[i][k] * b[k][j]) % mod1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">memcpy</span>(c, t, <span class="keyword">sizeof</span> t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">mul</span>(f, a, f);</span><br><span class="line">        &#125; <span class="built_in">mul</span>(a, a, a);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span>(c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++) &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = r; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c])) &#123;</span><br><span class="line">                t = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">if</span>(<span class="built_in">abs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c; i &lt; n + <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[t][i], a[r][i]);</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= c; i --) &#123;</span><br><span class="line">            a[r][i] /= a[r][c];</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; eps) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt;= c; j --) &#123;</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; r ++;</span><br><span class="line">    &#125; <span class="keyword">if</span>(r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = r; i &lt; n; i ++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            a[i][n] -= a[j][n] * a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h2><h3 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Strustal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (i - <span class="number">1</span>) * f[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Strustal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + j * f[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">xianxing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = k; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[j] &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(f[j], f[k]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">if</span>((f[k] &gt;&gt; i &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j != k&amp;&amp;f[j] &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                f[j] ^= f[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; k ++;</span><br><span class="line">        <span class="keyword">if</span>(k == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        ans ^= f[i];</span><br><span class="line">    &#125; cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h1><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j --) &#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j ++) &#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i]&amp;&amp;k * v[i] &lt;= j; k ++) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + w[i] * k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制背包"><a href="#二进制背包" class="headerlink" title="二进制背包"></a>二进制背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    cin &gt;&gt; w &gt;&gt; v &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s &gt; k) &#123;</span><br><span class="line">        s -= k;</span><br><span class="line">        p[cnt ++] = &#123;w * k, v * k&#125;;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">    &#125; p[cnt ++] = &#123;w * s, v * s&#125;;</span><br><span class="line">&#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= p[i].w; j --) &#123;</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - p[i].w] + p[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h3 id="单调队列背包"><a href="#单调队列背包" class="headerlink" title="单调队列背包"></a>单调队列背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> r = <span class="number">0</span>; r &lt; v[i]; r ++) &#123;</span><br><span class="line">        <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = r; j &lt;= m; j += v[i]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt;= tt&amp;&amp;j - q[hh] &gt; v[i] * s[i]) hh ++;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt;= tt&amp;&amp;f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[tt]] + (j - q[tt]) / v[i] * w[i] &lt;= f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j]) tt --;</span><br><span class="line">            q[++ tt] = j;</span><br><span class="line">            f[i &amp; <span class="number">1</span>][j] = f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[hh]] + (j - q[hh]) / v[i] * w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维背包"><a href="#二维背包" class="headerlink" title="二维背包"></a>二维背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = V; j &gt;= v[i]; j --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = W; l &gt;= w[i]; l --) &#123;</span><br><span class="line">            f[j][l] = <span class="built_in">max</span>(f[j][l], f[j - v[i]][l - w[i]] + a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>  k = <span class="number">1</span>; k &lt;= s[i]; k ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i][k]) &#123;</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt;= <span class="number">1</span>; j --) &#123;</span><br><span class="line">        f[i][j] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j + <span class="number">1</span>]) + f[i][j];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + len - <span class="number">1</span> &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = i + <span class="number">1</span>; k &lt;= j; k ++) &#123;</span><br><span class="line">            <span class="type">int</span> a = ff[k][<span class="number">0</span>] - ff[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b = ff[j + <span class="number">1</span>][<span class="number">1</span>] - ff[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(a - b)&amp;&amp;<span class="built_in">abs</span>(a - b) &lt;= R) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][k - <span class="number">1</span>] + f[k][j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长上升序列"><a href="#最长上升序列" class="headerlink" title="最长上升序列"></a>最长上升序列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> m = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(f[m] &lt; a[i]) l = m;</span><br><span class="line">        <span class="keyword">else</span> r = m - <span class="number">1</span>;</span><br><span class="line">    &#125; f[r + <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="keyword">if</span>(r + <span class="number">1</span> &gt; len) len ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    f[i][<span class="number">0</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    f[i][<span class="number">1</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] - a[i]);</span><br><span class="line">    f[i][<span class="number">2</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>] + a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(j != <span class="number">-1</span>&amp;&amp;a[i] != a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125; <span class="keyword">if</span>(a[i] == a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125; ne[i] = j;</span><br><span class="line">&#125; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(j != <span class="number">-1</span>&amp;&amp;b[i] != a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125; <span class="keyword">if</span>(b[i] == a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125; <span class="keyword">if</span>(j == n - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; i - j &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        j = ne[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; son;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; cnt;</span><br><span class="line">    <span class="type">int</span> n, idx;</span><br><span class="line">    <span class="built_in">Trie</span>(<span class="type">int</span> m_, <span class="type">int</span> n_) : <span class="built_in">n</span>(n_) &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        son.<span class="built_in">assign</span>(m_, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (<span class="number">150</span>, <span class="number">0</span>));</span><br><span class="line">        cnt.<span class="built_in">assign</span>(m_, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> u = s[i];</span><br><span class="line">            <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> u = s[i];</span><br><span class="line">            <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][u]) tr[p][u] = ++ idx;</span><br><span class="line">        p = tr[p][u];</span><br><span class="line">    &#125; cnt[p] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">0</span>][i]) &#123;</span><br><span class="line">            q[++ tt] = tr[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> p = tr[t][i];</span><br><span class="line">            <span class="keyword">if</span>(!p) tr[t][i] = tr[ne[t]][i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ne[p] = tr[ne[t]][i];</span><br><span class="line">                q[++ tt] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manachar"><a href="#Manachar" class="headerlink" title="Manachar"></a>Manachar</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Manachar</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; ss;</span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">Manachar</span>(string s_) &#123;</span><br><span class="line">        n = s_.<span class="built_in">size</span>(), s = s_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        ss.<span class="built_in">resize</span>(n * <span class="number">2</span> + <span class="number">10</span>);</span><br><span class="line">        ss[l ++] = <span class="string">&#x27;$&#x27;</span>, ss[l ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            ss[l ++] = s[i];</span><br><span class="line">            ss[l ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125; ss[l ++] = <span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">        n = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">manachar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        p.<span class="built_in">resize</span>(n + <span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> mr = <span class="number">0</span>, mid, mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; mr) p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i);</span><br><span class="line">            <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(ss[i - p[i]] == ss[i + p[i]]) &#123;</span><br><span class="line">                p[i] ++;</span><br><span class="line">            &#125; <span class="keyword">if</span>(i + p[i] &gt; mr) &#123;</span><br><span class="line">                mr = i + p[i];</span><br><span class="line">                mid = i;</span><br><span class="line">            &#125; mx = <span class="built_in">max</span>(mx, p[i]);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; p[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">        &#125; <span class="keyword">return</span> mx - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">char</span> s[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n&amp;&amp;j &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; n&amp;&amp;s[i + k] == s[j + k]) &#123;</span><br><span class="line">            k ++;</span><br><span class="line">        &#125; <span class="keyword">if</span>(s[i + k] &gt; s[j + k]) &#123;</span><br><span class="line">            i += k + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j += k + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="type">int</span> k = <span class="built_in">min</span>(i, j);</span><br><span class="line">    s[k + n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="并查集DSU"><a href="#并查集DSU" class="headerlink" title="并查集DSU"></a>并查集DSU</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dsu</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">size_t</span>&gt; pa, size, sum;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">dsu</span><span class="params">(<span class="type">size_t</span> siz)</span> : pa(siz * <span class="number">2</span>), size(siz * <span class="number">2</span>, <span class="number">1</span>), sum(siz * <span class="number">2</span>) &#123;</span></span><br><span class="line">            <span class="built_in">iota</span>(pa.<span class="built_in">begin</span>(), pa.<span class="built_in">begin</span>() + siz, siz);</span><br><span class="line">            <span class="built_in">iota</span>(pa.<span class="built_in">begin</span>() + siz, pa.<span class="built_in">end</span>(), siz);</span><br><span class="line">            <span class="built_in">iota</span>(sum.<span class="built_in">begin</span>() + siz, sum.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">            x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(size[x] &lt; size[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">            pa[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">            sum[x] += sum[y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(fx == fy) <span class="keyword">return</span>;</span><br><span class="line">            pa[x] = fy;</span><br><span class="line">            --size[fx], ++size[fy];</span><br><span class="line">            sum[fx] -= x, sum[fy] += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ask</span><span class="params">(<span class="type">size_t</span> x, <span class="type">size_t</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">return</span> x == y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">find</span><span class="params">(<span class="type">size_t</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pa[x] == x ? pa[x] : pa[x] = <span class="built_in">find</span>(pa[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SegmentTree &#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::vector&lt;Info&gt; info;</span><br><span class="line">        <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">            <span class="built_in">init</span>(n_, v_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">        <span class="title">SegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">init</span>(init_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">            <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">        <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">            n = init_.<span class="built_in">size</span>();</span><br><span class="line">            info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">            std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                    info[p] = init_[l];</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                <span class="built_in">pull</span>(p);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">            info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                info[p] = v;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; m) &#123;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">                <span class="keyword">return</span> info[p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">        <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SegmentTree;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="一维树状数组"><a href="#一维树状数组" class="headerlink" title="一维树状数组"></a>一维树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> tr[], <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        tr[i] += y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> tr[], <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        ans += tr[i];</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(tr, x) * (x + <span class="number">1</span>) - <span class="built_in">sum</span>(pretr, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            tr1[i][j] += d;</span><br><span class="line">            tr2[i][j] += x * d;</span><br><span class="line">            tr3[i][j] += y * d;</span><br><span class="line">            tr4[i][j] += x * y * d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y; j; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            ans += (x + <span class="number">1</span>) * (y + <span class="number">1</span>) * tr1[i][j] - (x + <span class="number">1</span>) * tr3[i][j] - (y + <span class="number">1</span>) * tr2[i][j] + tr4[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x2, y2) - <span class="built_in">sum</span>(x2, y1 - <span class="number">1</span>) - <span class="built_in">sum</span>(x1 - <span class="number">1</span>, y2) + <span class="built_in">sum</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x1, y1, x);</span><br><span class="line">    <span class="built_in">add</span>(x1, y2 + <span class="number">1</span>, -x);</span><br><span class="line">    <span class="built_in">add</span>(x2 + <span class="number">1</span>, y1, -x);</span><br><span class="line">    <span class="built_in">add</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y1, y2;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Segment &amp;t)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">double</span> len;</span><br><span class="line">&#125; tr[N * <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">double</span>&gt; ys;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>(), y) - ys.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].cnt) tr[u].len = ys[tr[u].r + <span class="number">1</span>] - ys[tr[u].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[u].l != tr[u].r) &#123;</span><br><span class="line">        tr[u].len = tr[u &lt;&lt; <span class="number">1</span>].len + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    &#125; <span class="keyword">else</span> tr[u].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l != r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">        tr[u].cnt += k;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_cd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="type">double</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        seg[j ++ ] = &#123;x1, y1, y2, <span class="number">1</span>&#125;;</span><br><span class="line">        seg[j ++ ] = &#123;x2, y1, y2, <span class="number">-1</span>&#125;;</span><br><span class="line">        ys.<span class="built_in">push_back</span>(y1), ys.<span class="built_in">push_back</span>(y2);</span><br><span class="line">    &#125; <span class="built_in">sort</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>());</span><br><span class="line">    ys.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>()), ys.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, ys.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">sort</span>(seg, seg + n * <span class="number">2</span>);</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) res += tr[<span class="number">1</span>].len * (seg[i].x - seg[i - <span class="number">1</span>].x);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(seg[i].y1), <span class="built_in">find</span>(seg[i].y2) - <span class="number">1</span>, seg[i].k);</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CG &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line">        <span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">point</span> (<span class="type">double</span> a, <span class="type">double</span> b) &#123;</span><br><span class="line">            x = a, y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="built_in">sgn</span>(x - b.x)&amp;&amp;!<span class="built_in">sgn</span>(y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>-(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x - b.x,y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>+(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x + b.x, y + b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="keyword">operator</span>^(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="keyword">operator</span>*(point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>*(<span class="type">double</span> b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x * b, y * b);</span><br><span class="line">        &#125;</span><br><span class="line">        point <span class="keyword">operator</span>/(<span class="type">double</span> b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x / b, y / b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">dot</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotleft</span><span class="params">()</span> </span>&#123;            <span class="comment">//逆时针转90 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(-y, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotright</span><span class="params">()</span> </span>&#123;           <span class="comment">//顺时针转90 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(y, -x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">rotate</span><span class="params">(point p, <span class="type">double</span> angle)</span> </span>&#123;</span><br><span class="line">            point v = (*<span class="keyword">this</span>)-p;</span><br><span class="line">            <span class="type">double</span> c = <span class="built_in">cos</span>(angle);</span><br><span class="line">            <span class="type">double</span> s = <span class="built_in">sin</span>(angle);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">dis2</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - b.x) * (x - b.x) * <span class="number">1.0</span> + (y - b.y) * (y - b.y) * <span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">culk</span><span class="params">(point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (y - b.y) / (x - b.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">        point a, b;</span><br><span class="line">        <span class="built_in">line</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">line</span>(point q,point w) &#123;                  <span class="comment">//两点式 </span></span><br><span class="line">            a = q, b = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">line</span>(point p, <span class="type">double</span> angle) &#123;             <span class="comment">//斜率式 </span></span><br><span class="line">            a = p;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(angle - pi / <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                b=(a+<span class="built_in">point</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                b = (a + <span class="built_in">point</span>(<span class="number">1</span>, <span class="built_in">tan</span>(angle)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">line</span>(<span class="type">double</span> A, <span class="type">double</span> B, <span class="type">double</span> C) &#123;       <span class="comment">//Ax+By+C=0 </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(A) == <span class="number">0</span>)&#123;</span><br><span class="line">                a = <span class="built_in">point</span>(<span class="number">0.0</span>, -C / B);</span><br><span class="line">                b = <span class="built_in">point</span>(<span class="number">1.0</span>, -C / B);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">sgn</span>(B) == <span class="number">0</span>) &#123;</span><br><span class="line">                a = <span class="built_in">point</span>(-C / A, <span class="number">0</span>);</span><br><span class="line">                b = <span class="built_in">point</span>(-C / A, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a = <span class="built_in">point</span>(<span class="number">0</span>, -C / B);</span><br><span class="line">                b = <span class="built_in">point</span>(<span class="number">1</span>, (-A - C) / B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">crosspoint</span><span class="params">(line l)</span> </span>&#123;               <span class="comment">//找交点 </span></span><br><span class="line">            <span class="type">double</span> a1 = point::<span class="built_in">cross</span>(l.b - a, b - a);</span><br><span class="line">            <span class="type">double</span> a2 = point::<span class="built_in">cross</span>(l.a - a, b - a);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>((a1 * l.a.x - a2 * l.b.x) / (a1 - a2), (a1 * l.a.y - a2 * l.b.y) / (a1 - a2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">pointtoLine</span><span class="params">(point p)</span> </span>&#123;                <span class="comment">//点到直线距离 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">fabs</span>((p - a) ^ (b - a)) / <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">pointtoSeg</span><span class="params">(point p)</span> </span>&#123;                 <span class="comment">//点到线段距离 </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>((p - a) * (b - a)) &lt; <span class="number">0</span>||<span class="built_in">sgn</span>((p - b) * (a - b)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">min</span>(point::<span class="built_in">dis2</span>(p, a), point::<span class="built_in">dis2</span>(p, b));</span><br><span class="line">            &#125; <span class="keyword">return</span> <span class="built_in">pointtoLine</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">lineprog</span><span class="params">(point p)</span> </span>&#123;                    <span class="comment">//点在直线上投影 </span></span><br><span class="line">            <span class="keyword">return</span> a + (((b - a) * ((b - a) * (p - a))) / (point::<span class="built_in">dis2</span>(b, a)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">mirrorpoint</span><span class="params">(point p)</span> </span>&#123;                 <span class="comment">//点关于直线对称点 </span></span><br><span class="line">            point q = <span class="built_in">lineprog</span>(p);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(<span class="number">2</span> * q.x - p.x, <span class="number">2</span> * q.y - p.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">triangle</span> &#123;</span><br><span class="line">        point a, b, c;</span><br><span class="line">        <span class="built_in">triangle</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">triangle</span>(vector&lt;point&gt; in) &#123;</span><br><span class="line">            a = in[<span class="number">0</span>], b = in[<span class="number">1</span>], c = in[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Circumcenter</span><span class="params">()</span> </span>&#123;        <span class="comment">//三角形外接圆圆心</span></span><br><span class="line">            <span class="type">double</span> x1 = a.x, y1 = a.y;</span><br><span class="line">            <span class="type">double</span> x2 = b.x, y2 = b.y;</span><br><span class="line">            <span class="type">double</span> x3 = c.x, y3 = c.y;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> a1 = <span class="number">2</span> * (x2 - x1);</span><br><span class="line">            <span class="type">double</span> b1 = <span class="number">2</span> * (y2 - y1);</span><br><span class="line">            <span class="type">double</span> c1 = x2 * x2 + y2 * y2 - x1 * x1 - y1 * y1;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> a2 = <span class="number">2</span> * (x3 - x2);</span><br><span class="line">            <span class="type">double</span> b2 = <span class="number">2</span> * (y3 - y2);</span><br><span class="line">            <span class="type">double</span> c2 = x3 * x3 + y3 * y3 - x2 * x2 - y2 * y2;</span><br><span class="line">             </span><br><span class="line">            <span class="type">double</span> x = (c1 * b2 - c2 * b1) / (a1 * b2 - a2 * b1);</span><br><span class="line">            <span class="type">double</span> y = (a1 * c2 - a2 * c1) / (a1 * b2 - a2 * b1);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Incenter</span><span class="params">()</span> </span>&#123;            <span class="comment">//三角形内切圆圆心</span></span><br><span class="line">            <span class="type">double</span> A = b.<span class="built_in">dis</span>(c);</span><br><span class="line">            <span class="type">double</span> B = a.<span class="built_in">dis</span>(c);</span><br><span class="line">            <span class="type">double</span> C = a.<span class="built_in">dis</span>(b);</span><br><span class="line">            <span class="type">double</span> S = A + B + C; </span><br><span class="line">            <span class="type">double</span> x = (A * a.x + B * b.x + C * c.x) / S;</span><br><span class="line">            <span class="type">double</span> y = (A * a.y + B * b.y + C * c.y) / S;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Orthocenter</span><span class="params">()</span> </span>&#123;        <span class="comment">//三角形垂线交点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>((a.x + b.x + c.x) / <span class="number">3.0</span>, (a.y + b.y + c.y) / <span class="number">3.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">Centroid</span><span class="params">()</span> </span>&#123;            <span class="comment">//三角形中线交点</span></span><br><span class="line">            <span class="type">double</span> a1, b1, a2, b2, c1, c2;</span><br><span class="line">            a1 = c.x - b.x, b1 = c.y - b.y, c1 = <span class="number">0</span>;</span><br><span class="line">            a2 = c.x - a.x, b2 = c.y - a.y, c2 = (b.x - a.x) * a2 + (b.y - a.y) * b2;</span><br><span class="line">            <span class="type">double</span> d = a1 * b2 - a2 * b1;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">        point p;</span><br><span class="line">        <span class="type">double</span> r;</span><br><span class="line">        <span class="built_in">circle</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, <span class="type">double</span> b) &#123;</span><br><span class="line">            p = a, r = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> a) &#123;</span><br><span class="line">            p = <span class="built_in">point</span>(x, y);</span><br><span class="line">            r = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, point b, point c) &#123;                <span class="comment">//三角形外接圆 </span></span><br><span class="line">            line u = <span class="built_in">line</span>((a + b) / <span class="number">2</span>, ((a + b) / <span class="number">2</span>) + ((b - a).<span class="built_in">rotleft</span>()));</span><br><span class="line">            line v = <span class="built_in">line</span>((b + c) / <span class="number">2</span>, ((b + c) / <span class="number">2</span>) + ((c - b).<span class="built_in">rotleft</span>()));</span><br><span class="line">            p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">            r = <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(p, a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">circle</span>(point a, point b, point c, <span class="type">bool</span> inside) &#123;            <span class="comment">//三角形内切圆,inside没有用,只是用来区分两个构造函数  </span></span><br><span class="line">            <span class="type">double</span> m = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">            <span class="type">double</span> n = <span class="built_in">atan2</span>((c - a).y, (c - a).x);</span><br><span class="line">            <span class="keyword">if</span>(inside) &#123;r = <span class="number">0</span>;&#125;</span><br><span class="line">            line u, v;</span><br><span class="line">            u.a = a;</span><br><span class="line">            u.b = u.a + <span class="built_in">point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">            v.a = b;</span><br><span class="line">            m = <span class="built_in">atan2</span>((a - b).y, (a - b).x);</span><br><span class="line">            n = <span class="built_in">atan2</span>((c - b).y, (c - b).x);</span><br><span class="line">            v.b = v.a + <span class="built_in">point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">            p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">            r = <span class="built_in">line</span>(a, b).<span class="built_in">pointtoSeg</span>(p);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MRCLP</span> &#123;                               <span class="comment">//最小矩形覆盖信息 </span></span><br><span class="line">        line lne;</span><br><span class="line">        point upp;</span><br><span class="line">        point lep;</span><br><span class="line">        point rip;</span><br><span class="line">        <span class="built_in">MRCLP</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">MRCLP</span>(line a, point u, point l, point r) &#123;</span><br><span class="line">            lne = a;</span><br><span class="line">            upp = u;</span><br><span class="line">            lep = l;</span><br><span class="line">            rip = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">findcp</span><span class="params">(point b, point inline1, point inline2, point sf)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b - inline1 * (point::<span class="built_in">cross</span>(inline2, sf) / point::<span class="built_in">cross</span>(inline1, inline2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">point <span class="title">equer</span><span class="params">(point a)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">point</span>(a.y, -a.x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">getcrosspoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="function">vector&lt;point&gt; <span class="title">ans</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">            point le = lne.b - lne.a;</span><br><span class="line">            point anot = <span class="built_in">equer</span>(le);</span><br><span class="line">            ans[<span class="number">0</span>] = MRCLP::<span class="built_in">findcp</span>(lne.b, le, anot, rip - lne.b);</span><br><span class="line">            ans[<span class="number">1</span>] = MRCLP::<span class="built_in">findcp</span>(rip, anot, le, upp - rip);</span><br><span class="line">            ans[<span class="number">2</span>] = MRCLP::<span class="built_in">findcp</span>(upp, le, anot, lep - upp);</span><br><span class="line">            ans[<span class="number">3</span>] = MRCLP::<span class="built_in">findcp</span>(lep, anot, le, lne.b - lep);</span><br><span class="line">            <span class="type">int</span> ori = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(ans[i].x) == <span class="number">0</span>) ans[i].x = <span class="number">0.000</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(ans[i].y) == <span class="number">0</span>) ans[i].y = <span class="number">0.000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i].y &lt; ans[ori].y||(ans[i].y == ans[ori].y&amp;&amp;ans[i].x &lt; ans[ori].x)) &#123;</span><br><span class="line">                    ori=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(ans[<span class="number">0</span>], ans[ori]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(point::<span class="built_in">cross</span>(ans[i] - ans[<span class="number">0</span>], ans[j] - ans[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">swap</span>(ans[i],ans[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.5lf %.5lf\n&quot;</span>, ans[i].x, ans[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">polygon</span> &#123;                             <span class="comment">//多边形 </span></span><br><span class="line">        vector&lt;point&gt; in;                     <span class="comment">//输入的点集，求凸包操作后成为凸包上的点集(逆时针方向) </span></span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        MRCLP tmp;</span><br><span class="line">        <span class="built_in">polygon</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">polygon</span>(vector&lt;point&gt; a) &#123;</span><br><span class="line">            in = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isPolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> in.<span class="built_in">size</span>() &gt;= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;               <span class="comment">//快排 </span></span><br><span class="line">            <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(in[l], in[(l + r) / <span class="number">2</span>]);</span><br><span class="line">                <span class="type">int</span> i = l, j = r;</span><br><span class="line">                point x = in[l];</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; j&amp;&amp;(point::<span class="built_in">cross</span>(in[j] - in[<span class="number">0</span>], x - in[j]) &lt; <span class="number">0</span>||</span><br><span class="line">                        (point::<span class="built_in">cross</span>(in[j] - in[<span class="number">0</span>], x - in[j]) == <span class="number">0</span>&amp;&amp;point::<span class="built_in">dis2</span>(in[j], in[<span class="number">0</span>]) &gt; point::<span class="built_in">dis2</span>(x, in[<span class="number">0</span>])))) &#123;j --;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; j) &#123;in[i ++] = in[j];&#125;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; j&amp;&amp;(point::<span class="built_in">cross</span>(in[i] - in[<span class="number">0</span>], x - in[i]) &gt; <span class="number">0</span>||</span><br><span class="line">                        (point::<span class="built_in">cross</span>(in[i] - in[<span class="number">0</span>], x - in[i]) == <span class="number">0</span>&amp;&amp;point::<span class="built_in">dis2</span>(in[i], in[<span class="number">0</span>]) &lt; point::<span class="built_in">dis2</span>(x, in[<span class="number">0</span>])))) &#123;i ++;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; j) &#123;in[j --] = in[i];&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                in[i] = x;</span><br><span class="line">                <span class="built_in">quicksort</span>(l, i - <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">quicksort</span>(i + <span class="number">1</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">convexHell</span><span class="params">()</span> </span>&#123;                          <span class="comment">//查找凸包上的点 </span></span><br><span class="line">            <span class="type">int</span> ori = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(in[i].y &lt; in[ori].y||(in[i].y == in[ori].y&amp;&amp;in[i].x &lt; in[ori].x)) &#123;</span><br><span class="line">                    ori = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(in[<span class="number">0</span>], in[ori]);</span><br><span class="line">            <span class="built_in">quicksort</span>(<span class="number">1</span>, in.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">            <span class="function">vector&lt;point&gt; <span class="title">tmp</span><span class="params">(in.size() + <span class="number">10</span>)</span></span>;</span><br><span class="line">            <span class="type">int</span> nw = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(nw &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(point::<span class="built_in">cross</span>(tmp[nw] - tmp[nw - <span class="number">1</span>], in[i] - tmp[nw]) &gt; <span class="number">0</span>) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(point::<span class="built_in">cross</span>(tmp[nw] - tmp[nw - <span class="number">1</span>], in[i] - tmp[nw]) == <span class="number">0</span>) &#123;</span><br><span class="line">                        nw --;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;nw--;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp[++ nw] = in[i];</span><br><span class="line">            &#125;</span><br><span class="line">            in.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nw; i ++) &#123;</span><br><span class="line">                in.<span class="built_in">push_back</span>(tmp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">diameter</span><span class="params">()</span> </span>&#123;                      <span class="comment">//旋转卡壳(返回直径的平方) </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> nw = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[nw % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;</span><br><span class="line">                    point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(nw + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;nw ++;&#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(&#123;ans, point::<span class="built_in">dis2</span>(in[nw % in.<span class="built_in">size</span>()], in[i % in.<span class="built_in">size</span>()]), point::<span class="built_in">dis2</span>(in[nw % in.<span class="built_in">size</span>()], in[i - <span class="number">1</span>])&#125;);</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">MRC</span><span class="params">()</span> </span>&#123;                           <span class="comment">//最小矩形覆盖  </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">1e18</span>;</span><br><span class="line">            <span class="type">int</span> upp = <span class="number">1</span>, lep = in.<span class="built_in">size</span>() - <span class="number">1</span>, rip = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(lep &gt;= <span class="number">1</span>&amp;&amp;point::<span class="built_in">dot</span>(in[<span class="number">0</span>] - in[<span class="number">1</span>], in[lep] - in[<span class="number">1</span>]) &lt;= point::<span class="built_in">dot</span>(in[<span class="number">0</span>] - in[<span class="number">1</span>], in[lep - <span class="number">1</span>] - in[<span class="number">1</span>])) &#123;lep --;&#125;         <span class="comment">//左侧顶点先反向遍历，不然会WA </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[upp % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;=</span><br><span class="line">                    point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(upp + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;upp ++;&#125;</span><br><span class="line">                <span class="keyword">while</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[rip % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>]) &lt;= point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[(rip + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>])) &#123;rip++;&#125;</span><br><span class="line">                <span class="keyword">while</span>( point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]) &lt;=</span><br><span class="line">                    point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[(lep + <span class="number">1</span>) % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()])) &#123;lep ++;&#125;</span><br><span class="line">                <span class="type">double</span> area = <span class="built_in">fabs</span>(point::<span class="built_in">cross</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[upp % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> lefleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> rigleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[rip % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>]));</span><br><span class="line">                <span class="type">double</span> dezleg = <span class="built_in">fabs</span>(point::<span class="built_in">dot</span>(in[i % in.<span class="built_in">size</span>()] - in[i - <span class="number">1</span>], in[i - <span class="number">1</span>] - in[i % in.<span class="built_in">size</span>()]));</span><br><span class="line">                <span class="type">double</span> S = area * (lefleg + rigleg - dezleg) / dezleg;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(S - ans) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    tmp = <span class="built_in">MRCLP</span>(<span class="built_in">line</span>(in[i % in.<span class="built_in">size</span>()], in[i - <span class="number">1</span>]), in[upp % in.<span class="built_in">size</span>()], in[lep % in.<span class="built_in">size</span>()], in[rip % in.<span class="built_in">size</span>()]);</span><br><span class="line">                    ans = S;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">cularea</span><span class="params">()</span> </span>&#123;                       <span class="comment">//计算面积 </span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isPolygon</span>()) <span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                ans += point::<span class="built_in">cross</span>(in[i], in[(i + <span class="number">1</span>) % in.<span class="built_in">size</span>()]);</span><br><span class="line">            &#125; <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">culcel</span><span class="params">()</span> </span>&#123;                        <span class="comment">//计算周长 </span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isPolygon</span>()) <span class="keyword">return</span> <span class="number">-1.0</span>;          <span class="comment">//洛谷模板题上删去这句，答案有非多边形情况 </span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                ans += <span class="built_in">sqrt</span>(point::<span class="built_in">dis2</span>(in[i], in[(i + <span class="number">1</span>) % in.<span class="built_in">size</span>()]));</span><br><span class="line">            &#125; <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HPIL</span> : <span class="keyword">public</span> line &#123;            <span class="comment">//半平面交直线特性 </span></span><br><span class="line">        <span class="type">double</span> angle;</span><br><span class="line">        <span class="built_in">HPIL</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">HPIL</span>(point q, point w) &#123;</span><br><span class="line">            a = q;</span><br><span class="line">            b = w;</span><br><span class="line">            angle = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">HPIL</span>(line z) &#123;</span><br><span class="line">            a = z.a;</span><br><span class="line">            b = z.b;</span><br><span class="line">            angle = <span class="built_in">atan2</span>((b - a).y, (b - a).x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(HPIL t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sgn</span>(angle - t.angle) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">sgn</span>(point::<span class="built_in">cross</span>(t.a - a, t.b - a)) == <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">return</span> <span class="built_in">sgn</span>(angle - t.angle) == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HPI</span> &#123;                             <span class="comment">//半平面交 向量方向右侧平面 </span></span><br><span class="line">        vector&lt;HPIL&gt; in;</span><br><span class="line">        HPIL e[maxn];</span><br><span class="line">        HPIL dq[maxn];</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>, top, back;</span><br><span class="line">        <span class="built_in">HPI</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">HPI</span>(vector&lt;HPIL&gt; a) &#123;</span><br><span class="line">            in=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">unique</span><span class="params">()</span> </span>&#123;                      <span class="comment">//去重 </span></span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)in.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(in[i].angle - in[i - <span class="number">1</span>].angle) != <span class="number">0</span>) in[++ cnt] = in[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; i ++) e[i + <span class="number">1</span>] = in[i];</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">cp</span><span class="params">(HPIL a, HPIL b, HPIL c)</span> </span>&#123;</span><br><span class="line">            point o = b.<span class="built_in">crosspoint</span>(c);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sgn</span>(point::<span class="built_in">cross</span>(a.a - o, a.b - o)) == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">toans</span><span class="params">()</span> </span>&#123;                       <span class="comment">//求解 </span></span><br><span class="line">            <span class="built_in">sort</span>(&amp;in[<span class="number">0</span>], &amp;in[in.<span class="built_in">size</span>()]);</span><br><span class="line">            <span class="built_in">unique</span>();</span><br><span class="line">            top = <span class="number">2</span>, back = <span class="number">1</span>;</span><br><span class="line">            dq[<span class="number">1</span>] = e[<span class="number">1</span>];</span><br><span class="line">            dq[<span class="number">2</span>] = e[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= cnt; i ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(e[i], dq[top], dq[top - <span class="number">1</span>])) top --;</span><br><span class="line">                <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(e[i], dq[back], dq[back + <span class="number">1</span>])) back ++;</span><br><span class="line">                dq[++ top] = e[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(dq[back], dq[top], dq[top - <span class="number">1</span>])) top --</span><br><span class="line">            <span class="keyword">while</span>(back &lt; top&amp;&amp;<span class="built_in">cp</span>(dq[top], dq[back], dq[back + <span class="number">1</span>])) back ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;point&gt; <span class="title">getpolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">toans</span>();</span><br><span class="line">            vector&lt;point&gt; ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = back; i &lt; top; i ++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(dq[i].<span class="built_in">crosspoint</span>(dq[i + <span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(top - back &gt; <span class="number">1</span>) ans.<span class="built_in">push_back</span>(dq[top].<span class="built_in">crosspoint</span>(dq[back]));</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CG;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">代码模板</summary>
    
    
    
    <category term="vue" scheme="http://chfychin.cn/categories/vue/"/>
    
    
    <category term="C++模板" scheme="http://chfychin.cn/tags/C-%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>我的小秘密</title>
    <link href="http://chfychin.cn/posts/83cc9e8a.html"/>
    <id>http://chfychin.cn/posts/83cc9e8a.html</id>
    <published>2024-03-19T07:10:17.000Z</published>
    <updated>2024-03-19T14:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码不对,你看不了我的小秘密wo! 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6002721bfa40a67ceb565424c24ce62ac0c10081c29899abf83a75576c34a38">